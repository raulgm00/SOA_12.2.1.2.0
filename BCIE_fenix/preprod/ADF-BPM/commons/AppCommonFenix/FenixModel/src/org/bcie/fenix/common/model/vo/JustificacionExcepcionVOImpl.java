package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.JustificacionExcepcionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 15 15:18:44 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JustificacionExcepcionVOImpl extends ViewObjectImpl implements JustificacionExcepcionVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public JustificacionExcepcionVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public void getRegistro(Long idSolicitud){
            
            Row row = null;
            
            setpIdSolicitud(idSolicitud);
            
            ViewCriteria vc = getViewCriteria("JustificacionExcepcionVOCriteria");
            applyViewCriteria(vc);
            executeQuery();
            
            if(getEstimatedRowCount()>0){
                
                setCurrentRow(first());
                row = getCurrentRow();
                System.out.println(row.getAttribute("Id"));
                
            }
            
        }
        
        
    public Long crearJustificacionExcepcion(Integer idTcaTareaBpm,String observacion,String loginUsuario,
                                                String nombreUsuario, String instanciaProceso, Long idSolicitud,
                                            Integer idRol) {
            
            logger.warning("Into crearJustificacionExcepcion");
            logger.log(ADFLogger.WARNING, "Into crearJustificacionExcepcion.");
            logger.log(ADFLogger.WARNING, "value idTcaTareaBpm : "+idTcaTareaBpm);
            logger.log(ADFLogger.WARNING, "value loginUsuario : "+loginUsuario);
            logger.log(ADFLogger.WARNING, "value nombreUsuario : "+nombreUsuario);
            logger.log(ADFLogger.WARNING, "value justificacion : "+observacion);
            logger.log(ADFLogger.WARNING, "value instanciaProceso : "+instanciaProceso);
            logger.log(ADFLogger.WARNING, "value idSolicitud : "+idSolicitud);
            logger.log(ADFLogger.WARNING, "value idRol : "+idRol);
            
            Row justificacionExcepcionRow = null;
            oracle.jbo.domain.Number idJustificacionExcepcion = null;
            SequenceImpl sequenceJustificacionExcepcion = null;
            NameValuePairs nvpJustificacionExcepcion = null;
            Integer ban = 1;
            try{
            //Obtener la secuencia de la tabla "OBSERVACION_PREPAGO"
            sequenceJustificacionExcepcion = new SequenceImpl("JUSTIFICACION_EXCEPCION_SEQ", getDBTransaction());
            idJustificacionExcepcion = sequenceJustificacionExcepcion.getSequenceNumber();
            nvpJustificacionExcepcion = new NameValuePairs();
            nvpJustificacionExcepcion.setAttribute("Id",idJustificacionExcepcion.longValue());
            nvpJustificacionExcepcion.setAttribute("IdTcaTareaBpm",idTcaTareaBpm);
            nvpJustificacionExcepcion.setAttribute("Observacion",observacion);
            nvpJustificacionExcepcion.setAttribute("LoginUsuario",loginUsuario);
            nvpJustificacionExcepcion.setAttribute("NombreUsuario",nombreUsuario);
            nvpJustificacionExcepcion.setAttribute("BanEstatus", 1);//default value 1BANESTATUS_TRUE
            nvpJustificacionExcepcion.setAttribute("FechaRegistro",new java.sql.Timestamp(System.currentTimeMillis()));
            nvpJustificacionExcepcion.setAttribute("InstanciaProceso",instanciaProceso);
            nvpJustificacionExcepcion.setAttribute("IdSolicitud",idSolicitud);
            nvpJustificacionExcepcion.setAttribute("IdTcaRolBpm",idRol);
            
            justificacionExcepcionRow = this.createAndInitRow(nvpJustificacionExcepcion);
              
            }catch(Exception e){
                logger.log(ADFLogger.ERROR, "Exception in crearJustificacionExcepcion : "+e.getMessage());
                //getDBTransaction().rollback();
                return null;
            }    
            
            try{
                getDBTransaction().commit();
            }catch(Exception e){
                logger.log(ADFLogger.ERROR, "Ha ocurrido un error al realizar el commit: "+e.getMessage());              
                logger.log(ADFLogger.WARNING, "Reintentando commit..."); 
                try{
                    getDBTransaction().commit();
                }catch(Exception ex){
                    logger.log(ADFLogger.ERROR, "Error al realizar el 2 commit ->", ex);
                    return null;
                }
            } 
            
            //ejecutar query
            this.executeQuery();
            
            return idJustificacionExcepcion.longValue();

        }

    /**
     * Returns the variable value for pIdSolicitud.
     * @return variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("pIdSolicitud", value);
    }
}

