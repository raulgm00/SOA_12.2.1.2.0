package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.operacionservice.Operacion12BndQSService;
import com.bcie.xmlns.operacionservice.Operacion12Port;

import java.math.BigDecimal;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.Date;

import java.util.GregorianCalendar;
import java.util.List;

import java.util.Map;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewObject;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.atributobo.NivelType;
import org.bcie.clientebo.Cliente;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DetalleDesembolsosOperacionVO;
import org.bcie.operacionbo.MontoOperacion;
import org.bcie.operacionbo.Operacion;
import org.bcie.operacionmo.ConsultarOperacionByIdOperacionRequestType;
import org.bcie.operacionmo.ConsultarOperacionResponseType;
import org.bcie.resultbo.SuccessType;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 22 16:57:30 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DetalleDesembolsosOperacionVOImpl extends ViewObjectImpl implements DetalleDesembolsosOperacionVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;

    public DetalleDesembolsosOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Se crea metodo para consultar Servicio de Operacion
     * @param idOperacion
     * @since 22/08/2016
     * @by José Hernández Cruz
     */
    @Deprecated
    public void consultarOperacionByIdOperacion(Long idOperacion) {

        Boolean existeError = Boolean.FALSE;
        String msgError = "";

        if (null == getCurrentRow()) {
            logger.log(ADFLogger.WARNING, "INTO consultarOperacionByIdOperacion en DetalleDesembolsosOperacionVO");

            FenixAMImpl fenixAM = null;
            fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.OPERACION);
            com.bcie.xmlns.operacionservice.Operacion12BndQSService operacion12BndQSService = null;
            Operacion12Port operacion12Port = null;

            try {
                operacion12BndQSService = IWsdlLocation.Service.getInstance(Operacion12BndQSService.class, wsdl);
                operacion12Port = operacion12BndQSService.getOperacion12BndQSPort();
            } catch (Exception e) {
                logger.warning("Ha ocurrido un error al consultar la definicion del servicio consultarOperacionById");
                logger.warning("*Error ->", e);
                throw new JboException("Ha ocurrido un error al consultar la definicion del servicio consultarOperacionById");
            }


            try {
                ConsultarOperacionByIdOperacionRequestType request = new ConsultarOperacionByIdOperacionRequestType();
                request.setIdOperacion(idOperacion);
                request.setNivelDetalle(NivelType.LINEA);
                request.setInfoDetalleCliente(Boolean.TRUE);


                Date horaInicio =
                    ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_OPERACION_DESEMBOLSOS);
                ConsultarOperacionResponseType response = operacion12Port.consultarOperacionByIdOperacion(request);

                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_OPERACION_DESEMBOLSOS,
                                    horaInicio);

                try {
                    if (response.getResultado() != null && response.getResultado().getResult().value() == "ERROR") {
                        existeError = Boolean.TRUE;
                    }

                    if (null != response.getResultado().getMessage() &&
                        response.getResultado().getMessage().trim().length() > 0) {
                        msgError = response.getResultado().getMessage();
                    }
                } catch (Exception e) {
                    logger.warning("Error al verificar si el servicio consultarOperacionByIdOperacion devuelve un error para mostrarlo en pantalla");
                }

                if (!existeError) {
                    logger.warning("El servicio retorna OK... se comienzan las validaciones para cargar los campos en DetalleDesembolsosOperacionVO");
                    if (response.getOperacion() != null) {
                        this.mapConsultarOperacionByIdOperacion(response.getOperacion().get(0));
                    } else {
                        logger.log(ADFLogger.WARNING, "La operacion del response es nulo.");
                    }
                } else {
                    logger.warning("El servicio consultarOperacionByIdOperacion devuelve ERROR... no se cargan los valores para DetalleDesembolsosOperacionVO");
                }
            } catch (Exception e) {
                logger.log(ADFLogger.WARNING,
                           "ConsultarOperacionResponseType Operacion is  null, no mapping information.");
                logger.log(ADFLogger.ERROR, "Error en consultarOperacionByIdOperacion.", e);
            } finally {
                if (existeError) {
                    logger.warning("Servicio consultarOperacionByIdOperacion devuelve ERROR >> " + msgError);
                    JboException exception =
                        new JboException("Servicio consultarOperacionByIdOperacion devuelve ERROR >> " + msgError);
                    throw exception;
                }
            }
        } else {
            logger.warning("Existe registro de DetalleDesembolsosOperacionVO precargado. No se ejecuta servicio ConsultarOperacionById.");
        }
    }

    /**
     * Metodo para consultar la operacion por id a traves del servicio de operacion
     * @param idOperacion
     * @since 18/08/2017
     * @by Jonathan Ruiz
     */
    public boolean consultarOperacionPorIdOperacion(Long idOperacion) {
        boolean consultaExito = Boolean.FALSE;
        ConsultarOperacionResponseType response = null;

        // Limpiamos la VO antes de consultar el servicio
        executeQuery();

        // Consultamos la operacion por servicio
        try {
            response = consultarServicioOperacionPorId(idOperacion);
        } catch (Exception e) {
            logger.warning("*Error al ejecutar el metodo consultarServicioOperacionPorId");
            return consultaExito;
        }

        // Evaluamos el response
        if (null != response) {
            try {
                if (null != response.getResultado().getResult()) {

                    switch (response.getResultado().getResult()) {
                    case OK:
                        if (response.getOperacion() != null) {

                            // Llenamos datos de la VO con la respuesta del servicio
                            mapConsultarOperacionByIdOperacion(response.getOperacion().get(0));

                            consultaExito = Boolean.TRUE;
                        } else {
                            logger.warning("La operacion del response es nulo.");
                        }
                        break;
                    case ERROR:
                        // Validacion de errores no controlados
                        String mensajeError = response.getResultado().getMessage();
                        logger.warning("Error: " + mensajeError);
                        break;
                    default:
                        logger.warning("El objeto Result no tiene un tipo valido.");
                        break;
                    }

                } else {
                    logger.warning("El objeto Result del response es nulo.");

                    // Validacion de errores controlados
                    if (response.getResultado().getError().getErrorCode().equalsIgnoreCase("ERROR")) {
                        String mensajeError = response.getResultado().getError().getErrorDescription();
                        logger.warning("Error: " + mensajeError);
                    }
                }
            } catch (Exception e) {
                logger.warning("Ocurrio un error al evaluar el response.", e);
            }
        }

        return consultaExito;
    }

    private ConsultarOperacionResponseType consultarServicioOperacionPorId(Long idOperacion) {
        logger.log(ADFLogger.WARNING, "INTO consultarOperacionByIdOperacion en DetalleDesembolsosOperacionVO");

        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.OPERACION);
        ConsultarOperacionResponseType response = null;
        com.bcie.xmlns.operacionservice.Operacion12BndQSService operacion12BndQSService = null;
        Operacion12Port operacion12Port = null;

        try {
            operacion12BndQSService = IWsdlLocation.Service.getInstance(Operacion12BndQSService.class, wsdl);
            operacion12Port = operacion12BndQSService.getOperacion12BndQSPort();
        } catch (Exception e) {
            logger.warning("Ha ocurrido un error al consultar la definicion del servicio consultarOperacionById");
            logger.warning("*Error ->", e);
            throw new JboException("Ha ocurrido un error al consultar la definicion del servicio consultarOperacionById");
        }

        try {

            ConsultarOperacionByIdOperacionRequestType request = new ConsultarOperacionByIdOperacionRequestType();
            request.setIdOperacion(idOperacion);
            request.setNivelDetalle(NivelType.LINEA);
            request.setInfoDetalleCliente(Boolean.TRUE);

            Date horaInicio =
                ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_OPERACION_DESEMBOLSOS);
            response = operacion12Port.consultarOperacionByIdOperacion(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_OPERACION_DESEMBOLSOS, horaInicio);
        } catch (Exception e) {
            logger.warning("Error al consultar el servicio consultar operacion.", e);
        }

        return response;
    }

    /**
    ???? * Se crea metodo para mapear objeto de Operacion
    ???? * @param Objeto operacion
    ???? * @since 22/08/2016
    ???? * @by José Hernández Cruz
    ???? */
    public void mapConsultarOperacionByIdOperacion(Operacion operacion) {
        try {
            logger.log(ADFLogger.WARNING, "INTO mapConsultarOperacionByIdOperacion");
            Row rowOperacion = this.createRow();
            if (operacion != null) {
                if (operacion.getIdOperacion() > 0) {
                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.IDOPERACION,
                                              operacion.getIdOperacion());

                } else {
                    logger.severe("Id de Operacion no recibido");
                }
                if (operacion.getNombre() != null) {
                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.OPERACION, operacion.getNombre());
                } else {
                    logger.severe("Nombre de la Operacion no recibido");
                }
                if (operacion.getProducto() != null) {
                    if (operacion.getProducto().getDescripcion() != null) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.PRODUCTO,
                                                  operacion.getProducto().getDescripcion());
                    } else {
                        logger.severe("Nombre del producto no recibido");
                    }

                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.IDPRODUCTO,
                                              operacion.getProducto().getIdProducto());
                } else {
                    logger.severe("El Producto es nulo.");
                }
                if (operacion.getDeclaracionJurada() != null) {
                    if (operacion.getDeclaracionJurada().getEstadoDeclaracion().getNombreEstadoNoObjecion() != null) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.NOOBJECION,
                                                  operacion.getDeclaracionJurada().getEstadoDeclaracion().getNombreEstadoNoObjecion());
                    } else {
                        logger.severe("Nombre de estado de no objeción no recibido");
                    }

                    if (operacion.getDeclaracionJurada().getFechaVencimiento() != null) {
                        SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
                        Date date = null;
                        String strFechaVencimiento = operacion.getDeclaracionJurada().getFechaVencimiento().toString();
                        strFechaVencimiento = strFechaVencimiento.substring(0, 10);
                        logger.warning("FechaVencimientoNoObjecion: " + strFechaVencimiento);

                        date = formatter.parse(strFechaVencimiento);
                        java.sql.Date sqlDate = new java.sql.Date(date.getTime());
                        oracle.jbo.domain.Date fechaVigenciaNoObjecion = new oracle.jbo.domain.Date(sqlDate);
                        logger.warning("Seteando Fecha de vigencia de la no objecion: " + fechaVigenciaNoObjecion);

                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.VIGENCIANOOBJECIONLAFT,
                                                  fechaVigenciaNoObjecion);
                    } else {
                        logger.severe("Fecha de vencimiento no recibido");
                    }
                } else {
                    logger.severe("La declaracion jurada es nula.");
                }

                if (null != operacion.getSectorMercado()) {
                    if (null != operacion.getSectorMercado().getId()) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.IDSECTORMERCADO,
                                                  operacion.getSectorMercado().getId());
                    } else {
                        logger.warning("El id de sector de mercado es NULL.");
                    }

                    if (null != operacion.getSectorMercado().getDescripcion() ||
                        operacion.getSectorMercado().getDescripcion().equals("")) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.DESCSECTORMERCADO,
                                                  operacion.getSectorMercado().getDescripcion());
                    } else {
                        logger.warning("La descricpion del sector de mercado es NULL o vacia.");
                    }
                } else {
                    logger.warning("El objeto getSectorMercado() es NULL.");
                }

                detalleClienteDesembolso(operacion, rowOperacion); //Metodo para obtener datos del CLiente

                montoOperacion(operacion,
                               rowOperacion); //Metodos para obtener el monto FORMALIZADO Y monto a DESEMBOLSAR

                // S&P: 29/07/2019 Se anexa codigo para data multisectorial
                //Recuperar info EsMultiosectorial
                if (operacion.isEsMultisectorial() != null) {
                    logger.warning("=== Valor de EsMultisectorial:"+operacion.isEsMultisectorial());
                   
                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.ESMULTISECTORIAL,
                                              operacion.isEsMultisectorial());
                    obtenerClasificacionEstrategicaMultisectorial(operacion);
                } else {
                    logger.warning("=== Valor de EsMultisectorial en nulo");
                }
                //==============  Fin ajustes para data multisectorial ===== //


                this.insertRow(rowOperacion);
                this.setCurrentRow(rowOperacion);
            } else {
                logger.severe("La operacion es nula.");
            }
        } catch (Exception e) {
            logger.warning("Error en mapConsultarOperacionByIdOperacion.", e);
        }
    }

    /**
    ???? * Se crea metodo para consultar datos de cliente asociado a la operacion
    ???? * @param Operacion, Row
    ???? * @since 29/08/2016
    ???? * @by José Hernández Cruz
    ???? */
    public void detalleClienteDesembolso(Operacion operacion, Row rowOperacion) {
        logger.log(ADFLogger.WARNING, "INTO detalleClienteDesembolso");
        try {
            if (operacion.getCliente() != null) {
                if (operacion.getCliente().getIdCliente() > 0) {
                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.IDCLIENTE,
                                              operacion.getCliente().getIdCliente());
                } else {
                    logger.severe("Id de cliente no recibido");
                }
                if (operacion.getCliente().getRazonSocial() != null) {
                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.CLIENTE,
                                              operacion.getCliente().getRazonSocial());
                } else {
                    logger.severe("Razon social no recibido");
                }
                if (operacion.getCliente().getIdFacturador() != null) {
                    rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.FLEXCUBE,
                                              operacion.getCliente().getIdFacturador());
                } else {
                    logger.severe("Id de Facturador no recibido");
                }

                if (operacion.getCliente().isEnMora() != null) {
                    if (operacion.getCliente().isEnMora()) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.MORA, "Si");
                    } else {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.MORA, "No");
                    }
                    if (operacion.getCliente().getMora().getDias() > 0) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.DIASMORA,
                                                  operacion.getCliente().getMora().getDias());
                    } else {
                        logger.severe("Dias de mora no recibido");
                    }
                    if (operacion.getCliente().getMora().getMonto() != null) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.MONTOMORA,
                                                  operacion.getCliente().getMora().getMonto());
                    } else {
                        logger.severe("Monto de mora no recibido");
                    }
                } else {
                    logger.severe("El objeto Mora no fue recibido.");
                }
                if (operacion.getCliente().getPais() != null) {
                    if (operacion.getCliente().getPais().getDescripcion() != null) {
                        logger.log(ADFLogger.WARNING, "INTO PAIS");
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.PAIS,
                                                  operacion.getCliente().getPais().getDescripcion());
                    } else {
                        logger.severe("Pais no recibido");
                    }
                } else {
                    logger.severe("Objeto Pais no recibido");
                }

                //Se cambia mapeo de SCR por la FNXII-6744
                if (null != operacion.getScrClienteDesembolsos()) {
                    if (null != operacion.getScrClienteDesembolsos().getId()) {
                        if (operacion.getScrClienteDesembolsos().getId().compareTo(100L) == 0) {
                            logger.warning("SCR Nulo.");
                        } else {
                            rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.SCR,
                                                      operacion.getScrClienteDesembolsos().getId());
                        }
                    } else {
                        logger.warning("SCR no recibido");
                    }
                } else {
                    logger.warning("El objeto SCR es nulo.");
                }

                if (null != operacion.getCliente().getSector()) {
                    if (null != operacion.getCliente().getSector().getId()) {
                        logger.log(ADFLogger.WARNING, "INTO SECTOR");
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.SECTOR,
                                                  operacion.getCliente().getSector().getId());
                    } else {
                        logger.severe("Sector no recibido");
                    }

                    if (null != operacion.getCliente().getSector().getDescripcionCorta() ||
                        operacion.getCliente().getSector().getDescripcionCorta().equals("")) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.SECTORDESCRIPCION,
                                                  operacion.getCliente().getSector().getDescripcionCorta());
                    } else {
                        logger.warning("La descricpion corta del Sector del cliente es NULL.");
                    }
                } else {
                    logger.severe("Objeto Sector no recibido");
                }
            } else {
                logger.severe("No se obtuvo el objeto cliente");
            }
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR,
                       "Error en consultar el deatalle del desembolso cliente . " + e.getClass() + ":" +
                       e.getMessage());
        }
    }

    /**
    ???? * Se crea metodo para consultar el Monto de la Operacion
    ???? * @param Operacion, Row
    ???? * @since 29/08/2016
    ???? * @by José Hernández Cruz
    ???? */
    public void montoOperacion(Operacion operacion, Row rowOperacion) {
        logger.log(ADFLogger.WARNING, "INTO montoOperacion");
        try {
            if (operacion.getMontoOperacion() != null) {

                boolean isMontoFormalizado = false;
                boolean isMontoDesembolsar = false;

				if(operacion.getTipoMoneda() != null) {
                    if(operacion.getTipoMoneda().getCodigoExterno() != null) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.MONEDA,
                                                  operacion.getTipoMoneda().getCodigoExterno());
                        
                        logger.log(ADFLogger.WARNING, "Moneda: " + operacion.getTipoMoneda().getCodigoExterno());
                    } else {
                        logger.log(ADFLogger.WARNING, "Moneda no encontrada.");
                    }
                } else {
                    logger.log(ADFLogger.WARNING, "Objeto Moneda no encontrada.");
                }

                for (MontoOperacion montoOperacion : operacion.getMontoOperacion().getMontoOperacion()) {
                    if (montoOperacion.getIdTcaTipoMonto() == FenixModelConstants.TIPO_MONTO_FORMALIZADO &&
                        montoOperacion.getIdTcaTipoMonto() != null) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.MONTOFORMALIZADO,
                                                  montoOperacion.getMonto());
                        isMontoFormalizado = true;
                    } else {
                        //logger.severe("Id de Tipo de monto Formalizado Operacion no recibido");
                    }

                    if (montoOperacion.getIdTcaTipoMonto() == FenixModelConstants.TIPO_MONTO_DISPONIBLE_DESEMBOLSO &&
                        montoOperacion.getIdTcaTipoMonto() != null) {
                        rowOperacion.setAttribute(DetalleDesembolsosOperacionVORowImpl.MONTODESEMBOLSAR,
                                                  montoOperacion.getMonto());
                        setMontoDisponibleDesembolsar(montoOperacion.getMonto());
                        isMontoDesembolsar = true;
                    } else {
                        //logger.severe("Id de Tipo de monto Disponible desembolso Operacion no recibido");
                    }
                }

                if (!isMontoFormalizado) {
                    logger.severe("Id de Tipo de monto Formalizado Operacion no recibido");
                }

                if (!isMontoDesembolsar) {
                    logger.severe("Id de Tipo de monto Disponible desembolso Operacion no recibido");
                }
            } else {
                logger.severe("Objeto Monto Operacion es nulo");
            }
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error en consultar monto Operacion. " + e.getClass() + ":" + e.getMessage());
        }
    }

    public Boolean validarEsIFI() {
        logger.warning("Inicia metodo validarEsIFI.");
        Boolean esIFI = null;
        Long idProducto = null;
        Integer idProductoInt = null;
        Row row = getCurrentRow();
        FenixAMImpl fenixAMImpl = (FenixAMImpl) getRootApplicationModule();

        if (null != row) {
            try {
                idProducto = (Long) row.getAttribute("IdProducto");
                idProductoInt = idProducto.intValue();
            } catch (Exception e) {
                logger.warning("ERROR al recuperar el IdProducto.", e);
            }

            logger.warning("IdProducto a evaluar: " + idProductoInt);

            try {
                if (idProducto != null) {
                    esIFI = fenixAMImpl.getCatProductoVO().validarEsIfi(idProductoInt);
                } else {
                    logger.warning("*Inf, Importante!, No se podra validar si la operacion es IFI ");
                    JboException exepcion = new JboException("Error no se pudo evaluar el producto de la operacion");
                }

            } catch (Exception e) {
                logger.warning("ERROR al invocar metodo validarEsIfi en CatProductoVO.", e);
            }
        } else {
            logger.warning("*Inf, Importante!, EL currentRow de la DetalleDesembolsoOperacionVO es NULL.");
            logger.warning("*Inf, Importante!, No se podra validar si la operacion es IFI ");
            JboException exepcion = new JboException("Error no se pudo evaluar el producto de la operacion");
        }

        logger.warning("Termina metodo validarEsIFI.");
        return esIFI;
    }

    public void recargarRegistroDetalleOperacion(Map datosDetalleOperacionMap) {
        logger.warning("Inicia metodo recargarRegistroDetalleOperacion.");
        NameValuePairs nvpDetalleOperacion = new NameValuePairs();
        Row row = null;

        String operacion = null, cliente = null, producto = null, pais = null, flexcube = null, noObjecion = null, scr =
            null, mora = null, diasMora = null, moneda = null, sectorDescripcion = null, descSectorMercado = null;

        Long IdOperacion = null, IdCliente = null, Sector = null, IdProducto = null, IdSectorMercado = null;

        Double MontoMora = null, MontoFormalizado = null, MontoDesembolsar = null;

        oracle.jbo.domain.Date VigenciaNoObjecionLaft = null;

        if (null == datosDetalleOperacionMap || (datosDetalleOperacionMap.size() <= 0) ||
            datosDetalleOperacionMap.isEmpty()) {
            logger.warning("Los datos del mapa del detalle de operacion no recuperados.");
            return;
        }

        try {
            operacion = (String) datosDetalleOperacionMap.get("operacion");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'operacion' del mapa.", e);
        }

        try {
            cliente = (String) datosDetalleOperacionMap.get("cliente");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'cliente' del mapa.", e);
        }

        try {
            producto = (String) datosDetalleOperacionMap.get("producto");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'producto' del mapa.", e);
        }

        try {
            pais = (String) datosDetalleOperacionMap.get("pais");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'pais' del mapa.", e);
        }

        try {
            flexcube = (String) datosDetalleOperacionMap.get("flexcube");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'flexcube' del mapa.", e);
        }

        try {
            noObjecion = (String) datosDetalleOperacionMap.get("noObjecion");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'noObjecion' del mapa.", e);
        }

        try {
            scr = (String) datosDetalleOperacionMap.get("scr");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'scr' del mapa.", e);
        }

        try {
            mora = (String) datosDetalleOperacionMap.get("mora");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'mora' del mapa.", e);
        }

        try {
            diasMora = (String) datosDetalleOperacionMap.get("diasMora");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'diasMora' del mapa.", e);
        }

        try {
            moneda = (String) datosDetalleOperacionMap.get("moneda");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'moneda' del mapa.", e);
        }

        try {
            sectorDescripcion = (String) datosDetalleOperacionMap.get("sectorDescripcion");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'sectorDescripcion' del mapa.", e);
        }

        try {
            descSectorMercado = (String) datosDetalleOperacionMap.get("descSectorMercado");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'descSectorMercado' del mapa.", e);
        }

        try {
            IdOperacion = (Long) datosDetalleOperacionMap.get("IdOperacion");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'IdOperacion' del mapa.", e);
        }

        try {
            IdCliente = (Long) datosDetalleOperacionMap.get("IdCliente");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'IdCliente' del mapa.", e);
        }

        try {
            Sector = (Long) datosDetalleOperacionMap.get("Sector");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'Sector' del mapa.", e);
        }

        try {
            IdProducto = (Long) datosDetalleOperacionMap.get("IdProducto");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'IdProducto' del mapa.", e);
        }

        try {
            IdSectorMercado = (Long) datosDetalleOperacionMap.get("IdSectorMercado");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'IdSectorMercado' del mapa.", e);
        }

        try {
            MontoMora = (Double) datosDetalleOperacionMap.get("MontoMora");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'MontoMora' del mapa.", e);
        }

        try {
            MontoFormalizado = (Double) datosDetalleOperacionMap.get("MontoFormalizado");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'MontoFormalizado' del mapa.", e);
        }

        try {
            MontoDesembolsar = (Double) datosDetalleOperacionMap.get("MontoDesembolsar");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'MontoDesembolsar' del mapa.", e);
        }

        try {
            VigenciaNoObjecionLaft = (oracle.jbo.domain.Date) datosDetalleOperacionMap.get("VigenciaNoObjecionLaft");
        } catch (Exception e) {
            logger.warning("ERROR al recuperar el atributo 'VigenciaNoObjecionLaft' del mapa.", e);
        }

        logger.warning("Asignando valores a registro del detalle de operacion.");
        executeQuery();
        nvpDetalleOperacion.setAttribute("Operacion", operacion);
        nvpDetalleOperacion.setAttribute("Cliente", cliente);
        nvpDetalleOperacion.setAttribute("Producto", producto);
        nvpDetalleOperacion.setAttribute("Pais", pais);
        nvpDetalleOperacion.setAttribute("Flexcube", flexcube);
        nvpDetalleOperacion.setAttribute("NoObjecion", noObjecion);
        nvpDetalleOperacion.setAttribute("Scr", scr);
        nvpDetalleOperacion.setAttribute("Mora", mora);
        nvpDetalleOperacion.setAttribute("DiasMora", diasMora);
        nvpDetalleOperacion.setAttribute("Moneda", moneda);
        nvpDetalleOperacion.setAttribute("SectorDescripcion", sectorDescripcion);
        nvpDetalleOperacion.setAttribute("DescSectorMercado", descSectorMercado);
        nvpDetalleOperacion.setAttribute("IdOperacion", IdOperacion);
        nvpDetalleOperacion.setAttribute("IdCliente", IdCliente);
        nvpDetalleOperacion.setAttribute("Sector", Sector);
        nvpDetalleOperacion.setAttribute("IdProducto", IdProducto);
        nvpDetalleOperacion.setAttribute("IdSectorMercado", IdSectorMercado);
        nvpDetalleOperacion.setAttribute("MontoMora", MontoMora);
        nvpDetalleOperacion.setAttribute("MontoFormalizado", MontoFormalizado);
        nvpDetalleOperacion.setAttribute("MontoDesembolsar", MontoDesembolsar);
        nvpDetalleOperacion.setAttribute("VigenciaNoObjecionLaft", VigenciaNoObjecionLaft);

        row = createAndInitRow(nvpDetalleOperacion);
        insertRow(row);
        setCurrentRow(row);

        logger.warning("Termina metodo recargarRegistroDetalleOperacion.");
    }

    public BigDecimal obtenerMontoDisponibleOperacion(Long idOperacion) {
        logger.warning("Entra en obtenerMontoDisponibleOperacion.");
        logger.warning("Operacion recibida como parametro : " + idOperacion);
        Long idOperacionRow = null;
        Double monto = null;
        BigDecimal montoDisponible = null;
        Boolean existeMonto = Boolean.FALSE;
        try {
            logger.warning("Numero de registros encontrados : " + this.getEstimatedRowCount());
            RowSetIterator iterator = this.createRowSetIterator(null);
            iterator.reset();
            while (iterator.hasNext()) {
                DetalleDesembolsosOperacionVORowImpl rowImpl = (DetalleDesembolsosOperacionVORowImpl) iterator.next();
                idOperacionRow = rowImpl.getIdOperacion();
                logger.warning("Operacion a consultar : " + idOperacionRow);
                if (idOperacion.compareTo(idOperacionRow) == 0) {
                    monto = rowImpl.getMontoDesembolsar();
                    logger.warning("Monto disponible a desembolsar : " + monto);
                    if (monto != null) {
                        montoDisponible = BigDecimal.valueOf(monto);
                        existeMonto = Boolean.TRUE;
                    } else {
                        logger.warning("El monto a desembolsar de la operacion es nulo.");
                    }
                }
            }
            iterator.closeRowSetIterator();
        } catch (Exception e) {
            logger.warning("Error en obtenerMontoDisponibleOperacion.", e);
        }
        logger.warning("Valor del monto disponible : " + montoDisponible);
        return montoDisponible;
    }

    BigDecimal montoDisponibleDesembolsar = null;

    public void setMontoDisponibleDesembolsar(BigDecimal montoDisponibleDesembolsar) {
        this.montoDisponibleDesembolsar = montoDisponibleDesembolsar;
    }

    public BigDecimal getMontoDisponibleDesembolsar() {
        return montoDisponibleDesembolsar;
    }
    
    //S&P: 29/07/2019 Se anexa codigo para data multisectorial
    /**
     * Método que mapea los valores de CE multisectorial.
     * @author : S&P Solutions
     * @param  : Operacion
     * @return : 
     * @version: v1.0
     * @Fecha  : 29/07/2019
     */
    public void obtenerClasificacionEstrategicaMultisectorial(Operacion operacion) {
        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl) this.getRootApplicationModule();
       //Componentes de clasificacion
       logger.warning("\n====  Se ejecuta DatosDesembolsoClasificacionEstrategicaVO  ====");
        ViewObject  clasificacionVO = fenixAM.getDatosDesembolsoClasificacionEstrategicaVO1();
        clasificacionVO.setNamedWhereClauseParam("idOperacion", operacion.getIdOperacion());
        clasificacionVO.executeQuery();
        
        logger.warning("\n====  Se ejecuta ConsultarIDContratoDesembolsoVO1  ====");
         ViewObject  desembolsoVO = fenixAM.getConsultarIDContratoDesembolsoVO1();
         desembolsoVO.setNamedWhereClauseParam("idOperacion", operacion.getIdOperacion());
         desembolsoVO.executeQuery();
        logger.warning("\n====  Se ejecuta ConsultarIDContratoDesembolsoVO1 | Conteo:" +  desembolsoVO.getRowCount());
        logger.warning("====  Concluye seccion para DatosDesembolsoClasificacionEstrategicaVOImpl  =====");
    }


}

