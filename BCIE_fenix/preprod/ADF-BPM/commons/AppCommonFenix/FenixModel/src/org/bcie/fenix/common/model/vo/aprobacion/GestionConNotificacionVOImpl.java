package org.bcie.fenix.common.model.vo.aprobacion;

import com.bcie.xmlns.usuarioservice.Usuario12BndQSService;
import com.bcie.xmlns.usuarioservice.UsuarioPT;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAprobacionAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorOperacionesAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.aprobacion.common.GestionConNotificacionVO;
import org.bcie.usuariobo.ListaNombres;
import org.bcie.usuariobo.ListaUsuarios;
import org.bcie.usuariobo.Usuario;
import org.bcie.usuariomo.ConsultarAtributosUsuarioRequestType;
import org.bcie.usuariomo.ConsultarAtributosUsuarioResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 04 16:22:03 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GestionConNotificacionVOImpl extends ViewObjectImpl implements GestionConNotificacionVO {

    private ADFLogger logger = ADFLogger.createADFLogger(this.getClass());

    private List<String> listaUsuariosConNotificacion;

    /**
     * This is the default constructor (do not remove).
     */
    public GestionConNotificacionVOImpl() {
    }

    public void cargarMiembrosConNotificacion(Long idSolicitudAprobacion) {
        logger.warning("Entrando en cargarMiembrosConNotificacion.");
        logger.warning("idSolicitudAprobacion: " + idSolicitudAprobacion);

        ConsultaUsuarioReunionAprobacionVOImpl consultaUsuarioReunionVO =
            obtenerUsuarioReunionAprobacion(idSolicitudAprobacion);

        RowSetIterator rowSetIterator = consultaUsuarioReunionVO.createRowSetIterator(null);
        rowSetIterator.reset();

        listaUsuariosConNotificacion = new ArrayList<>();
        while (rowSetIterator.hasNext()) {
            Row rowUsuarioReunion = rowSetIterator.next();

            Row row = createRow();
            row.setAttribute(GestionConNotificacionVORowImpl.IDMIEMBRO,
                             rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.IDMIEMBRO));
            row.setAttribute(GestionConNotificacionVORowImpl.NOMBRE,
                             rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.NOMBREUSUARIO));
            row.setAttribute(GestionConNotificacionVORowImpl.USUARIO,
                             rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.LOGINUSUARIO));
            row.setAttribute(GestionConNotificacionVORowImpl.CONCONSULTA,
                             rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.CONNOTIFICACION));
            row.setAttribute(GestionConNotificacionVORowImpl.AGREGAR, Boolean.FALSE);
            row.setAttribute(GestionConNotificacionVORowImpl.MODIFICAR, Boolean.FALSE);
            row.setAttribute(GestionConNotificacionVORowImpl.ELIMINAR, Boolean.FALSE);

            // Este atributo se carga en el metodo mapeoDependenciaResponse()
            row.setAttribute(GestionConNotificacionVORowImpl.DEPENDENCIA, "");

            insertRow(row);

            if (null != rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.LOGINUSUARIO)) {
                listaUsuariosConNotificacion.add((String) rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.LOGINUSUARIO));
            } else {
                logger.warning("El miembro de la reucion " +
                               rowUsuarioReunion.getAttribute(ConsultaUsuarioReunionAprobacionVORowImpl.IDMIEMBRO) +
                               " no tiene un usuario en Fenix.");
            }

        }

        rowSetIterator.closeRowSetIterator();

        // Se cargan las dependencias de los usuarios
        cargarDependenciasUsuarios();
    }

    public ConsultaUsuarioReunionAprobacionVOImpl obtenerUsuarioReunionAprobacion(Long idSolicitudAprobacion) {
        FenixAprobacionAMImpl fenixAprobacionAM = (FenixAprobacionAMImpl) this.getRootApplicationModule();

        ConsultaUsuarioReunionAprobacionVOImpl consultaUsuarioReunionVO =
            fenixAprobacionAM.getConsultaUsuarioReunionAprobacionVO();

        consultaUsuarioReunionVO.setpIdSolicitudAprobacion(idSolicitudAprobacion);
        consultaUsuarioReunionVO.setpIdTcaTipoUsuario(FenixModelConstants.TIPO_MIEMBRO_NOTIFICACION);

        consultaUsuarioReunionVO.executeQuery();

        return consultaUsuarioReunionVO;
    }

    private void cargarDependenciasUsuarios() {
        logger.warning("Entrando en cargarDependenciasUsuarios:");
        if (null != listaUsuariosConNotificacion) {
            logger.warning("usuariosFenix: " + listaUsuariosConNotificacion.toString());
        }

        UsuarioPT usuarioPT = getUsuarioPT();
        ConsultarAtributosUsuarioRequestType request =
            consultarAtributosListaUsuarioRequest(listaUsuariosConNotificacion);
        ConsultarAtributosUsuarioResponseType response = new ConsultarAtributosUsuarioResponseType();

        try {
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LISTA_USUARIOS);
            response = usuarioPT.consultarAtributosUsuario(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LISTA_USUARIOS, horaInicio);
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error al obtener los usuarios por grupo", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al obtener lo atributos del usuario. Intentelo más tarde."));
            throw ex;
        }

        mapeoDependenciaResponse(response);
    }

    private void mapeoDependenciaResponse(ConsultarAtributosUsuarioResponseType response) {
        ListaUsuarios usuarios = new ListaUsuarios();

        if (response.getResultado().getResult().value().equalsIgnoreCase("OK")) {
            usuarios = response.getListaUsuarios();

            RowSetIterator rowSetIterator = createRowSetIterator(null);
            rowSetIterator.reset();

            while (rowSetIterator.hasNext()) {
                Row row = rowSetIterator.next();
                String usuarioConNotificacion = (String) row.getAttribute(GestionConNotificacionVORowImpl.USUARIO);

                for (Usuario usuario : usuarios.getUsuario()) {
                    if (null != usuario && null != usuario.getNombreUsuario() && null != usuarioConNotificacion &&
                        usuarioConNotificacion.equals(usuario.getNombreUsuario())) {
                        row.setAttribute(GestionConNotificacionVORowImpl.DEPENDENCIA, usuario.getDependencia());
                    }
                }
            }

            rowSetIterator.closeRowSetIterator();
        }
    }

    private ConsultarAtributosUsuarioRequestType consultarAtributosListaUsuarioRequest(List<String> usuarios) {
        ConsultarAtributosUsuarioRequestType request = new ConsultarAtributosUsuarioRequestType();

        ListaNombres listaNombres = new ListaNombres();
        if (null != usuarios) {
            for (String usuario : usuarios) {
                listaNombres.getNombreUsuario().add(usuario);
            }
        }

        request.setListaNombres(listaNombres);

        return request;
    }

    private UsuarioPT getUsuarioPT() {
        String wsdl = getFenixGestorOperacionesAM().getWsdl(IWsdlLocation.USUARIO);
        Usuario12BndQSService usuario12BndQSService =
            IWsdlLocation.Service.getInstance(Usuario12BndQSService.class, wsdl);
        UsuarioPT usuarioPT = usuario12BndQSService.getUsuario12BndQSPort();

        return usuarioPT;
    }

    private FenixAprobacionAMImpl getFenixGestorOperacionesAM() {
        FenixAprobacionAMImpl fenixAprobacionAM = (FenixAprobacionAMImpl) getRootApplicationModule();
        return fenixAprobacionAM;
    }
}

