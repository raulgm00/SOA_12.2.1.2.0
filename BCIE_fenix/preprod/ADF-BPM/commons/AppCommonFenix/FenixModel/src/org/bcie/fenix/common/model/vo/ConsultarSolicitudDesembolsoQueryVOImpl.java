package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.ConsultarSolicitudDesembolsoQueryVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 19 12:20:41 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarSolicitudDesembolsoQueryVOImpl extends ViewObjectImpl implements ConsultarSolicitudDesembolsoQueryVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultarSolicitudDesembolsoQueryVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    public Boolean validarOperacionEnProcesoDesembolso(Long idOperacion){
        logger.warning("Dentro validarOperacionEnProcesoDesembolso");
        Boolean resultado = Boolean.FALSE;
        ViewCriteria criteria = null;
        try {
            //asignan valores de filtro para el viewCriteria
            this.setpIdOperacion(idOperacion);
            criteria = getViewCriteria("ValidarSolicitudDesembolsoPorIdOperacionCriteria");
            applyViewCriteria(criteria);
            executeQuery();
            logger.warning("Cantidad de registros encontrados : "+this.getEstimatedRowCount());
            if (this.getEstimatedRowCount() > 0) {
                logger.warning("Se encontro row con el parametro idOperacion : "+idOperacion);
                resultado = Boolean.TRUE;
            } else {
                logger.warning("No se encontro row con el parametro idOperacion : "+idOperacion);
                resultado = Boolean.FALSE;
            }
        } catch (Exception e) {
            logger.severe("Error en el metodo validarOperacionEnProcesoDesembolso : ", e);
        } finally {
            logger.warning("Into finally remove criteria : ValidarSolicitudDesembolsoPorIdOperacionCriteria");
            getViewCriteriaManager().removeApplyViewCriteriaName("ValidarSolicitudDesembolsoPorIdOperacionCriteria");
        }
        
        logger.warning("Fuera validarOperacionEnProcesoDesembolso,return :"+resultado);
        return resultado;
    }
    
    public Boolean validarContratosDesembolsadosSolicitud(Long idOperacion){
        logger.warning("Inicia metodo validarContratosDesembolsadosSolicitud.");
        Boolean existeContrato = Boolean.FALSE;
        ViewCriteria vc = null;
        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
        
        if(null == idOperacion){
            logger.warning("Parametros requeridos son NULL. IdOperacion: " + idOperacion);
            return null;
        }
        
        try{
            logger.warning("Ejecutando criteria de busqueda de solicitudes por operacion: " + idOperacion);
            vc = this.getViewCriteriaManager().getViewCriteria("ConsultarSolicitudDesembolsoPorIdOperacionVC");
            vc.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
            this.applyViewCriteria(vc);
            this.executeQuery();
        }catch(Exception e){
            logger.warning("ERROR al ejecutar el crietria ConsultarSolicitudDesembolsoPorIdOperacionVC.", e);
            //Eliminamos el ViewCriteria
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarSolicitudDesembolsoPorIdOperacionVC");
            return null;
        }
        
        logger.warning("Registros encontrados de solicitudes para la operacion: " + getEstimatedRowCount());
        if(getEstimatedRowCount() > 0){
            Long idSolicitud = null;
            
            setRangeSize(-1);
            logger.warning("Iterando registros para validar los contratos desembolsados.");
            for(Row row : getAllRowsInRange()){
                try{
                    idSolicitud = (Long) row.getAttribute("Id");
                }catch(Exception e){
                    logger.warning("ERROR al recuperar IdSolicitud del row.", e);
                    existeContrato = null;
                    break;
                }
                
                logger.warning("Solicitud a evaluar: " + idSolicitud);
                existeContrato = 
                    fenixAmImpl.getConsultarTreSolicitudLineaCreditoVO().buscarRegistrosSolicitudValidarContratosDesembolsados(idSolicitud);
                
                logger.warning("Existe desembolso: " + existeContrato);
                if(null != existeContrato){
                    if(existeContrato){
                        logger.warning("Contrato de desembolso en estado DESEMBOLSADO encontrado.");
                        break;
                    }
                }else{
                    logger.warning("Hubo un error al validar la existencia de contratos desembolsados.");
                    break;
                }
            }
        }
        
        //Eliminamos el ViewCriteria
        this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarSolicitudDesembolsoPorIdOperacionVC");
        logger.warning("Termina metodo validarContratosDesembolsadosSolicitud.");
        return existeContrato;
    }
    

    /**
     * Returns the variable value for pIdOperacion.
     * @return variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }
}

