package org.bcie.fenix.common.model.vo;

import com.oracle.xmlns.osb_bcie.mds.implementacionpct.ImplementacionPCTBindQSService;
import com.oracle.xmlns.osb_bcie.mds.implementacionpct.ImplementacionPCTPtt;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.LoteImplementacionFinConcursoVO;
import org.bcie.implementacionpctbo.ImplementacionType;
import org.bcie.implementacionpctbo.LoteType;
import org.bcie.implementacionpctmo.ProcesoLoteRequestType;
import org.bcie.implementacionpctmo.ProcesoLoteResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 03 21:36:02 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoteImplementacionFinConcursoVOImpl extends ViewObjectImpl implements LoteImplementacionFinConcursoVO {
    /**
     * This is the default constructor (do not remove).
     */
    public static ADFLogger logger = null;
    public LoteImplementacionFinConcursoVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    public void insertaRowLoteImplementacion(Row row) {
        logger.log(ADFLogger.WARNING, "INTO insertaRowLoteImplementacion");

        logger.log(ADFLogger.WARNING, "Row es :" + row.getAttribute("Id"));
        Row rowLoteImplementacion = this.createRow();
        if (null != row) {
            try {
                rowLoteImplementacion.setAttribute("Id", row.getAttribute("Id"));
                rowLoteImplementacion.setAttribute("NombreLote", row.getAttribute("NombreLote"));
                rowLoteImplementacion.setAttribute("MontoPresupuestado", row.getAttribute("MontoPresupuestado"));

                this.insertRow(rowLoteImplementacion);
            } catch (Exception e) {
                logger.warning("Error en insertaRowLoteImplementacion." + e.getClass() + "." + e.getMessage());
            }
        } else {
            logger.warning("El row es nulo.");
        }
    }

    public Boolean validaLoteSeleccionado() {
        logger.log(ADFLogger.WARNING, "Entra en validaLoteSeleccionado");

        Boolean validaIdLote = Boolean.FALSE;
        Boolean seleccion = Boolean.FALSE;
        List<Boolean> listaSeleccionada = new ArrayList<Boolean>();

        RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
        rowsLoteImplementacionVo.reset();

        try {
            while (rowsLoteImplementacionVo.hasNext()) {
                LoteImplementacionFinConcursoVORowImpl rowL =
                    (LoteImplementacionFinConcursoVORowImpl) rowsLoteImplementacionVo.next();
                if (null != rowL.getAttribute("SeleccionarLote")) {
                    seleccion = (Boolean) rowL.getAttribute("SeleccionarLote");
                    if (Boolean.TRUE == seleccion) {
                        listaSeleccionada.add(seleccion);
                    } else {
                        logger.warning("El atributo no ha sido seleccionado.");
                    }
                } else {
                    logger.warning("No hay registros.");
                }
            }
            rowsLoteImplementacionVo.closeRowSetIterator();
            if (listaSeleccionada.size() > 0) {
                validaIdLote = Boolean.TRUE;
            } else {
                logger.warning("No hay registros seleccionados.");
            }
        } catch (Exception e) {
            logger.warning("Error al seleccionar los lotes." + e.getClass() + "." + e);
        }
        logger.warning("Valor de retorno es :" + validaIdLote);
        return validaIdLote;
    }

    public Boolean inicioProcesoPorIdLote(Map<String, Object> map) {
        logger.log(ADFLogger.WARNING, "Entra en inicioProcesoPorIdLote.");

        Boolean isIniciaProceso = Boolean.FALSE;
        Boolean seleccion = Boolean.FALSE;
        Long id = null;
        List<Long> listaIdLote = new ArrayList<Long>();

        RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
        rowsLoteImplementacionVo.reset();

        try {
            while (rowsLoteImplementacionVo.hasNext()) {
                LoteImplementacionFinConcursoVORowImpl rowL =
                    (LoteImplementacionFinConcursoVORowImpl) rowsLoteImplementacionVo.next();
                if (null != rowL.getAttribute("Id")) {
                    id = (Long) rowL.getAttribute("Id");
                    seleccion = (Boolean) rowL.getAttribute("SeleccionarLote");
                    logger.log(ADFLogger.WARNING, "Valores obtenidos :" + id + "-->" + seleccion);
                    if (Boolean.TRUE == seleccion) {
                        listaIdLote.add(id);
                    } else {
                        logger.warning("El lote no fue seleccionado.");
                    }
                } else {
                    logger.warning("El row es nulo.");
                }
            }
            rowsLoteImplementacionVo.closeRowSetIterator();
            if (listaIdLote.size() > 0) {
                isIniciaProceso = enviarIdProcesoLote(map, listaIdLote);
                //validaIdLote = Boolean.TRUE;
            } else {
                logger.warning("No hay registros seleccionados.");
            }
        } catch (Exception e) {
            logger.warning("Error al seleccionar los lotes." + e.getClass() + "." + e);
        }
        logger.log(ADFLogger.WARNING, "Valor de retorno :" + isIniciaProceso);
        return isIniciaProceso;
    }

    public Boolean enviarIdProcesoLote(Map<String, Object> map, List<Long> lotes) {
        logger.log(ADFLogger.WARNING, "Entra en enviarIdProcesoLote.");

        ProcesoLoteRequestType request = new ProcesoLoteRequestType();
        ProcesoLoteResponseType response = new ProcesoLoteResponseType();
        List<ImplementacionType> listImplementacionPCT;
        List<LoteType> listaLoteImplementacion;
        ImplementacionType implementacion = new ImplementacionType();
        FenixAMImpl fenixAM = null;
        Long idOperacion = null;
        String nombreOperacion = null;
        String responsable = null;
        String mensaje = null;
        Boolean isResultado = Boolean.FALSE;

        if (null != map) {
            if (null != map.get("idOperacion")) {
                idOperacion = Long.parseLong(map.get("idOperacion").toString());
                logger.log(ADFLogger.WARNING, "Valor idOperacion :" + idOperacion);
                request.setIdOperacion(idOperacion);
            } else {
                logger.log(ADFLogger.WARNING, "Valor idOperacion nulo.");
            }
            if (null != map.get("nombreOperacion")) {
                nombreOperacion = (String) map.get("nombreOperacion");
                logger.log(ADFLogger.WARNING, "Valor nombreOperacion :" + nombreOperacion);
                request.setNombre(nombreOperacion);
            } else {
                logger.log(ADFLogger.WARNING, "Valor nombreOperacion nulo.");
            }
            if (null != map.get("responsable")) {
                responsable = (String) map.get("responsable");
                logger.log(ADFLogger.WARNING, "Valor responsable :" + responsable);
                request.setResponsable(responsable);
            } else {
                logger.log(ADFLogger.WARNING, "Valor responsable nulo.");
            }
        }

        fenixAM = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.IMPLEMENTACION_PCT);

        ImplementacionPCTBindQSService implementacionPCTBindQSService =
            IWsdlLocation.Service.getInstance(ImplementacionPCTBindQSService.class, wsdl);
        ImplementacionPCTPtt implementacionPCTPtt = implementacionPCTBindQSService.getImplementacionPCTBindQSPort();

        listImplementacionPCT = request.getImplementacionPCT();
        listaLoteImplementacion = implementacion.getLoteImplementacion();
        if (lotes.size() > 0) {
            for (Long idlote : lotes) {
                LoteType loteType = new LoteType();
                logger.log(ADFLogger.WARNING, "Valor del idLote :" + idlote);
                loteType.setIdLote(idlote);

                implementacion.getLoteImplementacion().add(loteType);
            }
            listImplementacionPCT.add(implementacion);
        } else {
            logger.log(ADFLogger.WARNING, "La lista de lotes esta vacia." + lotes.size());
        }
        try {
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_IMPLEMENTACION_PCT);
            response = implementacionPCTPtt.inciaProcesoLote(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_IMPLEMENTACION_PCT, horaInicio);
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error al ejecutar el servicio");
        }

        if (null != response.getResultado()) {
            if (null != response.getResultado().getMessage()) {
                mensaje = response.getResultado().getMessage();
            } else {
                logger.log(ADFLogger.WARNING, "El mensaje del servicio es nulo.");
            }
            if (null != response.getResultado().getResult()) {
                if (response.getResultado().getResult().value().equalsIgnoreCase("OK")) {
                    logger.log(ADFLogger.WARNING, "Respuesta del servicio :" + mensaje);
                    isResultado = Boolean.TRUE;
                } else {
                    logger.log(ADFLogger.WARNING, "Respuesta del servicio :" + mensaje);
                    isResultado = Boolean.FALSE;
                }
            }
        }
        return isResultado;
    }
}

