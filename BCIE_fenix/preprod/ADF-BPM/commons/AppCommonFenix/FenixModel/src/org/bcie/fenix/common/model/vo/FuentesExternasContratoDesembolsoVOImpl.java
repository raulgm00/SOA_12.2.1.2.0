package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.lineacreditoservice.LineaCredito;
import com.bcie.xmlns.lineacreditoservice.LineaCreditoPT;

import java.math.BigDecimal;

import java.util.Date;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.commonbo.MontoType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.FuentesExternasContratoDesembolsoVO;
import org.bcie.lineacreditobo.Fuente;
import org.bcie.lineacreditomo.ConsultarFuentesRequestType;
import org.bcie.lineacreditomo.ConsultarFuentesResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 07 18:18:26 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FuentesExternasContratoDesembolsoVOImpl extends ViewObjectImpl implements FuentesExternasContratoDesembolsoVO {

    private static ADFLogger logger = null;

    /**
     * This is the default constructor (do not remove).
     */
    public FuentesExternasContratoDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public void obtenerDatosFuentesExternas(oracle.jbo.domain.Number idLineaCredito, Long idContrato,
                                            Integer idTareaBPM) {
        logger.warning("Inicia metodo obtenerDatosFuentesExternas");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        logger.warning("getEstimatedRowCount();" + getEstimatedRowCount());
        
        this.executeQuery();
        
        logger.warning("after executeQuery()" + getEstimatedRowCount());
            
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
        ConsultarFuentesRequestType request = new ConsultarFuentesRequestType();
        ConsultarFuentesResponseType response = null;
        Long idLineaCreditoLong = null;
        String fondoContrato = null;
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM = null;

        if (null == idLineaCredito || null == idContrato) {
            logger.warning("Parametros requeridos.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("idLineaCredito o idContrato de desembolso son NULL." +
                "No se pueden obtener las Fuentes externas."));
            throw ex;
        }
        
        try {
            logger.warning("Instanciando FenixGestorDesembolsosAMImpl");
            fenixGestorDesembolsosAM =
                (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        } catch (Exception e) {
            logger.warning("Error al instanciar FenixGestorDesembolsosAMImpl ", e);
        }
        
        //Obteniendo fondo del contrato
        try{
            Row rowContrato = fenixGestorDesembolsosAM.getCrearActualizarContratoDesembolsoVO().getCurrentRow();
            fondoContrato = (null == rowContrato.getAttribute("Fondo")) ?
                (String) rowContrato.getAttribute("FondoTransient") : (String) rowContrato.getAttribute("Fondo");
        }catch(Exception e){
            logger.warning("ERROR al recuperar el fondo del contrato del currentRow.", e);
        }
        logger.warning("Fondo: " + fondoContrato);
        
        try{
            idLineaCreditoLong = new Long(idLineaCredito.longValue());
            //idLineaCreditoLong = new Long(61);
        }catch(Exception e){
            logger.warning("No se pudo castear idLineaCredito.", e);
        }
        
        if(null == fondoContrato){
            logger.warning("Valores requeridos para ejecutar servicio son NULL. fondoContrato: "
                           + fondoContrato);
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("El fondo del contrato de desembolso es NULL." +
                "No se pueden obtener las Fuentes externas."));
            throw ex;
        }

        LineaCredito lineaCredito = IWsdlLocation.Service.getInstance(LineaCredito.class, wsdl);
        LineaCreditoPT lineaCreditoPT = lineaCredito.getLineaCredito12Bnd();

        request.setLineaCredito(new org.bcie.lineacreditobo.LineaCredito());
        request.getLineaCredito().setIdLineaCredito(idLineaCreditoLong);
        request.getLineaCredito().setNumeroLineaCredito("");
        request.getLineaCredito().setFondo(fondoContrato);
        
        try {
            logger.warning("Ejecutando servicio " + FenixModelConstants.WSC_CONSULTAR_FUENTE);
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_FUENTE);
            response = lineaCreditoPT.consultarFuentes(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_FUENTE, horaInicio);
            logger.warning("Servicio " + FenixModelConstants.WSC_CONSULTAR_FUENTE + " ejecutado correctamente");
        } catch (Exception e) {
            logger.warning("Error al ejecutar servicio " + FenixModelConstants.WSC_CONSULTAR_FUENTE);
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Error al ejecutar servicio: "
                                               + FenixModelConstants.WSC_CONSULTAR_FUENTE + ": " + e.getMessage()));
            throw ex;
        }
        
        if (null != response) {
            if (null != response.getResultado()) {
                if (response.getResultado().getResult().value() == "OK") {
                    if (null != response.getLineaCredito()) {
                        logger.warning("Obteniendo datos de servicio.");
                        if (null != response.getLineaCredito().getFuente() ||
                            response.getLineaCredito().getFuente().size() > 0) {
                            BigDecimal montoDesembolsarFuente = null;
                            for (org.bcie.lineacreditobo.Fuente fuente : response.getLineaCredito().getFuente()) {
                                Row row = null;
                                Row rowTreLineaPasiva = null;

                                logger.warning("Obteniendo LineasPasivas existentes");
                                rowTreLineaPasiva =
                                    fenixGestorDesembolsosAM.getTreLineaPasivaVO().obtenerLineaPasiva(idContrato,
                                                                                                      fuente.getIdFuente());
                                
                                logger.warning("*IDTAREABPM PARA ASIGNAR FUENTES EXTERNAS: " + idTareaBPM);
                                if(null != idTareaBPM){
                                    if (!(idTareaBPM.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO)==0) &&
                                        !(idTareaBPM.compareTo(FenixModelConstants.TAREA_REALIZAR_AJUSTES_DESEMBOLSO)==0)) {
                                        logger.warning("Configuracion para tarea diferente de Gestor Desembolsos.");
                                        if (null != rowTreLineaPasiva) {
                                            try{
                                                montoDesembolsarFuente =
                                                    (BigDecimal) rowTreLineaPasiva.getAttribute("MontoDesembolsar");
                                            }catch(Exception e){
                                                logger.warning("ERROR al obtener el montoDesembolsar de la TreLineaPasiva.", e);
                                            }
                                            if(null != montoDesembolsarFuente && montoDesembolsarFuente.compareTo(BigDecimal.ZERO)==1){
                                                row = createRow();
                                                if (null != row) {
                                                    logger.warning("Seteando valores de Fuentes externas.");
                                                    BigDecimal montoDesembolsar = null;
                                                    row.setAttribute("Id", fuente.getIdFuente());
                                                    row.setAttribute("IdLineaCredito", fuente.getIdLineaCredito());
                                                    row.setAttribute("IdLineaPasiva", fuente.getIdLineaPasiva());
                                                    row.setAttribute("IdContrato", idContrato);
                                                    row.setAttribute("Nombre", fuente.getDescripcion());
                                                    row.setAttribute("ReservaTotal", fuente.getMontoAsignado());
                                                    row.setAttribute("IdFuenteExterna", fuente.getIdFuente());
                                                    if (null != fuente.getMonto() || fuente.getMonto().size() > 0) {
                                                        for (MontoType monto : fuente.getMonto()) {
                                                            if (null != monto.getTipo()) {
                                                                if (null != monto.getTipo().getDescripcionCorta() &&
                                                                    monto.getTipo().getDescripcionCorta().equals("DISPONIBLE")) {
                                                                    row.setAttribute("MontoDisponible", monto.getImporte());
                                                                    logger.warning("MontoDisponible: " + monto.getImporte());
                                                                }
                                                            } else {
                                                                logger.warning("El objeto Tipo del Monto de la LineaCredito del servicio " +
                                                                               FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                               " es vacia.");
                                                            }
                                                            
                                                                
                                                            if (null != monto.getMoneda()) {
                                                                logger.warning("DescripcionMoneda: " + monto.getMoneda().getCodigoExterno());
                                                                if (null != monto.getMoneda().getCodigoExterno() && !(monto.getMoneda().getCodigoExterno().isEmpty())) {
                                                                    logger.warning("Seteando Descripcion de la moneda.");
                                                                    row.setAttribute("DescripcionMoneda", monto.getMoneda().getCodigoExterno());
                                                                }
                                                                
                                                                if(null != monto.getMoneda().getId()){
                                                                    row.setAttribute("IdTipoMoneda", monto.getMoneda().getId());
                                                                    logger.warning("IdTipoMoneda: " + monto.getMoneda().getId());
                                                                }
                                                            } else {
                                                                logger.warning("El objeto Moneda del Monto de la LineaCredito del servicio " +
                                                                                FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                                " es vacio.");
                                                            }
                                                        }
                                                    } else {
                                                        logger.warning("La lista de Montos de la Fuente de la LineaCredito del servicio " +
                                                                       FenixModelConstants.WSC_CONSULTAR_FUENTE + " es vacia.");
                                                    }
                                                    montoDesembolsar =
                                                        obtenerMontoDesembolsarFuente(idContrato, fuente.getIdFuente());
                                                    row.setAttribute("MontoDesembolsar", montoDesembolsar);
        
                                                    logger.warning("IdFuente: " + fuente.getIdFuente());
                                                    logger.warning("IdLineaCredito: " + fuente.getIdLineaCredito());
                                                    logger.warning("IdLineaPasiva: " + fuente.getIdLineaPasiva());
                                                    logger.warning("IdContrato: " + idContrato);
                                                    logger.warning("Nombre: " + fuente.getDescripcion());
                                                    logger.warning("ReservaTotal: " + fuente.getMontoAsignado());
                                                    logger.warning("MontoDesembolsar: " + montoDesembolsar);
                                                    
                                                    if(idTareaBPM.compareTo(FenixModelConstants.TAREA_GESTIONAR_DESEMBOLSOS_FUENTES_EXTERNAS)==0 
                                                       || idTareaBPM.compareTo(FenixModelConstants.TAREA_REGISTRAR_DESEMBOLSO)==0){
                                                        logger.warning("Recuperando datos de Transferencia de Recursos " +
                                                            "para precarga en Gestionar desembolsos de fuentes externas.");
                                                        Long idTreLineaPasiva = null;
                                                        Row rowTransferenciaRecursos = null;
                                                        
                                                        try{
                                                            idTreLineaPasiva =
                                                                (Long) rowTreLineaPasiva.getAttribute("Id");
                                                        }catch(Exception e){
                                                            logger.warning("ERROR al recuperar el idTreLineapasiva.", e);
                                                        }
                                                        
                                                        if(null != idTreLineaPasiva){
                                                            rowTransferenciaRecursos =
                                                                fenixGestorDesembolsosAM.getTransferenciaRecursosVO().buscarRegistroTransferenciaRecursos(idTreLineaPasiva);                                                    
                                                        }else{
                                                            logger.warning("TreLineaPasiva es NULL.");
                                                        }
                                                        
                                                        if(null != rowTransferenciaRecursos){
                                                            Integer idFormaTrensferencia = null;
                                                            String numeroCuenta = null;
                                                            
                                                            try{
                                                                idFormaTrensferencia =
                                                                    (Integer) rowTransferenciaRecursos.getAttribute("TcaFormaTransferencia");
                                                            }catch(Exception e){
                                                                logger.warning("ERROR al recuperar el idFormaTransferencia.", e);
                                                            }
                                                            
                                                            try{
                                                                numeroCuenta = (String) rowTransferenciaRecursos.getAttribute("NumeroCuenta");
                                                            }catch(Exception e){
                                                                logger.warning("ERROR al recuperar el NumeroCuenta.", e);
                                                            }
                                                            
                                                            if(null != idFormaTrensferencia){                                                            
                                                                row.setAttribute("TcaFormaTransferencia", idFormaTrensferencia);
                                                                
                                                                if(idFormaTrensferencia.compareTo(1)==0){
                                                                    row.setAttribute("NumeroCuentaClientePasivo", numeroCuenta);
                                                                }else{
                                                                    row.setAttribute("NumeroCuentaNostro", numeroCuenta);
                                                                }
                                                            }
                                                            
                                                            try{
                                                                row.setAttribute("MontoDesembolsado", rowTransferenciaRecursos.getAttribute("MontoDesembolsado"));
                                                                row.setAttribute("Fecha", rowTransferenciaRecursos.getAttribute("Fecha"));
                                                                logger.warning("TransferenciaRecursos Fecha recuperada: "+rowTransferenciaRecursos.getAttribute("Fecha"));
                                                                row.setAttribute("IdBancoTransferencia", rowTransferenciaRecursos.getAttribute("IdBancoTransferencia"));
                                                                row.setAttribute("NombreBancoTransferencia", rowTransferenciaRecursos.getAttribute("NombreBancoTransferencia"));
                                                                row.setAttribute("NombreCuenta", rowTransferenciaRecursos.getAttribute("NombreCuenta"));
                                                            }catch(Exception e){
                                                                logger.warning("ERROR al asignar valores de transferencia de recursos.", e);
                                                            }
                                                            
                                                        }else{
                                                            logger.warning("Row de Transferencia de recursos es NULL.");
                                                        }
                                                    }
                                                } else {
                                                    logger.warning("El row es NULL.");
                                                }
                                                logger.warning("Insertando row con datos obtenidos.");
                                                insertRow(row);
                                            }else{
                                                logger.warning("El monto a desembolsar de TreLineaPasiva es NULL o cero (0). No se tomara en cuenta.");
                                            }
                                        }else{
                                            try {
                                                if (idTareaBPM.compareTo(FenixModelConstants.TAREA_REALIZAR_AJUSTES_ASIGN_REC)==0){
                                                    logger.warning("Cargando Fuentes externas para pantalla REALIZAR AJUSTES DE ASIGNACION DE RECURSOS.");
                                                    row = createRow();
                                                    if (null != row) {
                                                        BigDecimal montoDesembolsar = null;
                                                        row.setAttribute("Id", fuente.getIdFuente());
                                                        row.setAttribute("IdLineaCredito", fuente.getIdLineaCredito());
                                                        row.setAttribute("IdLineaPasiva", fuente.getIdLineaPasiva());
                                                        row.setAttribute("IdContrato", idContrato);
                                                        row.setAttribute("Nombre", fuente.getDescripcion());
                                                        row.setAttribute("ReservaTotal", fuente.getMontoAsignado());
                                                        if (null != fuente.getMonto() || fuente.getMonto().size() > 0) {
                                                            for (MontoType monto : fuente.getMonto()) {
                                                                if (null != monto.getTipo()) {
                                                                    if (null != monto.getTipo().getDescripcionCorta() &&
                                                                        monto.getTipo().getDescripcionCorta().equals("DISPONIBLE")) {
                                                                        row.setAttribute("MontoDisponible", monto.getImporte());
                                                                        logger.warning("MontoDisponible: " + monto.getImporte());
                                                                    }                                                                
                                                                } else {
                                                                    logger.warning("El objeto Tipo del Monto de la LineaCredito del servicio " +
                                                                                   FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                                   " es vacia.");
                                                                }
                                                                
                                                                
                                                                if (null != monto.getMoneda()) {
                                                                    logger.warning("DescripcionMoneda: " + monto.getMoneda().getCodigoExterno());
                                                                    if (null != monto.getMoneda().getCodigoExterno() && !(monto.getMoneda().getCodigoExterno().isEmpty())) {
                                                                        logger.warning("Seteando Descripcion de la moneda.");
                                                                        row.setAttribute("DescripcionMoneda", monto.getMoneda().getCodigoExterno());
                                                                    }
                                                                    
                                                                    if(null != monto.getMoneda().getId()){
                                                                        row.setAttribute("IdTipoMoneda", monto.getMoneda().getId());
                                                                        logger.warning("IdTipoMoneda: " + monto.getMoneda().getId());
                                                                    }
                                                                } else {
                                                                    logger.warning("El objeto Moneda del Monto de la LineaCredito del servicio " +
                                                                                   FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                                   " es vacio.");
                                                                }
                                                            }
                                                        } else {
                                                            logger.warning("La lista de Montos de la Fuente de la LineaCredito del servicio " +
                                                                           FenixModelConstants.WSC_CONSULTAR_FUENTE + " es vacia.");
                                                        }
                                                        montoDesembolsar =
                                                            obtenerMontoDesembolsarFuente(idContrato, fuente.getIdFuente());
                                                        row.setAttribute("MontoDesembolsar", montoDesembolsar);
                                                
                                                        logger.warning("IdFuente: " + fuente.getIdFuente());
                                                        logger.warning("IdLineaCredito: " + fuente.getIdLineaCredito());
                                                        logger.warning("IdLineaPasiva: " + fuente.getIdLineaPasiva());
                                                        logger.warning("IdContrato: " + idContrato);
                                                        logger.warning("Nombre: " + fuente.getDescripcion());
                                                        logger.warning("ReservaTotal: " + fuente.getMontoAsignado());
                                                        logger.warning("MontoDesembolsar: " + montoDesembolsar);
                                                    } else {
                                                        logger.warning("El row es NULL.");
                                                    }
                                                    logger.warning("Insertando row con datos obtenidos.");
                                                    insertRow(row);
                                                }else{
                                                    logger.warning("NO SE ENCONTRARON FUENTES EXTERNAS PARA EL CONTRATO.");
                                                }
                                            } catch(Exception e) {
                                                logger.log(ADFLogger.WARNING, "Error al cargar fuentes.", e);
                                                throw(e);
                                            }
                                        }
                                    } else {
                                        logger.warning("Cargando Fuentes externas en Gestor de desembolsos.");
                                        try {
                                            row = createRow();
                                            if (null != row) {
                                                BigDecimal montoDesembolsar = null;
                                                row.setAttribute("Id", fuente.getIdFuente());
                                                row.setAttribute("IdLineaCredito", fuente.getIdLineaCredito());
                                                row.setAttribute("IdLineaPasiva", fuente.getIdLineaPasiva());
                                                row.setAttribute("IdContrato", idContrato);
                                                row.setAttribute("Nombre", fuente.getDescripcion());
                                                row.setAttribute("ReservaTotal", fuente.getMontoAsignado());
                                                if (null != fuente.getMonto() || fuente.getMonto().size() > 0) {
                                                    for (MontoType monto : fuente.getMonto()) {
                                                        if (null != monto.getTipo()) {
                                                            if (null != monto.getTipo().getDescripcionCorta() &&
                                                                monto.getTipo().getDescripcionCorta().equals("DISPONIBLE")) {
                                                                row.setAttribute("MontoDisponible", monto.getImporte());
                                                                logger.warning("MontoDisponible: " + monto.getImporte());
                                                            }
                                                        } else {
                                                            logger.warning("El objeto Tipo del Monto de la LineaCredito del servicio " +
                                                                           FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                           " es vacia.");
                                                        }
                                                        
                                                        if (null != monto.getMoneda()) {
                                                            logger.warning("DescripcionMoneda: " + monto.getMoneda().getCodigoExterno());
                                                            if (null != monto.getMoneda().getCodigoExterno() || !(monto.getMoneda().getCodigoExterno().isEmpty())) {
                                                                logger.warning("Seteando Descripcion de la moneda.");
                                                                row.setAttribute("DescripcionMoneda", monto.getMoneda().getCodigoExterno());
                                                            }
                                                            
                                                            if(null != monto.getMoneda().getId()){
                                                                row.setAttribute("IdTipoMoneda", monto.getMoneda().getId());
                                                                logger.warning("IdTipoMoneda: " + monto.getMoneda().getId());
                                                            }
                                                        } else {
                                                            logger.warning("El objeto Moneda del Monto de la LineaCredito del servicio " +
                                                                           FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                           " es vacio.");
                                                        }
                                                    }
                                                } else {
                                                    logger.warning("La lista de Montos de la Fuente de la LineaCredito del servicio " +
                                                                   FenixModelConstants.WSC_CONSULTAR_FUENTE + " es vacia.");
                                                }
                                                montoDesembolsar =
                                                    obtenerMontoDesembolsarFuente(idContrato, fuente.getIdFuente());
                                                row.setAttribute("MontoDesembolsar", montoDesembolsar);
                                            
                                                logger.warning("IdFuente: " + fuente.getIdFuente());
                                                logger.warning("IdLineaCredito: " + fuente.getIdLineaCredito());
                                                logger.warning("IdLineaPasiva: " + fuente.getIdLineaPasiva());
                                                logger.warning("IdContrato: " + idContrato);
                                                logger.warning("Nombre: " + fuente.getDescripcion());
                                                logger.warning("ReservaTotal: " + fuente.getMontoAsignado());
                                                logger.warning("MontoDesembolsar: " + montoDesembolsar);
                                            } else {
                                                logger.warning("El row es NULL.");
                                            }
                                            logger.warning("Insertando row con datos obtenidos.");
                                            insertRow(row);
                                        } catch(Exception e) {
                                            logger.log(ADFLogger.WARNING, "Error.", e);
                                            throw(e);
                                        }
                                    }
                                    logger.warning("after insertRow()" + getEstimatedRowCount());
                                }else{
                                    logger.warning("EL IDTAREABPM ES NULL.");
                                    logger.warning("Cargando Fuentes externas como Gestor de desembolsos.");
                                    row = createRow();
                                    if (null != row) {
                                        BigDecimal montoDesembolsar = null;
                                        row.setAttribute("Id", fuente.getIdFuente());
                                        row.setAttribute("IdLineaCredito", fuente.getIdLineaCredito());
                                        row.setAttribute("IdLineaPasiva", fuente.getIdLineaPasiva());
                                        row.setAttribute("IdContrato", idContrato);
                                        row.setAttribute("Nombre", fuente.getDescripcion());
                                        row.setAttribute("ReservaTotal", fuente.getMontoAsignado());
                                        if (null != fuente.getMonto() || fuente.getMonto().size() > 0) {
                                            for (MontoType monto : fuente.getMonto()) {
                                                if (null != monto.getTipo()) {
                                                    if (null != monto.getTipo().getDescripcionCorta() &&
                                                        monto.getTipo().getDescripcionCorta().equals("DISPONIBLE")) {
                                                        row.setAttribute("MontoDisponible", monto.getImporte());
                                                        logger.warning("MontoDisponible: " + monto.getImporte());
                                                    }
                                                } else {
                                                    logger.warning("El objeto Tipo del Monto de la LineaCredito del servicio " +
                                                                   FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                   " es vacia.");
                                                }
                                                
                                                if (null != monto.getMoneda()) {
                                                    logger.warning("DescripcionMoneda: " + monto.getMoneda().getCodigoExterno());
                                                    if (null != monto.getMoneda().getCodigoExterno() && !(monto.getMoneda().getCodigoExterno().isEmpty())) {
                                                        logger.warning("Seteando Descripcion de la moneda.");
                                                        row.setAttribute("DescripcionMoneda", monto.getMoneda().getCodigoExterno());
                                                    }
                                                    
                                                    if(null != monto.getMoneda().getId()){
                                                        row.setAttribute("IdTipoMoneda", monto.getMoneda().getId());
                                                        logger.warning("IdTipoMoneda: " + monto.getMoneda().getId());
                                                    }
                                                } else {
                                                    logger.warning("El objeto Moneda del Monto de la LineaCredito del servicio " +
                                                                   FenixModelConstants.WSC_CONSULTAR_FUENTE +
                                                                   " es vacio.");
                                                }
                                            }
                                        } else {
                                            logger.warning("La lista de Montos de la Fuente de la LineaCredito del servicio " +
                                                           FenixModelConstants.WSC_CONSULTAR_FUENTE + " es vacia.");
                                        }
                                        montoDesembolsar =
                                            obtenerMontoDesembolsarFuente(idContrato, fuente.getIdFuente());
                                        row.setAttribute("MontoDesembolsar", montoDesembolsar);
                                    
                                        logger.warning("IdFuente: " + fuente.getIdFuente());
                                        logger.warning("IdLineaCredito: " + fuente.getIdLineaCredito());
                                        logger.warning("IdLineaPasiva: " + fuente.getIdLineaPasiva());
                                        logger.warning("IdContrato: " + idContrato);
                                        logger.warning("Nombre: " + fuente.getDescripcion());
                                        logger.warning("ReservaTotal: " + fuente.getMontoAsignado());
                                        logger.warning("MontoDesembolsar: " + montoDesembolsar);
                                    } else {
                                        logger.warning("El row es NULL.");
                                    }
                                    logger.warning("Insertando row con datos obtenidos.");
                                    insertRow(row);
                                    logger.warning("after insertRow()" + getEstimatedRowCount());
                                }
                            }
                        } else {
                            logger.warning("La lista de Fuentes de la LineaCredito del servicio " +
                                           FenixModelConstants.WSC_CONSULTAR_FUENTE + " es vacia.");
                            JboException ex = new JboException("");
                            ex.addToExceptions(new Exception("La lista de Fuentes de la LineaCredito del servicio " +
                                           FenixModelConstants.WSC_CONSULTAR_FUENTE + " es vacia."));
                            throw ex;
                        }
                    } else {
                        logger.warning("El objeto LineaCredito del servicio " +
                                       FenixModelConstants.WSC_CONSULTAR_FUENTE + " es NULL.");
                        JboException ex = new JboException("");
                        ex.addToExceptions(new Exception("El objeto LineaCredito del servicio " +
                                       FenixModelConstants.WSC_CONSULTAR_FUENTE + " es NULL."));
                        throw ex;
                    }
                } else {
                    logger.warning("Servicio " + FenixModelConstants.WSC_CONSULTAR_FUENTE + " devuelve ERROR >> " +
                                   response.getResultado().getMessage());
                    JboException ex = new JboException("Servicio " + FenixModelConstants.WSC_CONSULTAR_FUENTE + " devuelve ERROR >> " +
                                   response.getResultado().getMessage());
                    throw ex;
                }
            } else {
                logger.warning("getResultado de servicio " + FenixModelConstants.WSC_CONSULTAR_FUENTE + " es NULL.");
                JboException ex = new JboException("");
                ex.addToExceptions(new Exception("Error al ejecutar servicio: "
                                                   + FenixModelConstants.WSC_CONSULTAR_FUENTE + ": getResultado es NULL."));
                throw ex;
            }
        } else {
            logger.warning("ERROR: Response es null.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Error al ejecutar servicio: "
                                               + FenixModelConstants.WSC_CONSULTAR_FUENTE + ": Response no obtenido."));
            throw ex;
        }

        logger.warning("Registros de Fuentes Obtenidas: " + getEstimatedRowCount());
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo obtenerDatosFuentesExternas con una duracion de: "+tiempo+" segundos");
    }

    public BigDecimal obtenerMontoDesembolsarFuente(Long idContrato, Long idFuente) {
        logger.warning("Inicia metodo obtenerMontoDesembolsarFuente");
        BigDecimal montoDesembolsar = null;
        Row row = null;

        if (null == idContrato && null == idFuente) {
            logger.warning("Parametros requeridos son NULL");
            logger.warning("idContrato: " + idContrato);
            logger.warning("idFuente: " + idFuente);
            return montoDesembolsar;
        }

        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM = null;
        try {
            logger.warning("Instanciando FenixGestorDesembolsosAMImpl");
            fenixGestorDesembolsosAM = (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        } catch (Exception e) {
            logger.warning("Error al instanciar FenixGestorDesembolsosAMImpl ", e);
        }

        try {
            if (null != fenixGestorDesembolsosAM) {
                logger.warning("Invocando metodo obtenerLineaPasiva");
                row = fenixGestorDesembolsosAM.getTreLineaPasivaVO().obtenerLineaPasiva(idContrato, idFuente);

                if (null != row) {
                    logger.warning("Obteniendo montoDesembolsar");
                    if (null != row.getAttribute("MontoDesembolsar")) {
                        try {
                            montoDesembolsar = (BigDecimal) row.getAttribute("MontoDesembolsar");
                            logger.warning("Monto a desembolsar de la fuente: " + montoDesembolsar);
                        } catch (Exception e) {
                            logger.warning("Error al convertir montoDesembolso del row a BigDecimal.");
                        }
                    } else {
                        logger.warning("El montoDesembolsado de la fuente es NULL.");
                    }
                } else {
                    logger.warning("Valor de row es NULL.");
                }
            } else {
                logger.warning("Instancia del AM de GestorDesembolsos es NULL.");
            }
        } catch(Exception e) {
            logger.log(ADFLogger.WARNING, "Error.", e);
            throw(e);
        }

        logger.warning("Termina metodo obtenerMontoDesembolsarFuente");
        return montoDesembolsar;
    }

    public Boolean guardarMontoDesembolsarFuentesExternas() {
        logger.warning("Inicia metodo guardarMontoDesembolsarFuentesExternas");
        Boolean resultado = Boolean.FALSE;
        Row row = null;
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM = null;

        try {
            logger.warning("Instanciando FenixGestorDesembolsosAMImpl");
            fenixGestorDesembolsosAM = (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
            if (null == fenixGestorDesembolsosAM) {
                logger.warning("fenixGestorDesembolsosAM es NULL");
                return resultado;
            }
        } catch (Exception e) {
            logger.warning("Error al instanciar FenixGestorDesembolsosAMImpl ", e);
            return resultado;
        }

        logger.warning("Registros a actualizar: " + getEstimatedRowCount());
        if (getEstimatedRowCount() > 0) {
            RowSetIterator iter = createRowSetIterator(null);
            if (null != iter) {
                iter.reset();
                while (iter.hasNext()) {
                    row = iter.next();
                    if (null != row) {
                        if (null != row.getAttribute("IdContrato") && null != row.getAttribute("Id")) {
                            BigDecimal montoADesembolsar = null;
                            BigDecimal montoDisponible = null;
                            BigDecimal reservaTotal = null;
                            if (null != row.getAttribute("MontoDesembolsar")) {
                                montoADesembolsar = new BigDecimal(row.getAttribute("MontoDesembolsar").toString());
                                logger.warning("Obteniendo montoDesembolsar: " + montoADesembolsar);
                            }
                            if (null != row.getAttribute("MontoDisponible")) {
                                montoDisponible = new BigDecimal(row.getAttribute("MontoDisponible").toString());
                                logger.warning("Obteniendo montoDisponible: " + montoDisponible);
                            }
                            if (null != row.getAttribute("ReservaTotal")) {
                                reservaTotal = new BigDecimal(row.getAttribute("ReservaTotal").toString());
                                logger.warning("Obteniendo ReservaTotal: " + reservaTotal);
                            }
                            logger.warning("Invocando metodo para actualizar monto a desembolsar de la fuente..");
                            resultado =
                                fenixGestorDesembolsosAM.getTreLineaPasivaVO().guardarMontoDesembolsarLineaPasiva(new Long(row.getAttribute("IdContrato").toString()),
                                                                                                                  new Long(row.getAttribute("Id").toString()),
                                                                                                                  montoADesembolsar,
                                                                                                                  montoDisponible,
                                                                                                                  reservaTotal);
                            fenixGestorDesembolsosAM.getTransferenciaRecursosVO().crearRegistroTransferenciaRecursos(row);
                        } else {
                            logger.warning("IdContrato o Id de la fuente son NULL.");
                        }
                    } else {
                        logger.warning("Row es NULL.");
                    }
                }
            } else {
                logger.warning("Iterador vacio.");
            }
            iter.closeRowSetIterator();
        } else {
            logger.warning("No hay registros a actualizar.");
        }

        logger.warning("Termina metodo guardarMontoDesembolsarFuentesExternas");
        return resultado;
    }
    
    public Boolean obtenerRowFuentesTransferenciaRecursos(){
        logger.warning("Inicia metodo obtenerRowFuentesTransferenciaRecursos");
        Boolean resultado = Boolean.FALSE;
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM = null;

        try {
            logger.warning("Instanciando FenixGestorDesembolsosAMImpl");
            fenixGestorDesembolsosAM = (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
            if (null == fenixGestorDesembolsosAM) {
                logger.warning("fenixGestorDesembolsosAM es NULL");
                return resultado;
            }
        } catch (Exception e) {
            logger.warning("Error al instanciar FenixGestorDesembolsosAMImpl ", e);
            return resultado;
        }
        
        logger.warning("Registros de Fuentes externas para guardar sus Transferencias de recursos: " + getEstimatedRowCount());
        if(getEstimatedRowCount() > 0){
            Row row = null;
            RowSetIterator iter = createRowSetIterator(null);
            if (null != iter) {
                iter.reset();
                while (iter.hasNext()) {
                    row = iter.next();
                    if (null != row) {
                        resultado = fenixGestorDesembolsosAM.getTransferenciaRecursosVO().crearRegistroTransferenciaRecursos(row);
                        
                        if(!resultado){
                            logger.warning("ERROR al crear el registro de Transferencia de recursos.");
                            break;
                        }
                    } else {
                        logger.warning("Row es NULL.");
                    }
                }
                
                if(resultado){
                    logger.warning("Realizando COMMIT.");
                    try{
                        getDBTransaction().commit();
                    }catch(Exception e){
                        logger.warning("ERROR al realizar el commit.", e);                        
                        logger.warning("Reintentando Commit....");
                        
                        try{
                            getDBTransaction().commit();
                        }catch(Exception ea){
                            logger.warning("ERROR al realizar el 2 commit ->", ea);
                            resultado = Boolean.FALSE;
                         }
                    }
                }
            } else {
                logger.warning("Iterador vacio.");
            }
            iter.closeRowSetIterator();
        }else{
            logger.warning("No hay registros para guardar.");
        }
        
        logger.warning("Termina metodo obtenerRowFuentesTransferenciaRecursos");
        return resultado;
    }
    
    public BigDecimal obtenerMontoTotalDesembolsado(){
        logger.warning("Inicia metodo obtenerMontoTotalDesembolsado");
        BigDecimal montoDesembolsadoTotal = null;
        Row row = null;
        
        if (getEstimatedRowCount() > 0) {
            RowSetIterator iter = createRowSetIterator(null);
            if (null != iter) {
                iter.reset();
                while (iter.hasNext()) {
                    row = iter.next();
                    if (null != row) {
                        BigDecimal montoDesembolsado = null;
                        
                        try{
                            montoDesembolsado = (BigDecimal) row.getAttribute("MontoDesembolsado");
                            
                        }catch(Exception e){
                            logger.warning("ERROR al recuperar MontoDesembolsado.", e);
                        }
                        
                        try{
                            logger.warning("Sumando montos desembolsado de transferencia de recursos de Fuentes Externas.");
                            if(null == montoDesembolsadoTotal){
                                montoDesembolsadoTotal = montoDesembolsado;
                            }else{
                                montoDesembolsadoTotal = montoDesembolsadoTotal.add(montoDesembolsado);
                            }
                        }catch(Exception e){
                            logger.warning("ERROR al ejecutar la suma de MontoDesembolsado.", e);
                            montoDesembolsadoTotal = null;
                        }
                    } else {
                        logger.warning("Row es NULL.");
                    }
                }
            } else {
                logger.warning("Iterador vacio.");
            }
            iter.closeRowSetIterator();
        } else {
            logger.warning("No hay registros a actualizar.");
        }
        
        logger.warning("MontoDesembolsadoTotal: " + montoDesembolsadoTotal);
        logger.warning("Termina metodo obtenerMontoTotalDesembolsado");
        return montoDesembolsadoTotal;
    }
    
    public void recuperarDatosTransferenciaRecursos(){
        logger.warning("Inicia metodo recuperarDatosTransferenciaRecursos");
        Row row = null;
        Long idFuenteExterna = null;
        
        if(getEstimatedRowCount() > 0){
            RowSetIterator iter = createRowSetIterator(null);
            iter.reset();
            while(iter.hasNext()){
                row = iter.next();
                if(null != row){
                    try{
                        idFuenteExterna = (Long) row.getAttribute("IdFuenteExterna");
                    }catch(Exception e){
                        logger.warning("ERROR al obtener idFuenteExterna.", e);
                    }
                }
            }
        }
        
        logger.warning("Termina metodo recuperarDatosTransferenciaRecursos");
    }
    
    public Boolean validarCambioPendienteFuentesExternas(){
        logger.warning("Inicia metodo validarCambioPendienteFuentesExternas.");
        Boolean resultado = Boolean.FALSE;
        RowSetIterator iter = null;
        Integer existeCambioPendiente = null;
        
        logger.warning("Registros de Fuentes externas por validar: " + getEstimatedRowCount());
        iter = createRowSetIterator(null);
        if(null != iter){
            for(Row row : iter.getAllRowsInRange()){
                logger.warning("Registro de fuente externa: " + row.getAttribute("IdFuenteExterna"));
                try{
                    existeCambioPendiente = (Integer) row.getAttribute("ExisteCambioPendiente");
                }catch(Exception e){
                    logger.warning("ERROR al recuperar el atrbuto ExisteCambioPendiente", e);
                }
                
                if(null != existeCambioPendiente && existeCambioPendiente.compareTo(1)==0){
                    logger.warning("Existe cambio pendiente por guardar.");
                    resultado = Boolean.TRUE;
                    break;
                }
            }
        }else{
            logger.warning("Iterador es NULL.");
        }
        iter.closeRowSetIterator();
        
        logger.warning("Termina metodo validarCambioPendienteFuentesExternas.");
        return resultado;
    }
    
    public void asignarCambioPendienteFalso(){
        logger.warning("Inicia metodo asignarCambioPendienteFalso.");
        Boolean resultado = Boolean.FALSE;
        RowSetIterator iter = null;
        
        logger.warning("Registros de Fuentes externas por validar: " + getEstimatedRowCount());
        iter = createRowSetIterator(null);
        if(null != iter){
            for(Row row : iter.getAllRowsInRange()){
                logger.warning("Registro de fuente externa: " + row.getAttribute("IdFuenteExterna"));
                try{
                    row.setAttribute("ExisteCambioPendiente", 0);
                }catch(Exception e){
                    logger.warning("ERROR al setear el atrbuto ExisteCambioPendiente", e);
                }
            }
        }else{
            logger.warning("Iterador es NULL.");
        }
        iter.closeRowSetIterator();
        
        logger.warning("Termina metodo asignarCambioPendienteFalso.");
    }
}

