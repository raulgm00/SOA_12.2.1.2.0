package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.clienteservice.Cliente12BndQSService;
import com.bcie.xmlns.clienteservice.ClientePT;

import com.oracle.xmlns.bpmn.bpmnprocess.administrarclienteprocess.InicioAdministrarCliente;
import com.oracle.xmlns.bpmn.bpmnprocess.procesosalternos.ProcesosAlternosBindingQSService;
import com.oracle.xmlns.bpmn.bpmnprocess.procesosalternos.ProcesosAlternosPortType;

import com.oracle.xmlns.bpmn.bpmnprocess.procesosutilidad.ProcesosUtilidadBindingQSService;
import com.oracle.xmlns.bpmn.bpmnprocess.procesosutilidad.ProcesosUtilidadPortType;
import com.oracle.xmlns.bpmn.bpmnprocess.procesosutilidad.ResultadoProceso;
import com.oracle.xmlns.bpmn.bpmnprocess.reasignacionrcprocess.InicioReasignacionRC;

import org.bcie.xmlns.objetoproceso.comun.header.v1.Header;

import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.Date;
//import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.DatatypeFactory;
//import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.clientebo.Cliente;
import org.bcie.clientebo.Contacto;
import org.bcie.clientebo.Contactos;
import org.bcie.clientebo.EntidadMinimaOperacion;
import org.bcie.clientemo.ActualizarClienteRequestType;
import org.bcie.clientemo.ActualizarClienteResponseType;
import org.bcie.clientemo.ConsultarClienteResponseType;
import org.bcie.clientemo.ConsultarClientesByIdClienteRequestType;
import org.bcie.clientemo.CrearClienteRequestType;
import org.bcie.clientemo.CrearClienteResponseType;
import org.bcie.clientemo.EliminarClienteRequestType;
import org.bcie.clientemo.EliminarClienteResponseType;
import org.bcie.clientemo.ValidarClienteDuplicadoRequestType;
import org.bcie.clientemo.ValidarClienteDuplicadoResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import static org.bcie.fenix.common.model.FenixModelConstants.TIPO_CLIENTE_PROSPECTO;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.CrearClienteVO;
import org.bcie.resultbo.Resultado;
import org.bcie.xmlns.objetoproceso.comun.cliente.v1.ClienteType;
import org.bcie.xmlns.objetoproceso.comun.parameter.v1.ParameterType;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 12 11:38:34 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CrearClienteVOImpl extends ViewObjectImpl implements CrearClienteVO
{
    
    private static ADFLogger logger = null;
    
    
    /**
     * This is the default constructor (do not remove).
     */
    public CrearClienteVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowCliente(){
        logger.log(ADFLogger.TRACE, "Inside crearRowCliente.");
        
        this.clearCache(); // Limpiamos VO
        Row row = this.createRow();
        row.setAttribute("Id", new oracle.jbo.domain.Number(1));
        
        this.insertRowAtRangeIndex(0, row); // Insertamos row en VO
        this.setCurrentRow(row); // Asignamos nuevo row como current
    }
    
    public Map crearCliente(String codExterno) {
        logger.log(ADFLogger.TRACE, "Inside crearCliente.");
        HashMap<String, Object> idClienteResultado = null;
        CrearClienteRequestType request = null;
        CrearClienteResponseType response = null;
        FenixAMImpl fenixAM = null;
        
        if (this.getRowAtRangeIndex(0) != null) {
            
            Resultado result = null;
            DatatypeFactory datatypeFactory = null;
            
            idClienteResultado = new HashMap<String, Object>();
            Cliente cliente = new Cliente();
            Catalogo tipoPersona = new Catalogo();
            Catalogo sector = new Catalogo();
            Catalogo tipoInstitucion = new Catalogo();
            Catalogo pais = new Catalogo();
            Catalogo grupo = new Catalogo();
            Catalogo oficina = new Catalogo();
            Cliente clienteResultado = new Cliente();
            // Service declared
            CrearClienteVORowImpl crearClienteRow = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
            if(crearClienteRow != null){
                
                logger.warning("Razon: " + crearClienteRow.getRazonSocial());
                logger.warning("Abreviatura: " + crearClienteRow.getAbreviatura());
                logger.warning("Tipo persona: " + crearClienteRow.getTipoPersona());
                logger.warning("Sector: " + crearClienteRow.getSector());
                logger.warning("Tipo institucion: " + crearClienteRow.getTipoInstitucion());
                logger.warning("Pais: " + crearClienteRow.getPais());
                logger.warning("Grupo: " + crearClienteRow.getGrupoEconomico());
                logger.warning("Numero identificacion: " + crearClienteRow.getNumeroIdentificacion());
                logger.warning("Oficina: " + crearClienteRow.getOficina());
                logger.warning("Direccion: " + crearClienteRow.getDireccion());
                logger.warning("BIC Code: " + crearClienteRow.getBicCode());
                
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

                Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                
                // Add your code to call the desired methods.
                request = new CrearClienteRequestType();
                fenixAM.getTareaProcesoBpmVO().getEtapaTareaByIdTareaBpm(0);
                
                /*
                this.getTareaProcesoBpmVO().getEtapaTareaByIdTareaBpm(idTareaBpm)
                 */
                
                try{
                    datatypeFactory = DatatypeFactory.newInstance();
                } catch (javax.xml.datatype.DatatypeConfigurationException e) { logger.log(ADFLogger.ERROR, e.getMessage()); }
                
                //GregorianCalendar gregorianCalendar = new GregorianCalendar();
                //XMLGregorianCalendar now = datatypeFactory.newXMLGregorianCalendar(gregorianCalendar);
                
                //cliente.setFechaRegistro(now);
                cliente.setEjecutivo(crearClienteRow.getEjecutivo()); // usuario en sesión, ej. "ERUBIO"
                // cliente.setComentarioAprobacion(""); // TODO cambiar este hard code
                
                //SOAP razonSocial
                logger.log(ADFLogger.TRACE, "Razon social:"+crearClienteRow.getRazonSocial());
                System.out.println("Razon Social:"+crearClienteRow.getRazonSocial());
                
                cliente.setRazonSocial(crearClienteRow.getRazonSocial());
                
                logger.log(ADFLogger.WARNING, "Direcccion:"+crearClienteRow.getDireccion());
                System.out.println("Direccion:"+crearClienteRow.getDireccion());
                cliente.setDireccion(crearClienteRow.getDireccion());
                
                logger.log(ADFLogger.WARNING, "Bic Code:"+crearClienteRow.getBicCode());
                System.out.println("BIC Code:"+crearClienteRow.getBicCode());
                cliente.setBicCode(crearClienteRow.getBicCode());
                
                //SOAP abreviatura
                logger.log(ADFLogger.TRACE, "Abreviatura:"+crearClienteRow.getAbreviatura());
                cliente.setAbreviatura(crearClienteRow.getAbreviatura());
                //SOAP tipoPersona
                logger.log(ADFLogger.TRACE, "Tipo persona:"+crearClienteRow.getTipoPersona());
                tipoPersona.setId(crearClienteRow.getTipoPersona().longValue());
                cliente.setTipoPersona(tipoPersona);
                //SOAP tipoCliente
                logger.log(ADFLogger.TRACE, "Tipo cliente:"+crearClienteRow.getTipoCliente());
                Catalogo catalogo = new Catalogo();
                catalogo.setId(crearClienteRow.getTipoCliente() != null ? crearClienteRow.getTipoCliente().longValue() : null);
                cliente.setTipoCliente(catalogo);
                //SOAP sector  *** No llega al servicio ***
                logger.log(ADFLogger.TRACE, "Valor de sector:"+crearClienteRow.getSector());
                sector.setId(crearClienteRow.getSector().longValue());
                cliente.setSector(sector);
                //SOAP tipoInstitucion
                logger.log(ADFLogger.TRACE, "Valor de tipo institucion:"+crearClienteRow.getTipoInstitucion().longValue());
                tipoInstitucion.setId(crearClienteRow.getTipoInstitucion().longValue());
                cliente.setTipoInstitucion(tipoInstitucion);
                //SOAP pais
                logger.log(ADFLogger.TRACE, "Valor de pais:"+crearClienteRow.getPais().longValue());
                pais.setId(crearClienteRow.getPais().longValue());
                cliente.setPais(pais);
                //SOAP grupoEconomico
                logger.log(ADFLogger.TRACE, "Valor de grupoEconomico:"+crearClienteRow.getGrupoEconomico().longValue());
                grupo.setId(crearClienteRow.getGrupoEconomico().longValue());
                // this value no found in VO, need recovery from LOV
                logger.log(ADFLogger.TRACE, "Valor de conExterno:"+codExterno);
                // set value empty 
                grupo.setCodigoExterno("");
                //**************************************************
                cliente.setGrupoEconomico(grupo);
                //SOAP numeroIdentificacion
                logger.log(ADFLogger.TRACE, "Valor de numero de identificacion:"+crearClienteRow.getNumeroIdentificacion());
                cliente.setNumeroIdentificacion(crearClienteRow.getNumeroIdentificacion());
                //SOAP tipoIdentificacion
                logger.log(ADFLogger.TRACE, "Valor de tipo de identificacion:"+crearClienteRow.getTipoIdentificacion());
                cliente.setTipoIdentificacion(crearClienteRow.getTipoIdentificacion());
                //SOAP oficina
                logger.log(ADFLogger.TRACE, "Valor de oficina:"+crearClienteRow.getOficina().longValue());
                oficina.setId(crearClienteRow.getOficina().longValue());
                cliente.setOficina(oficina);
                //SOAP status
                cliente.setStatus(String.valueOf(BANESTATUS_TRUE)); // TODO cambiar este hard code
                
                //Campos de SCR
                if(crearClienteRow.getScrId() != null){
                    Catalogo cat = new Catalogo();
                    cat.setId(crearClienteRow.getScrId());
                    cliente.setSCR(cat);
                }
                
                //Campos de Perspectiva
                if(crearClienteRow.getPerspectivaId() != null){
                    Catalogo cat = new Catalogo();
                    cat.setId(crearClienteRow.getPerspectivaId());
                    cliente.setPerspectiva(cat);
                }
                
                //Campos de Mora
                if(crearClienteRow.getEnMora() != null){
                    cliente.setEnMora(crearClienteRow.getEnMora());
                }
                
                //Campo indicador de envio de aviso de cobro
                if(crearClienteRow.getReqEnvioAvisoCobroAut() != null){
                    BigDecimal indicador = BigDecimal.ZERO;
                    if (null != crearClienteRow.getReqEnvioAvisoCobroAut()) {
                        indicador = (crearClienteRow.getReqEnvioAvisoCobroAut() ? BigDecimal.ONE : BigDecimal.ZERO);
                    }
                    
                    cliente.setRequiereEnvioAutomatico(indicador);
                }
                
                //Indicador de deterioro
                if(crearClienteRow.getEsDeteriorado() != null){
                    cliente.setDeteriorado(crearClienteRow.getEsDeteriorado());
                }
                
                request.setCliente(cliente);
                
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CREAR_CLIENTE);
                response = clientePT.crearCliente(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CREAR_CLIENTE, horaInicio);

                result=response.getResultado();
                if(result.getResult().value()=="OK"){
                    clienteResultado=response.getCliente();
                    idClienteResultado.put("idCliente",clienteResultado.getIdCliente());
                }else{
                    idClienteResultado.put("idCliente",null);
                }
            }else{
                logger.severe("Registro de cliente no encontrado");
            }
            
            idClienteResultado.put("result", result);
        }
        
        return idClienteResultado;
    }    
    /**
     * @autor Damacio Cordoba Medina
     * @since 28/12/2015
     * Método utilizado setear los valores de un cliente
     */
    
    public void inicializarDetalleCliente(){
        
        logger.warning("inicializarDetalleCliente.");
        
        crearRowCliente();
        Long idClienteContacto = null;
        ConsultaContactosClienteVOImpl consultaContactosClienteVO = null;
        
        BuscarClienteVORowImpl clienteSeleccioando      
        = (BuscarClienteVORowImpl)this.getRootApplicationModule().findViewObject("BuscarClienteVO").getCurrentRow();
        AdminContactosVOImpl   adminContactos           
        = (AdminContactosVOImpl)this.getRootApplicationModule().findViewObject("AdminContactosVO");
        adminContactos.clearCache();
        OperacionesClienteVOImpl   operacionesCliente   
        = (OperacionesClienteVOImpl)this.getRootApplicationModule().findViewObject("OperacionesClienteVO");
        operacionesCliente.clearCache();
        
        ConsultarClientesByIdClienteRequestType request = null;
        
        ConsultarClienteResponseType response = null;
        FenixAMImpl    fenixAM          = null;
        List<Cliente>  cliResponse      = new ArrayList<Cliente>();
        List<Contactos> conResponse     = new ArrayList<Contactos>();
        List<EntidadMinimaOperacion>  operaciones    = new ArrayList<EntidadMinimaOperacion>();
        
        Resultado      result           = null;
        
        if (this.getCurrentRow() != null) {            
            try    
            {
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                
                // Service declared
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);
                Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                
                // Add your code to call the desired methods.
                request = new ConsultarClientesByIdClienteRequestType();
                
                fenixAM.getTareaProcesoBpmVO().getEtapaTareaByIdTareaBpm(0);
                request.setIdCliente(clienteSeleccioando.getIdCliente()); 
                
                //Campos opcionales pero requeridos para obtener mas informacion de la nueva cabecera de cliente en F3
                request.setInfoDeterioro(true);
                request.setInfoMora(true);
                
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_INICIALIZAR_DETALLE_CLIENTE);
                response = clientePT.consultarByIdCliente(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_INICIALIZAR_DETALLE_CLIENTE, horaInicio);
                
                result=response.getResultado();
                if(null!=result.getResult()&&result.getResult().value()=="ERROR"){
                    logger.log(ADFLogger.ERROR, "Error al consultar el cliente");
                    throw new Exception(null!=result.getMessage()?result.getMessage().toString():"Error al consultar los valores del cliente seleccionado.");
                }
                else {
                    cliResponse = response.getCliente();                    
                }
            
            //Se recorren los datos del cliente...            
            for(Cliente cli : cliResponse){
                
                CrearClienteVORowImpl cliente = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
                
                logger.log(ADFLogger.TRACE, "IdCliente:"+cli.getIdCliente());
                cliente.setIdCliente(cli.getIdCliente());
                //
                idClienteContacto = cli.getIdCliente();
                
                logger.log(ADFLogger.TRACE, "IdFlexcube:"+cli.getIdFacturador());
                cliente.setIdFlexcube(cli.getIdFacturador());
                
                logger.log(ADFLogger.TRACE, "RazonSocial:"+cli.getRazonSocial());
                cliente.setRazonSocial(cli.getRazonSocial());
                
                logger.log(ADFLogger.TRACE, "Tipopersonaid:"+cli.getTipoPersona().getId());
                cliente.setTipoPersona(new Integer(cli.getTipoPersona().getId()!=null
                                       ?cli.getTipoPersona().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Tipoinstitucionid:"+cli.getTipoInstitucion().getId());
                cliente.setTipoInstitucion(new Integer(cli.getTipoInstitucion().getId()!=null
                                           ?cli.getTipoInstitucion().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Grupoeconomicoid:"+cli.getGrupoEconomico().getId());
                cliente.setGrupoEconomico(new Integer(cli.getGrupoEconomico().getId()!=null
                                            ?cli.getGrupoEconomico().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Oficinaid:"+cli.getOficina().getId());
                cliente.setOficina(new Integer(cli.getOficina().getId()!=null
                                               ?cli.getOficina().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Abreviatura:"+cli.getAbreviatura());
                cliente.setAbreviatura(cli.getAbreviatura());
                
                logger.log(ADFLogger.TRACE, "Sectorid:"+cli.getSector().getId());
                cliente.setSector(new Integer(cli.getSector().getId()!=null?cli.getSector().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Paisid:"+cli.getPais().getId());
                cliente.setPais(new Integer(cli.getPais().getId()!=null?cli.getPais().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "NumeroIdentificacion:"+cli.getNumeroIdentificacion());
                cliente.setNumeroIdentificacion(cli.getNumeroIdentificacion());
                
                logger.log(ADFLogger.TRACE, "Tipoclienteid:"+cli.getTipoCliente());
                cliente.setTipoCliente(cli.getTipoCliente() != null ? (cli.getTipoCliente().getId() != null ? cli.getTipoCliente().getId() : null) : null);
                
                logger.log(ADFLogger.TRACE, "DiaPago:"+cli.getDiaPago()); 
                if(clienteSeleccioando != null){
                    cliente.setDiaPago(clienteSeleccioando.getDiaPago());        
                }
                
                logger.log(ADFLogger.TRACE, "Ejecutivo:"+cli.getEjecutivo()); 
                if(clienteSeleccioando != null){
                    cliente.setEjecutivo(clienteSeleccioando.getEjecutivo());        
                }
                /*Cambios DEVF3_T2T3*/
                if(cliente.getEjecutivo() != null){
                    logger.warning("Se obtiene el valor devuelto del servicio del campo Ejecutivo: " + cliente.getEjecutivo());
                    fenixAM.getCambiarResponsableClienteVO().crearRowResponsableCliente(cliente.getEjecutivo());
                }
                else{
                    logger.warning("Se obtiene el valor devuelto del servicio del campo Ejecutivo: null");
                    fenixAM.getCambiarResponsableClienteVO().createRow().setAttribute("Responsable", null);
                }
                /*Finaliza Cambios DEVF3_T2T3*/
                
                //Campos de SCR
                if(cli.getSCR() != null){
                    logger.warning("SCR Id: " + cli.getSCR().getId());
                    cliente.setScrId(cli.getSCR().getId());
                    cliente.setScrDescripcion(cli.getSCR().getDescripcion());
                }else{
                    logger.warning("SCR no recibido");
                }
                
                if (cli.getBicCode() != null && !cli.getBicCode().isEmpty()) {
                    cliente.setBicCode(cli.getBicCode());
                }
                if (cli.getDireccion() != null && !cli.getDireccion().isEmpty()) {
                    cliente.setDireccion(cli.getDireccion());   
                }
                
                //Campos de Perspectiva1
                if(cli.getPerspectiva() != null){
                    logger.warning("Perspectiva Id: " + cli.getPerspectiva().getId());
                    cliente.setPerspectivaId(cli.getPerspectiva().getId());
                    cliente.setPerspectivaDescripcion(cli.getPerspectiva().getDescripcion());
                }else{
                    logger.warning("Perspectiva no recibida");
                }
                
                //Campos de Mora
                if(cli.isEnMora() != null){
                    logger.warning("En Mora: " + cli.isEnMora());
                    cliente.setEnMora(cli.isEnMora());
                    if (cli.isEnMora()) {
                        cliente.setDiasMora(cli.getMora().getDias());    
                    }
                }else{
                    logger.warning("Indicador de Mora no recibido");
                }
                
                //Campo indicador de envio de aviso de cobro
                if(cli.getRequiereEnvioAutomatico() != null){
                    logger.warning("Requiere envio de aviso de cobro automatico: " + cli.getRequiereEnvioAutomatico().intValue());
                    Boolean indicador = Boolean.FALSE;
                    if (null != cli.getRequiereEnvioAutomatico()) {
                        indicador = (cli.getRequiereEnvioAutomatico().intValue()>0 ? false : true);
                    }
                    cliente.setReqEnvioAvisoCobroAut(indicador);
                }else{
                    logger.warning("Indicador de Requiere envio de aviso de cobro automatico no recibido");
                }
                
                //Indicador de deterioro
                if(cli.isDeteriorado() != null){
                    logger.warning("Esta en Deterioro: " + cli.isDeteriorado());
                    cliente.setEsDeteriorado(cli.isDeteriorado());
                }else{
                    logger.warning("Indicador de Cliente en Deterioro no recibido");
                }
                
                //Requiere envio automatico
                BigDecimal envioAutomatico = cli.getRequiereEnvioAutomatico();
                if(envioAutomatico != null){
                    logger.warning("Requiere envio automatico: " + cli.isDeteriorado());
                    cliente.setReqEnvioAvisoCobroAut((envioAutomatico.intValue() > 0 ? false : true));
                }else{
                    logger.warning("Indicador de Requiere envio automatico no recibido");
                }
                
                //Variable aviso de cobro
                Integer recibeAvisoCobro;
                
                FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                consultaContactosClienteVO = fenixAMImpl.getConsultaContactosClienteVO();
                if(null != consultaContactosClienteVO){
                    consultaContactosClienteVO.setvarIdCliente(idClienteContacto);
                    try{
                        logger.warning("Ejecutando query consultaContactosClienteVO");
                        consultaContactosClienteVO.executeQuery();
                    }catch(Exception e){
                        logger.warning("Error al ejecutar query");
                    }
                }
                
                //Se asignan los contactos
                conResponse = cli.getContactos();                
                for(Contactos contactos : conResponse){
                    for(Contacto cont : contactos.getContacto()) {
                        AdminContactosVORowImpl ac =  (AdminContactosVORowImpl)adminContactos.crearContacto(Long.toString(cont.getIdCliente()));
                        logger.log(ADFLogger.TRACE, "IdContacto:"+cont.getIdContacto());
                        ac.setIdContacto(cont.getIdContacto());
                        
                        logger.log(ADFLogger.TRACE, "IdCliente:"+cont.getIdCliente());
                        ac.setIdCliente(cont.getIdCliente());
                        
                        logger.log(ADFLogger.TRACE, "Cargo:"+cont.getCargo());
                        ac.setCargo(cont.getCargo());
                        
                        logger.log(ADFLogger.TRACE, "Correo Electronico:"+cont.getCorreoElectronico());
                        ac.setCorreoElectronico(cont.getCorreoElectronico());
                        
                        logger.log(ADFLogger.TRACE, "Nombre:"+cont.getNombre());
                        ac.setNombre(cont.getNombre());
                        
                        logger.log(ADFLogger.TRACE, "Telefono:"+cont.getTelefono());
                        ac.setTelefono(cont.getTelefono());
                        
                        RowSetIterator iterator = consultaContactosClienteVO.createRowSetIterator(null);
                        iterator.reset();
                        
                        Integer avisoCobro = null;
                        while (iterator.hasNext()) {
                            Row row = iterator.next();
                            Long idContactoRow = (Long) row.getAttribute("IdContacto");
                            if (idContactoRow.compareTo(cont.getIdContacto()) == 0) {
                                logger.warning("idContactoRow" + idContactoRow);
                                logger.warning("getIdContacto" + cont.getIdContacto());
                                if (row.getAttribute("RecibeAvisoCobro") != null) {
                                    avisoCobro = (Integer) row.getAttribute("RecibeAvisoCobro");
                                    logger.warning("RecibeAvisoCobro" + avisoCobro);
                                    logger.log(ADFLogger.TRACE, "RecibeAvisoCobro: " + avisoCobro);
                                    if (avisoCobro.compareTo(1) == 0) {
                                        ac.setRecibeAvisoCobro(Boolean.TRUE);    
                                    }
                                } else {
                                    logger.warning("RecibeAvisoCobro RecibeAvisoCobro");
                                    ac.setRecibeAvisoCobro(Boolean.FALSE);
                                }
                            }
                        }
                        iterator.closeRowSetIterator();
                    }
                }
                
                //Se asignan los datos de las operaciones
                operaciones = response.getOperaciones();
                for (EntidadMinimaOperacion op : operaciones){
                    logger.log(ADFLogger.TRACE, "Se asignan Operaciones...");
                    OperacionesClienteVORowImpl oc = (OperacionesClienteVORowImpl)operacionesCliente.crearOperacion();
                    
                    logger.log(ADFLogger.TRACE, "IdOperacion:"+op.getIdOperacion());
                    oc.setIdOperacion(op.getIdOperacion());
                    
                    logger.log(ADFLogger.TRACE, "Cliente:"+op.getCliente());
                    oc.setCliente(op.getCliente());
                    
                    logger.log(ADFLogger.TRACE, "Estado:"+op.getEstado());
                    oc.setEstado(op.getEstado());
                    
                    logger.log(ADFLogger.TRACE, "Etapa:"+op.getEtapa());
                    oc.setEtapa(op.getEtapa());
                    
                    logger.log(ADFLogger.TRACE, "Nombre:"+op.getNombre());
                    oc.setNombre(op.getNombre());
                    
                    logger.log(ADFLogger.TRACE, "Pais:"+op.getPais());
                    oc.setPais(op.getPais());
                    
                    logger.log(ADFLogger.TRACE, "Producto:"+op.getProducto());
                    oc.setProducto(op.getProducto());
                    
                    logger.log(ADFLogger.TRACE, "Responsable:"+op.getResponsable());
                    oc.setResponsable(op.getResponsable());                    
                }
            }
        }catch(Exception e){
            JboException ex = new JboException(e);
            throw ex;
        }  
        }
    }
    
    
    public void limpiarVO(){
        logger.warning("limpiando VO");
            this.clearCache(); // Limpiamos VO
    }
    
    
    public void comprobarDatosVO(){
        logger.warning("comprobarDatos crearClienteVO");
        if(getEstimatedRowCount() > 0){
            logger.warning("ok datos encontrados");
        }else{
            logger.warning("no se encontro row en crearclienteVO recuperando datos...");
            inicializarDetalleCliente();
        }
        
    }
    
    
    public Row consultarDetalleCliente(){
        
        logger.warning("Inicia metodo consultaDetalleCliente");
        
        crearRowCliente();
        Long idClienteContacto = null;
        ConsultaContactosClienteVOImpl consultaContactosClienteVO = null;
        CrearClienteVORowImpl cliente = null;
        
        BuscarClienteVORowImpl clienteSeleccioando      
        = (BuscarClienteVORowImpl)this.getRootApplicationModule().findViewObject("BuscarClienteVO").getCurrentRow();
        AdminContactosVOImpl   adminContactos           
        = (AdminContactosVOImpl)this.getRootApplicationModule().findViewObject("AdminContactosVO");
        adminContactos.clearCache();
        OperacionesClienteVOImpl   operacionesCliente   
        = (OperacionesClienteVOImpl)this.getRootApplicationModule().findViewObject("OperacionesClienteVO");
        operacionesCliente.clearCache();
        
        ConsultarClientesByIdClienteRequestType request = null;
        
        ConsultarClienteResponseType response = null;
        FenixAMImpl    fenixAM          = null;
        List<Cliente>  cliResponse      = new ArrayList<Cliente>();
        List<Contactos> conResponse     = new ArrayList<Contactos>();
        List<EntidadMinimaOperacion>  operaciones    = new ArrayList<EntidadMinimaOperacion>();
        
        Resultado      result           = null;
        
        if (this.getCurrentRow() != null) {            
            try    
            {
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                
                // Service declared
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);
                Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                
                // Add your code to call the desired methods.
                request = new ConsultarClientesByIdClienteRequestType();
                
                fenixAM.getTareaProcesoBpmVO().getEtapaTareaByIdTareaBpm(0);
                request.setIdCliente(clienteSeleccioando.getIdCliente()); 
                
                //Campos opcionales pero requeridos para obtener mas informacion de la nueva cabecera de cliente en F3
                request.setInfoDeterioro(true);
                request.setInfoMora(true);
                
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_INICIALIZAR_DETALLE_CLIENTE);
                response = clientePT.consultarByIdCliente(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_INICIALIZAR_DETALLE_CLIENTE, horaInicio);
                
                result=response.getResultado();
                if(null!=result.getResult()&&result.getResult().value()=="ERROR"){
                    logger.log(ADFLogger.ERROR, "Error al consultar el cliente");
                    throw new Exception(null!=result.getMessage()?result.getMessage().toString():"Error al consultar los valores del cliente seleccionado.");
                }
                else {
                    cliResponse = response.getCliente();                    
                }
            
            //Se recorren los datos del cliente...            
            for(Cliente cli : cliResponse){
                
                cliente = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
                
                logger.log(ADFLogger.TRACE, "IdCliente:"+cli.getIdCliente());
                cliente.setIdCliente(cli.getIdCliente());
                //
                idClienteContacto = cli.getIdCliente();
                
                logger.log(ADFLogger.TRACE, "IdFlexcube:"+cli.getIdFacturador());
                cliente.setIdFlexcube(cli.getIdFacturador());
                
                logger.log(ADFLogger.TRACE, "RazonSocial:"+cli.getRazonSocial());
                cliente.setRazonSocial(cli.getRazonSocial());
                
                logger.log(ADFLogger.TRACE, "Tipopersonaid:"+cli.getTipoPersona().getId());
                cliente.setTipoPersona(new Integer(cli.getTipoPersona().getId()!=null
                                       ?cli.getTipoPersona().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Tipoinstitucionid:"+cli.getTipoInstitucion().getId());
                cliente.setTipoInstitucion(new Integer(cli.getTipoInstitucion().getId()!=null
                                           ?cli.getTipoInstitucion().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Grupoeconomicoid:"+cli.getGrupoEconomico().getId());
                cliente.setGrupoEconomico(new Integer(cli.getGrupoEconomico().getId()!=null
                                            ?cli.getGrupoEconomico().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Oficinaid:"+cli.getOficina().getId());
                cliente.setOficina(new Integer(cli.getOficina().getId()!=null
                                               ?cli.getOficina().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Abreviatura:"+cli.getAbreviatura());
                cliente.setAbreviatura(cli.getAbreviatura());
                
                logger.log(ADFLogger.TRACE, "Sectorid:"+cli.getSector().getId());
                cliente.setSector(new Integer(cli.getSector().getId()!=null?cli.getSector().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "Paisid:"+cli.getPais().getId());
                cliente.setPais(new Integer(cli.getPais().getId()!=null?cli.getPais().getId().toString():"-1"));
                
                logger.log(ADFLogger.TRACE, "NumeroIdentificacion:"+cli.getNumeroIdentificacion());
                cliente.setNumeroIdentificacion(cli.getNumeroIdentificacion());
                
                logger.log(ADFLogger.TRACE, "Tipoclienteid:"+cli.getTipoCliente());
                cliente.setTipoCliente(cli.getTipoCliente() != null ? (cli.getTipoCliente().getId() != null ? cli.getTipoCliente().getId() : null) : null);
                
                logger.log(ADFLogger.TRACE, "DiaPago:"+cli.getDiaPago()); 
                if(clienteSeleccioando != null){
                    cliente.setDiaPago(clienteSeleccioando.getDiaPago());        
                }
                
                logger.log(ADFLogger.TRACE, "Ejecutivo:"+cli.getEjecutivo()); 
                if(clienteSeleccioando != null){
                    cliente.setEjecutivo(clienteSeleccioando.getEjecutivo());        
                }
                /*Cambios DEVF3_T2T3*/
                if(cliente.getEjecutivo() != null){
                    logger.warning("Se obtiene el valor devuelto del servicio del campo Ejecutivo: " + cliente.getEjecutivo());
                    fenixAM.getCambiarResponsableClienteVO().crearRowResponsableCliente(cliente.getEjecutivo());
                }
                else{
                    logger.warning("Se obtiene el valor devuelto del servicio del campo Ejecutivo: null");
                    fenixAM.getCambiarResponsableClienteVO().createRow().setAttribute("Responsable", null);
                }
                /*Finaliza Cambios DEVF3_T2T3*/
                
                //Campos de SCR
                if(cli.getSCR() != null){
                    logger.warning("SCR Id: " + cli.getSCR().getId());
                    cliente.setScrId(cli.getSCR().getId());
                    cliente.setScrDescripcion(cli.getSCR().getDescripcion());
                }else{
                    logger.warning("SCR no recibido");
                }
                
                //Campos de Perspectiva
                if(cli.getPerspectiva() != null){
                    logger.warning("Perspectiva Id: " + cli.getPerspectiva().getId());
                    cliente.setPerspectivaId(cli.getPerspectiva().getId());
                    cliente.setPerspectivaDescripcion(cli.getPerspectiva().getDescripcion());
                }else{
                    logger.warning("Perspectiva no recibida");
                }
                
                //Campos de Mora
                if(cli.isEnMora() != null){
                    logger.warning("En Mora: " + cli.isEnMora());
                    cliente.setEnMora(cli.isEnMora());
                    if (cli.isEnMora()) {
                        cliente.setDiasMora(cli.getMora().getDias());    
                    }
                }else{
                    logger.warning("Indicador de Mora no recibido");
                }
                
                //Campo indicador de envio de aviso de cobro
                if(cli.getRequiereEnvioAutomatico() != null){
                    logger.warning("Requiere envio de aviso de cobro automatico: " + cli.getRequiereEnvioAutomatico().intValue());
                    Boolean indicador = Boolean.FALSE;
                    if (null != cli.getRequiereEnvioAutomatico()) {
                        indicador = (cli.getRequiereEnvioAutomatico().intValue()>0 ? false : true);
                    }
                    cliente.setReqEnvioAvisoCobroAut(indicador);
                }else{
                    logger.warning("Indicador de Requiere envio de aviso de cobro automatico no recibido");
                }
                
                //Indicador de deterioro
                if(cli.isDeteriorado() != null){
                    logger.warning("Esta en Deterioro: " + cli.isDeteriorado());
                    cliente.setEsDeteriorado(cli.isDeteriorado());
                }else{
                    logger.warning("Indicador de Cliente en Deterioro no recibido");
                }
                
                //Requiere envio automatico
                BigDecimal envioAutomatico = cli.getRequiereEnvioAutomatico();
                if(envioAutomatico != null){
                    logger.warning("Requiere envio automatico: " + cli.isDeteriorado());
                    cliente.setReqEnvioAvisoCobroAut((envioAutomatico.intValue() > 0 ? false : true));
                }else{
                    logger.warning("Indicador de Requiere envio automatico no recibido");
                }
                
                if (cli.getBicCode() != null && !cli.getBicCode().isEmpty()) {
                    cliente.setBicCode(cli.getBicCode());
                }
                
                if (cli.getDireccion() != null && !cli.getDireccion().isEmpty()) {
                    cliente.setDireccion(cli.getDireccion());
                }
                
                //Variable aviso de cobro
                Integer recibeAvisoCobro;
                
                FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                consultaContactosClienteVO = fenixAMImpl.getConsultaContactosClienteVO();
                if(null != consultaContactosClienteVO){
                    consultaContactosClienteVO.setvarIdCliente(idClienteContacto);
                    try{
                        logger.warning("Ejecutando query consultaContactosClienteVO");
                        consultaContactosClienteVO.executeQuery();
                    }catch(Exception e){
                        logger.warning("Error al ejecutar query");
                    }
                }
                
                //Se asignan los contactos
                conResponse = cli.getContactos();                
                for(Contactos contactos : conResponse){
                    for(Contacto cont : contactos.getContacto()) {
                        AdminContactosVORowImpl ac =  (AdminContactosVORowImpl)adminContactos.crearContacto(Long.toString(cont.getIdCliente()));
                        logger.log(ADFLogger.TRACE, "IdContacto:"+cont.getIdContacto());
                        ac.setIdContacto(cont.getIdContacto());
                        
                        logger.log(ADFLogger.TRACE, "IdCliente:"+cont.getIdCliente());
                        ac.setIdCliente(cont.getIdCliente());
                        
                        logger.log(ADFLogger.TRACE, "Cargo:"+cont.getCargo());
                        ac.setCargo(cont.getCargo());
                        
                        logger.log(ADFLogger.TRACE, "Correo Electronico:"+cont.getCorreoElectronico());
                        ac.setCorreoElectronico(cont.getCorreoElectronico());
                        
                        logger.log(ADFLogger.TRACE, "Nombre:"+cont.getNombre());
                        ac.setNombre(cont.getNombre());
                        
                        logger.log(ADFLogger.TRACE, "Telefono:"+cont.getTelefono());
                        ac.setTelefono(cont.getTelefono());
                        
                        RowSetIterator iterator = consultaContactosClienteVO.createRowSetIterator(null);
                        iterator.reset();
                        
                        Integer avisoCobro = null;
                        while (iterator.hasNext()) {
                            Row row = iterator.next();
                            Long idContactoRow = (Long) row.getAttribute("IdContacto");
                            if (idContactoRow.compareTo(cont.getIdContacto()) == 0) {
                                logger.warning("idContactoRow" + idContactoRow);
                                logger.warning("getIdContacto" + cont.getIdContacto());
                                if (row.getAttribute("RecibeAvisoCobro") != null) {
                                    avisoCobro = (Integer) row.getAttribute("RecibeAvisoCobro");
                                    logger.warning("RecibeAvisoCobro" + avisoCobro);
                                    logger.log(ADFLogger.TRACE, "RecibeAvisoCobro: " + avisoCobro);
                                    if (avisoCobro.compareTo(1) == 0) {
                                        ac.setRecibeAvisoCobro(Boolean.TRUE);    
                                    }
                                } else {
                                    logger.warning("RecibeAvisoCobro RecibeAvisoCobro");
                                    ac.setRecibeAvisoCobro(Boolean.FALSE);
                                }
                            }
                        }
                        iterator.closeRowSetIterator();
                    }
                }
                
                //Se asignan los datos de las operaciones
                operaciones = response.getOperaciones();
                for (EntidadMinimaOperacion op : operaciones){
                    logger.log(ADFLogger.TRACE, "Se asignan Operaciones...");
                    OperacionesClienteVORowImpl oc = (OperacionesClienteVORowImpl)operacionesCliente.crearOperacion();
                    
                    logger.log(ADFLogger.TRACE, "IdOperacion:"+op.getIdOperacion());
                    oc.setIdOperacion(op.getIdOperacion());
                    
                    logger.log(ADFLogger.TRACE, "Cliente:"+op.getCliente());
                    oc.setCliente(op.getCliente());
                    
                    logger.log(ADFLogger.TRACE, "Estado:"+op.getEstado());
                    oc.setEstado(op.getEstado());
                    
                    logger.log(ADFLogger.TRACE, "Etapa:"+op.getEtapa());
                    oc.setEtapa(op.getEtapa());
                    
                    logger.log(ADFLogger.TRACE, "Nombre:"+op.getNombre());
                    oc.setNombre(op.getNombre());
                    
                    logger.log(ADFLogger.TRACE, "Pais:"+op.getPais());
                    oc.setPais(op.getPais());
                    
                    logger.log(ADFLogger.TRACE, "Producto:"+op.getProducto());
                    oc.setProducto(op.getProducto());
                    
                    logger.log(ADFLogger.TRACE, "Responsable:"+op.getResponsable());
                    oc.setResponsable(op.getResponsable());                    
                }
            }
        }catch(Exception e){
            JboException ex = new JboException(e);
            throw ex;
        }  
        }
        logger.warning("termina metodo consultaDetalleCliente");     
        return cliente;
    }
    
    
    /**
     * @autor Damacio Cordoba Medina
     * @since 28/12/2015
     * Método utilizado convertir cliente a definitivo
     */
    public String inicioAdministrarCliente() {
        logger.warning("Inside inicioAdministrarCliente.");
        
        InicioAdministrarCliente request = null;
        Resultado      response = null;
        FenixAMImpl fenixAM = null;
        
        try {            
                if (this.getRowAtRangeIndex(0) != null) {
                    
                    ClienteType cliente = new ClienteType();
                    Catalogo    tipoPersona = new Catalogo();
                    Catalogo    sector = new Catalogo();
                    Catalogo    tipoInstitucion = new Catalogo();
                    Catalogo    pais = new Catalogo();
                    Catalogo    grupoEconomico = new Catalogo();
                    Catalogo    oficina = new Catalogo();
                    Catalogo    tipoCliente = new Catalogo();
                    
                    fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                    
                    // Service declared
                    CrearClienteVORowImpl crearClienteRow = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
                    String wsdl = fenixAM.getWsdl(IWsdlLocation.PROCESOS_ALTERNOS);
                    
                    ProcesosAlternosBindingQSService procesosAlternosQSService = IWsdlLocation.Service.getInstance(ProcesosAlternosBindingQSService.class, wsdl);
                    ProcesosAlternosPortType procesosPT = procesosAlternosQSService.getProcesosAlternosBindingQSPort();
                    
                    // Add your code to call the desired methods.
                    request = new InicioAdministrarCliente();
                    
                    fenixAM.getTareaProcesoBpmVO().getEtapaTareaByIdTareaBpm(0);
                    
                    cliente.setIdCliente(crearClienteRow.getIdCliente().intValue());
                    if (crearClienteRow.getIdFlexcube()!=null)
                        cliente.setIdFlexCube(crearClienteRow.getIdFlexcube());
                    cliente.setRazonSocial(crearClienteRow.getRazonSocial());
                    cliente.setAbreviatura(crearClienteRow.getAbreviatura());
                    if (crearClienteRow.getDiaPago()!=null)
                        cliente.setDiaPago(crearClienteRow.getDiaPago());
                    tipoPersona.setId(crearClienteRow.getTipoPersona().longValue());
                    cliente.setIdTipoPersona(tipoPersona);
                    
                    tipoCliente.setId(crearClienteRow.getTipoCliente().longValue());
                    cliente.setIdTipoCliente(tipoCliente);
                    
                    sector.setId(crearClienteRow.getSector().longValue());            
                    cliente.setIdSector(sector);
                    
                    if (crearClienteRow.getTipoInstitucion() != null) {
                        tipoInstitucion.setId(crearClienteRow.getTipoInstitucion().longValue());
                        cliente.setIdTipoInstitucion(tipoInstitucion);
                    }
                    pais.setId(crearClienteRow.getPais().longValue());
                    cliente.setIdPais(pais);
                    
                    grupoEconomico.setId(crearClienteRow.getGrupoEconomico().longValue());
                    cliente.setIdGrupoEconomico(grupoEconomico);
                    
                    cliente.setTipoIdentificacion(crearClienteRow.getTipoIdentificacion());
                    cliente.setNumeroIdentificacion(crearClienteRow.getNumeroIdentificacion());
                    
                    oficina.setId(crearClienteRow.getOficina().longValue());
                    cliente.setIdOficina(oficina);
                    
                    cliente.setAutorizoCliente(crearClienteRow.getAutorizo());
                    cliente.setDiaPago(crearClienteRow.getDiaPago());  
                    
                    cliente.setBicCode(crearClienteRow.getBicCode());
                    cliente.setDireccion(crearClienteRow.getDireccion());
                    
                    /*Cambios DEVF3_T2T3*/
                    
                    logger.warning("Info getUserPrincipalName: "+fenixAM.getUserPrincipalName());
                    if(crearClienteRow.getEjecutivo() != null){
                        cliente.setResponsableCliente(fenixAM.getUserPrincipalName());
                    }
                    /*Finaliza Cambios DEVF3_T2T3*/
                    
                    request.setCliente(cliente);
                    request.setCambioDefinitivo(crearClienteRow.getTipoCliente().toString().equalsIgnoreCase(String.valueOf(TIPO_CLIENTE_PROSPECTO))?true:false);

                    List<ParameterType> lp = new ArrayList<ParameterType>();
                    ParameterType       p = new ParameterType();
                    lp.add(p);
                    
                    Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_INICIO_ADMINISTRAR_CLIENTE);
                    response = procesosPT.inicioAdministrarCliente(cliente,true,null);
                    ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_INICIO_ADMINISTRAR_CLIENTE, horaInicio);
                    
                    if(null!=response.getResult()&&response.getResult().value()=="ERROR"){
                        logger.log(ADFLogger.ERROR, response.getMessage());
                        throw new Exception(response.getMessage());
                    }
                }
       } catch (Exception e) {
            JboException ex = new JboException(e);
            throw ex;
      }
    return null;
    }    

    /**
     * @autor Damacio Cordoba Medina
     * @since 28/12/2015
     * Método utilizado para eliminar un cliente seleccionado
     */
    public String eliminarCliente() {
        logger.log(ADFLogger.TRACE, "Inside eliminarCliente.");
        
        EliminarClienteRequestType request = null;
        EliminarClienteResponseType response = null;
        FenixAMImpl fenixAM = null;
        
        try{
            if (this.getRowAtRangeIndex(0) != null) {            
                Resultado result = null;           
                
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();        
            
                // Service declared
                CrearClienteVORowImpl crearClienteRow = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                
                // Add your code to call the desired methods.
                request = new EliminarClienteRequestType();
            
                
                request.setIdCliente(crearClienteRow.getIdCliente());
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ELIMINAR_CLIENTE);
                response = clientePT.eliminarCliente(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ELIMINAR_CLIENTE, horaInicio);

                result=response.getResultado();
                if(null!=result && null!=result.getResult()&&result.getResult().value()=="ERROR"){
                    logger.log(ADFLogger.ERROR, result.getMessage());
                    throw new Exception(result.getMessage());
                }else
                {
                    this.getRowAtRangeIndex(0).remove();
                }
            }
        } catch (Exception e) {
             JboException ex = new JboException(e);
             throw ex;
        }

    return null;
    }    

     /**
      * @autor Damacio Cordoba Medina
      * @since 11/01/2016
      * Método utilizado para crear un nuevo cliente desde el gestor de clientes
      * 18/01/2016 - Se añade llamada a validación de clientes repetidos
      * 02/23/2016 - Se modifica manejo de mensajes de retorno del servicios Validar Clientes Duplicados
      */
    public String crearClienteGestor(Boolean isValidar) {
        logger.log(ADFLogger.TRACE, "Inside crearCliente.");
        
        HashMap<String, Object> idClienteResultado = null;
        CrearClienteRequestType request = null;
        CrearClienteResponseType response = null;
        ValidarClienteDuplicadoRequestType requestValidar = null;
        ValidarClienteDuplicadoResponseType responseValidar = null;
        FenixAMImpl fenixAM = null;
        String resultado = "OK";

        try {
          
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
            // Service declared
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();        
            Resultado result = null;
            
            CrearClienteVORowImpl crearClienteRow = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
          
            if (this.getRowAtRangeIndex(0) != null) {
                
                if(isValidar)
                {
                  requestValidar = new ValidarClienteDuplicadoRequestType();            
                  
                  requestValidar.setRazonSocial(crearClienteRow.getRazonSocial());
                  requestValidar.setAbreviatura(crearClienteRow.getAbreviatura());
                  
                  Date horaInicio = ModelUtils.logStartWS(logger, requestValidar, FenixModelConstants.WSC_VALIDAR_CLIENTE);
                    responseValidar = clientePT.validarCliente(requestValidar);
                  ModelUtils.logEndWS(logger, responseValidar, FenixModelConstants.WSC_VALIDAR_CLIENTE, horaInicio);
                  
                  result = responseValidar.getResultado();
                }
                
                
                /*
                 * 1.- Ya existe la abreviatura: ERROR, con el cliente de la abreviatura existente.(ERROR)
                 * 2.- Coincidencias en la Razón social: OK, con lista de clientes que coinciden. (ALERTA)
                 * 3.- Sin coincidencias en abreviatura o Razón Social: OK, con mensaje vacío. (EXITO)
                 */
                
                if (!isValidar || 
                      (null!=result && null!=result.getResult()&&result.getResult().value().equalsIgnoreCase("OK")))
                {
                    if(isValidar &&  responseValidar.getCliente()!=null && responseValidar.getCliente().size()>0)
                    {
                      resultado = "COINCIDENCIAS";
                      mapearClientesRepetidos(responseValidar);
                    }
                    else
                    {
                      idClienteResultado = new HashMap<String, Object>();
                      Cliente cliente = new Cliente();
                      Catalogo tipoPersona = new Catalogo();
                      Catalogo sector = new Catalogo();
                      Catalogo tipoInstitucion = new Catalogo();
                      Catalogo pais = new Catalogo();
                      Catalogo grupo = new Catalogo();
                      Catalogo oficina = new Catalogo();
                      Cliente clienteResultado = new Cliente();
                      
                      
                      // Add your code to call the desired methods.
                      request = new CrearClienteRequestType();
                      
                      logger.log(ADFLogger.TRACE, "Razon social:"+crearClienteRow.getRazonSocial());
                      cliente.setRazonSocial(crearClienteRow.getRazonSocial());
                      
                      logger.log(ADFLogger.TRACE, "Abreviatura:"+crearClienteRow.getAbreviatura());
                      cliente.setAbreviatura(crearClienteRow.getAbreviatura());
                      
                      logger.log(ADFLogger.TRACE, "Tipo persona:"+crearClienteRow.getTipoPersona());
                      tipoPersona.setId(crearClienteRow.getTipoPersona().longValue());
                      cliente.setTipoPersona(tipoPersona);
                      
                      logger.log(ADFLogger.TRACE, "Sector:"+crearClienteRow.getSector());
                      sector.setId(crearClienteRow.getSector().longValue());
                      cliente.setSector(sector);
                      
                      logger.log(ADFLogger.TRACE, "Tipo de institucion:"+crearClienteRow.getTipoInstitucion().longValue());
                      tipoInstitucion.setId(crearClienteRow.getTipoInstitucion().longValue());
                      cliente.setTipoInstitucion(tipoInstitucion);
                      
                      logger.log(ADFLogger.TRACE, "Pais:"+crearClienteRow.getPais().longValue());
                      pais.setId(crearClienteRow.getPais().longValue());
                      cliente.setPais(pais);
                      
                      logger.log(ADFLogger.TRACE, "Grupo Economico:"+crearClienteRow.getGrupoEconomico().longValue());
                      grupo.setId(crearClienteRow.getGrupoEconomico().longValue());
                      cliente.setGrupoEconomico(grupo);
                      
                      logger.log(ADFLogger.TRACE, "Numero de identificacion:"+crearClienteRow.getNumeroIdentificacion());
                      cliente.setNumeroIdentificacion(crearClienteRow.getNumeroIdentificacion());
                      
                      logger.log(ADFLogger.TRACE, "Oficina:"+crearClienteRow.getOficina().longValue());
                      oficina.setId(crearClienteRow.getOficina().longValue());
                      cliente.setOficina(oficina);
                        
                      //Campos de SCR
                      if(crearClienteRow.getScrId() != null){
                          Catalogo cat = new Catalogo();
                          cat.setId(crearClienteRow.getScrId());
                          cliente.setSCR(cat);
                      }
                      
                      //Campos de Perspectiva
                      if(crearClienteRow.getPerspectivaId() != null){
                          Catalogo cat = new Catalogo();
                          cat.setId(crearClienteRow.getPerspectivaId());
                          cliente.setPerspectiva(cat);
                      }
                      
                      //Campos de Mora
                      if(crearClienteRow.getEnMora() != null){
                          cliente.setEnMora(crearClienteRow.getEnMora());
                      }
                      
                      //Campo indicador de envio de aviso de cobro
                      if(crearClienteRow.getReqEnvioAvisoCobroAut() != null){
                          BigDecimal reqEnvioAviso = BigDecimal.ZERO;
                          if (null != crearClienteRow.getReqEnvioAvisoCobroAut()) {
                              reqEnvioAviso = (crearClienteRow.getReqEnvioAvisoCobroAut() ? BigDecimal.ONE: BigDecimal.ZERO);
                          }
                          cliente.setRequiereEnvioAutomatico(reqEnvioAviso);
                      }
                      
                      //Indicador de deterioro
                      if(crearClienteRow.getEsDeteriorado() != null){
                          cliente.setDeteriorado(crearClienteRow.getEsDeteriorado());
                      }
                        
                        if (crearClienteRow.getDireccion() != null && !crearClienteRow.getDireccion().isEmpty()) {
                            cliente.setDireccion(crearClienteRow.getDireccion());
                        }
                      
                        if (crearClienteRow.getBicCode() != null && !crearClienteRow.getBicCode().isEmpty()) {
                            cliente.setBicCode(crearClienteRow.getBicCode());
                        }
                      cliente.setEjecutivo(fenixAM.getUserPrincipalName()); 
                      cliente.setRequiereEnvioAutomatico(BigDecimal.ONE);
                      request.setCliente(cliente);
                      
                      Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CREAR_CLIENTE);
                        response = clientePT.crearCliente(request);
                      ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CREAR_CLIENTE, horaInicio);
                      
                      result=response.getResultado();
                      if(result.getResult().value()=="ERROR"){
                          logger.log(ADFLogger.ERROR, result.getMessage());                    
                          throw new Exception(result.getMessage());
                      }else{
                          clienteResultado=response.getCliente();
                          crearClienteRow.setIdCliente(clienteResultado.getIdCliente());    
                          resultado = "OK";                        
                      }
                    }
                }//Fin If que valida si el cliente esta repetido
                else
                {// Si el cliente esta repetido se mapean los datos a una vista para mostrar al usaurio.               
                    resultado = "REPETIDO";
                    //mapearClientesRepetidos(responseValidar);
                }           
            }
        } catch (Exception e) {
             JboException ex = new JboException(e);
             throw ex;
        }
      logger.warning("Resultado: "+resultado);
      return resultado;
    }
     
     private void mapearClientesRepetidos(ValidarClienteDuplicadoResponseType responseValidar)
     {
         FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
         
         ClientesRepetidosVOImpl crVO = fenixAM.getClientesRepetidosVO();
         crVO.clearCache();                
         int idClienteTmp = 1;
         List<Cliente>clientes  = responseValidar.getCliente();
         logger.warning("Contador de clientes repetidos: " + clientes.size());
         
         for ( Cliente c: clientes){ 
             ClientesRepetidosVORowImpl r =  (ClientesRepetidosVORowImpl)crVO.createRow();
             crVO.insertRow(r);                    
             logger.warning("Abreviatura:"+c.getAbreviatura());
             logger.log(ADFLogger.TRACE, "Abreviatura:"+c.getAbreviatura());
             r.setAbreviatura(c.getAbreviatura());
             logger.warning("Razon Social:"+c.getRazonSocial());
             logger.log(ADFLogger.TRACE, "Razon Social:"+c.getRazonSocial());
             r.setRazonSocial(c.getRazonSocial());
             r.setIdCliente(idClienteTmp);
             idClienteTmp++;
         }
         logger.warning("Cantidad de registros en la vista:"+crVO.getRowCount());
     }
    

    /**
     * @autor Damacio Cordoba Medina
     * @since 11/01/2016
     * Método utilizado para modificar un cliente desde el gestor de clientes
     */
    public void actualizarCliente() {
       logger.warning("Inside actualizarCliente");
       ActualizarClienteRequestType request = null;
       ActualizarClienteResponseType response = null;
       FenixAMImpl fenixAM = null;
       
       if (this.getRowAtRangeIndex(0) != null) {
           try
           {
               Resultado result = null;
               
               Cliente cliente = new Cliente();
               Catalogo tipoPersona = new Catalogo();
               Catalogo sector = new Catalogo();
               Catalogo tipoInstitucion = new Catalogo();
               Catalogo pais = new Catalogo();
               Catalogo grupo = new Catalogo();
               Catalogo oficina = new Catalogo();
               //Cliente clienteResultado = new Cliente(); 
           
               fenixAM = (FenixAMImpl)this.getRootApplicationModule();
               // Service declared
               CrearClienteVORowImpl crearClienteRow = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
               
           String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

           Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
               ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
               
               // Add your code to call the desired methods.
               request = new ActualizarClienteRequestType();
           
               
               logger.log(ADFLogger.TRACE, "IdCliente:"+crearClienteRow.getIdCliente());
               cliente.setIdCliente(crearClienteRow.getIdCliente());
               
               logger.log(ADFLogger.TRACE, "Razon social:"+crearClienteRow.getRazonSocial());
               cliente.setRazonSocial(crearClienteRow.getRazonSocial());
               
               logger.log(ADFLogger.TRACE, "Abreviatura:"+crearClienteRow.getAbreviatura());
               cliente.setAbreviatura(crearClienteRow.getAbreviatura());
               
               logger.log(ADFLogger.TRACE, "Tipo persona:"+crearClienteRow.getTipoPersona());
               tipoPersona.setId(crearClienteRow.getTipoPersona().longValue());
               cliente.setTipoPersona(tipoPersona);
               
               logger.log(ADFLogger.TRACE, "Sector:"+crearClienteRow.getSector());
               sector.setId(crearClienteRow.getSector().longValue());
               cliente.setSector(sector);
               
               if (crearClienteRow.getTipoInstitucion() != null) {
                   logger.log(ADFLogger.WARNING, "Tipo de institucion:"+crearClienteRow.getTipoInstitucion().longValue());
                   tipoInstitucion.setId(crearClienteRow.getTipoInstitucion().longValue());
                   cliente.setTipoInstitucion(tipoInstitucion);
               }
               
               logger.log(ADFLogger.TRACE, "Pais:"+crearClienteRow.getPais().longValue());
               pais.setId(crearClienteRow.getPais().longValue());
               cliente.setPais(pais);
               
               logger.log(ADFLogger.TRACE, "Grupo Economico:"+crearClienteRow.getGrupoEconomico().longValue());
               grupo.setId(crearClienteRow.getGrupoEconomico().longValue());
               cliente.setGrupoEconomico(grupo);
               
               logger.log(ADFLogger.TRACE, "Numero de identificacion:"+crearClienteRow.getNumeroIdentificacion());
               cliente.setNumeroIdentificacion(crearClienteRow.getNumeroIdentificacion());
               
               logger.log(ADFLogger.TRACE, "Oficina:"+crearClienteRow.getOficina().longValue());
               oficina.setId(crearClienteRow.getOficina().longValue());
               cliente.setOficina(oficina);
               
               logger.log(ADFLogger.TRACE, "Dia de pago:"+crearClienteRow.getDiaPago());
               cliente.setDiaPago(crearClienteRow.getDiaPago());
               
               //Campos de SCR
               if(crearClienteRow.getScrId() != null){
                   Catalogo cat = new Catalogo();
                   cat.setId(crearClienteRow.getScrId());
                   cliente.setSCR(cat);
               }
               
               //Campos de Perspectiva
               if(crearClienteRow.getPerspectivaId() != null){
                   Catalogo cat = new Catalogo();
                   cat.setId(crearClienteRow.getPerspectivaId());
                   cliente.setPerspectiva(cat);
               }
               
               //Campos de Mora
               if(crearClienteRow.getEnMora() != null){
                   cliente.setEnMora(crearClienteRow.getEnMora());
               }
               
               //Campo indicador de envio de aviso de cobro
               if(crearClienteRow.getReqEnvioAvisoCobroAut() != null){
                   BigDecimal indicador = (crearClienteRow.getReqEnvioAvisoCobroAut() ? BigDecimal.ONE: BigDecimal.ZERO);
                   
                   cliente.setRequiereEnvioAutomatico(indicador);
               }
               
               if (crearClienteRow.getDireccion() != null && !crearClienteRow.getDireccion().isEmpty()) {
                   cliente.setDireccion(crearClienteRow.getDireccion());
               }
               
               if (crearClienteRow.getBicCode() != null && !crearClienteRow.getBicCode().isEmpty()) {
                   cliente.setBicCode(crearClienteRow.getBicCode());
               }
               
               //Indicador de deterioro
               if(crearClienteRow.getEsDeteriorado() != null){
                   cliente.setDeteriorado(crearClienteRow.getEsDeteriorado());
               }
               
               /*Cambios DEVF3_T2T3*/
               //cliente.setEjecutivo(fenixAM.getUserPrincipalName());
               if(crearClienteRow.getEjecutivo() != null){
                   cliente.setEjecutivo(crearClienteRow.getEjecutivo());
               }
               /*Finaliza Cambios DEVF3_T2T3*/
               
               request.setCliente(cliente);
               Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ACTUALIZAR_CLIENTE);
               response = clientePT.actualizarCliente(request);
               ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ACTUALIZAR_CLIENTE, horaInicio);
               result=response.getResultado(); 
               
               if (null!=result.getResult()&&result.getResult().value()=="ERROR"){
                    throw new Exception(result.getMessage());
               }
           }catch(Exception e)
           {
             JboException ex = new JboException(e);
             throw ex;
           }
       }
    }

    /**
     * @autor Damacio Cordoba Medina
     * @since 28/12/2015
     * Método utilizado para restablecer los valores del cliente cuando se cancela la modificación
     */
    
    public void refrescarDatosCliente(String pIdCliente){
        
        logger.log(ADFLogger.TRACE, "refrescarDatosCliente.");
        
        crearRowCliente();
        
        
        ConsultarClientesByIdClienteRequestType request = null;
        
        ConsultarClienteResponseType response = null;
        FenixAMImpl    fenixAM          = null;
        List<Cliente>  cliResponse      = new ArrayList<Cliente>();
        
        Resultado      result           = null;
        
        try{
            if (this.getCurrentRow() != null) {
                
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
                // Service declared
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

                Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                
                // Add your code to call the desired methods.
                request = new ConsultarClientesByIdClienteRequestType();
            
                request.setIdCliente(new Long(pIdCliente));
                
                //Campos opcionales pero requeridos para obtener mas informacion de la nueva cabecera de cliente en F3
                request.setInfoDeterioro(true);
                request.setInfoMora(true);

                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_REFRESCAR_DATOS_CLIENTE);
                response = clientePT.consultarByIdCliente(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_REFRESCAR_DATOS_CLIENTE, horaInicio);

                result=response.getResultado();
                if(null!=result.getResult()&&result.getResult().value()=="ERROR"){
                    logger.log(ADFLogger.ERROR, result.getMessage());                
                    throw new Exception(result.getMessage());
                }
                else {
                        cliResponse = response.getCliente();                                
                    }
                
                //Se recorren los datos del cliente...            
                for(Cliente cli : cliResponse){
                    
                    CrearClienteVORowImpl cliente = (CrearClienteVORowImpl)this.getRowAtRangeIndex(0);
                    
                    logger.log(ADFLogger.TRACE, "IdCliente:"+cli.getIdCliente());
                    cliente.setIdCliente(cli.getIdCliente());
                    
                    logger.log(ADFLogger.TRACE, "IdFlexcube:"+cli.getIdFacturador());
                    cliente.setIdFlexcube(cli.getIdFacturador());
                    
                    logger.log(ADFLogger.TRACE, "RazonSocial:"+cli.getRazonSocial());
                    cliente.setRazonSocial(cli.getRazonSocial());
                    
                    logger.log(ADFLogger.TRACE, "Tipopersonaid:"+cli.getTipoPersona().getId());
                    cliente.setTipoPersona(new Integer(cli.getTipoPersona().getId()!=null
                                           ?cli.getTipoPersona().getId().toString():"-1"));
                    
                    logger.log(ADFLogger.TRACE, "Tipoinstitucionid:"+cli.getTipoInstitucion().getId());
                    cliente.setTipoInstitucion(new Integer(cli.getTipoInstitucion().getId()!=null
                                               ?cli.getTipoInstitucion().getId().toString():"-1"));
                    
                    logger.log(ADFLogger.TRACE, "Grupoeconomicoid:"+cli.getGrupoEconomico().getId());
                    cliente.setGrupoEconomico(new Integer(cli.getGrupoEconomico().getId()!=null
                                                ?cli.getGrupoEconomico().getId().toString():"-1"));
                    
                    logger.log(ADFLogger.TRACE, "Oficinaid:"+cli.getOficina().getId());
                    cliente.setOficina(new Integer(cli.getOficina().getId()!=null
                                                   ?cli.getOficina().getId().toString():"-1"));
                    
                    logger.log(ADFLogger.TRACE, "Abreviatura:"+cli.getAbreviatura());
                    cliente.setAbreviatura(cli.getAbreviatura());
                    
                    logger.log(ADFLogger.TRACE, "Sectorid:"+cli.getSector().getId());
                    cliente.setSector(new Integer(cli.getSector().getId()!=null?cli.getSector().getId().toString():"-1"));
                    
                    logger.log(ADFLogger.TRACE, "Paisid:"+cli.getPais().getId());
                    cliente.setPais(new Integer(cli.getPais().getId()!=null?cli.getPais().getId().toString():"-1"));
                    
                    logger.log(ADFLogger.TRACE, "NumeroIdentificacion:"+cli.getNumeroIdentificacion());
                    cliente.setNumeroIdentificacion(cli.getNumeroIdentificacion());
                    
                    logger.log(ADFLogger.TRACE, "Tipoclienteid:"+cli.getTipoCliente());
                    cliente.setTipoCliente(cli.getTipoCliente() != null ? (cli.getTipoCliente().getId() != null ? cli.getTipoCliente().getId() : null) : null);
                    
                    logger.log(ADFLogger.TRACE, "DiaPago:"+cli.getDiaPago()); 
                    cliente.setDiaPago(cli.getDiaPago());
                    
                    //Campos de SCR
                    if(cli.getSCR() != null){
                        logger.warning("SCR Id: " + cli.getSCR().getId());
                        cliente.setScrId(cli.getSCR().getId());
                        cliente.setScrDescripcion(cli.getSCR().getDescripcion());
                    }else{
                        logger.warning("SCR no recibido");
                    }
                    
                    //Campos de Perspectiva
                    if(cli.getPerspectiva() != null){
                        logger.warning("Perspectiva Id: " + cli.getPerspectiva().getId());
                        cliente.setPerspectivaId(cli.getPerspectiva().getId());
                        cliente.setPerspectivaDescripcion(cli.getPerspectiva().getDescripcion());
                    }else{
                        logger.warning("Perspectiva no recibida");
                    }
                    
                    //Campos de Mora
                    if(cli.isEnMora() != null){
                        logger.warning("En Mora: " + cli.isEnMora());
                        cliente.setEnMora(cli.isEnMora());
                    }else{
                        logger.warning("Indicador de Mora no recibido");
                    }
                    
                    //Campo indicador de envio de aviso de cobro
                    if(cli.getRequiereEnvioAutomatico() != null){
                        logger.warning("Requiere envio de aviso de cobro automatico: " + cli.getRequiereEnvioAutomatico().intValue());
                        Boolean indicador = Boolean.FALSE;
                        if (null != cli.getRequiereEnvioAutomatico()) {
                            indicador = (cli.getRequiereEnvioAutomatico().intValue() == 1 ? true : false);
                        }
                        cliente.setReqEnvioAvisoCobroAut(indicador);
                    }else{
                        logger.warning("Indicador de Requiere envio de aviso de cobro automatico no recibido");
                    }
                    
                    //Indicador de deterioro
                    if(cli.isDeteriorado() != null){
                        logger.warning("Esta en Deterioro: " + cli.isDeteriorado());
                        cliente.setEsDeteriorado(cli.isDeteriorado());
                    }else{
                        logger.warning("Indicador de Cliente en Deterioro no recibido");
                    }
                    
                    if (cli.getDireccion() != null && !cli.getDireccion().isEmpty()) {
                        cliente.setDireccion(cli.getDireccion());
                    } else {
                        logger.warning("Direccion del cliente no recibido");
                    }
                    
                    if (cli.getBicCode() != null && !cli.getBicCode().isEmpty()) {
                        cliente.setBicCode(cli.getBicCode());
                    } else {
                        logger.warning("BIC Code del cliente no recibido");
                    }
                    
                    /*Cambios DEVF3_T2T3*/
                    if(cli.getEjecutivo() != null){
                        logger.warning("Se obtiene el valor devuelto del servicio del campo Ejecutivo: " + cli.getEjecutivo());
                        fenixAM.getCambiarResponsableClienteVO().crearRowResponsableCliente(cli.getEjecutivo());
                    }
                    else{
                        logger.warning("Se obtiene el valor devuelto del servicio del campo Ejecutivo: null");
                    }
                    /*Finaliza Cambios DEVF3_T2T3*/
                }
            }
        }catch(Exception e){
              JboException ex = new JboException(e);
              throw ex;
         }
    }
    
    /**
     * Realiza la validacion de clientes duplicados, consumiendo la operacion validarCliente del servicio ClienteService
     * @return devuelve NULL en caso de un error en el proceso, valor booleano TRUE si el cliente es valido o valor
     *         booleano FALSE en caso de que el cliente no sea valido.
     */
    public Boolean validarClienteDuplicado(){
        
        Boolean esValido = null;
        
        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        
        String wsdl = null;
        Cliente12BndQSService cliente12BndQSService = null;
        ClientePT clientePT = null;
        Resultado result = null;
        
        try{
            wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE); 
            cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            clientePT = cliente12BndQSService.getCliente12BndQSPort();        
        }catch(Exception e){
            logger.severe("Error al instanciar el servicio de validacion", e.getMessage());
        }
        
        if(clientePT != null){
            
            ValidarClienteDuplicadoRequestType requestValidar = null;
            ValidarClienteDuplicadoResponseType responseValidar = null;
            
            CrearClienteVORowImpl crearClienteRow = null;
            crearClienteRow = (CrearClienteVORowImpl)this.getCurrentRow();
            
            if(crearClienteRow != null){
                
                requestValidar = new ValidarClienteDuplicadoRequestType();            
                
                requestValidar.setRazonSocial(crearClienteRow.getRazonSocial());
                requestValidar.setAbreviatura(crearClienteRow.getAbreviatura());
                
                try{
                    Date horaInicio = ModelUtils.logStartWS(logger, requestValidar, FenixModelConstants.WSC_VALIDAR_CLIENTE);
                    responseValidar = clientePT.validarCliente(requestValidar);
                    ModelUtils.logEndWS(logger, responseValidar, FenixModelConstants.WSC_VALIDAR_CLIENTE, horaInicio);
                }catch(Exception e){
                    logger.severe("Error al consumir el servicio de validacion de Cliente duplicado", e.getMessage());
                }
                
                if(responseValidar != null){
                    
                    result = responseValidar.getResultado();
                    if(result != null){
                        if (result.getResult() != null &&
                            result.getResult().value() != null &&
                            result.getResult().value().equalsIgnoreCase("OK")) {
                            esValido = Boolean.TRUE;
                            logger.warning("Cliente valido, no esta duplicado");
                        } else {
                            esValido = Boolean.FALSE; 
                            logger.warning("Cliente invalido, esta duplicado");
                        }
                    }else{
                        logger.severe("El objeto Resultado es NULL");    
                    }
                }
            }else{
                logger.warning("No se pudo obtener registro actual de Cliente para realizar su validacion");    
            }
        }
        
        return esValido;
    }
    
    /**
     * @autor Josue Hernandez Castillo
     * @since 07/11/2016
     * Obtiene atributos del current row
     */
    
    public Map obtenerAtributosCliente() {
        logger.log(ADFLogger.WARNING, "Inside obtenerAtributosCliente");
        
        Map<String, Object> atributosCliente = new HashMap<String, Object>();
        
        CrearClienteVORowImpl consultarClienteRow = (CrearClienteVORowImpl)this.getCurrentRow();
            
        if (consultarClienteRow != null) {
                
            if (consultarClienteRow.getIdCliente() != null) {
                atributosCliente.put("IdCliente", consultarClienteRow.getIdCliente());
                logger.warning("IdCliente: " + consultarClienteRow.getIdCliente());
            } else {
                logger.log(ADFLogger.WARNING, "El IdCliente es Nulo.");
            }
            
            if (consultarClienteRow.getScrId() != null) {
                atributosCliente.put("ScrId", consultarClienteRow.getScrId());
                logger.warning("ScrId: " + consultarClienteRow.getScrId());
            } else {
                logger.log(ADFLogger.WARNING, "El ScrId es Nulo.");
            }
            
        } else {
            logger.log(ADFLogger.WARNING, "El valor del Current Row es Nulo.");
        }
        
        return atributosCliente;
    }
    
    public void cambiarResponsableCliente(String ejecutivo){
        logger.warning("Inicia metodo cambiarResponsableCliente...");
        logger.warning("Valor recibido: " + ejecutivo);
        Row filaRecuperada = null;
        filaRecuperada = this.getCurrentRow();
        setCurrentRow(filaRecuperada);
        filaRecuperada.setAttribute("Ejecutivo", ejecutivo);
        logger.warning("Seteando el valor obtenido al campo Ejecutivo en CrearClienteVO");
        logger.warning("Nuevo valor obtenido del campo Ejecutivo recuperado del currentRow: " + filaRecuperada.getAttribute("Ejecutivo"));
        logger.warning("Finaliza metodo cambiarResponsableCliente...");
    }
    
    public Map inicioReasignarCliente(Integer idCliente, String responsableCliente) {
        logger.warning("Dentro de inicioReasignarCliente");
        logger.warning("idCliente :"+idCliente);
        logger.warning("responsableCliente :"+responsableCliente);
        
        FenixAMImpl fenixAM = null;
        boolean existeError = Boolean.FALSE;
        String msgError = "";
        Map map = new HashMap<String, Object>();
        
        try {
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.PROCESOS_UTILIDAD);

            ProcesosUtilidadBindingQSService bindingQSService =
                IWsdlLocation.Service.getInstance(ProcesosUtilidadBindingQSService.class, wsdl);

            ProcesosUtilidadPortType bindingQSPort = bindingQSService.getProcesosUtilidadBindingQSPort();

            if (idCliente != null && responsableCliente != null) {
                org.bcie.xmlns.objetoproceso.comun.cliente.v1.Cliente cliente =
                    new org.bcie.xmlns.objetoproceso.comun.cliente.v1.Cliente();
                cliente.setIdCliente(idCliente);
                cliente.setResponsableCliente(responsableCliente);

                Header header = new Header();
                InicioReasignacionRC inicioReasignacionRC = new InicioReasignacionRC();
                header.setCliente(cliente);
                inicioReasignacionRC.setHeader(header);
                Date horaInicio =
                    ModelUtils.logStartWS(logger, inicioReasignacionRC, FenixModelConstants.WSC_CAMBIAR_RESPONSABLE_CLIENTE);
                ResultadoProceso response = bindingQSPort.inicioReasignarCliente(inicioReasignacionRC);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CAMBIAR_RESPONSABLE_CLIENTE,horaInicio);

                try{
                    if(null != response){
                        
                        if(response.getResultado()!= null && response.getResultado().getResult().value() == "ERROR") {
                            existeError = Boolean.TRUE;
                        }
                        
                        if (null != response.getResultado().getMessage() && response.getResultado().getMessage().trim().length() > 0) {
                            msgError = response.getResultado().getMessage();
                        }
                    }else{
                        logger.severe("El response es nulo");
                        existeError = Boolean.TRUE;
                    }
                }catch(Exception e){
                    logger.warning("Error en el servicio :"+e);
                }
            }else{
                if(idCliente == null){
                    logger.severe("idCliente es nulo");
                }
                    
                if(responsableCliente == null){
                    logger.severe("responsableCliente es nulo");
                }
            }
        }catch (Exception e) {
            existeError = Boolean.TRUE;
            msgError = e.getMessage();
            logger.log(ADFLogger.ERROR, "Error en Actualizar responsable del cliente.", e);
        }
        map.put("success", existeError);
        map.put("message", msgError);
        logger.log(ADFLogger.WARNING, "Valor existeError a retornar: " + existeError);
        logger.log(ADFLogger.WARNING, "Valor msgError a retornar: " + msgError);
        logger.warning("Fuera de inicioReasignarCliente");
        return map;
    }
}

