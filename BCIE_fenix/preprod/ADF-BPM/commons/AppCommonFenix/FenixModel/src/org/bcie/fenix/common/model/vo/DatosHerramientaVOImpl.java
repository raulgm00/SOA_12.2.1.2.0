package org.bcie.fenix.common.model.vo;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.DatosHerramientaVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 04 15:51:49 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosHerramientaVOImpl extends ViewObjectImpl implements DatosHerramientaVO {
    private static ADFLogger logger = null;

    /**
     * This is the default constructor (do not remove).
     */
    public DatosHerramientaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varPrograma.
     * @return variable value for varPrograma
     */
    public String getvarPrograma() {
        return (String) ensureVariableManager().getVariableValue("varPrograma");
    }

    /**
     * Sets <code>value</code> for variable varPrograma.
     * @param value value to bind as varPrograma
     */
    public void setvarPrograma(String value) {
        ensureVariableManager().setVariableValue("varPrograma", value);
    }

    /**
     * Returns the variable value for varActividadF1.
     * @return variable value for varActividadF1
     */
    public Integer getvarActividadF1() {
        return (Integer) ensureVariableManager().getVariableValue("varActividadF1");
    }

    /**
     * Sets <code>value</code> for variable varActividadF1.
     * @param value value to bind as varActividadF1
     */
    public void setvarActividadF1(Integer value) {
        ensureVariableManager().setVariableValue("varActividadF1", value);
    }

    /**
     * Returns the variable value for varIniciativa.
     * @return variable value for varIniciativa
     */
    public Integer getvarIniciativa() {
        return (Integer) ensureVariableManager().getVariableValue("varIniciativa");
    }

    /**
     * Sets <code>value</code> for variable varIniciativa.
     * @param value value to bind as varIniciativa
     */
    public void setvarIniciativa(Integer value) {
        ensureVariableManager().setVariableValue("varIniciativa", value);
    }

    /**
     * Returns the variable value for varArea.
     * @return variable value for varArea
     */
    public Integer getvarArea() {
        return (Integer) ensureVariableManager().getVariableValue("varArea");
    }

    /**
     * Sets <code>value</code> for variable varArea.
     * @param value value to bind as varArea
     */
    public void setvarArea(Integer value) {
        ensureVariableManager().setVariableValue("varArea", value);
    }

    /**
     * Returns the variable value for varEje.
     * @return variable value for varEje
     */
    public Integer getvarEje() {
        return (Integer) ensureVariableManager().getVariableValue("varEje");
    }

    /**
     * Sets <code>value</code> for variable varEje.
     * @param value value to bind as varEje
     */
    public void setvarEje(Integer value) {
        ensureVariableManager().setVariableValue("varEje", value);
    }

    public Map criterioActividadEconomicaF1(String codigoPrograma) {
        
       HashMap<String,Object> resultado=  new HashMap<String,Object>();
       
        Boolean registro = Boolean.FALSE;
        Boolean actualizaActividadF1 = Boolean.TRUE;
        Integer actividadF1 = null;
        Boolean actualizaIniciativa = Boolean.TRUE;
        Integer iniciativa = null;
        Boolean actualizaArea = Boolean.TRUE;
        Integer area = null;
        Boolean actualizaEje = Boolean.TRUE;
        Integer eje = null;
        Boolean actualizaProyecto;
        Integer proyecto = null;
        if (codigoPrograma.equalsIgnoreCase(FenixModelConstants.PROGRAMA_PROMUNI)) {
            actualizaProyecto = Boolean.TRUE;
        } else {
            actualizaProyecto = Boolean.FALSE;
        }
        Integer claveActual = null;
        Integer actividad = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        Integer opcionIniciativa = 1;

        logger.warning("codigoPrograma: " + codigoPrograma);
        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if (codigoPrograma != null) {

            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("ActividadF1Criteria");
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varPrograma", codigoPrograma);

            this.applyViewCriteria(criteriaByClienteInstanciaProceso);
            this.executeQuery();

            // 2) Asignamos valor de retorno
            Long cantidad = this.getEstimatedRowCount();
            if (cantidad.compareTo(1L) == 0) {

                Row datosHerramienta = this.getRowAtRangeIndex(0);

                registro = Boolean.TRUE;
                actividadF1 = (Integer) datosHerramienta.getAttribute("IdTcaActividadEconomicaF1");
                actividad = (Integer) datosHerramienta.getAttribute("IdIniciativaEstrategica");
                area = (Integer) datosHerramienta.getAttribute("IdAreaFocalizacion");
                eje = (Integer) datosHerramienta.getAttribute("IdEjeEstrategico");
                proyecto = (Integer) datosHerramienta.getAttribute("IdTcaProyectoMunicipal");
                iniciativa =
                    fenixGestorDesembolsosAMImpl.getDatosActividadVO().obtenActividadIniciativar(codigoPrograma,
                                                                                                 actividadF1,
                                                                                                 actividad,
                                                                                                 opcionIniciativa);

                logger.warning("se obtuvieron datos " + registro);
                logger.warning("ActualizaActividadF1 " + actualizaActividadF1);
                logger.warning("ActualizaIniciativa " + actualizaIniciativa);
                logger.warning("ActualizaArea " + actualizaArea);
                logger.warning("ActualizaEje " + actualizaEje);
                logger.warning("ActualiaProyecto " + actualizaProyecto);
                logger.warning("actividadF1 " + actividadF1);
                logger.warning("actividad " + actividad);
                logger.warning("idIniciativa " + iniciativa);
                logger.warning("idArea " + area);
                logger.warning("idEje " + eje);
                logger.warning("idProyecto " + proyecto);

                resultado.put("registro", registro);
                resultado.put("actualizaIniciativa", actualizaIniciativa);
                resultado.put("actualizaActividadF1", actualizaActividadF1);
                resultado.put("actualizaArea", actualizaArea);
                resultado.put("actualizaEje", actualizaEje);
                resultado.put("actualizaProyecto", actualizaProyecto);

                resultado.put("actividadF1", actividadF1);
                resultado.put("iniciativa", iniciativa);
                resultado.put("actividad", actividad);
                resultado.put("area", area);
                resultado.put("eje", eje);
                resultado.put("proyecto", proyecto);
                
                fenixGestorDesembolsosAMImpl.getDatosActividadF1VO().setvarPrograma(codigoPrograma);
                fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
                
            } else {
                if (this.getEstimatedRowCount() > 1) {
                    logger.warning("Registros encontrados: " + this.getEstimatedRowCount());
                    Integer contador = 0;
                    RowSetIterator rowsHerramienta = createRowSetIterator(null);
                    rowsHerramienta.reset();
                    //Se realiza la suma de las penalidades y los intereses
                    while (rowsHerramienta.hasNext()) {
                        DatosHerramientaVORowImpl activo = (DatosHerramientaVORowImpl) rowsHerramienta.next();

                        logger.warning("registro Num : " + contador);
                        contador = contador + 1;
                        claveActual = (Integer) activo.getAttribute("IdTcaActividadEconomicaF1");
                        if (null == actividadF1) {
                            actividadF1 = (Integer) activo.getAttribute("IdTcaActividadEconomicaF1");
                        } else {
                            if (claveActual.compareTo(actividadF1) != 0) {
                                actualizaActividadF1 = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdIniciativaEstrategica");
                        if (null == actividad) {
                            actividad = (Integer) activo.getAttribute("IdIniciativaEstrategica");
                        } else {
                            if (claveActual.compareTo(actividad) != 0) {
                                actualizaIniciativa = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdAreaFocalizacion");
                        if (null == area) {
                            area = (Integer) activo.getAttribute("IdAreaFocalizacion");
                        } else {
                            if (claveActual.compareTo(area) != 0) {
                                actualizaArea = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdEjeEstrategico");
                        if (null == eje) {
                            eje = (Integer) activo.getAttribute("IdEjeEstrategico");
                        } else {
                            if (claveActual.compareTo(eje) != 0) {
                                actualizaEje = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        if (null == proyecto) {
                            proyecto = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        } else {
                            if (claveActual.compareTo(proyecto) != 0) {
                                actualizaProyecto = Boolean.FALSE;
                            }
                        }

                    }
                    rowsHerramienta.closeRowSetIterator();
                    registro = Boolean.TRUE;
                    logger.warning("se obtuvieron datos " + registro);
                    logger.warning("ActualizaActividadF1 " + actualizaActividadF1);
                    logger.warning("ActualizaIniciativa " + actualizaIniciativa);
                    logger.warning("ActualizaArea " + actualizaArea);
                    logger.warning("ActualizaEje " + actualizaEje);
                    logger.warning("ActualiaProyecto " + actualizaProyecto);
                    logger.warning("idActividad " + actividadF1);
                    logger.warning("idIniciativa " + iniciativa);
                    logger.warning("idArea " + area);
                    logger.warning("idEje " + eje);
                    logger.warning("idProyecto " + proyecto);

                    resultado.put("registro", registro);
                    resultado.put("actualizaIniciativa", actualizaIniciativa);
                    resultado.put("actualizaActividadF1", actualizaActividadF1);
                    resultado.put("actualizaArea", actualizaArea);
                    resultado.put("actualizaEje", actualizaEje);
                    resultado.put("actualizaProyecto", actualizaProyecto);

                    fenixGestorDesembolsosAMImpl.getDatosActividadF1VO().setvarPrograma(codigoPrograma);
                    if (actualizaActividadF1) {
                        resultado.put("actividadF1", actividadF1);
                        fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                        if (actualizaIniciativa) {
                            resultado.put("actividad", actividad);
                            iniciativa =
                                fenixGestorDesembolsosAMImpl.getDatosActividadVO().obtenActividadIniciativar(codigoPrograma,
                                                                                                             actividadF1,
                                                                                                             iniciativa,
                                                                                                             opcionIniciativa);
                            logger.warning("iniciativa" + iniciativa);
                            resultado.put("iniciativa", iniciativa);
                            fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                            if (actualizaArea) {
                                resultado.put("area", area);
                                fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                                if (actualizaEje) {
                                    resultado.put("eje", eje);
                                    fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
                                    if (actualizaProyecto) {
                                        resultado.put("proyecto", proyecto);
                                    }
                                }
                            }
                        }
                    }
                } else {
                    resultado.put("registro", registro);
                    logger.warning("Error al encontrar los rows de la tabla");
                }
            }

            // Removemos criteria del VO
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ActividadF1Criteria");
        } else {
            resultado.put("registro", registro);
            logger.warning("Error no se ha ingresado el programa");
        }
        logger.warning("resultado: " + resultado);
        // return resultado;
        return resultado;
    }

    public Map criterioIniciativa(String codigoPrograma, Integer actividadF1) {
        HashMap<String, Object> lista = new HashMap();
        Boolean registro = Boolean.FALSE;
        Integer resultado = null;
        Boolean actualizaIniciativa = Boolean.TRUE;
        Integer iniciativa = null;
        Boolean actualizaArea = Boolean.TRUE;
        Integer area = null;
        Boolean actualizaEje = Boolean.TRUE;
        Integer eje = null;
        Boolean actualizaProyecto;
        Integer proyecto = null;
        if (codigoPrograma.equalsIgnoreCase(FenixModelConstants.PROGRAMA_PROMUNI)) {
            actualizaProyecto = Boolean.TRUE;
        } else {
            actualizaProyecto = Boolean.FALSE;
        }
        Integer claveActual = null;
        Integer actividad = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        Integer opcionIniciativa = 1;

        logger.warning("codigoPrograma: " + codigoPrograma);
        logger.warning("actividadF1: " + actividadF1);
        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if (codigoPrograma != null && null != actividadF1) {


            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("IniciativaCritera");
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varPrograma", codigoPrograma);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varActividadF1", actividadF1);

            this.applyViewCriteria(criteriaByClienteInstanciaProceso);
            this.executeQuery();

            // 2) Asignamos valor de retorno
            Long cantidad = this.getEstimatedRowCount();
            if (cantidad.compareTo(1L) == 0) {

                Row datosHerramienta = this.getRowAtRangeIndex(0);

                resultado = (Integer) datosHerramienta.getAttribute("IdTcaActividadEconomicaF1");
                registro = Boolean.TRUE;
                actividad = (Integer) datosHerramienta.getAttribute("IdIniciativaEstrategica");
                area = (Integer) datosHerramienta.getAttribute("IdAreaFocalizacion");
                eje = (Integer) datosHerramienta.getAttribute("IdEjeEstrategico");
                proyecto = (Integer) datosHerramienta.getAttribute("IdTcaProyectoMunicipal");
                iniciativa =
                    fenixGestorDesembolsosAMImpl.getDatosActividadVO().obtenActividadIniciativar(codigoPrograma,
                                                                                                 actividadF1,
                                                                                                 actividad,
                                                                                                 opcionIniciativa);

                logger.warning("se obtuvieron datos " + registro);
                logger.warning("ActualizaIniciativa " + actualizaIniciativa);
                logger.warning("ActualizaArea " + actualizaArea);
                logger.warning("ActualizaEje " + actualizaEje);
                logger.warning("ActualiaProyecto " + actualizaProyecto);
                logger.warning("actividadF1 " + actividadF1);
                logger.warning("actividad " + actividad);
                logger.warning("idIniciativa " + iniciativa);
                logger.warning("idArea " + area);
                logger.warning("idEje " + eje);
                logger.warning("idProyecto " + proyecto);

                lista.put("registro", registro);
                lista.put("actualizaIniciativa", actualizaIniciativa);
                lista.put("actualizaArea", actualizaArea);
                lista.put("actualizaEje", actualizaEje);
                lista.put("actualizaProyecto", actualizaProyecto);

                lista.put("iniciativa", iniciativa);
                lista.put("actividad", actividad);
                lista.put("area", area);
                lista.put("eje", eje);
                lista.put("proyecto", proyecto);
                fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
            } else {
                if (this.getEstimatedRowCount() > 1) {
                    logger.warning("Registros encontrados: " + this.getEstimatedRowCount());
                    Integer contador = 0;
                    RowSetIterator rowsHerramienta = createRowSetIterator(null);
                    rowsHerramienta.reset();
                    //Se realiza la suma de las penalidades y los intereses
                    while (rowsHerramienta.hasNext()) {
                        DatosHerramientaVORowImpl activo = (DatosHerramientaVORowImpl) rowsHerramienta.next();

                        logger.warning("registro Num : " + contador);
                        contador = contador + 1;

                        claveActual = (Integer) activo.getAttribute("IdIniciativaEstrategica");
                        if (null == actividad) {
                            actividad = (Integer) activo.getAttribute("IdIniciativaEstrategica");
                        } else {
                            if (claveActual.compareTo(actividad) != 0) {
                                actualizaIniciativa = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdAreaFocalizacion");
                        if (null == area) {
                            area = (Integer) activo.getAttribute("IdAreaFocalizacion");
                        } else {
                            if (claveActual.compareTo(area) != 0) {
                                actualizaArea = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdEjeEstrategico");
                        if (null == eje) {
                            eje = (Integer) activo.getAttribute("IdEjeEstrategico");
                        } else {
                            if (claveActual.compareTo(eje) != 0) {
                                actualizaEje = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        if (null == proyecto) {
                            proyecto = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        } else {
                            if (claveActual.compareTo(proyecto) != 0) {
                                actualizaProyecto = Boolean.FALSE;
                            }
                        }

                    }
                    rowsHerramienta.closeRowSetIterator();
                    registro = Boolean.TRUE;
                    logger.warning("se obtuvieron datos " + registro);
                    logger.warning("ActualizaIniciativa " + actualizaIniciativa);
                    logger.warning("ActualizaArea " + actualizaArea);
                    logger.warning("ActualizaEje " + actualizaEje);
                    logger.warning("ActualiaProyecto " + actualizaProyecto);
                    logger.warning("idIniciativa " + iniciativa);
                    logger.warning("idArea " + area);
                    logger.warning("idEje " + eje);
                    logger.warning("idProyecto " + proyecto);

                    lista.put("registro", registro);
                    lista.put("actualizaIniciativa", actualizaIniciativa);
                    lista.put("actualizaArea", actualizaArea);
                    lista.put("actualizaEje", actualizaEje);
                    lista.put("actualizaProyecto", actualizaProyecto);
                    
                    if (actualizaIniciativa) {
                        lista.put("actividad", actividad);
                        iniciativa =
                            fenixGestorDesembolsosAMImpl.getDatosActividadVO().obtenActividadIniciativar(codigoPrograma,
                                                                                                         actividadF1,
                                                                                                         actividad,
                                                                                                         opcionIniciativa);
                        logger.warning("iniciativa" + iniciativa);
                        lista.put("iniciativa", iniciativa);
                        fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                        if (actualizaArea) {
                            lista.put("area", area);
                            fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                            if (actualizaEje) {
                                lista.put("eje", eje);
                                fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
                                if (actualizaProyecto) {
                                    lista.put("proyecto", proyecto);
                                }
                            }
                        }
                    }

                } else {
                    lista.put("registro", registro);
                    logger.warning("Error al encontrar los rows de la tabla");
                }
            }

            // Removemos criteria del VO
            this.getViewCriteriaManager().removeApplyViewCriteriaName("IniciativaCritera");
        } else {
            lista.put("registro", registro);
            logger.warning("Error no se ha ingresado el programa");
        }
        logger.warning("resultado: " + resultado);
        // return resultado;
        return lista;
    }

    public Map criterioArea(String codigoPrograma, Integer actividadF1, Integer actividad) {
        HashMap<String, Object> lista = new HashMap();
        Boolean registro = Boolean.FALSE;
        Integer resultado = null;
        Integer iniciativa = null;
        Boolean actualizaArea = Boolean.TRUE;
        Integer area = null;
        Boolean actualizaEje = Boolean.TRUE;
        Integer eje = null;
        Boolean actualizaProyecto;
        Integer proyecto = null;
        if (codigoPrograma.equalsIgnoreCase(FenixModelConstants.PROGRAMA_PROMUNI)) {
            actualizaProyecto = Boolean.TRUE;
        } else {
            actualizaProyecto = Boolean.FALSE;
        }
        Integer claveActual = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        Integer opcionActividad = 1;
        iniciativa =
            fenixGestorDesembolsosAMImpl.getDatosActividadVO().obtenActividadIniciativar(codigoPrograma, actividadF1,
                                                                                         actividad, opcionActividad);


        logger.warning("codigoPrograma: " + codigoPrograma);
        logger.warning("actividadF1: " + actividadF1);
        logger.warning("iniciativa: " + iniciativa);
        logger.warning("actividad: " + actividad);

        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if (codigoPrograma != null && null != actividadF1 && null != actividad) {

            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("AreaCriteria");
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varPrograma", codigoPrograma);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varActividadF1", actividadF1);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varIniciativa", actividad);

            this.applyViewCriteria(criteriaByClienteInstanciaProceso);
            this.executeQuery();

            // 2) Asignamos valor de retorno
            Long cantidad = this.getEstimatedRowCount();
            if (cantidad.compareTo(1L) == 0) {

                Row datosHerramienta = this.getRowAtRangeIndex(0);

                resultado = (Integer) datosHerramienta.getAttribute("IdTcaActividadEconomicaF1");
                registro = Boolean.TRUE;
                area = (Integer) datosHerramienta.getAttribute("IdAreaFocalizacion");
                eje = (Integer) datosHerramienta.getAttribute("IdEjeEstrategico");
                proyecto = (Integer) datosHerramienta.getAttribute("IdTcaProyectoMunicipal");

                logger.warning("se obtuvieron datos " + registro);
                logger.warning("ActualizaArea " + actualizaArea);
                logger.warning("ActualizaEje " + actualizaEje);
                logger.warning("ActualiaProyecto " + actualizaProyecto);
                logger.warning("idArea " + area);
                logger.warning("idEje " + eje);
                logger.warning("idProyecto " + proyecto);
                logger.warning("idIniciativa " + iniciativa);

                lista.put("registro", registro);
                lista.put("actualizaArea", actualizaArea);
                lista.put("actualizaEje", actualizaEje);
                lista.put("actualizaProyecto", actualizaProyecto);
                lista.put("iniciativa", iniciativa);
                lista.put("area", area);
                lista.put("eje", eje);
                lista.put("proyecto", proyecto);
                
                fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
            } else {
                if (this.getEstimatedRowCount() > 1) {
                    logger.warning("Registros encontrados: " + this.getEstimatedRowCount());
                    Integer contador = 0;
                    RowSetIterator rowsHerramienta = createRowSetIterator(null);
                    rowsHerramienta.reset();
                    //Se realiza la suma de las penalidades y los intereses
                    while (rowsHerramienta.hasNext()) {
                        DatosHerramientaVORowImpl activo = (DatosHerramientaVORowImpl) rowsHerramienta.next();

                        logger.warning("registro Num : " + contador);
                        contador = contador + 1;

                        claveActual = (Integer) activo.getAttribute("IdAreaFocalizacion");
                        if (null == area) {
                            area = (Integer) activo.getAttribute("IdAreaFocalizacion");
                        } else {
                            if (claveActual.compareTo(area) != 0) {
                                actualizaArea = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdEjeEstrategico");
                        if (null == eje) {
                            eje = (Integer) activo.getAttribute("IdEjeEstrategico");
                        } else {
                            if (claveActual.compareTo(eje) != 0) {
                                actualizaEje = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        if (null == proyecto) {
                            proyecto = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        } else {
                            if (claveActual.compareTo(proyecto) != 0) {
                                actualizaProyecto = Boolean.FALSE;
                            }
                        }

                    }
                    rowsHerramienta.closeRowSetIterator();
                    registro = Boolean.TRUE;
                    logger.warning("se obtuvieron datos " + registro);
                    logger.warning("ActualizaArea " + actualizaArea);
                    logger.warning("ActualizaEje " + actualizaEje);
                    logger.warning("ActualiaProyecto " + actualizaProyecto);
                    logger.warning("idArea " + area);
                    logger.warning("idEje " + eje);
                    logger.warning("idProyecto " + proyecto);

                    lista.put("registro", registro);
                    lista.put("actualizaArea", actualizaArea);
                    lista.put("actualizaEje", actualizaEje);
                    lista.put("actualizaProyecto", actualizaProyecto);
                    lista.put("iniciativa", iniciativa);

                    fenixGestorDesembolsosAMImpl.getDatosAreaVO().cargaArea(codigoPrograma,actividadF1,iniciativa);
                    if (actualizaArea) {
                        lista.put("area", area);
                        fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                        if (actualizaEje) {
                            lista.put("eje", eje);
                            fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
                            if (actualizaProyecto) {
                                lista.put("proyecto", proyecto);
                            }
                        }
                    }


                } else {
                    lista.put("registro", registro);
                    logger.warning("Error al encontrar los rows de la tabla");
                }
            }

            // Removemos criteria del VO
            this.getViewCriteriaManager().removeApplyViewCriteriaName("AreaCriteria");
        } else {
            lista.put("registro", registro);
            logger.warning("Error no se ha ingresado el programa");
        }
        logger.warning("resultado: " + resultado);
        // return resultado;
        return lista;
    }

    public Map criterioEje(String codigoPrograma, Integer actividadF1, Integer iniciativa, Integer area) {
        HashMap<String, Object> lista = new HashMap();
        Boolean registro = Boolean.FALSE;
        Integer resultado = null;
        Boolean actualizaEje = Boolean.TRUE;
        Integer eje = null;
        Boolean actualizaProyecto;
        Integer proyecto = null;
        if (codigoPrograma.equalsIgnoreCase(FenixModelConstants.PROGRAMA_PROMUNI)) {
            actualizaProyecto = Boolean.TRUE;
        } else {
            actualizaProyecto = Boolean.FALSE;
        }
        Integer claveActual = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();


        logger.warning("codigoPrograma: " + codigoPrograma);
        logger.warning("actividadF1: " + actividadF1);
        logger.warning("iniciativa: " + iniciativa);
        logger.warning("Area: " + area);

        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if (codigoPrograma != null && null != actividadF1 && null != iniciativa) {

            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("EjeCriteria");
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varPrograma", codigoPrograma);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varActividadF1", actividadF1);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varIniciativa", iniciativa);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varArea", area);


            this.applyViewCriteria(criteriaByClienteInstanciaProceso);
            this.executeQuery();

            // 2) Asignamos valor de retorno
            Long cantidad = this.getEstimatedRowCount();
            if (cantidad.compareTo(1L) == 0) {

                Row datosHerramienta = this.getRowAtRangeIndex(0);

                resultado = (Integer) datosHerramienta.getAttribute("IdTcaActividadEconomicaF1");
                registro = Boolean.TRUE;
                eje = (Integer) datosHerramienta.getAttribute("IdEjeEstrategico");
                proyecto = (Integer) datosHerramienta.getAttribute("IdTcaProyectoMunicipal");

                logger.warning("se obtuvieron datos " + registro);
                logger.warning("ActualizaEje " + actualizaEje);
                logger.warning("ActualiaProyecto " + actualizaProyecto);
                logger.warning("idEje " + eje);
                logger.warning("idProyecto " + proyecto);

                lista.put("registro", registro);
                lista.put("actualizaEje", actualizaEje);
                lista.put("actualizaProyecto", actualizaProyecto);
                lista.put("eje", eje);
                lista.put("proyecto", proyecto);
                
                fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
            } else {
                if (this.getEstimatedRowCount() > 1) {
                    logger.warning("Registros encontrados: " + this.getEstimatedRowCount());
                    Integer contador = 0;
                    RowSetIterator rowsHerramienta = createRowSetIterator(null);
                    rowsHerramienta.reset();
                    //Se realiza la suma de las penalidades y los intereses
                    while (rowsHerramienta.hasNext()) {
                        DatosHerramientaVORowImpl activo = (DatosHerramientaVORowImpl) rowsHerramienta.next();

                        logger.warning("registro Num : " + contador);
                        contador = contador + 1;

                        claveActual = (Integer) activo.getAttribute("IdEjeEstrategico");
                        if (null == eje) {
                            eje = (Integer) activo.getAttribute("IdEjeEstrategico");
                        } else {
                            if (claveActual.compareTo(eje) != 0) {
                                actualizaEje = Boolean.FALSE;
                            }
                        }
                        claveActual = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        if (null == proyecto) {
                            proyecto = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        } else {
                            if (claveActual.compareTo(proyecto) != 0) {
                                actualizaProyecto = Boolean.FALSE;
                            }
                        }

                    }
                    rowsHerramienta.closeRowSetIterator();
                    registro = Boolean.TRUE;
                    logger.warning("se obtuvieron datos " + registro);
                    logger.warning("ActualizaEje " + actualizaEje);
                    logger.warning("ActualiaProyecto " + actualizaProyecto);
                    logger.warning("idEje " + eje);
                    logger.warning("idProyecto " + proyecto);

                    lista.put("registro", registro);
                    lista.put("actualizaEje", actualizaEje);
                    lista.put("actualizaProyecto", actualizaProyecto);

                    fenixGestorDesembolsosAMImpl.getDatosEjeVO().cargaEje(codigoPrograma,actividadF1,iniciativa,area);
                        if (actualizaEje) {
                            lista.put("eje", eje);
                    fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
                            if (actualizaProyecto) {
                                lista.put("proyecto", proyecto);
                            }
                        }

                } else {
                    lista.put("registro", registro);
                    logger.warning("Error al encontrar los rows de la tabla");
                }
            }

            // Removemos criteria del VO
            this.getViewCriteriaManager().removeApplyViewCriteriaName("EjeCriteria");
        } else {
            lista.put("registro", registro);
            logger.warning("Error no se ha ingresado el programa");
        }
        logger.warning("resultado: " + resultado);
        // return resultado;
        return lista;
    }

    public Map criterioProyecto(String codigoPrograma, Integer actividadF1, Integer iniciativa, Integer area,
                                    Integer eje) {
        HashMap<String, Object> lista = new HashMap();
        Boolean registro = Boolean.FALSE;
        Integer resultado = null;
        Boolean actualizaProyecto;
        Integer proyecto = null;
        if (codigoPrograma.equalsIgnoreCase(FenixModelConstants.PROGRAMA_PROMUNI)) {
            actualizaProyecto = Boolean.TRUE;
        } else {
            actualizaProyecto = Boolean.FALSE;
        }
        Integer claveActual = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        logger.warning("codigoPrograma: " + codigoPrograma);
        logger.warning("actividadF1: " + actividadF1);
        logger.warning("iniciativa: " + iniciativa);
        logger.warning("Area: " + area);
        logger.warning("Eje: " + eje);
        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if (codigoPrograma != null && null != actividadF1 && null != iniciativa) {

            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("ProyectoCriteria");
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varPrograma", codigoPrograma);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varActividadF1", actividadF1);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varIniciativa", iniciativa);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varArea", area);
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varEje", eje);
            this.applyViewCriteria(criteriaByClienteInstanciaProceso);
            this.executeQuery();

            // 2) Asignamos valor de retorno
            Long cantidad = this.getEstimatedRowCount();
            if (cantidad.compareTo(1L) == 0) {

                Row datosHerramienta = this.getRowAtRangeIndex(0);

                resultado = (Integer) datosHerramienta.getAttribute("IdTcaActividadEconomicaF1");
                registro = Boolean.TRUE;;
                proyecto = (Integer) datosHerramienta.getAttribute("IdTcaProyectoMunicipal");

                logger.warning("se obtuvieron datos " + registro);
                logger.warning("ActualiaProyecto " + actualizaProyecto);
                logger.warning("idProyecto " + proyecto);

                lista.put("registro", registro);
                lista.put("actualizaProyecto", actualizaProyecto);
                lista.put("proyecto", proyecto);
                fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
            } else {
                if (this.getEstimatedRowCount() > 1) {
                    logger.warning("Registros encontrados: " + this.getEstimatedRowCount());
                    Integer contador = 0;
                    RowSetIterator rowsHerramienta = createRowSetIterator(null);
                    rowsHerramienta.reset();
                    //Se realiza la suma de las penalidades y los intereses
                    while (rowsHerramienta.hasNext()) {
                        DatosHerramientaVORowImpl activo = (DatosHerramientaVORowImpl) rowsHerramienta.next();

                        logger.warning("registro Num : " + contador);
                        contador = contador + 1;

                        claveActual = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        if (null == proyecto) {
                            proyecto = (Integer) activo.getAttribute("IdTcaProyectoMunicipal");
                        } else {
                            if (claveActual.compareTo(proyecto) != 0) {
                                actualizaProyecto = Boolean.FALSE;
                            }
                        }

                    }
                    rowsHerramienta.closeRowSetIterator();
                    registro = Boolean.TRUE;
                    logger.warning("se obtuvieron datos " + registro);
                    logger.warning("ActualiaProyecto " + actualizaProyecto);
                    logger.warning("idProyecto " + proyecto);

                    lista.put("registro", registro);
                    lista.put("actualizaProyecto", actualizaProyecto);
                    
                    fenixGestorDesembolsosAMImpl.getDatoProyectoVO().cargaProyecto(codigoPrograma,actividadF1,iniciativa,area, eje);
                            if (actualizaProyecto) {
                                lista.put("proyecto", proyecto);
                            }
                } else {
                    lista.put("registro", registro);
                    logger.warning("Error al encontrar los rows de la tabla");
                }
            }
            // Removemos criteria del VO
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ProyectoCriteria");
        } else {
            lista.put("registro", registro);
            logger.warning("Error no se ha ingresado el programa");
        }
        logger.warning("resultado: " + resultado);
        // return resultado;
        return lista;
    }
}

