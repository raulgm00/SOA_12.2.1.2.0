package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.lineacreditoservice.LineaCredito;

import com.bcie.xmlns.lineacreditoservice.LineaCreditoPT;

import java.io.StringWriter;

import java.sql.Timestamp;

import java.util.List;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.XMLGregorianCalendar;

import javax.xml.namespace.QName;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.commonbo.MontoType;
import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.CONVERTIR_MILISEGUNDOS_SEGUNDOS;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DatosLineaCreditoVO;
import org.bcie.lineacreditobo.InformacionAdicional;
import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType;
import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELResponseType;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 13 11:37:37 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosLineaCreditoVOImpl extends ViewObjectImpl implements DatosLineaCreditoVO {
    private static ADFLogger logger = null;

    private static final String TIPO_DISPONIBLE = "DISPONIBLE";
    private static final String TIPO_TRANSITO = "TRANSITO";
    private static final String TIPO_DISPONIBLE_DESEMBOLSO = "DISPONIBLE_DESEMBOLSO";
    private static final String TIPO_PROGRAMADO = "PROGRAMADO";

    /**
     * This is the default constructor (do not remove).
     */
    public DatosLineaCreditoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public void limpiarDatosLineaCredito() {
        this.clearCache();
        this.executeQuery();
    }

    /**
     * Los datos mostrados corresponden a los valores obtenidos de Flexcube.
     *
     * @param idLineaCredito Long
     * @param tipoMoneda Puede ser null
     */
    public void consultarLineaCreditoByIdWS(Long idLineaCredito, String tipoMoneda) {
        logger.log(ADFLogger.NOTIFICATION, "INTO consultarLineaCreditoByIdWS - " + idLineaCredito);

        try {
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);

            LineaCredito lineaCredito12BndQSService = IWsdlLocation.Service.getInstance(LineaCredito.class, wsdl);
            LineaCreditoPT lineaCreditoPT = lineaCredito12BndQSService.getLineaCredito12Bnd();

            ConsultarLineaCreditoBPELRequestType request = new ConsultarLineaCreditoBPELRequestType();

            if (tipoMoneda != null) {
                InformacionAdicional informacionAdicional = new InformacionAdicional();
                MontoType montoType = new MontoType();
                Catalogo catalogo = new Catalogo();

                catalogo.setCodigoExterno(tipoMoneda);
                montoType.setMoneda(catalogo);
                informacionAdicional.setMonto(montoType);

                request.setInformacionAdicional(informacionAdicional);
            }
            request.setIdLineaCredito(idLineaCredito);

            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);
            ConsultarLineaCreditoBPELResponseType response = lineaCreditoPT.consultarLineaCreditoById(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);

            if (response.getLineaCredito() != null) {
                Row row = super.createRow();

                row.setAttribute(DatosLineaCreditoVORowImpl.ID, response.getLineaCredito().getIdLineaCredito());
                row.setAttribute(DatosLineaCreditoVORowImpl.NUMEROLINEACREDITO,
                                 response.getLineaCredito().getNumeroLineaCredito());
                row.setAttribute(DatosLineaCreditoVORowImpl.DESCRIPCION, response.getLineaCredito().getDescripcion());

                String descripcionCorta = obtenerDescripcionCorta(response.getLineaCredito().getDescripcion());
                row.setAttribute(DatosLineaCreditoVORowImpl.DESCRIPCIONCORTA, descripcionCorta);

                //row.setAttribute(DatosLineaCreditoVORowImpl.MONTOTOTAL, response.getLineaCredito().getMontoTotal()); // TODO La parecer si los va aregresar el servicio.
                row.setAttribute(DatosLineaCreditoVORowImpl.FONDO, response.getLineaCredito().getFondo());
                //row.setAttribute(DatosLineaCreditoVORowImpl.FECHAMAXIMA, response.getLineaCredito().getIdLineaCredito());
                row.setAttribute(DatosLineaCreditoVORowImpl.FECHAVENCIMIENTO,
                                 this.convertXmlGregorianCalendarToTimestamp(response.getLineaCredito().getFechaVencimiento()));

                List<MontoType> lista = response.getLineaCredito().getMonto();

                if (lista != null) {
                    for (MontoType montos : lista) {
                        
                        

                        if (montos.getTipo() != null) {

                            if (TIPO_DISPONIBLE.equals(montos.getTipo().getDescripcionCorta())) {
                                row.setAttribute(DatosLineaCreditoVORowImpl.MONTOLINEA, montos.getImporte());
                            } else if (TIPO_TRANSITO.equals(montos.getTipo().getDescripcionCorta())) {
                                row.setAttribute(DatosLineaCreditoVORowImpl.MONTODESEMBOLSAR, montos.getImporte());
                            } else if (TIPO_DISPONIBLE_DESEMBOLSO.equals(montos.getTipo().getDescripcionCorta())) {
                                row.setAttribute(DatosLineaCreditoVORowImpl.MONTODISPONIBLE, montos.getImporte());
                            } else if (TIPO_PROGRAMADO.equals(montos.getTipo().getDescripcionCorta())) {
                                row.setAttribute(DatosLineaCreditoVORowImpl.MONTOPROGRAMADO, montos.getImporte());
                            } else {
                                logger.log(ADFLogger.WARNING,
                                           "No se encontraron coincidencias con el tipo de monto " +
                                           montos.getTipo().getDescripcionCorta());
                            }
                        } else {
                            logger.log(ADFLogger.WARNING, "El tipo de montos es null");
                        }
                    }
                } else {
                    logger.log(ADFLogger.WARNING, "la lisata de montos (MontoType) está vacía");
                }
                insertRow(row);
                setCurrentRow(row);
            } else {
                logger.log(ADFLogger.WARNING, "No se recupero ninguna Lineas Credito");
            }

        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, e.getMessage());
        }
    }

    public Boolean buscarLineaCredito() {
        logger.warning("Entra en buscarLineaCredito");
        Boolean isLineaCredito = Boolean.FALSE;
        try {
            logger.warning("Numero de registros encontrados :" + this.getEstimatedRowCount());
            if (this.getEstimatedRowCount() > 0) {
                isLineaCredito = Boolean.TRUE;
            } else {
                logger.warning("No se encontraron registros.");
            }
        } catch (Exception e) {
            logger.warning("Error al buscar registros.", e);
        }
        logger.warning("Existe Linea Credito :" + isLineaCredito);
        return isLineaCredito;
    }

    /**
     * Convierte de XMLGregorianCalendar a Timestamp
     *
     * @param xgc XMLGregorianCalendar
     * @return timestamp Timestamp
     */
    private Timestamp convertXmlGregorianCalendarToTimestamp(XMLGregorianCalendar xgc) {
        Timestamp timestamp = null;
        if (xgc != null) {
            if (xgc.toGregorianCalendar() != null) {
                try {
                    timestamp = new Timestamp(xgc.toGregorianCalendar().getTimeInMillis());
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR, "timestamp " + e.getMessage());
                }
            } else {
                logger.log(ADFLogger.WARNING, "xgc.toGregorianCalendar() NULL");
            }
        } else {
            logger.log(ADFLogger.WARNING, "xgc NULL");
        }
        return timestamp;
    }

    private String obtenerDescripcionCorta(String descripcion) {
        logger.warning("Ingresa el metodo obtenerDescripcionCorta");

        String descripcionCorta = null;

        try {
            if (null != descripcion) {
                logger.warning("descripcion es diferente de null");
                logger.warning("descripcion length: " + descripcion.length());
                if (descripcion.length() > 40)
                    descripcionCorta = descripcion.substring(0, 40);
                else
                    descripcionCorta = descripcion;
            } else {
                logger.warning("descripcion es null");
                descripcionCorta = null;
            }
        } catch (Exception e) {
            logger.warning("Error al generar la descripcion corta... " + e);
            descripcionCorta = null;
        }

        logger.warning("Valor a retornar descripcionCorta: " + descripcionCorta);
        logger.warning("Finaliza el metodo obtenerDescripcionCorta");
        return descripcionCorta;
    }

    /**
     * [KB:14513]
     * Inserta una copia de los datos de la línea de crédito encontrados en base de datos en este objeto de memoria.
     * @param lc Línea de crédito encontrada en base de datos.
     * @return Fila recién ingresada a esta VO.
     */
    public Row insertCopyOf(LineaCreditoVORowImpl lc, String fondoNombre) {
        DatosLineaCreditoVORowImpl row = (DatosLineaCreditoVORowImpl) this.createRow();

        // Se agrega por FNXII-6675
        row.setNewRowState(Row.STATUS_INITIALIZED);

        row.setId(lc.getId());
        row.setNumeroLineaCredito(lc.getNumeroLineaCredito());
        //en este objeto el fondo es el nombre del fondo
        row.setFondo(fondoNombre);
        row.setMontoLinea(lc.getMontoLinea());
        row.setIdFlexcube(lc.getIdFlexcube());
        row.setDescripcion(lc.getDescripcionLinea());
        row.setLineaGlobalIfi(Boolean.FALSE);

        this.insertRow(row);

        return row;
    }

    /**
     * [KB:14513]
     * Inserta una copia de los datos de la línea de crédito asociada encontrados en base de datos en este objeto de memoria.
     * @param lc Línea de crédito asociada con la informacion encontrada en base de datos.
     * @return Fila recién ingresada a esta VO.
     */
    public Row insertCopyAsociadaOf(LineaCreditoAsociadaOperacionVORowImpl lc, Long idOperacion, String fondoNombre) {
        DatosLineaCreditoVORowImpl row = (DatosLineaCreditoVORowImpl) this.createRow();

        // Se agrega por FNXII-6675
        row.setNewRowState(Row.STATUS_INITIALIZED);

        row.setId(lc.getIdLineaCredito());
        row.setNumeroLineaCredito(lc.getNumeroLineaCredito());
        //en este objeto el fondo es el nombre del fondo
        row.setFondo(fondoNombre);
        row.setMontoLinea(lc.getMontoLinea());
        row.setIdFlexcube(lc.getIdFlexcube());
        row.setDescripcion(lc.getDescripcionLinea());
        row.setLineaGlobalIfi(Boolean.TRUE);
        row.setIdOperacion(idOperacion);
        if (lc.getIdContrato() != null) {
            row.setIdContrato(lc.getIdContrato().intValue());
        }

        this.insertRow(row);

        return row;
    }
    /** Feature 4296 **/ 
    /** Consultar Lineas de Credito por id de operacion  **/
    public void consultarLineaCreditoByIdOperacion(Long idOperacion) {        
        
        //this.executeEmptyRowSet();
        
        logger.warning("Inside consultarLineaCreditoByIdOperacion.");
        logger.warning("idOperacion : " + idOperacion);
        
        Date horaInicio = null;
        Date horaTermino = null;
        Long tiempoProcesoSegundos;
        SimpleDateFormat dateFormat = null;
        StringWriter xmlEntrada = null;
        StringWriter xmlSalida = null;
        
        try {
        dateFormat = new SimpleDateFormat("HH:mm:ss");
        
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        System.out.println("IWsdlLocation.LINEA_CREDITO = " + IWsdlLocation.LINEA_CREDITO);
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
        System.out.println("wsdl = " + wsdl );
        
        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService = IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
        System.out.println("lineaCredito12BndQSService" + lineaCredito12BndQSService.toString());
        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT = lineaCredito12BndQSService.getLineaCredito12Bnd();
        System.out.println("lineaCreditoPT = " + lineaCreditoPT.toString());
        
        
        org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType request =   new org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType();
        request.setIdOperacion(idOperacion);
        horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_LINEA_CREDITO);
        
        logger.log(ADFLogger.WARNING, ">HNWS" + "Hora de inicio: " + dateFormat.format(horaInicio.getTime()));
        xmlEntrada = this.writeXMLRequest(request, request.getClass());
        logger.log(ADFLogger.WARNING, ">HNWS" + xmlEntrada.toString());
        
        org.bcie.lineacreditomo.ConsultarLineaCreditoResponseType response =  new org.bcie.lineacreditomo.ConsultarLineaCreditoResponseType();
        response = lineaCreditoPT.consultarLineaCredito(request);
        
            horaTermino = new GregorianCalendar().getTime();
            tiempoProcesoSegundos = (horaTermino.getTime() - horaInicio.getTime()) / CONVERTIR_MILISEGUNDOS_SEGUNDOS;
            logger.log(ADFLogger.WARNING, ">HNWS" + "Tiempo de proceso en segundos: " + tiempoProcesoSegundos);
            logger.log(ADFLogger.WARNING, ">HNWS" + "Respuesta servicio - Consultar Linea Credito -");
            xmlSalida = this.writeXMLRequest(response, response.getClass());
            logger.log(ADFLogger.WARNING, ">HNWS" + xmlSalida.toString());
            
            
            
            
            for (org.bcie.lineacreditobo.LineaCredito lineaCredito : response.getClienteContrato().get(0).getLineaCredito()) {  
                Row row = super.createRow();
                
                row.setAttribute(DatosLineaCreditoVORowImpl.ID, lineaCredito.getIdLineaCredito());
                logger.log(ADFLogger.WARNING, "idLineaCredito =" + lineaCredito.getIdLineaCredito());
                row.setAttribute(DatosLineaCreditoVORowImpl.NUMEROLINEACREDITO, lineaCredito.getNumeroLineaCredito());
                logger.log(ADFLogger.WARNING, "NumeroLinea =" + lineaCredito.getNumeroLineaCredito());
                row.setAttribute(DatosLineaCreditoVORowImpl.MONTOLINEA, lineaCredito.getMontoLinea());
                logger.log(ADFLogger.WARNING, "MontoLinea =" + lineaCredito.getMontoLinea());
                row.setAttribute(DatosLineaCreditoVORowImpl.MONEDA, lineaCredito.getDescripcionCortaMoneda());
                logger.log(ADFLogger.WARNING, "Moneda =" + lineaCredito.getDescripcionCortaMoneda());
                
                //row.setAttribute(DatosLineaCreditoVORowImpl.MONEDA, "USD");
                //logger.log(ADFLogger.WARNING, "Moneda =" + "USD");
                
                insertRow(row);
                setCurrentRow(row);
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    /** Feature 4296 **/ 
    /** verificar si existen lineas de credito asociadas a un idOperacion  **/
    public boolean isLineaCredito(Long idOperacion) {
        logger.warning("Inside isLineaCredito.");
        logger.warning("idOperacion : " + idOperacion);

        Date horaInicio = null;
        Date horaTermino = null;
        Long tiempoProcesoSegundos;
        SimpleDateFormat dateFormat = null;
        StringWriter xmlEntrada = null;
        StringWriter xmlSalida = null;
        boolean isLineaCredito = false;

        try {
            dateFormat = new SimpleDateFormat("HH:mm:ss");

            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            System.out.println("IWsdlLocation.LINEA_CREDITO = " + IWsdlLocation.LINEA_CREDITO);
            String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
            System.out.println("wsdl = " + wsdl);

            com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService =
                IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
            System.out.println("lineaCredito12BndQSService" + lineaCredito12BndQSService.toString());
            com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
                lineaCredito12BndQSService.getLineaCredito12Bnd();
            System.out.println("lineaCreditoPT = " + lineaCreditoPT.toString());


            org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType request =
                new org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType();
            request.setIdOperacion(idOperacion);
            horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_LINEA_CREDITO);

            logger.log(ADFLogger.WARNING, ">HNWS" + "Hora de inicio: " + dateFormat.format(horaInicio.getTime()));
            xmlEntrada = this.writeXMLRequest(request, request.getClass());
            logger.log(ADFLogger.WARNING, ">HNWS" + xmlEntrada.toString());

            org.bcie.lineacreditomo.ConsultarLineaCreditoResponseType response =
                new org.bcie.lineacreditomo.ConsultarLineaCreditoResponseType();
            response = lineaCreditoPT.consultarLineaCredito(request);

            horaTermino = new GregorianCalendar().getTime();
            tiempoProcesoSegundos = (horaTermino.getTime() - horaInicio.getTime()) / CONVERTIR_MILISEGUNDOS_SEGUNDOS;
            logger.log(ADFLogger.WARNING, ">HNWS" + "Tiempo de proceso en segundos: " + tiempoProcesoSegundos);
            logger.log(ADFLogger.WARNING, ">HNWS" + "Respuesta servicio - Consultar Linea Credito -");
            xmlSalida = this.writeXMLRequest(response, response.getClass());
            logger.log(ADFLogger.WARNING, ">HNWS" + xmlSalida.toString());

            if (response.getClienteContrato().get(0).getLineaCredito().size() > 0) {
                isLineaCredito = Boolean.TRUE;
            } else {
                logger.warning("No se encontraron registros.");
            }
            logger.warning("Existe Linea Credito :" + isLineaCredito);
            return isLineaCredito;

        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return isLineaCredito;
    }
    
    public StringWriter writeXMLRequest(Object request, Class requestClass) throws JAXBException {
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(requestClass);
        Marshaller m = context.createMarshaller();
        m.marshal(new JAXBElement(new QName(requestClass.getName()), requestClass, request), writer);
        return writer;
    }

}

