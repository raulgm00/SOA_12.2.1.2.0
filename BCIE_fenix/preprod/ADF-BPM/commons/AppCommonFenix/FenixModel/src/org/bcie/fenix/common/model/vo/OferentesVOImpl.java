package org.bcie.fenix.common.model.vo;

import java.util.ArrayList;
import java.util.Date;
import java.util.ResourceBundle;

import oracle.adf.share.logging.ADFLogger;

import oracle.javatools.resourcebundle.BundleFactory;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_FALSE;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.vo.common.OferentesVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 17:27:10 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OferentesVOImpl extends ViewObjectImpl implements OferentesVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public OferentesVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    ArrayList<Row> listRows = new  ArrayList<>();
    
    /** 
     * M&eacute;todo para obtener la implementaci&oacute;n del ConcursanteAdquisicionVORow
     * por el id de la no objeci&oacute;n y el id del tipo de perfil
     * @author Jonathan Ruiz
     * @param idNoObjecion id de la no objeci&oacute;n
     * @param idTcaTipoPerfil id del tipo de perfil
     * @return objetos de implementaci&oacute;n de ConcursanteAdquisicionVORow
     */
    public Row[] getOferentes(Long idNoObjecion, Integer idTcaTipoPerfil) {
        logger.log(ADFLogger.TRACE, "Inside getConcursanteByIdNoObjecionAndIdTcaTipoPerfil.");
        ConcursanteAdquisicionVORowImpl concursanteRow = null;
        ViewCriteria criteriaByIdNoObjecionAndIdTcaTipoPerfil = null;
        Row[] concursantesRow = null;
        
        // Validamos los parametros necesarios
        if (idNoObjecion == null || idTcaTipoPerfil == null) {
            ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
            String msg = rb.getString("org.bcie.fenix.common.vo.concursante.adquisicion.msg.campos.nulos.getby.tipoperfil");
            
            JboException ex = new JboException(msg);
            throw ex;
        }
        
        // Los atributos idOperacion e instanciaProceso son requeridos por el ViewCriteria
        if(idNoObjecion != null && idTcaTipoPerfil != null) {
            // 1) Filtramos el VO por idOperacion e instanciaProceso
            criteriaByIdNoObjecionAndIdTcaTipoPerfil = 
                this.getViewCriteriaManager().getViewCriteria("OferentesVOCriteria");
            
            criteriaByIdNoObjecionAndIdTcaTipoPerfil.ensureVariableManager().setVariableValue("varIdNoObjecion", idNoObjecion);
            criteriaByIdNoObjecionAndIdTcaTipoPerfil.ensureVariableManager().setVariableValue("varIdTcaTipoPerfil", idTcaTipoPerfil);
            
            this.applyViewCriteria(criteriaByIdNoObjecionAndIdTcaTipoPerfil);
            this.setRangeSize(-1);
            this.executeQuery();
            
            // 2) Asignamos valor de retorno
            if(this.getEstimatedRowCount() > 0) {
                concursantesRow = this.getAllRowsInRange();
                
                // Removemos criteria del VO
                //this.getViewCriteriaManager().removeApplyViewCriteriaName("OferentesVOCriteria");
                
                // Re-ejecutamos el query 
                //this.executeQuery();
            }
        }
        
        return concursantesRow;
    }

    /**
     * Returns the variable value for varIdNoObjecion.
     * @return variable value for varIdNoObjecion
     */
    public Long getvarIdNoObjecion() {
        return (Long) ensureVariableManager().getVariableValue("varIdNoObjecion");
    }

    /**
     * Sets <code>value</code> for variable varIdNoObjecion.
     * @param value value to bind as varIdNoObjecion
     */
    public void setvarIdNoObjecion(Long value) {
        ensureVariableManager().setVariableValue("varIdNoObjecion", value);
    }

    /**
     * Returns the variable value for varIdTcaTipoPerfil.
     * @return variable value for varIdTcaTipoPerfil
     */
    public Integer getvarIdTcaTipoPerfil() {
        return (Integer) ensureVariableManager().getVariableValue("varIdTcaTipoPerfil");
    }

    /**
     * Sets <code>value</code> for variable varIdTcaTipoPerfil.
     * @param value value to bind as varIdTcaTipoPerfil
     */
    public void setvarIdTcaTipoPerfil(Integer value) {
        ensureVariableManager().setVariableValue("varIdTcaTipoPerfil", value);
    }
    
    public void setWhereParams(Long idNoObjecion, Integer idTcaTipoPerfil) {
        logger.warning("Oferentes.setWhereParams.  idNoObjecion:"+ idNoObjecion + ", idTcaTipoPerfil:" + idTcaTipoPerfil);
        if(null!=idNoObjecion){
         //   setNamedWhereClauseParam("varIdNoObjecion", idNoObjecion);
         setvarIdNoObjecion(idNoObjecion);
        }
        if(null!=idTcaTipoPerfil){
          //  setNamedWhereClauseParam("varIdTcaTipoPerfil", idTcaTipoPerfil);
            setvarIdTcaTipoPerfil(idTcaTipoPerfil);
        }

        ViewCriteria criteriaByIdNoObjecionAndIdTcaTipoPerfil = null;
        criteriaByIdNoObjecionAndIdTcaTipoPerfil = 
        this.getViewCriteriaManager().getViewCriteria("OferentesVOCriteria");
        this.applyViewCriteria(criteriaByIdNoObjecionAndIdTcaTipoPerfil);

        executeQuery();
        
        RowSetIterator rs = this.createRowSetIterator(null);
        rs.reset();
        while(rs.hasNext()) {
            OferentesVORowImpl oferenteRow = (OferentesVORowImpl)rs.next();

            String nombre =  (String)oferenteRow.getAttribute("Nombre");
            Integer idPais=null;
            String nombrePaises=null;
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixAdquisicionAMImpl fenixAdquisicionAMImpl =(FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();
            if (!nombre.equals("X")) {
                oferenteRow.setAttribute("NombreTr", oferenteRow.getAttribute("Nombre"));
                if(null!=oferenteRow.getAttribute("IdCatPais")){
                        idPais=(Integer)oferenteRow.getAttribute("IdCatPais");
                        nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(idPais);
                        if(null!=nombrePaises){
                            oferenteRow.setAttribute("NacionalidadTr", nombrePaises);
                            }
                    }
            } else {
                oferenteRow.setAttribute("NombreTr", oferenteRow.getAttribute("NombreTr"));
                
                if(null!=oferenteRow.getAttribute("IdCatPais")){
                        idPais=(Integer)oferenteRow.getAttribute("IdCatPais");
                        nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(idPais);
                        if(null!=nombrePaises){
                            oferenteRow.setAttribute("NacionalidadTr", nombrePaises);
                            }
                    }
               // oferenteRow.setAttribute("NacionalidadTr", oferenteRow.getAttribute("NacionalidadTr"));
            }
        }
        rs.closeRowSetIterator();
        logger.info("this.getEstimatedRowCount(): "+this.getEstimatedRowCount());
    }
    
    /**
     *  M&eacujte;todo para crear un nuevo registro de oferentes
     *  @author Jonathan Ruiz
     */
    public void crearRowOferente(Long idNoObjecion){
        logger.warning("Into crearRowOferente.");
        
        // Obtenemos siguiente valor de la secuencia
        oracle.jbo.domain.Number idConcursante = null;
        SequenceImpl seqConcursante = null;

        seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
        idConcursante = seqConcursante.getSequenceNumber();
        
        // Agregamos el nuevo oferente
        Row row = this.createRow();
        row.setAttribute("Id", idConcursante.longValue());
        row.setAttribute("IdNoObjecion", idNoObjecion);
        row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_OFERENTE);
        row.setAttribute("Nombre", "X");
        row.setAttribute("IdCatPais", null);
        row.setAttribute("NombreTr", "");
        row.setAttribute("NacionalidadTr", "");
        row.setAttribute("FechaRegistro", new java.sql.Timestamp(new Date().getTime()));
        this.insertRow(row);
        this.setCurrentRow(row);
        listRows.add(row);
    }
    
    
    public Row crearRowOferenteByExcel(Long idNoObjecion,String nombre, String nacionalidad){
        logger.warning("Into crearRowOferente..");
        logger.warning("nacionalidad: "+nacionalidad);
        
        // Obtenemos siguiente valor de la secuencia
        oracle.jbo.domain.Number idConcursante = null;
        SequenceImpl seqConcursante = null;

        seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
        idConcursante = seqConcursante.getSequenceNumber();
        
        // Agregamos el nuevo oferente
        Row row = this.createRow();
        row.setAttribute("Id", idConcursante.longValue());
        row.setAttribute("IdNoObjecion", idNoObjecion);
        row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_OFERENTE);
        row.setAttribute("Nombre", "X");
        row.setAttribute("IdCatPais", null);
        row.setAttribute("NombreTr", nombre);
        row.setAttribute("NacionalidadTr", nacionalidad);
        row.setAttribute("FechaRegistro", new java.sql.Timestamp(new Date().getTime()));
        this.insertRow(row);
        this.setCurrentRow(row);
        listRows.add(row);
       return row;
    }
    
    
    public void limpiarVO(){
        logger.warning("Into method limpiarVO..");
           
        try{       
            if(listRows.size() > 0){
              logger.warning("Eliminando "+listRows.size()+" row oferentes");
               
               for(Row oferenteRow : listRows){
                   Long idOferente = (Long)oferenteRow.getAttribute("Id");
                   logger.warning("Eliminando oferentes: "+idOferente);
                   Row oferente = this.getRow(new Key(new Object[] { idOferente }));
                   
                   if(oferente != null)
                        oferente.remove();
               }
               
            }
        }catch(Exception e){
            logger.warning("excepcion al limpiar la VO ->"+e.getMessage());
        }
        listRows.clear();
    }
    
    
    public void eliminarOferentesByNoObjecion(Long idNoObjecion){
        Row fila = null;
        ViewCriteria criteria = null;

        try {
            criteria = getViewCriteriaManager().getViewCriteria("getOferentesByNoObjecion");
            criteria.ensureVariableManager().setVariableValue("varIdNoObjecion", idNoObjecion);
            applyViewCriteria(criteria);
            executeQuery();

            if (getEstimatedRowCount() > 0) {
                
                RowSetIterator iter = createRowSetIterator(null);
                OferentesVORowImpl row = null;
                while (iter.hasNext()) {
                   row = (OferentesVORowImpl) iter.next();
                    eliminarOferente(row);
                }                
                iter.closeRowSetIterator();   
                
                
            } else {
                logger.warning("No hay oferentes con el idNoObjecion: "+idNoObjecion);
               
            }

        } catch (Exception e) {
            logger.warning(" Error al buscar id transferencia  ->", e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("getOferentesByNoObjecion");

        }

        
    
    }
    
    
    
    /**
     *  M&eacujte;todo para eliminar el oferente seleccionado
     *  @author Jonathan Ruiz
     */
    public void eliminarOferente(Row oferente){
        logger.warning("Into eliminarOferente");
        if (null != oferente) {
            oferente.remove();
        }
    }
    
    /**
     *  M&eacujte;todo para remover un adjudicatario
     *  @author Jonathan Ruiz
     */
    public void removerAdjudicatario(Row adjudicatario){
        logger.log(ADFLogger.TRACE, "Into removerAdjudicatario.");
        
        if (null != adjudicatario) {
            // Obtenemos siguiente valor de la secuencia
            oracle.jbo.domain.Number idConcursante = null;
            SequenceImpl seqConcursante = null;

            seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
            idConcursante = seqConcursante.getSequenceNumber();
            
            // Agregamos el nuevo oferente
            Row row = this.createRow();
            row.setAttribute("Id", idConcursante.longValue());
            row.setAttribute("IdNoObjecion", adjudicatario.getAttribute("IdNoObjecion"));
            row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_OFERENTE);
            row.setAttribute("Nombre", adjudicatario.getAttribute("Nombre"));
            row.setAttribute("IdCatPais", adjudicatario.getAttribute("IdCatPais"));
            row.setAttribute("NombreTr", adjudicatario.getAttribute("NombreTr"));
            row.setAttribute("NacionalidadTr", adjudicatario.getAttribute("NacionalidadTr"));
            row.setAttribute("FechaRegistro", adjudicatario.getAttribute("FechaRegistro"));
            this.insertRow(row);
            this.setCurrentRow(row);
        }
    }
    
    public void fusionarCamposTrasient() {
        logger.warning("Inicio fusionarCamposTrasient OferenteVOImpl" );
        RowSetIterator rs = this.createRowSetIterator(null);
        
        while(rs.hasNext()) {
            OferentesVORowImpl oferenteRow = (OferentesVORowImpl)rs.next();
            oferenteRow.setAttribute("Nombre", oferenteRow.getAttribute("NombreTr")); 
            String NombreTr = oferenteRow.getAttribute("NombreTr") != null? (String)oferenteRow.getAttribute("NombreTr"): "vacio nombre tr" ;
            String Nombre = oferenteRow.getAttribute("Nombre") != null? (String)oferenteRow.getAttribute("Nombre"): "vacio nombre" ;
            
            logger.warning("prb NombreTr:" + NombreTr);
            logger.warning("prb Nombre:" + Nombre);
            
            oferenteRow.setAttribute("Nombre", Nombre);
            
            //oferenteRow.setAttribute("Nacionalidad", oferenteRow.getAttribute("NacionalidadTr"));
            logger.warning("Oferente.Id:"+oferenteRow.getId());
            logger.warning("Oferente.Nombre:"+oferenteRow.getNombre());
            logger.warning("Oferente.Nacionalidad:"+oferenteRow.getIdCatPais());
        }
        rs.closeRowSetIterator();
    }
    
    /**
     * @return campos no validos
     * -1 los campos son validos
     * 0 el nombre no es valido
     * 1 la nacionalidad no es valida
     * 2 ambos son invalidos
     */
    public int validarCampos() {
        RowSetIterator rs = this.createRowSetIterator(null);
        int camposValidos = -1;
        boolean nombresValidos = Boolean.TRUE;
        boolean nacionalidadesValidos = Boolean.TRUE;
        while(rs.hasNext()) {
            OferentesVORowImpl oferenteRow = (OferentesVORowImpl)rs.next();
            String nombre = (String)oferenteRow.getAttribute("NombreTr");
            String nacionalidad = (String)oferenteRow.getAttribute("NacionalidadTr");
            
            if (null == nombre) {
                nombresValidos = Boolean.FALSE;
            } else {
                if (nombre.trim().equals("")) {
                    nombresValidos = Boolean.FALSE;
                }
            }
            
            if (null == nacionalidad) {
                nacionalidadesValidos = Boolean.FALSE;
            } else {
                if (nacionalidad.trim().equals("")) {
                    nacionalidadesValidos = Boolean.FALSE;
                }
            }
        }
        rs.closeRowSetIterator();
        
        if (!nombresValidos && !nacionalidadesValidos) {
            camposValidos = 2;
        } else if (!nombresValidos && nacionalidadesValidos) {
            camposValidos = 0;
        } else if (nombresValidos && !nacionalidadesValidos) {
            camposValidos = 1;
        }
        
        logger.log(ADFLogger.TRACE, "Into oferentes.validarCampos."+camposValidos);
        return camposValidos;
    }
}

