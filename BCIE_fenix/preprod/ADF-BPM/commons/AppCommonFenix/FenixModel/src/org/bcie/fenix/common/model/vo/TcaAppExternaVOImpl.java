package org.bcie.fenix.common.model.vo;

import java.util.ArrayList;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.TcaAppExternaVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 11 16:03:37 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TcaAppExternaVOImpl extends ViewObjectImpl implements TcaAppExternaVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TcaAppExternaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void cambiarBanEstatus(long llave, boolean banEstatus) {
        logger.log(ADFLogger.WARNING, "Entrando en cambiarBanEstatus.");
        logger.log(ADFLogger.WARNING, "llave: " + llave);
        logger.log(ADFLogger.WARNING, "banEstatus: " + banEstatus);
        
        Row row = this.getRow(new Key(new Object[]{llave}));
        row.setAttribute("BanEstatus", (banEstatus ? 1 : 0));
    }
    
    public Row[] obtenerAppExternasActivas() {
        logger.log(ADFLogger.WARNING, "Entrando en obtenerAppExternasActivas.");
        ViewCriteria viewCriteria = getViewCriteriaManager().getViewCriteria("TcaAppExternaVOActivasCriteria");

        applyViewCriteria(viewCriteria);
        executeQuery();
        
        RowSetIterator rowSetIterator = createRowSetIterator(null);
        rowSetIterator.reset();
        
        List<Row> rows = new ArrayList<>();
        
        while(rowSetIterator.hasNext()) {
            rows.add(rowSetIterator.next());
        }
        
        rowSetIterator.closeRowSetIterator();
        
//        Row[] rows = getAllRows;
//        
        for(Row row: rows) {
            logger.log(ADFLogger.WARNING, ">URL: " + row.getAttribute("DescripcionCorta"));
        }
        
        return ModelUtils.convertListRowToArray(rows);
    }

    /**
     * Returns the variable value for pIdTcaAppExterna.
     * @return variable value for pIdTcaAppExterna
     */
    public Integer getpIdTcaAppExterna() {
        return (Integer) ensureVariableManager().getVariableValue("pIdTcaAppExterna");
    }

    /**
     * Sets <code>value</code> for variable pIdTcaAppExterna.
     * @param value value to bind as pIdTcaAppExterna
     */
    public void setpIdTcaAppExterna(Integer value) {
        ensureVariableManager().setVariableValue("pIdTcaAppExterna", value);
    }
}

