package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.ConsultarTransferenciasByDesembolsoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Feb 09 16:48:32 CST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarTransferenciasByDesembolsoVOImpl extends ViewObjectImpl implements ConsultarTransferenciasByDesembolsoVO {
      
      private static ADFLogger logger = null;
      
      
    public ConsultarTransferenciasByDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }



    public Boolean existenTransfernciasFlex(){
        logger.warning("Inicia metodo existenTransfernciasFlex");                 
        Long idDesembolso = null;
        Boolean existenTransfereciasfFlex = Boolean.FALSE;
        ViewCriteria criteria = null;
                        
            idDesembolso = obtenerDesembolsoCurrent();

            if (idDesembolso == null) {
                logger.warning("*** El parametro idContrato es requerido para la busqueda");                
                throw new JboException("Error no se ha podido evaluar el desembolso actual");                
            }else{
                try {
                    criteria = getViewCriteriaManager().getViewCriteria("ConsultarTransferenciasByDesembolsoVOCriteria");
                    criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idDesembolso);
                    applyViewCriteria(criteria);
                    executeQuery();

                    if (getEstimatedRowCount() > 0) {
                          existenTransfereciasfFlex = Boolean.TRUE;
                         logger.warning("Numero de transferencias flex encontradas: "+getEstimatedRowCount());
                    } else {
                        logger.warning("no se encontraron transferencias registradas para el desembolso: "+idDesembolso);
                    }
                }catch(Exception e) {
                    logger.warning("Error al existenTransferenciasFlexByIdContrato??->" + e);
                }finally{
                    getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarTransferenciasByDesembolsoVOCriteria");
                    executeQuery();
                }
            }
        
        logger.warning("Termina metodo existenTransfernciasFlex"); 
        return existenTransfereciasfFlex;
    }
     
     
     
    public Long obtenerDesembolsoCurrent(){
        logger.warning("Inicia metodo obtenerIdContratoDesembolsoActivo");
        Long idDesembolso= null;
        Row row = null;
        
        FenixGestorDesembolsosAMImpl fenixAMImpl = null;
        
        try{
            fenixAMImpl = (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        }catch(Exception e){
            logger.warning("ERROR al crear instancia de FENIXAMIMPL.", e);
        }
        
        if(null != fenixAMImpl){
            try{
                row = fenixAMImpl.getCrearActualizarContratoDesembolsoVO().getCurrentRow();
            }catch(Exception e){
                logger.warning("ERROR al recuperar el row de contrato.", e);
            }
            
            if(null != row){
                try{
                    idDesembolso = (Long) row.getAttribute("Id");
                }catch(Exception e){
                    logger.warning("ERROR al recuperar el idContrato.", e);
                }
            }else{
                logger.warning("El currentRow de ContratoDesembolsos es NULL.");
            }
        }else{
            logger.warning("Instancia de FENIXAMIMPL es NULL.");
        }
        
        logger.warning("ContratoDesembolso recuperado: " + idDesembolso);
        logger.warning("Termina metodo obtenerIdContratoDesembolsoActivo");
        return idDesembolso;
    }


    /**
     * Returns the variable value for pIdDesembolso.
     * @return variable value for pIdDesembolso
     */
    public Long getpIdDesembolso() {
        return (Long) ensureVariableManager().getVariableValue("pIdDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pIdDesembolso.
     * @param value value to bind as pIdDesembolso
     */
    public void setpIdDesembolso(Long value) {
        ensureVariableManager().setVariableValue("pIdDesembolso", value);
    }
}

