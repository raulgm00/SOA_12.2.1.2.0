package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 04 17:44:02 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreContrapartesTerminoVOImpl extends ViewObjectImpl {
    
    ADFLogger logger = ADFLogger.createADFLogger(this.getClass());
    /**
     * This is the default constructor (do not remove).
     */
    public TreContrapartesTerminoVOImpl() {
    }
    
    public void consultarContrapartesPorTermino(Long idTermino) {
        logger.warning("Entrando en consultarContrapartesPorTermino.");
        
        try {
            ViewCriteria viewCriteria = getViewCriteriaManager().getViewCriteria("TreContrapartesTerminoVOCriterioPorTermino");
            viewCriteria.ensureVariableManager().setVariableValue("pIdTermino", idTermino);

            applyViewCriteria(viewCriteria);
            
            logger.warning("Contrapartes, Terminos encontrados: " + getEstimatedRowCount());
            
            executeQuery();
            
            removeApplyViewCriteriaName("TreContrapartesTerminoVOCriterioPorTermino");
        } catch (Exception e) {
            logger.warning("Error al recuperar las contrapartes por termino." , e);
        }
    }
    
    public void replicarContrapartesPadre(Long idTerminoPadre, Long idTerminoEnmendado) {
        logger.warning("Entrando en replicarContrapartesPadre.");
        logger.warning("idTerminoPadre: " + idTerminoPadre);
        logger.warning("idTerminoEnmendado: " + idTerminoEnmendado);
        
        int terminosEnmendados = 0;
        if (null != idTerminoPadre && null != idTerminoEnmendado) {
            consultarContrapartesPorTermino(idTerminoPadre);
            
            RowSetIterator rowSetIterator = createRowSetIterator(null);
            rowSetIterator.reset();
            
            while(rowSetIterator.hasNext()) {
                Row rowPadre = rowSetIterator.next();
                
                Row row = createRow();
                
                SequenceImpl seqTermino = new SequenceImpl("TRE_CONTRAPARTES_TERMINO_SEQ", getDBTransaction());
                
                row.setAttribute(TreContrapartesTerminoVORowImpl.ID, seqTermino.getSequenceNumber().longValue());
                row.setAttribute(TreContrapartesTerminoVORowImpl.IDTERMINO, idTerminoEnmendado);
                row.setAttribute(TreContrapartesTerminoVORowImpl.IDCLIENTE, 
                                 rowPadre.getAttribute(TreContrapartesTerminoVORowImpl.IDCLIENTE));
                
                insertRow(row);
                
                terminosEnmendados++;
            }
            
            rowSetIterator.closeRowSetIterator();
            
            logger.warning("Contrapartes, Terminos enmendados: " + terminosEnmendados);
        } else {
            logger.warning("Error, parametros no validos");
        }
    }

    /**
     * Returns the variable value for pIdTermino.
     * @return variable value for pIdTermino
     */
    public Long getpIdTermino() {
        return (Long) ensureVariableManager().getVariableValue("pIdTermino");
    }

    /**
     * Sets <code>value</code> for variable pIdTermino.
     * @param value value to bind as pIdTermino
     */
    public void setpIdTermino(Long value) {
        ensureVariableManager().setVariableValue("pIdTermino", value);
    }
}

