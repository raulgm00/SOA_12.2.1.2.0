package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.ConsultarContratoTreSolicitudLineaCreditoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 02 11:18:31 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarContratoTreSolicitudLineaCreditoVOImpl extends ViewObjectImpl implements ConsultarContratoTreSolicitudLineaCreditoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultarContratoTreSolicitudLineaCreditoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Long obtenerPrimerContratoActivo(Long idSolicitud){
        logger.warning("Inicia metodo obtenerPrimerContratoActivo");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        Row row = null;
        Long idContratoActivo = null;
        
        if(null == idSolicitud){
            logger.warning("ERROR parametro idSolicitud requerido es NULL");
            return idContratoActivo;
        }
        
        setvIdSolicitud(idSolicitud);
        executeQuery();
        
        logger.warning("Registros de contratos encontrados para la solicitud " + idSolicitud + ": " + getEstimatedRowCount());
        if(getEstimatedRowCount() > 0){
            Integer idEstadoContrato = null;
            RowSetIterator iter = createRowSetIterator(null);
            if (null != iter) {
                iter.reset();
                while (iter.hasNext()) {
                    row = iter.next();
                    logger.warning("Obteniendo idEstadoContrato");
                    try{
                        idEstadoContrato = (Integer) row.getAttribute("IdEstadoContrato");
                    }catch(Exception e){
                        logger.warning("ERROR al obtener el idEstadoContrato del Contrato");
                    }
                    
                    logger.warning("idEstadoContrato: " + idEstadoContrato);
                    if(null != idEstadoContrato){
                        if(!(idEstadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO)==0)){
                            logger.warning("Obteniendo idContratoActivo");
                            try{
                                idContratoActivo = (Long) row.getAttribute("IdContratoDesembolso");
                                break;
                            }catch(Exception e){
                                logger.warning("ERROR al obtener el idContratoDesembolso");
                            }
                        }
                    }else{
                        logger.warning("Atributo idEstadoContrato es NULL");
                    }
                }
            } else {
                logger.warning("Iterador vacio.");
            }
            iter.closeRowSetIterator();
        }
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.warning("IdContrato activo obtenido: " + idContratoActivo);
        logger.warning("Termina metodo obtenerPrimerContratoActivo con una duracion de: "+tiempo+" segundos");
        return idContratoActivo;
    }


    public Boolean setFechaIniProcesParaContratosByIdSolicitud(Long idSolicitud){
        logger.warning("Inf, Inicia metodo setFechaIniProcesParaContratosByIdSolicitud");
         Boolean respuesta = Boolean.FALSE;
                
                
         if(idSolicitud == null){
            logger.warning("Error, Parametro idSolcitud es requerido no se ejecutara el Query");
             return respuesta;
             }
                
           setvIdSolicitud(idSolicitud);
            executeQuery();   
               
            FenixAMImpl fenixAMImpl = null;          
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();             
            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM
                    = (FenixGestorDesembolsosAMImpl)fenixAMImpl.getFenixGestorDesembolsosAM();
                                    
            ConsultarContratoTreSolicitudLineaCreditoVORowImpl row = null;               
                RowSetIterator iter = createRowSetIterator(null);                
            
            logger.warning("Numero de registros encontrados : "+ getEstimatedRowCount());
            logger.warning("Iterando sobre registros....");
            
            while (iter.hasNext()) {
               row = (ConsultarContratoTreSolicitudLineaCreditoVORowImpl)iter.next();         
               Long idContrato = (Long)row.getAttribute("IdContratoDesembolso");
               logger.warning("Contrato desemvolsos recuperado : "+idContrato);            
                Boolean seGuardoFecha =  fenixGestorDesembolsosAM.getContratoDesembolsoVO().guardarFechaInicioProcesDes(idContrato);
               
                if(seGuardoFecha){
                       logger.warning("Inf, ok se guardo fecha para contrato : "+idContrato);            
                   }else{
                        logger.warning("Error, no se guardo fecha para el contrato : "+idContrato);            
                    }
                
             }                    
            iter.closeRowSetIterator();    
            
        logger.warning("Inf, Termina metodo setFechaIniProcesParaContratosByIdSolicitud");
        return respuesta;
        }


    public Boolean validarCamopsObligatoriosContratos(Long idSolicitud){
        logger.warning("Inf, inicia metodo validarCamopsObligatoriosContrato");
            ArrayList<Long> contratosList = new ArrayList<Long>();
            ArrayList<Long> contratosSinPasarValidacion = new ArrayList<Long>();
            Boolean respuesta = Boolean.TRUE;
                   
            if(idSolicitud == null){
               logger.warning("Error, Parametro idSolcitud es requerido no se ejecutara el Query");
                return respuesta;
                }
                   
              setvIdSolicitud(idSolicitud);
               executeQuery();   
            
            FenixAMImpl fenixAMImpl = null;          
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();             
            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM
                    = (FenixGestorDesembolsosAMImpl)fenixAMImpl.getFenixGestorDesembolsosAM();
                                    
            ConsultarContratoTreSolicitudLineaCreditoVORowImpl row = null;               
                RowSetIterator iter = createRowSetIterator(null);                
            
            logger.warning("Numero de registros encontrados : "+ getEstimatedRowCount());
            logger.warning("Iterando sobre registros....");
            
            while (iter.hasNext()) {
                row = (ConsultarContratoTreSolicitudLineaCreditoVORowImpl)iter.next();
                Long idContrato = (Long)row.getAttribute("IdContratoDesembolso");
                logger.warning("Contrato desemvolsos recuperado : "+idContrato);     
                   contratosList.add(idContrato);
                   
                   Boolean datosContratoCompletos =  (Boolean)fenixGestorDesembolsosAM.getContratoDesembolsoVO().validarCamposObligatoriosContrato(idContrato);
                                                         
                if(!datosContratoCompletos){                   
                    contratosSinPasarValidacion.add(idContrato);
                    respuesta = Boolean.FALSE;
                }                                                              
            }                    
            iter.closeRowSetIterator();            
                    
        logger.warning("Inf, termina metodo validarCamopsObligatoriosContrato");
        return respuesta;
        }


    public Boolean validarEstadoContratosBySolicitud(Long idSolicitud) {
        logger.warning("Inf, inicia metodo cambiarBanStatusContratosBySolicitud");
        Boolean respuesta = Boolean.TRUE;

        if (idSolicitud == null) {
            logger.warning("Error, Parametro idSolcitud es requerido no se ejecutara el Query");
            return Boolean.FALSE;
        }

        setvIdSolicitud(idSolicitud);
        executeQuery();

        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();

        ConsultarContratoTreSolicitudLineaCreditoVORowImpl row = null;
        RowSetIterator iter = createRowSetIterator(null);

        logger.warning("Numero de registros encontrados : " + getEstimatedRowCount());
        logger.warning("Iterando sobre registros....");

        while (iter.hasNext()) {
            row = (ConsultarContratoTreSolicitudLineaCreditoVORowImpl) iter.next();
            Long idContrato = (Long) row.getAttribute("IdContratoDesembolso");
            logger.warning("Contrato desembolsos recuperado : " + idContrato);

            Boolean estadoContratoCreado =
                (Boolean) fenixGestorDesembolsosAM.getContratoDesembolsoVO().validarEstadoContratoACreado(idContrato);

            if (!estadoContratoCreado) {
                logger.warning("La solicitud no psao la validacion: el contrato :" + idContrato +
                               " tiene un estado diferente a creado");
                respuesta = Boolean.FALSE;
                break;
            }

        }
        iter.closeRowSetIterator();

        logger.warning("Inf, termina metodo cambiarBanStatusContratosBySolicitud");
        return respuesta;
    }
   
   
    public Boolean laSolicitudTieneContratos(Long idSolicitud){
        logger.warning("Inf, inicia metodo contarContratosSolicitud");
         Boolean respuesta = Boolean.FALSE;
        
            if(idSolicitud == null){
                logger.warning("Error, Parametro idSolcitud es requerido no se ejecutara el Query");
               return null;
              }
            
             setvIdSolicitud(idSolicitud);
             executeQuery();              
             if(getEstimatedRowCount() > 0){                 
                  respuesta = Boolean.TRUE;                 
               }
                   
        logger.warning("Inf, termina metodo contarContratosSolicitud");
        return respuesta;
        }
     
    public Boolean desestimarContratosBySolicitud(Long idSolicitud){
        logger.warning("Inf, Inicia metodo desestimarContratosBySolicitud");
         Boolean respuesta = Boolean.TRUE;
        
            if(idSolicitud == null){
                logger.warning("Error, Parametro idSolcitud es requerido no se ejecutara el Query");
                 return Boolean.FALSE;
              }
            
            setvIdSolicitud(idSolicitud);
             executeQuery();   
             
             if(getEstimatedRowCount() > 0){
                                             
                    FenixAMImpl fenixAMImpl = null;
                    fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                    FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM
                          = (FenixGestorDesembolsosAMImpl)fenixAMImpl.getFenixGestorDesembolsosAM();
                                          
                    ConsultarContratoTreSolicitudLineaCreditoVORowImpl row = null;
                      RowSetIterator iter = createRowSetIterator(null);                
                    
                    logger.warning("Numero de registros encontrados : "+ getEstimatedRowCount());
                    logger.warning("Iterando sobre registros....");
            
                    while (iter.hasNext()) {
                             row = (ConsultarContratoTreSolicitudLineaCreditoVORowImpl)iter.next();    
                                Long idContrato = (Long)row.getAttribute("IdContratoDesembolso");
                                logger.warning("Contrato desemvolsos recuperado : "+idContrato);   
                        
                             Boolean seDesestimoContrato = 
                                  (Boolean)fenixGestorDesembolsosAM.getContratoDesembolsoVO().eliminarContratoSolicitud(idContrato);
                                
                                if(!seDesestimoContrato){
                                       respuesta = Boolean.FALSE;                         
                                   }                        
                         }                    
                        iter.closeRowSetIterator();
             }   
             
                          
        logger.warning("Inf, Termina metodo desestimarContratosBySolicitud");
        return respuesta;
        }
   
   
    public Long idContratoMayorSolicitud(Long idSolicitud){        
        logger.warning("Inf, Inicia metodo idContratoMyorSolicitud");
          Row fila = null;
          Long idDesembolso = null;
          
          if(idSolicitud == null){
            logger.warning("Error, Parametro idSolcitud es requerido no se ejecutara el Query");
          }
            
            setvIdSolicitud(idSolicitud);
            executeQuery();
            logger.warning("*Inf, numero de registros encontrados: "+getEstimatedRowCount());
            
            if(getEstimatedRowCount()>0){
               fila =  last();
             
                if(fila != null){
                   idDesembolso = (Long)fila.getAttribute("IdContratoDesembolso");
                }
            }
        logger.warning("Inf,  desembolso mayor de la solicitud: "+idDesembolso);
        logger.warning("Inf, termina metodo idContratoMyorSolicitud ");
       return idDesembolso;        
    }
   
   
    /**
     * Returns the bind variable value for vIdSolicitud.
     * @return bind variable value for vIdSolicitud
     */
    public Long getvIdSolicitud() {
        return (Long) getNamedWhereClauseParam("vIdSolicitud");
    }

    /**
     * Sets <code>value</code> for bind variable vIdSolicitud.
     * @param value value to bind as vIdSolicitud
     */
    public void setvIdSolicitud(Long value) {
        setNamedWhereClauseParam("vIdSolicitud", value);
    }
}

