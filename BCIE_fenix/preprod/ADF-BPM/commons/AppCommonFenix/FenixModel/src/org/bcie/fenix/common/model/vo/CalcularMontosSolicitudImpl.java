package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.CalcularMontosSolicitud;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 13 12:32:50 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CalcularMontosSolicitudImpl extends ViewObjectImpl implements CalcularMontosSolicitud {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(CalcularMontosSolicitudImpl.class);
    
    public CalcularMontosSolicitudImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    public void obtenerMontosSolicitud(Long idSolicitud){
        logger.warning("Inicio metodo obtenerMontosSolicitud");
            Row fila = null;
            BigDecimal montoTotal = (BigDecimal)obtenerSumaMontoContratos(idSolicitud);
            BigDecimal montoDesembolsado = obtenerMontoDesembolsado(idSolicitud);
         
            logger.warning("valor recuperado para montoTotalSolicitud: " + montoTotal);
            logger.warning("valor recuperado para montoDesembolsado: " + montoDesembolsado);
         
            if (this.getEstimatedRowCount() <= 0) {                          
                    fila = this.createRow();
                    fila.setAttribute("id", 1L);
                    fila.setAttribute("montoTotalSolicitud", montoTotal);
                    fila.setAttribute("montoDesembolsadoSolicitud", montoDesembolsado);
                    this.insertRow(fila);
                    this.setCurrentRow(fila);
            }else{
                    fila = getCurrentRow();                    
                    fila.setAttribute("montoTotalSolicitud", montoTotal);
                    fila.setAttribute("montoDesembolsadoSolicitud", montoDesembolsado);
                }
                        
         logger.warning("termina metodo obtenerMontosSolicitud");            
        }
    
    
    public Row recuperarMontosCurrentSolicitud(){
      logger.warning("Inf, inicia metodo obtenerMontosSolicitud");
        Row fila = null;
        
        if(getEstimatedRowCount() > 0){
             fila = getCurrentRow();            
        }else{         
              logger.warning("***Error , no hay montos hasociados a la solicitud");
            }        
        logger.warning("Inf, termina metodo obtenerMontosSolicitud");
        return fila;
        }
    
    public BigDecimal obtenerSumaMontoContratos(Long idSolicitud){
        logger.warning("Inicio metodo obtenerSumaMontoContratos");
        BigDecimal sumaMontos = BigDecimal.ZERO;
		BigDecimal sumaMontosD = BigDecimal.ZERO;
        
        if(null == idSolicitud){
            logger.warning("Error, parametro idSolicitud requerido es NULL");
            return sumaMontos;
        }

        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM =
            (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        sumaMontos = (BigDecimal)fenixGestorDesembolsosAM.getTreSolicitudLineaCreditoVO().obtenerSumaMontoContratos(idSolicitud);
        
        logger.warning("Inicio metodo obtenerSumaMontoContratos. MontoTotal: " + sumaMontos);
        
        // Se convierte el monto a dolares
        sumaMontosD = this.convertirMonedasADolar(sumaMontos, idSolicitud);
        
        logger.warning("Inicio metodo obtenerSumaMontoContratos. MontoTotal Dolarizado: " + sumaMontosD);
        
        return sumaMontosD;
        //return sumaMontos;
    }


    public BigDecimal obtenerMontoDesembolsado(Long idSolicitud){
        logger.warning("Inf, Inicia metodo obtenerMontoDesembolsado montoDesembolsado");
            BigDecimal montoDesembolsado = BigDecimal.ZERO;
            BigDecimal montoDesembolsadoD = BigDecimal.ZERO;
		  
            if(null == idSolicitud){
                logger.warning("Error, parametro idSolicitud requerido es NULL");
                return montoDesembolsado;
            }
       
            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM =
                (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
            montoDesembolsado = (BigDecimal)fenixGestorDesembolsosAM.getContratoDesembolsoSumMontoDesembolsarVO().calcularMontoDesembolsado(idSolicitud);
            
            logger.warning("Inf, Termina metodo obtenerMontoDesembolsado montoDesembolsado: " + montoDesembolsado);       

            // Se convierte el monto a dolares
            montoDesembolsadoD = this.convertirMonedasADolar(montoDesembolsado, idSolicitud); 
            
            logger.warning("Inf, Termina metodo obtenerMontoDesembolsado montoDesembolsado Dolarizado: " + montoDesembolsadoD);       
            
            return montoDesembolsadoD;
            //return montoDesembolsado;
        }

    private BigDecimal convertirMonedasADolar(BigDecimal monto, Long idSolicitud) {
        logger.warning("Inf, Inicia metodo convertirMonedasADolar");
        logger.warning("Prueba: 1");
        
        BigDecimal montoDesembolsadoDolarizado = BigDecimal.ZERO;
        
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM =
            (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        
        logger.warning("codigoA: USD");
        logger.warning("monto normal: " , monto);
        
        String codigoDe = fenixGestorDesembolsosAM.getTipoMonedaDeSolicitudDesembolsosVO().getTipoMonedaDeSolicitud(idSolicitud);
        
        logger.warning("codigoDe: " , codigoDe);
        
        if(codigoDe !=  null) {
            montoDesembolsadoDolarizado = fenixGestorDesembolsosAM.convertirMonedasNew(codigoDe , "USD" , monto);
            
            logger.warning("monto dolarizado: " , monto);
        } else {
            logger.warning("monto no dolarizado: " , monto);
            montoDesembolsadoDolarizado = monto;
        }
        
        return montoDesembolsadoDolarizado;
    }

}

