package org.bcie.fenix.common.model.vo;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.LineaCreditoDesembolsosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 25 17:41:22 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LineaCreditoDesembolsosVOImpl extends ViewObjectImpl implements LineaCreditoDesembolsosVO {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(AprobacionVOImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public LineaCreditoDesembolsosVOImpl() {
    }


    /**
     * Consulta y carga las lineas de desembolso asociadas a la linea de credito
     *
     * @param idSolicitud
     * @return row[]
     * @since 25/08/2016
     */
    public Row[] getLineasCreditoSolicitud(Long idSolicitud){
        logger.log(ADFLogger.WARNING, "Into getLineaCreditoDesembolso");

        ViewCriteria criteria = null;
        Row[] row = null;
        
        if(idSolicitud != null){
            try{
                criteria = this.getViewCriteriaManager().getViewCriteria("LineaCreditoDesembolsosVOCriteria");
                criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                if(this.getEstimatedRowCount() > 0){
                    row = this.getAllRowsInRange();
                    logger.log(ADFLogger.WARNING, "Se cargan Rows de Linea");
                }else{
                    logger.log(ADFLogger.WARNING, "El row es NULL");
                }
            }catch(Exception e){
                logger.log(ADFLogger.WARNING, "Error en getLineaCreditoDesembolso" + e.getClass() +
                            ":" + e.getMessage());
            }
            finally{
                this.getViewCriteriaManager().removeApplyViewCriteriaName("LineaCreditoDesembolsosVOCriteria");
            }  
        } else {
            logger.warning("El Id de la lista es NULL");
        }
        
        return row;
    }
    
    public Long getLineasCreditoByIdOperacion(Long idOperacion){
        logger.log(ADFLogger.WARNING, "<Where I am: getLineaCreditoDesembolso> "+idOperacion );

        ViewCriteria criteria = null;
        Row[] row = null;
        Long idLineaCredito = null;
    
        if(idOperacion != null){
            try{
                logger.log(ADFLogger.WARNING, "< Inside the try > " + idOperacion );
                criteria = this.getViewCriteriaManager().getViewCriteria("LineaCreditoCriteria");
                criteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                row = this.getAllRowsInRange();
               if(this.getEstimatedRowCount() > 0){
                   idLineaCredito = (Long) row[0].getAttribute("Id");
                   logger.log(ADFLogger.WARNING, "Se cargan Rows de Linea: " + idLineaCredito);
               }else{
                   logger.log(ADFLogger.WARNING, "El row es NULL");
               }
            }catch(Exception e){
                logger.log(ADFLogger.WARNING, "Error en getLineaCreditoDesembolso " + e.getClass() +
                            ":" + e.getMessage());
            }
            finally{
                this.getViewCriteriaManager().removeApplyViewCriteriaName("LineaCreditoCriteria");
            }  
        } else {
            logger.warning("El Id de la lista es NULL");
        }
        return idLineaCredito;
    }
    
    public  Row getRowSeleccionada(){  
            logger.warning("SeleccionandoRow en el modelo id->"+getCurrentRow().getAttribute("Id"));
            Row row = getCurrentRow();     
            return row;
        }


    public void establecerRowComoActual(Long idLinea, Long idSolicitud){
        
            logger.log(ADFLogger.WARNING, "<Where I am: getLineaCreditoDesembolso> idLinea->"+idLinea );

            ViewCriteria criteria = null;
            Row row = null;
            Long idLineaCredito = null;
            
            if(idLinea != null){
                try{
                    logger.log(ADFLogger.WARNING, "< Inside the try > IdLinea" + idLinea + " idSolicitud->" +idSolicitud);
                    criteria = this.getViewCriteriaManager().getViewCriteria("BuscarLineaPorIdLineaIdSolicitudVC");
                    criteria.ensureVariableManager().setVariableValue("pIdLinea", idLinea);
                    criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);                    
                    this.applyViewCriteria(criteria);
                    this.executeQuery();
                    
                   if(getEstimatedRowCount() > 0){
                       logger.log(ADFLogger.WARNING, "Paso el if");
                       row = this.getRowAtRangeIndex(0);
                       setCurrentRow(row);
                                             
                   }else{
                       logger.log(ADFLogger.WARNING, "El row es NULL");
                   }
                }catch(Exception e){
                    logger.log(ADFLogger.WARNING, "Error en establecerRowComoActual " + e.getClass() +
                                ":" + e.getMessage());
                }
                finally{
                    this.getViewCriteriaManager().removeApplyViewCriteriaName("BuscarLineaPorIdLineaVC");
                }  
            } else {
                logger.warning("El Id de la lista es NULL");
            }
        }


    /**
     * Returns the variable value for pIdSolicitud.
     * @return variable value for pIdSolicitud
     */
    public Number getpIdSolicitud() {
        return (Number) ensureVariableManager().getVariableValue("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Number value) {
        ensureVariableManager().setVariableValue("pIdSolicitud", value);
    }

    @Override
    public Row getLineaCreditoDesembolso(Number idLista) {
        // TODO Implement this method
        return null;
    }


    /**
     * Returns the variable value for pidOperacion.
     * @return variable value for pidOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pidOperacion.
     * @param value value to bind as pidOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }

    /**
     * Returns the variable value for pIdLinea.
     * @return variable value for pIdLinea
     */
    public Long getpIdLinea() {
        return (Long) ensureVariableManager().getVariableValue("pIdLinea");
    }

    /**
     * Sets <code>value</code> for variable pIdLinea.
     * @param value value to bind as pIdLinea
     */
    public void setpIdLinea(Long value) {
        ensureVariableManager().setVariableValue("pIdLinea", value);
    }

}

