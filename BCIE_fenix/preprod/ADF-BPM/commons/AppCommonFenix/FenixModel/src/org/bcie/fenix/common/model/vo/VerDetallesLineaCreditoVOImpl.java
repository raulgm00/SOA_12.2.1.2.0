package org.bcie.fenix.common.model.vo;import java.math.BigDecimal;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.Key;import oracle.jbo.Row;import oracle.jbo.ViewCriteria;import oracle.jbo.server.ViewObjectImpl;import org.bcie.fenix.common.model.vo.common.VerDetallesLineaCreditoVO;// ---------------------------------------------------------------------// ---    File generated by Oracle ADF Business Components Design Time.// ---    Tue Nov 08 19:04:02 CST 2016// ---    Custom code may be added to this class.// ---    Warning: Do not modify method signatures of generated methods.// ---------------------------------------------------------------------public class VerDetallesLineaCreditoVOImpl extends ViewObjectImpl implements VerDetallesLineaCreditoVO {    private static ADFLogger logger = null;    public VerDetallesLineaCreditoVOImpl() {        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }    }    public void filtraLineaById(Long idLinea){        logger.log(ADFLogger.WARNING, "Inside filtraLineaById, idLinea: " + idLinea);        ViewCriteria criteria = null;        if(null == idLinea){            logger.log(ADFLogger.WARNING, "ERROR! IdLinea NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("LineaCriteria");                criteria.ensureVariableManager().setVariableValue("pIdLinea", idLinea);                this.applyViewCriteria(criteria);                this.executeQuery();            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en filtraLineaById " + e.getClass() + ":" + e.getMessage());            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("LineaCriteria");            }                    }    }            public void setlineaComoCurrent(Long idLinea){        logger.warning("Inf, inicia el metodo lineaComoCurrent");           ViewCriteria criteria = null;                if(idLinea == null){            logger.warning("***Error, El parametro requerido idLinea es resuelto a null");           }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("LineaCriteria");                criteria.ensureVariableManager().setVariableValue("pIdLinea", idLinea);                this.applyViewCriteria(criteria);                this.executeQuery();                                    logger.warning("Registros de LineaCredito obtenidos de criteria: " + getEstimatedRowCount());                if(getEstimatedRowCount() > 0){                    logger.warning("Seteando CurrentRow de LineaCredito: " + first().getAttribute("Id"));                    setCurrentRow(first());                }else{                    logger.warning("Inf, No se encontro la linea con el id : " +idLinea );                }            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en filtraLineaById ", e);            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("LineaCriteria");            }         }      }      public Boolean cambiarMonto(BigDecimal monto){          logger.warning("SeleccionandoRow en el modelo id->"+getCurrentRow().getAttribute("Id"));        logger.warning("Monto obtenido: " +monto);        Boolean respuesta=Boolean.FALSE;        if(null!=getCurrentRow().getAttribute("MontoLinea")){            if(monto!=null){                    getCurrentRow().setAttribute("MontoLinea", monto);                    try{                        getDBTransaction().commit();                        respuesta = Boolean.TRUE;                        logger.warning("commit exitoso");                    }catch(Exception e){                        logger.warning("ERROR al realizar el COMMIT para cambiar el monto de la linea.", e);                        try{                            getDBTransaction().commit();                            respuesta = Boolean.TRUE;                            logger.warning("Segundo commit realizado con exito");                        }catch(Exception ex){                            logger.warning("Ocurrió un problema al realizar el COMMIT: ", ex);                        }                    }                }            else{                    logger.warning("no se obtuvo monto");                }            }        else{                logger.warning("no se obtuvo row de la linea para el monto");            }        return respuesta;    }          public Row getVerDetalleLineaCredito(){          logger.warning("SeleccionandoRow en el modelo id->"+getCurrentRow().getAttribute("Id"));        Row row = getCurrentRow();             return row;    }    /**     * Returns the variable value for pIdLinea.     * @return variable value for pIdLinea     */    public Long getpIdLinea() {        return (Long) ensureVariableManager().getVariableValue("pIdLinea");    }    /**     * Sets <code>value</code> for variable pIdLinea.     * @param value value to bind as pIdLinea     */    public void setpIdLinea(Long value) {        ensureVariableManager().setVariableValue("pIdLinea", value);    }}