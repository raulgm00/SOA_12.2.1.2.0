package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.comisionservice.Comision;
import com.bcie.xmlns.comisionservice.ComisionPT;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import org.bcie.comisionmo.ConsultarComisionesByIdOperacionRequestType;
import org.bcie.comisionmo.ConsultarComisionesByIdOperacionResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ComisionRegistradaFlexVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 18 17:09:30 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComisionRegistradaFlexVOImpl extends ViewObjectImpl implements ComisionRegistradaFlexVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    public ComisionRegistradaFlexVOImpl() {
        if(null == logger){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public List<Row> obtenerComisionesSinRegistrar(Long idOperacion){
        logger.warning("Entra en obtenerComisionesSinRegistrar");
        Long idComision = null;
        Long idComisionFlex = null;
        List<org.bcie.comisionbo.Comision> listaComisiones = new ArrayList<org.bcie.comisionbo.Comision>();
        List<Row> comisiones = new ArrayList<Row>(); 
        FenixAMImpl fenixAmImpl = null;
        try{
            this.clearCache();
            fenixAmImpl = (FenixAMImpl)this.getRootApplicationModule(); 
            setvarIdOperacionTcaComision(idOperacion);
            this.executeQuery();
            //Se invoca servicio para obtener las comisiones que se encuentran registradas en flexcube
            listaComisiones = obtenerComisionRegistradaFlexcube(idOperacion);
            
            logger.warning("Numero de comisiones en matriz : " + this.getEstimatedRowCount());
            logger.warning("Numero de comisiones registradas en flexcube : " + listaComisiones.size());
            
            RowSetIterator iterator = this.createRowSetIterator(null);
            iterator.reset();
            while(iterator.hasNext()){
                ComisionRegistradaFlexVORowImpl rowImpl = (ComisionRegistradaFlexVORowImpl)iterator.next();
                    if(null != rowImpl.getIdComision()){
                        idComision = rowImpl.getIdComision();
                        logger.warning("Valor de la comision : " + idComision);
                        Boolean esRegistrada = Boolean.TRUE;
                        Integer contador = 0;
                        if(listaComisiones.size() > 0){
                            for(org.bcie.comisionbo.Comision comision : listaComisiones){
                                idComisionFlex = comision.getIdComision();
                                if(null !=  idComisionFlex){
                                    if(idComision.compareTo(idComisionFlex) == 0){
                                        contador++;
                                        break;
                                    }
                                }
                            }
                        }else{
                            logger.warning("No se encontraron comisiones en flex para la operacion.");
                        }
                        if(contador > 0){
                            logger.warning("La comision no se encuentra en flexcube.");
                            comisiones.add(rowImpl);
                        }else{
                            logger.warning("La comision se encuentra registrada en flexcube");
                        }
                    }else{
                        logger.warning("Error id de la comision es nula : " + rowImpl.getIdComision());
                    }
                
            }
            iterator.closeRowSetIterator();
            if(comisiones.size() > 0){
                logger.warning("Se encontraron comisiones sin registrar en flexcube.");
            }else{
                logger.warning("Todas las comisiones se encuentran registradas en Flexcube.");
            }
        }catch(Exception e){
            logger.warning("Error en obtenerComisionesSinRegistrar.", e);
        }
        logger.warning("Numero comisiones regresadas : " + comisiones.size());
        return comisiones;
    }
    
    private List<org.bcie.comisionbo.Comision> obtenerComisionRegistradaFlexcube(Long idOperacion){
        logger.warning("Entra en validaComisionRegistrada.");
        FenixAMImpl fenixAM = null;
        String wsdl = null;
        Comision comision = null;
        ComisionPT comisionPT = null;
        ConsultarComisionesByIdOperacionRequestType request = null;
        ConsultarComisionesByIdOperacionResponseType response = null;
        List<org.bcie.comisionbo.Comision> listaComisiones = new ArrayList<org.bcie.comisionbo.Comision>();
        Boolean registrada = Boolean.TRUE;
        try{
            logger.warning("Valor de la operacion : " + idOperacion);
            
            fenixAM = (FenixAMImpl)this.getRootApplicationModule(); 
            wsdl = fenixAM.getWsdl(IWsdlLocation.COMISION);
            comision = IWsdlLocation.Service.getInstance(Comision.class, wsdl);
            
            comisionPT = comision.getComision12Bnd();
            request = new ConsultarComisionesByIdOperacionRequestType();
            
            request.setIdOperacion(idOperacion);
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_COMISION);
            response = comisionPT.consultarComisionesByIdOperacion(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_COMISION, horaInicio);
            
            if(null != response){
                if(null != response.getResultado()){
                    if(null != response.getResultado().getResult()){
                        if(response.getResultado().getResult().value().equalsIgnoreCase("OK")){
                            logger.warning("Respuesta afirmativa del servicio. " + response.getResultado().getMessage());
                            listaComisiones = response.getListaComisiones().getComision();
                        }else{
                            logger.warning("El servicio regresa error. " + response.getResultado().getMessage());
                            throw new Exception(response.getResultado().getMessage());
                        }
                    }else{
                        logger.warning("El objeto response.getResultado().getResult() es nulo.");
                        throw new Exception("El objeto response.getResultado().getResult() es nulo.");
                    }
                }else{
                    logger.warning("Error, el objeto response.getResultado() es nulo.");
                    throw new Exception("El objeto response.getResultado() es nulo.");
                }
            }else{
                logger.warning("Error en la respuesta del servcio.");
                throw new Exception("Respuesta del servcio nula.");
            }
            registrada = Boolean.FALSE;
        }catch(Exception e){
            logger.warning("Error en validaComisionRegistrada", e);
            JboException exception = new JboException("Error: " + e.getMessage());
            throw exception;
        }
        return listaComisiones;
    }

    /**
     * Returns the bind variable value for varIdOperacionTcaComision.
     * @return bind variable value for varIdOperacionTcaComision
     */
    public Long getvarIdOperacionTcaComision() {
        return (Long) getNamedWhereClauseParam("varIdOperacionTcaComision");
    }

    /**
     * Sets <code>value</code> for bind variable varIdOperacionTcaComision.
     * @param value value to bind as varIdOperacionTcaComision
     */
    public void setvarIdOperacionTcaComision(Long value) {
        setNamedWhereClauseParam("varIdOperacionTcaComision", value);
    }
}

