package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.CargoDesemnolsoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 08 15:24:33 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CargoDesemnolsoVOImpl extends ViewObjectImpl implements CargoDesemnolsoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public CargoDesemnolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varContrato.
     * @return variable value for varContrato
     */
    public Long getvarContrato() {
        return (Long) ensureVariableManager().getVariableValue("varContrato");
    }

    /**
     * Sets <code>value</code> for variable varContrato.
     * @param value value to bind as varContrato
     */
    public void setvarContrato(Long value) {
        ensureVariableManager().setVariableValue("varContrato", value);
    }

    /**
     * Returns the variable value for varComponente.
     * @return variable value for varComponente
     */
    public String getvarComponente() {
        return (String) ensureVariableManager().getVariableValue("varComponente");
    }

    /**
     * Sets <code>value</code> for variable varComponente.
     * @param value value to bind as varComponente
     */
    public void setvarComponente(String value) {
        ensureVariableManager().setVariableValue("varComponente", value);
    }

    /**
     * Returns the variable value for varFechaRegistro.
     * @return variable value for varFechaRegistro
     */
    public Timestamp getvarFechaRegistro() {
        return (Timestamp) ensureVariableManager().getVariableValue("varFechaRegistro");
    }

    /**
     * Sets <code>value</code> for variable varFechaRegistro.
     * @param value value to bind as varFechaRegistro
     */
    public void setvarFechaRegistro(Timestamp value) {
        ensureVariableManager().setVariableValue("varFechaRegistro", value);
    }
    
    public Map obtenerMonto(Long idContrato, String componente, String descripcion){
        Map resultado=new HashMap();
            logger.warning("idContrato: " +idContrato);
            logger.warning("componente: " +componente);
            logger.warning("Descripcion: " +descripcion);
                logger.log(ADFLogger.TRACE, "Inside obtenerMonto.");
                Row seguimientoRow = null;
                ViewCriteria criteriaByAccion = null;
                if(idContrato != null && componente != null && descripcion != null ) {
                    criteriaByAccion=this.getViewCriteriaManager().getViewCriteria("CargoDesemnolsoVOCriteria");
                    criteriaByAccion.ensureVariableManager().setVariableValue("varComponente", componente);
                    criteriaByAccion.ensureVariableManager().setVariableValue("varContrato", idContrato);
                    criteriaByAccion.ensureVariableManager().setVariableValue("varDescripcion", descripcion);
                    this.applyViewCriteria(criteriaByAccion);
                    this.executeQuery();
                        
                    // 2) Asignamos valor de retorno
                    if(this.getEstimatedRowCount() > 0) {
                        seguimientoRow = this.getRowAtRangeIndex(0);
                        resultado.put("respuesta", Boolean.TRUE);
                        Long claveCargo=(Long)seguimientoRow.getAttribute("Id");
                        BigDecimal monto=(BigDecimal)seguimientoRow.getAttribute("MontoCargo");
                        logger.warning("claveCargo: " +claveCargo);
                        logger.warning("monto: " +monto);
                        resultado.put("claveCargo", claveCargo);
                        resultado.put("monto", monto);
                    }
                    else{
                        resultado.put("respuesta", Boolean.FALSE);
                    }
                    // Removemos criteria del VO
                    this.getViewCriteriaManager().removeApplyViewCriteriaName("CargoDesemnolsoVOCriteria");
                }
        return resultado;
        }
    
    public Boolean eliminarCargos(Long idContrato){
        Boolean resultado=Boolean.FALSE;
        
        return resultado;
        }
    
    public Boolean modificarAgregarCargo(Long claveCargo, Boolean agrega, BigDecimal monto, String componente, String descripcion, Long contrato){
        logger.warning("*Inf, Inicia metodo modificarAgregarCargo");
        
            logger.warning("claveCargo: " +claveCargo);
            logger.warning("agrega: " +agrega);
            logger.warning("monto: " +monto);
            logger.warning("componente: " +componente);
            logger.warning("descripcion: " +descripcion);
            logger.warning("contrato: " +contrato);
            Boolean respuesta=Boolean.TRUE;
            Integer ban=null;
        if(agrega){
                ban=1;
              logger.warning("*Inf, creando nuevo registro en cargos");
            
                oracle.jbo.domain.Number idSeguimientoCredicitio = null;
                CargoDesemnolsoVORowImpl nvpCargoDesembolso = (CargoDesemnolsoVORowImpl) this.createRow();
                SequenceImpl seqCargoDesembolso = null;
                
                seqCargoDesembolso = new SequenceImpl("CARGO_DESEMBOLSO_SEQ", getDBTransaction());
                idSeguimientoCredicitio = seqCargoDesembolso.getSequenceNumber();
                                
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.BANESTATUS, ban);
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.FECHAREGISTRO, new java.sql.Timestamp(System.currentTimeMillis()));
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.ID, idSeguimientoCredicitio.longValue());
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.COMPONENTE, componente);
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.IDCONTRATODESEMBOLSO, contrato);
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.DESCRIPCION, descripcion);
                nvpCargoDesembolso.setAttribute(CargoDesemnolsoVORowImpl.MONTOCARGO, monto);
                insertRow(nvpCargoDesembolso);     
            }
        else{
            logger.warning("*Inf, modificando registro en cargos con id : "+claveCargo);
             Row row = recuperarCargoById(claveCargo);
                if(null!= row){
                   if(monto.compareTo(BigDecimal.ZERO)==0){
                        row.setAttribute("MontoCargo", 0.00);
                        //ban=0;
                          //      logger.warning("*Inf, monto = 0; Se cambia registro a ban estatus 0 ");                       
                          //      row.setAttribute("BanEstatus", ban);                               
                    }else{
                        logger.warning("*Inf, actualizando monto a : "+monto);                       
                            row.setAttribute("MontoCargo", monto);
                    }
                }else{
                     logger.warning("***Error, no se pudo recuperar el row de cargos con id : ->"+claveCargo+"<-");
                     respuesta=Boolean.FALSE;
                 }
            }
         logger.warning("*Inf, termina metodo modificarAgregarCargo");
        return respuesta;
        }


    public Row recuperarCargoById(Long idCargo){                    
         logger.warning("*Inf, Inicia metodo recuperarCargoById idCargo: ->"+idCargo);                
                    
                Row filaRecuperada = null;        
                ViewCriteria criteria = null;
                
                if(idCargo == null){
                    logger.warning("***Error, El parametro idCargo es requerido para la busqueda");            
                    return null;
                  }            
                try{      
                    
                    criteria = getViewCriteriaManager().getViewCriteria("BuscarRegistroByIdCargoVC");
                    criteria.ensureVariableManager().setVariableValue("pIdCargo", idCargo);
                    applyViewCriteria(criteria);
                    executeQuery();
                
                    if(getEstimatedRowCount() > 0){                                       
                        filaRecuperada = first();
                        logger.warning("*Inf, ok registros encontrados num : "+getEstimatedRowCount()); 
                    }else{
                         logger.warning("*Inf, El row recuperado es Null no hay coincidencias en la busqueda"); 
                         getViewCriteriaManager().removeApplyViewCriteriaName("BuscarRegistroByIdCargoVC");          
                         executeQuery();
                        }
                    
                }catch(Exception e){
                    logger.log(ADFLogger.WARNING, "*** Error al buscar el registro del cargo  ->" + e);     
                }finally{
                   getViewCriteriaManager().removeApplyViewCriteriaName("BuscarRegistroByIdCargoVC");    
                   executeQuery();
                }
                   
                logger.warning("*** Termina metodo recuperarCargoById"); 
                return filaRecuperada;
                }
        
        
        
        
    public BigDecimal obtenerTotalMontosPorIdContratoDesembolso(Long idContratoDesembolso){
        logger.warning("Dentro de obtenerTotalMontosPorIdContratoDesembolso");
        logger.warning("idContratoDesembolso : "+idContratoDesembolso);
        
        ViewCriteria vc = null;
        BigDecimal total = new BigDecimal("0");
        BigDecimal monto = null;
        
            try {
                
                vc = getViewCriteriaManager().getViewCriteria("obtenerTotalMontosPorIdContratoDesembolsoCriteria");
                vc.ensureVariableManager().setVariableValue("idContratoDesembolsoVar", idContratoDesembolso);
                applyViewCriteria(vc);
                executeQuery();
            
                if (getEstimatedRowCount() > 0) {
                    this.setRangeSize(-1);
                    for(Row row : this.getAllRowsInRange()){
                        try{
                            if(null != row.getAttribute("MontoCargo")){
                                logger.warning("MontoCargo : "+row.getAttribute("MontoCargo"));
                                monto = new BigDecimal("0");
                                monto=(BigDecimal)row.getAttribute("MontoCargo");
                                total = total.add(monto);
                            }
                        }catch(Exception e){
                            logger.severe("Error al recuperar atributo MontoCargo",e);
                        }
                    }
                } else {
                    logger.warning("No se encuentran rows en CARGO_DESEMBOLSO con  idContratoDesembolso : "+
                                    idContratoDesembolso);
                }
            } catch (Exception e) {
                logger.severe("Error en obtenerTotalMontosPorIdContratoDesembolso",e);
            } finally {
                getViewCriteriaManager().removeApplyViewCriteriaName("obtenerTotalMontosPorIdContratoDesembolsoCriteria");
            }
            
            logger.warning("Fuera de obtenerTotalMontosPorIdContratoDesembolso,result :"+total);
            return total;
        }


    /**
     * Returns the variable value for idContratoDesembolsoVar.
     * @return variable value for idContratoDesembolsoVar
     */
    public Long getidContratoDesembolsoVar() {
        return (Long) ensureVariableManager().getVariableValue("idContratoDesembolsoVar");
    }

    /**
     * Sets <code>value</code> for variable idContratoDesembolsoVar.
     * @param value value to bind as idContratoDesembolsoVar
     */
    public void setidContratoDesembolsoVar(Long value) {
        ensureVariableManager().setVariableValue("idContratoDesembolsoVar", value);
    }



    /**
     * Returns the variable value for varDescripcion.
     * @return variable value for varDescripcion
     */
    public String getvarDescripcion() {
        return (String) ensureVariableManager().getVariableValue("varDescripcion");
    }

    /**
     * Sets <code>value</code> for variable varDescripcion.
     * @param value value to bind as varDescripcion
     */
    public void setvarDescripcion(String value) {
        ensureVariableManager().setVariableValue("varDescripcion", value);
    }

    /**
     * Returns the variable value for pIdCargo.
     * @return variable value for pIdCargo
     */
    public Long getpIdCargo() {
        return (Long) ensureVariableManager().getVariableValue("pIdCargo");
    }

    /**
     * Sets <code>value</code> for variable pIdCargo.
     * @param value value to bind as pIdCargo
     */
    public void setpIdCargo(Long value) {
        ensureVariableManager().setVariableValue("pIdCargo", value);
    }
}

