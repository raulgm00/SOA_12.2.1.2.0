package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.OperacionesClienteLOV;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 09 16:23:11 VET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OperacionesClienteLOVImpl extends ViewObjectImpl implements OperacionesClienteLOV {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public OperacionesClienteLOVImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    /**
     * Metodo para ejecutar el view Criteria
     * */
        public void cargaOperaciones(Long idCliente) {
            logger.log(ADFLogger.TRACE, "Inside LOVOPERACIONES.");
            logger.warning("idcliente : "+ idCliente);
            ViewCriteria criteriaByClienteInstanciaProceso = null;

            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("OperacionesClienteLOVCriteria");
                if (null != idCliente) {
                setIdClienteBind(idCliente);
                this.applyViewCriteria(criteriaByClienteInstanciaProceso);
                this.executeQuery();

                // 2) Asignamos valor de retorno
                if (this.getEstimatedRowCount() <= 0) {
                    logger.warning("No existen registros");
                }
                else{
                        logger.warning("registros encontrados en las operaciones: "+ getEstimatedRowCount());
                    }
            }
                else{
                        logger.warning("no se encontro el cliente");
                    }
        }

    /**
     * Returns the variable value for IdClienteBind.
     * @return variable value for IdClienteBind
     */
    public Long getIdClienteBind() {
        return (Long) ensureVariableManager().getVariableValue("IdClienteBind");
    }

    /**
     * Sets <code>value</code> for variable IdClienteBind.
     * @param value value to bind as IdClienteBind
     */
    public void setIdClienteBind(Long value) {
        ensureVariableManager().setVariableValue("IdClienteBind", value);
    }
}

