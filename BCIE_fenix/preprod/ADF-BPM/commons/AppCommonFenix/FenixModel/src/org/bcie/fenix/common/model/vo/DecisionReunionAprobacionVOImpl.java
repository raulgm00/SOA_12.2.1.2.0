package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.domain.Number;
import java.sql.Timestamp;

import java.util.Calendar;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.DecisionReunionAprobacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 24 16:19:04 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DecisionReunionAprobacionVOImpl extends ViewObjectImpl implements DecisionReunionAprobacionVO {
    
    /**
     * Log de la aplicacion
     */
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(DecisionReunionAprobacionVOImpl.class);
    
    /**
     * Define el nombre de la secuencia para creacion de nuevos registros
     */
    public static final String SEQUENCE_NAME = "DECISION_REUNION_APROBACIO_SEQ";
    
    /**
     * Define el nombre del view criteria para buscar la decision de reunion por id de solicitud de aprobacion
     */
    public static final String DECISION_REUNION_POR_ID_SOL_VC = "DecisionReunionAprobacionPorIdSolVC";
    
    /**
     * This is the default constructor (do not remove).
     */
    public DecisionReunionAprobacionVOImpl() {
    }
    
    /**
     * Crea un nuevo registro de Decision para una Solicitud de Aprobacion
     * @param idSolicitudAprob contiene id de la solicitud de aprobacino
     * @param idTipoAccion contiene id de accion a seguir
     * @param numActa contiene numero de acta
     * @param numAcuerdo contiene numero de acuerdo
     * @param acuerdo contiene descripcion del acuerdo
     * @param userName contiene descripcion del nombre de usuario en session
     * @return devuelve un objeto Row, devuelve null en caso de error al crear el registro
     */
    public DecisionReunionAprobacionVORowImpl crearRegistro(Number idSolicitudAprob,
                                                            Number idTipoAccion,
                                                            String numActa,
                                                            String numAcuerdo,
                                                            String acuerdo,
                                                            String userName){
        LOGGER.entering(DecisionReunionAprobacionVOImpl.class.getName(), 
                        "crearRegistro", 
                        new Object[]{idSolicitudAprob, 
                                     idTipoAccion,
                                     numActa,
                                     numAcuerdo,
                                     acuerdo});
        
        DecisionReunionAprobacionVORowImpl row = null;
        
        if(idSolicitudAprob != null &&
           idTipoAccion != null &&
           userName != null){
            
            Number id = null;
            try{
                SequenceImpl sequence = new SequenceImpl(SEQUENCE_NAME, this.getDBTransaction());
                id = sequence.getSequenceNumber();
                LOGGER.fine("Obtiene secuencia: " + id);
            }catch(Exception e){
                LOGGER.severe("Error al obtener la secuencia", e);
            }
        
            Calendar cal = Calendar.getInstance();
            Timestamp time = null;
            try{
                time = new Timestamp(cal.getTime().getTime());    
                LOGGER.fine("Obtine Fecha actual: " + cal.getTime());
            }catch(Exception e){
                LOGGER.severe("Error al obtener Timestamp para campo Fecha Registro", e);
            }
            
            if(time != null &&
               id != null){

                row = (DecisionReunionAprobacionVORowImpl) createRow();
                //Valida Creacion de Row
                if(row != null){
                    
                    row.setId(id);
                    row.setIdSolicitudAprobacion(idSolicitudAprob);
                    row.setIdTcaAccionASeguir(idTipoAccion);
                    row.setNumeroActa(numActa);
                    row.setNumeroAcuerdo(numAcuerdo);
                    row.setAcuerdo(acuerdo);
                    row.setLoginUsuario(userName);
                    row.setFechaRegistro(time);
                    
                    LOGGER.warning("Crea nuevo registro de Decision. Id Solicitud: " + idSolicitudAprob +
                                " Id Accion a Seguir: " + idTipoAccion +
                                " Numero Acuerdo: " + numAcuerdo + 
                                " Numero Acta: " + numActa +
                                " Usuario: " + userName +
                                " Id Decision: " + id +
                                " Fecha Registro: " + cal.getTime());
                    insertRow(row);
                }else{
                    LOGGER.severe("Registro no creado");
                }
            }
        }
        
        LOGGER.exiting(DecisionReunionAprobacionVOImpl.class.getName(), 
                       "crearRegistro", 
                       new Object[]{row});
        return row;
    }
    
    
    /**
     * Realiza la busqueda de decision por id de solicitud
     * @param idSolicitud contiene id de solicitud
     */
    public void buscarDecisionPorIdSolicitud(Number idSolicitud){
        
        LOGGER.entering(DecisionReunionAprobacionVOImpl.class.getName(), 
                        "buscarDecisionPorIdSolicitud",
                        idSolicitud);
        if(idSolicitud == null){
            return;
        }
        
        //Asigna varibles bindings
        LOGGER.fine("Asigna Id de Solicitud: " + idSolicitud);
        setpIdSolicitudAprob(idSolicitud);
        
        try{
            ViewCriteria vc = getViewCriteria(DECISION_REUNION_POR_ID_SOL_VC);
            LOGGER.fine("Aplica View Criteria: " + DECISION_REUNION_POR_ID_SOL_VC);
            applyViewCriteria(vc);
            
            LOGGER.fine("Ejecuta Query");
            executeQuery();
            
            setCurrentRow(first());
        }catch(Exception e){
            LOGGER.severe("Error al ejecutar view criteria", e);
        }
        
        LOGGER.exiting(DecisionReunionAprobacionVOImpl.class.getName(), 
                       "buscarDecisionPorIdSolicitud");
    }

    /**
     * Returns the variable value for pIdSolicitudAprob.
     * @return variable value for pIdSolicitudAprob
     */
    public Number getpIdSolicitudAprob() {
        return (Number) ensureVariableManager().getVariableValue("pIdSolicitudAprob");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitudAprob.
     * @param value value to bind as pIdSolicitudAprob
     */
    public void setpIdSolicitudAprob(Number value) {
        ensureVariableManager().setVariableValue("pIdSolicitudAprob", value);
    }
}

