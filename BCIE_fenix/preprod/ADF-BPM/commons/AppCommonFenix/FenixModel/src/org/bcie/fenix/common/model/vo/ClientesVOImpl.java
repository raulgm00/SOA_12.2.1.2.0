package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.ViewCriteria;
import org.bcie.fenix.common.model.vo.common.ClientesVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 30 10:10:29 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ClientesVOImpl extends ViewObjectImpl implements ClientesVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ClientesVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    /**
     *@Autor Josue Hernandez Castillo
     * @Since 30/01/2017
     * Metodo para actualizar atributo requiereEnvioAutomatico en tabla Clientes
     * @param idCliente
     * @param envioManual
    */
    public void actualizarEnvioManual(Long idCliente, Integer envioManual) {
        logger.warning("Into actualizarEnvioManual.");
        logger.warning("value idCliente : " + idCliente);
        logger.warning("value envioManual : " + envioManual);
        
        Row clienteRow = null;
        
        // Se modifica actualizacion por performance
        try {
            ViewCriteria asociadasVOCriteria = getViewCriteriaManager().getViewCriteria("BuscarPorIdClientesVOCriteria");
            asociadasVOCriteria.ensureVariableManager().setVariableValue("pIdCliente", idCliente);
            applyViewCriteria(asociadasVOCriteria);
            executeQuery();
        } catch (Exception e) {
            logger.warning("Error al ejecutar BuscarPorIdClientesVOCriteria ->", e);
        } 
       
        logger.warning("numero de registros encontrados: " + getEstimatedRowCount());
        
        if(getEstimatedRowCount() > 0)
            clienteRow = first();
                            
        if (null != clienteRow) {
            
            try { 
                clienteRow.setAttribute(ClientesVORowImpl.REQUIEREENVIOAUTOMATICO, envioManual);
                this.getDBTransaction().commit();
            } catch (Exception e) {
                logger.warning("Error al ejecutar commit en ClientesVO ->", e);
            } 
            
        } else {
            logger.warning("No se encontro el cliente con el id: " + idCliente);
        }
       
    }
    
    
    
    public Boolean actualizarIdPerspectiva(Long idCliente, Integer idPerspectiva) {
        logger.warning("Into actualizarIdPerspectiva.");
        logger.warning("value idCliente : " + idCliente);
        logger.warning("value idPerspectiva : " + idPerspectiva);
        
        Row clienteRow = null;
        Boolean respuesta = Boolean.FALSE;
                
        try {
            ViewCriteria asociadasVOCriteria = getViewCriteriaManager().getViewCriteria("BuscarPorIdClientesVOCriteria");
            asociadasVOCriteria.ensureVariableManager().setVariableValue("pIdCliente", idCliente);
            applyViewCriteria(asociadasVOCriteria);
            executeQuery();
            
            logger.warning("numero de registros encontrados: " + getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0)
                clienteRow = first();                    
            
            if (null != clienteRow) {
                clienteRow.setAttribute(ClientesVORowImpl.IDTCAPERSPECTIVA, idPerspectiva);
                getDBTransaction().commit();
                respuesta = Boolean.TRUE;
                logger.warning("ok se actualizo la perspectiva en el cliente");
            } else {
                logger.warning("Error, No se encontro el cliente con el id: " + idCliente);
            }
        } catch (Exception e) {
             respuesta = Boolean.FALSE;
             logger.warning("Error al actualizar perspectiva en ClientesVOImpl ->", e);
        }finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("BuscarPorIdClientesVOCriteria");
        }
        
        return respuesta;
    }
    

    /**
     * Returns the variable value for pIdCliente.
     * @return variable value for pIdCliente
     */
    public Long getpIdCliente() {
        return (Long) ensureVariableManager().getVariableValue("pIdCliente");
    }

    /**
     * Sets <code>value</code> for variable pIdCliente.
     * @param value value to bind as pIdCliente
     */
    public void setpIdCliente(Long value) {
        ensureVariableManager().setVariableValue("pIdCliente", value);
    }
}

