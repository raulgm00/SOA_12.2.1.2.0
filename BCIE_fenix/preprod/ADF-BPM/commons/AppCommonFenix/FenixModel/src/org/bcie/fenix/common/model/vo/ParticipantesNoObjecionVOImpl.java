package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.ParticipantesNoObjecionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 12:23:55 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ParticipantesNoObjecionVOImpl extends ViewObjectImpl implements ParticipantesNoObjecionVO {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ParticipantesNoObjecionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varIdNoObjecion.
     * @return variable value for varIdNoObjecion
     */
    public Long getvarIdNoObjecion() {
        return (Long) ensureVariableManager().getVariableValue("varIdNoObjecion");
    }

    /**
     * Sets <code>value</code> for variable varIdNoObjecion.
     * @param value value to bind as varIdNoObjecion
     */
    public void setvarIdNoObjecion(Long value) {
        ensureVariableManager().setVariableValue("varIdNoObjecion", value);
    }

    /**
     * Returns the variable value for varRol.
     * @return variable value for varRol
     */
    public Integer getvarRol() {
        return (Integer) ensureVariableManager().getVariableValue("varRol");
    }

    /**
     * Sets <code>value</code> for variable varRol.
     * @param value value to bind as varRol
     */
    public void setvarRol(Integer value) {
        ensureVariableManager().setVariableValue("varRol", value);
    }
    public Boolean existenCampos(Long idObjecion){
        Boolean resultado=Boolean.FALSE;
            logger.warning("id idObjecion: " +idObjecion);
             logger.log(ADFLogger.TRACE, "Inside existenCampo.");
                ViewCriteria criteriaByAccion = null;
                if(null!= idObjecion ) {
                       criteriaByAccion=this.getViewCriteriaManager().getViewCriteria("ParticipantesNoObjecionVOCriteria");
                        criteriaByAccion.ensureVariableManager().setVariableValue("varIdNoObjecion", idObjecion);
                        
                        this.applyViewCriteria(criteriaByAccion);
                        this.executeQuery();
                        
                        // 2) Asignamos valor de retorno
                        if(this.getEstimatedRowCount() > 0) {
                            resultado=Boolean.TRUE;     
                        }
                        
                        // Removemos criteria del VO
                        this.getViewCriteriaManager().removeApplyViewCriteriaName("ParticipantesNoObjecionVOCriteria");
                        
                        // Re-ejecutamos el query 
                       // this.executeQuery();
                        
                        }
            return resultado;
        }
    
    public Integer campo(Long idObjecion, Integer rol){
        Integer resultado=null;
        Integer valor=0;
            logger.warning("id idObjecion: " +idObjecion);
             logger.log(ADFLogger.TRACE, "Inside campo.");
                Row participantes = null;
                ViewCriteria criteriaByAccion = null;
                if(null!= idObjecion && null!=rol) {
                       criteriaByAccion=this.getViewCriteriaManager().getViewCriteria("ParticipantesNoObjecionVOCriteria1");
                        criteriaByAccion.ensureVariableManager().setVariableValue("varIdNoObjecion", idObjecion);
                        criteriaByAccion.ensureVariableManager().setVariableValue("varRol", rol);
                        
                        this.applyViewCriteria(criteriaByAccion);
                        this.executeQuery();
                        
                        // 2) Asignamos valor de retorno
                        if(this.getEstimatedRowCount() > 0) {
                            resultado=1;
                            participantes = this.getRowAtRangeIndex(0);
                            if(null!=(Integer)participantes.getAttribute("EsParticipacionObligatoria")){
                                    valor=(Integer)participantes.getAttribute("EsParticipacionObligatoria");
                                    if(valor.compareTo(1)==0){
                                            resultado=2;
                                        }
                                }
  
                        }
                        
                        // Removemos criteria del VO
                        this.getViewCriteriaManager().removeApplyViewCriteriaName("ParticipantesNoObjecionVOCriteria1");
                        
                        // Re-ejecutamos el query 
                       // this.executeQuery();
                        
                        }
            return resultado;
        }
    public Boolean agregarCampo(Long idNoObjecion, Integer rol){
            Boolean resultado=Boolean.TRUE;
            return resultado;
                                      }
    public Boolean eliminarCampo(Long idNoObjecion, Integer rol){
            Boolean resultado=Boolean.TRUE;
            return resultado;
                                      }


    public Boolean agregarParticipante(Long idNoObjecion, Integer obligatorio, Integer rol) {
        logger.warning("Dentro de agregarParticipante");
        logger.warning("idNoObjecion :" + idNoObjecion);
        logger.warning("obligatorio :" + obligatorio);
        logger.warning("rol :" + rol);

        Boolean respuesta = Boolean.TRUE;
        if (null != idNoObjecion && null != rol) {

            oracle.jbo.domain.Number idParticipante = null;
            ParticipantesNoObjecionVORowImpl nvpParticipante = (ParticipantesNoObjecionVORowImpl) this.createRow();
            SequenceImpl seqParticipante = null;

            try {
                seqParticipante = new SequenceImpl("NO_OBJECION_PARTICIPANTE_SEQ", getDBTransaction());
                idParticipante = seqParticipante.getSequenceNumber();


                nvpParticipante.setAttribute(ParticipantesNoObjecionVORowImpl.ESPARTICIPACIONOBLIGATORIA, obligatorio);
                nvpParticipante.setAttribute(ParticipantesNoObjecionVORowImpl.IDTCAROLBPM, rol);
                nvpParticipante.setAttribute(ParticipantesNoObjecionVORowImpl.ID, idParticipante);
                nvpParticipante.setAttribute(ParticipantesNoObjecionVORowImpl.IDNOOBJECION, idNoObjecion);

                insertRow(nvpParticipante);

                logger.warning("id de la tabla NO_OBJECION_PARTICIPANTE :" + idParticipante);
            } catch (Exception e) {
                logger.severe("error en agregarParticipante:" + e);
                respuesta = Boolean.FALSE;
            }

        } else {
            logger.warning("idNoObjecion es null y rol es null");
            respuesta = Boolean.FALSE;
        }

        logger.warning("Fuera de agregarParticipante,return:" + respuesta);
        return respuesta;
    }
    
    public Boolean eliminarParticipante(Long idNoObjecion, Integer rol){
        Boolean resultado=Boolean.TRUE;
            logger.warning("id idObjecion: " +idNoObjecion);
             logger.log(ADFLogger.TRACE, "Inside campo.");
                Row participantes = null;
                ViewCriteria criteriaByAccion = null;
                if(null!= idNoObjecion && null!=rol) {
                       criteriaByAccion=this.getViewCriteriaManager().getViewCriteria("ParticipantesNoObjecionVOCriteria1");
                        criteriaByAccion.ensureVariableManager().setVariableValue("varIdNoObjecion", idNoObjecion);
                        criteriaByAccion.ensureVariableManager().setVariableValue("varRol", rol);
                        
                        this.applyViewCriteria(criteriaByAccion);
                        this.executeQuery();
                        
                        // 2) Asignamos valor de retorno
                        if(this.getEstimatedRowCount() > 0) {
                            participantes = this.getRowAtRangeIndex(0);
                            setCurrentRow(participantes);
                            removeCurrentRow();
                        }
                        
                        // Removemos criteria del VO
                        this.getViewCriteriaManager().removeApplyViewCriteriaName("ParticipantesNoObjecionVOCriteria1");
                        
                        // Re-ejecutamos el query 
                       // this.executeQuery();
                        
                        }
        return resultado;
        }
}

