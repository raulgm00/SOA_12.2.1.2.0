package org.bcie.fenix.common.model.vo;


import java.math.BigInteger;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsobo.ContratoDesembolso;
import org.bcie.desembolsomo.CrearActualizarDesembolsosRequestType;
import org.bcie.desembolsomo.CrearActualizarDesembolsosResponseType;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.vo.common.DatosDesembolsoClasificacionEstrategicaVO;
import org.bcie.herramientacebo.HerramientaCEType;
import org.bcie.resultbo.Resultado;
import org.bcie.resultbo.SuccessType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 29 18:27:45 CDT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosDesembolsoClasificacionEstrategicaVOImpl extends ViewObjectImpl implements DatosDesembolsoClasificacionEstrategicaVO {
    private static ADFLogger logger = null;

    /**
     * This is the default constructor (do not remove).
     */
    public DatosDesembolsoClasificacionEstrategicaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    /**
     * Método que actualiza la informacion de CE en DB.
     * @author : S&P Solutions
     * @param  : Long IdDesembolso
     * @param  : Long IdEstado
     * @param  : Long IdActividadEconomica
     * @param  : Long IdAreaFocalizacion
     * @param  : Long IdAreaFocalizacion
     * @param  : Long IdEjeEstrategico
     * @param  : Long IdClasificacion
     * @return : Boolean
     * @version: v1.0
     * @Fecha  : 29/07/2019
     */
    public Boolean actualizarDatosDesembolso(Long IdDesembolso, Long IdEstado, Long IdActividadEconomica,
                                             Long IdAreaFocalizacion, Long IdEjeEstrategico, Long IdClasificacion) {
        logger.warning("===================== Inside actualizarDatosDesembolso");
        
        logger.warning(" ==  actualizarDatosDesembolso | actualizarValores ==");
        logger.warning(" ==  actualizarDatosDesembolso | Valores enviados a metodo ==");
        logger.warning(" ==  actualizarDatosDesembolso | (1) IdDesembolso:"+IdDesembolso);
        logger.warning(" ==  actualizarDatosDesembolso | (2) IdEstado:"+IdEstado);
        logger.warning(" ==  actualizarDatosDesembolso | (3) IdClasificacion:"+IdClasificacion);
        logger.warning(" ==  actualizarDatosDesembolso | (4) IdActividadEconomica:"+IdActividadEconomica);
        logger.warning(" ==  actualizarDatosDesembolso | (5) IdAreaFocalizacion:"+IdAreaFocalizacion);
        logger.warning(" ==  actualizarDatosDesembolso | (6) IdEjeEstrategico:"+IdEjeEstrategico);
        
        
        
        
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución  
        TInicio = System.currentTimeMillis();
        Boolean respuesta = false;
        try {
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DESEMBOLSO);
            DesembolsoPTSOAP12BindingQSService desembolsoPTSOAP12BindingQSService = IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
               // IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            DesembolsoPT desembolsoPT = desembolsoPTSOAP12BindingQSService.getDesembolsoPTSOAP12BindingQSPort();
            //Request
            CrearActualizarDesembolsosRequestType request = new CrearActualizarDesembolsosRequestType();
            ContratoDesembolso contratoDesembolso = new ContratoDesembolso();
            //IdDesembolso
            contratoDesembolso.setIdDesembolso(IdDesembolso);
            //Estado
            Catalogo estado = new Catalogo();
            estado.setId(IdEstado);
            contratoDesembolso.setEstado(estado);
            //Clasificacion
            HerramientaCEType ce = new HerramientaCEType();
            Catalogo actividad = new Catalogo();
            actividad.setId(IdActividadEconomica);
            Catalogo area = new Catalogo();
            area.setId(IdAreaFocalizacion);
            Catalogo eje = new Catalogo();
            eje.setId(IdEjeEstrategico);
            ce.setActividadEconomica(actividad);
            ce.setAreaFocalizacion(area);
            ce.setEjeEstrategico(eje);
            contratoDesembolso.setHerramientaCE(ce);
            //IdClasificacion
            contratoDesembolso.setIdClasificacionEstrategica(BigInteger.valueOf(IdClasificacion));
            request.getContratoDesembolso().add(contratoDesembolso);
            
            CrearActualizarDesembolsosResponseType response = desembolsoPT.actualizarDesembolso(request);
            if (response != null) {
                Resultado resultado = response.getResultado();

                if (resultado != null) {
                    SuccessType successType = resultado.getResult();

                    if (successType != null && successType.value() != null &&
                        successType.value().equalsIgnoreCase("OK")) {
                        logger.warning("EXITO: " + resultado.getMessage());
                        respuesta = true;
                    } else {
                        logger.warning("Error successType " + successType);

                    }
                } else {
                    logger.warning("ERROR: Resultado");
                }
            } else {
                logger.warning("ERROR: Response");
            }


        } catch (Exception e) {
            logger.warning("*Error, la definicion del WSDL_DESEMBOLSO no esta disponible ->", e);
            throw new JboException("ha ocurrido un error al consultar la definicion del WSDL_DESEMBOLSO no esta disponible");
        }
        TFin =
            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("*Inf, termina metodo recuperarTotalCargosDesembolso con una duracion de: " + tiempo +
                       " segundos");
        return respuesta;
    }  
    /**
     * Returns the bind variable value for idOperacion.
     * @return bind variable value for idOperacion
     */
    public Integer getidOperacion() {
        return (Integer) getNamedWhereClauseParam("idOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable idOperacion.
     * @param value value to bind as idOperacion
     */
    public void setidOperacion(Integer value) {
        setNamedWhereClauseParam("idOperacion", value);
    }
}

