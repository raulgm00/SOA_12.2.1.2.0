package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.ClienteLVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 22 16:15:37 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ClienteLVOImpl extends ViewObjectImpl implements ClienteLVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ClienteLVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public Integer getSectorInstitucionalByIdCliente(Integer idCliente) {
        logger.warning("Dentro de getSectorInstitucionalByIdCliente");
        logger.warning("idCliente :"+idCliente);
        Integer sectorInstitucional = null;
        ViewCriteria criteriaById = null;
        try {
            criteriaById = this.getViewCriteriaManager().getViewCriteria("ClienteLVOCriteriaByIdCliente");
            criteriaById.ensureVariableManager().setVariableValue("IdClienteNuevo", idCliente);
            this.applyViewCriteria(criteriaById);
            this.executeQuery();
            sectorInstitucional = (Integer) this.getRowAtRangeIndex(0).getAttribute("Sector");
            logger.warning("sectorInstitucional :"+sectorInstitucional);
        } catch (Exception ex) {
            logger.severe("Error en getSectorInstitucionalByIdCliente : ", ex);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ClienteLVOCriteriaByIdCliente");
        }
        logger.warning("Dentro de getSectorInstitucionalByIdCliente");
        return sectorInstitucional;
    }
    
    public String getRazonSocialByIdCliente(Integer idCliente){
        ViewCriteria criteriaById = this.getViewCriteriaManager().getViewCriteria("ClienteLVOCriteriaByIdCliente");
        criteriaById.ensureVariableManager().setVariableValue("IdClienteNuevo", idCliente);
        this.applyViewCriteria(criteriaById);
        this.executeQuery();
        String razonSocial= (String)this.getRowAtRangeIndex(0).getAttribute("RazonSocial");
        //This takes care of removing the applied VC.
        this.getViewCriteriaManager().removeApplyViewCriteriaName("ClienteLVOCriteriaByIdCliente");
        return razonSocial;
    }
    
    public Integer getIdOficinaByIdCliente(Integer idCliente){
            ViewCriteria criteriaById = this.getViewCriteriaManager().getViewCriteria("ClienteLVOCriteria");
            criteriaById.ensureVariableManager().setVariableValue("IdClienteSeleccionado", idCliente);
            this.applyViewCriteria(criteriaById);
            this.executeQuery();
            Integer idOficina= (Integer)this.getRowAtRangeIndex(0).getAttribute("Oficina");
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ClienteLVOCriteria");
            return idOficina;
        }
    

    /**
     * Returns the variable value for IdClienteNuevo.
     * @return variable value for IdClienteNuevo
     */
    public Integer getIdClienteNuevo() {
        return (Integer) ensureVariableManager().getVariableValue("IdClienteNuevo");
    }

    /**
     * Sets <code>value</code> for variable IdClienteNuevo.
     * @param value value to bind as IdClienteNuevo
     */
    public void setIdClienteNuevo(Integer value) {
        ensureVariableManager().setVariableValue("IdClienteNuevo", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for IdClienteSeleccionado.
     * @return variable value for IdClienteSeleccionado
     */
    public Integer getIdClienteSeleccionado() {
        return (Integer) ensureVariableManager().getVariableValue("IdClienteSeleccionado");
    }

    /**
     * Sets <code>value</code> for variable IdClienteSeleccionado.
     * @param value value to bind as IdClienteSeleccionado
     */
    public void setIdClienteSeleccionado(Integer value) {
        ensureVariableManager().setVariableValue("IdClienteSeleccionado", value);
    }
}

