package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.vo.common.MontoAmpliacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 16 11:18:43 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MontoAmpliacionVOImpl extends ViewObjectImpl implements MontoAmpliacionVO {
    /**
     * This is the defau
     * lt constructor (do not remove).
     */
    private static ADFLogger logger = null;
    
    public MontoAmpliacionVOImpl() {
        if(null == logger){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowMonto(Long idLinea, BigDecimal montoAmpliacion){
        logger.warning("Entra en crearRowMonto.");
        logger.warning("Linea de credito : " + idLinea);
        logger.warning("Monto de ampliacion : " + montoAmpliacion);
        Row row = null;
        try{
            row = this.createRow();
            row.setAttribute("idLineaCredito", idLinea);
            row.setAttribute("MontoAmpliacion", montoAmpliacion);
            
            this.insertRow(row);
            this.setCurrentRow(row);
            logger.warning("Numero de rows insertados : " + this.getEstimatedRowCount());
            logger.warning("Linea insertada : " + row.getAttribute("idLineaCredito"));
            logger.warning("Monto Ampliacion insertado : " + row.getAttribute("MontoAmpliacion"));
        }catch(Exception e){
            logger.warning("Error en crearRowMonto.", e);
        }
    }
    
    public BigDecimal buscarRowMontoAmpliacion(Long idLinea){
        logger.warning("Entra en buscarRowMontoAmpliacion.");
        logger.warning("Linea de credito : " + idLinea);
        Long numeroRows = null;
        Long idLineaRow = null;
        BigDecimal montoAmpliacion = null;
        
        try {
            logger.warning("Numero  de lineas recuperadas : " + this.getEstimatedRowCount());
            RowSetIterator iterator = this.createRowSetIterator(null);
            iterator.reset();
            logger.warning("Numero de rows : " + iterator.getRowCount());

            while (iterator.hasNext()) {
                MontoAmpliacionVORowImpl rowAmpl = (MontoAmpliacionVORowImpl) iterator.next();
                if (rowAmpl.getAttribute("idLineaCredito") != null) {
                    idLineaRow = (Long) rowAmpl.getAttribute("idLineaCredito");
                    if (idLinea.compareTo(idLineaRow) == 0) {
                        if (rowAmpl.getAttribute("MontoAmpliacion") != null) {
                            montoAmpliacion = (BigDecimal) rowAmpl.getAttribute("MontoAmpliacion");
                            logger.warning("Monto de ampliacion recuperado : " + montoAmpliacion);
                        } else {
                            logger.warning("El monto de ampliacion es nulo.");
                        }
                        break;
                    }
                } else {
                    logger.warning("El id de la linea de credito del row es nula.");
                }
            }
            iterator.closeRowSetIterator();
        } catch (Exception e) {
            logger.warning("Error en buscarRowMontoAmpliacion.", e);
        }
        logger.warning("Monto de ampliacion : " + montoAmpliacion);
        return montoAmpliacion;
    }
    
    public void modificarMontoAmpliacion(Long idLinea, BigDecimal montoAmpliacion){
        logger.warning("Entra en modificarMontoAmpliacion.");
        logger.warning("Linea de credito : " + idLinea);
        logger.warning("Monto de ampliacion : " + montoAmpliacion);
        Long numeroRows = null;
        Long idLineaRow = null;
        
        try {
            logger.warning("Numero de lineas a modificar : " + this.getEstimatedRowCount());
            RowSetIterator iterator = this.createRowSetIterator(null);
            iterator.reset();
            logger.warning("Numero de rows : " + iterator.getRowCount());
            
            while (iterator.hasNext()) {
                MontoAmpliacionVORowImpl rowAmpl = (MontoAmpliacionVORowImpl) iterator.next();
                if (rowAmpl.getAttribute("idLineaCredito") != null) {
                    idLineaRow = (Long) rowAmpl.getAttribute("idLineaCredito");
                    if (idLinea.compareTo(idLineaRow) == 0) {
                        rowAmpl.setAttribute("MontoAmpliacion", montoAmpliacion);
                        logger.warning("Monto ampliacion modificado : " + rowAmpl.getAttribute("MontoAmpliacion"));
                        break;
                    }
                } else {
                    logger.warning("El id de la linea de credito del row es nula.");
                }
            }
            iterator.closeRowSetIterator();
        } catch (Exception e) {
            logger.warning("Error en modificarMontoAmpliacion.", e);
        }
    }
    
    public Boolean actualizarMontoAmpliacionEnLineaCredito(){
        logger.warning("Entra en actualizaMontoAmpliacion");
        FenixImplementacionPctAMImpl fenixImplementacionPctAMImpl = null;
        fenixImplementacionPctAMImpl = (FenixImplementacionPctAMImpl) this.getApplicationModule();
        Long idLinea = null;
        BigDecimal montoAmpliacion = null;
        Boolean actualizo = Boolean.TRUE;
        Integer contador = 0;
        try{
            logger.warning("Numero de lineas a actualizar : " + this.getEstimatedRowCount());
            RowSetIterator iterator = this.createRowSetIterator(null);
            iterator.reset();
            logger.warning("Numero de rows : " + iterator.getRowCount());
            
            while(iterator.hasNext()){
                MontoAmpliacionVORowImpl row = (MontoAmpliacionVORowImpl)iterator.next();
                
                idLinea = row.getidLineaCredito();
                montoAmpliacion = row.getMontoAmpliacion();
                actualizo = fenixImplementacionPctAMImpl.getLineaCreditoVO().actualizarMontoAmpliacion(idLinea, montoAmpliacion);
                if(!actualizo){
                    contador ++;
                }
            }
            iterator.closeRowSetIterator();
            if(contador > 0){
                logger.warning("Error al actualizar el monto de ampliacion.");
                actualizo = Boolean.FALSE;
            }else{
                logger.warning("Se actualizo el monto de ampliacion correctamente.");
            }
        }catch(Exception e){
            logger.warning("Error en crearRowMontoAmpliacion.", e);
        }
        logger.warning("Se actualizaron las lineas de credito : " + actualizo);
        return actualizo;
    }
}

