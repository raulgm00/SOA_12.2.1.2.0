package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.clienteservice.Cliente12BndQSService;
import com.bcie.xmlns.clienteservice.ClientePT;

import java.io.StringWriter;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.clientebo.Cliente;
import org.bcie.clientebo.Contacto;
import org.bcie.clientebo.Contactos;
import org.bcie.clientemo.ActualizarContactoRequestType;
import org.bcie.clientemo.ActualizarContactoResponseType;
import org.bcie.clientemo.ConsultarClienteResponseType;
import org.bcie.clientemo.ConsultarClientesByIdClienteRequestType;
import org.bcie.clientemo.EliminarContactoRequestType;
import org.bcie.clientemo.EliminarContactoResponseType;
import org.bcie.clientemo.InsertarContactoRequestType;
import org.bcie.clientemo.InsertarContactoResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.ID_CLIENTE_INIT_NUM;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.AdminContactosVO;
import org.bcie.resultbo.Resultado;
import oracle.jbo.Key;
import oracle.jbo.RowSetIterator;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jan 02 15:24:15 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AdminContactosVOImpl extends ViewObjectImpl implements AdminContactosVO {
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    
    public AdminContactosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
     /**
      * @autor Damacio Cordoba Medina
      * @since 02/01/2016
      * Método utilizado crear un registro en la vista AdminContactosVO
      */
    public Row crearContacto(String pIdCliente){
        logger.log(ADFLogger.TRACE, "Inside crearContacto");
        Row row = this.createRow();
        row.setAttribute("IdCliente",pIdCliente);
        row.setAttribute("IdContacto", ID_CLIENTE_INIT_NUM);
        this.insertRowAtRangeIndex(0, row); // Insertamos row en VO
        this.setCurrentRow(row); // Asignamos nuevo row como current
        return row;
    }
    
    /**
     * @autor Damacio Cordoba Medina
     * @since 03/01/2016
     * Método utilizado para agregar un contacto al cliente
     */
    public void agregarContacto(String pIdCliente, String pNombre, String pTelefono, String pCorreo, String pCargo) {
        logger.log(ADFLogger.TRACE, "Dentro de : agregarContacto");
        logger.log(ADFLogger.WARNING, "Dentro de : agregarContacto");
        InsertarContactoRequestType request = null;
        InsertarContactoResponseType response = null;
        FenixAMImpl fenixAM = null;
        
        try {
            Resultado result       = null;           
            Contacto contacto      = new Contacto();
            
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
            // Service declared
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
            
            // Add your code to call the desired methods.
            request = new InsertarContactoRequestType();
            
            logger.log(ADFLogger.TRACE, "Nombre:"+pNombre);
            contacto.setNombre(pNombre);
            logger.log(ADFLogger.TRACE, "Telefono:"+pTelefono);
            contacto.setTelefono(pTelefono);
            logger.log(ADFLogger.TRACE, "CorreoElectronico:"+pCorreo);
            contacto.setCorreoElectronico(pCorreo);
            logger.log(ADFLogger.TRACE, "Cargo:"+pCargo);
            contacto.setCargo(pCargo);
            contacto.setIdCliente(new Long(pIdCliente));
            request.setContacto(contacto);
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_AGREGAR_CONTACTO);
            response = clientePT.crearContacto(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_AGREGAR_CONTACTO, horaInicio);
            result=response.getResultado();
            
            if(null!=result.getResult() && result.getResult().value()=="ERROR"){
                logger.log(ADFLogger.WARNING, "Error al crear el contacto");
                throw new Exception(result.getMessage());
            }
            else {
                refrescarContactos(pIdCliente);
            }        
        } catch (Exception e) {
             JboException ex = new JboException(e);
             throw ex;
         }
        logger.log(ADFLogger.WARNING, "Finaliza agregarContacto");
        
    }


    /**
     * @autor Damacio Cordoba Medina
     * @since 03/01/2016
     * Método utilizado para actualizar un contacto
     */
    public void actualizarContacto() {
            logger.log(ADFLogger.TRACE, "Dentro de : actualizarContacto");
            
        ActualizarContactoRequestType request = null;
        ActualizarContactoResponseType response = null;
        FenixAMImpl fenixAM = null;
        try {
                if (this.getCurrentRow() != null) {            
                    Resultado result       = null;           
                    Contacto contacto      = new Contacto();
                    Contacto nuevoContacto = new Contacto();
                    
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                    // Service declared
                    AdminContactosVORowImpl   c = (AdminContactosVORowImpl)this.getCurrentRow();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);
            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                    ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                    
                    // Add your code to call the desired methods.
                    request = new ActualizarContactoRequestType();
            
                    
                    logger.log(ADFLogger.TRACE, "Nombre:"+c.getNombre());
                    contacto.setNombre(c.getNombre());
                    logger.log(ADFLogger.TRACE, "Telefono:"+c.getTelefono());
                    contacto.setTelefono(c.getTelefono());
                    logger.log(ADFLogger.TRACE, "CorreoElectronico():"+c.getCorreoElectronico());
                    contacto.setCorreoElectronico(c.getCorreoElectronico());
                    logger.log(ADFLogger.TRACE, "Cargo:"+c.getCargo());
                    contacto.setCargo(c.getCargo());
                    logger.log(ADFLogger.TRACE, "Id Contacto:"+c.getIdContacto());
                    contacto.setIdContacto(c.getIdContacto());
                    request.setContacto(contacto);
                    
                    Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ACTUALIZAR_CONTACTO);                    
                    response = clientePT.actualizarContacto(request);
                    ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ACTUALIZAR_CONTACTO, horaInicio);
                    result=response.getResultado();
                    
                    if(null!=result.getResult()&&result.getResult().value()=="ERROR"){
                        logger.log(ADFLogger.WARNING, "Error al actualzar el contacto");
                        throw new Exception(result.getMessage());
                    }
                    else {
                        nuevoContacto = response.getContacto();
                        logger.log(ADFLogger.WARNING, "Id Contacto modificado: "+c.getIdContacto());                            
                    }
                }
        } catch (Exception e) {
            JboException ex = new JboException(e);
            throw ex;
        }
        
    }

    /**
     * @autor Damacio Cordoba Medina
     * @since 03/01/2016
     * Método utilizado para eliminar un contacto
     */
    public void eliminarContacto() {
            logger.log(ADFLogger.TRACE, "Dentro de : actualizarContacto");
            
        EliminarContactoRequestType request = null;
        EliminarContactoResponseType response = null;
        FenixAMImpl fenixAM = null;
        
        try {
            Row contactoEliminar = this.getCurrentRow();
            if ( contactoEliminar!= null) {            
                Resultado result       = null;           
                
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
                // Service declared
                AdminContactosVORowImpl   c = (AdminContactosVORowImpl)contactoEliminar;
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
                ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
                // Add your code to call the desired methods.
                request = new EliminarContactoRequestType();
            
                
                logger.log(ADFLogger.TRACE, "Id Contacto:"+c.getIdContacto());
                request.setIdContacto(c.getIdContacto());
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ELIMINAR_CONTACTO);
                response = clientePT.eliminarContacto(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ELIMINAR_CONTACTO, horaInicio);

                result=response.getResultado();
                
                if(result.getResult().value()=="ERROR"){                
                    logger.log(ADFLogger.WARNING, "Error al eliminar el contacto");
                    throw new Exception(result.getMessage());
                }
                else {
                    logger.log(ADFLogger.WARNING, "Contacto eliminado: "+response.getIdContacto());
                    contactoEliminar.remove();                        
                }
            }
        } catch (Exception e) {
            JboException ex = new JboException(e);
            throw ex;
        }
    }
    
    /**
     * @autor Damacio Cordoba Medina
     * @since 28/12/2015
     * Método utilizado setear los valores de los contactos
     */
    
    public void refrescarContactos(String pIdCliente){
        
        logger.log(ADFLogger.TRACE, "refrescarContactos");
        logger.log(ADFLogger.WARNING, "Dentro de: refrescarContactos");
        
        this.clearCache();
        
        ConsultarClientesByIdClienteRequestType request = null;
        
        ConsultarClienteResponseType response = null;
        FenixAMImpl    fenixAM          = null;
        List<Cliente>  cliResponse      = new ArrayList<Cliente>();
        List<Contactos> conResponse     = new ArrayList<Contactos>();
        
        Resultado      result           = null;
        try{
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            // Service declared
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
            
            // Add your code to call the desired methods.
            request = new ConsultarClientesByIdClienteRequestType();
            
            fenixAM.getTareaProcesoBpmVO().getEtapaTareaByIdTareaBpm(0);
            request.setIdCliente(new Long(pIdCliente));

            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_REFRESCAR_CONTACTOS);
            response = clientePT.consultarByIdCliente(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_REFRESCAR_CONTACTOS, horaInicio);
            
            result=response.getResultado();
            if(null!=result.getResult()&&result.getResult().value()=="ERROR"){
                logger.log(ADFLogger.WARNING, "Error al consultar el cliente");
                throw new Exception(result.getMessage());
            }
            else {
                    cliResponse = response.getCliente();                    
            }
            
            ConsultaContactosClienteVOImpl contactosClienteVO = 
                this.getconsultaContactosClienteVO(Long.valueOf(pIdCliente));
                                    
            //Se recorren los datos del cliente...            
            for(Cliente cli : cliResponse){
                //Se asignan los contactos
                conResponse = cli.getContactos();                
                for(Contactos contactos : conResponse){
                    for(Contacto cont : contactos.getContacto()){
                        AdminContactosVORowImpl ac =  (AdminContactosVORowImpl)crearContacto(Long.toString(cont.getIdCliente()));
                        logger.log(ADFLogger.TRACE, "IdContacto:"+cont.getIdContacto());
                        ac.setIdContacto(cont.getIdContacto());
                        
                        logger.log(ADFLogger.TRACE, "IdCliente:"+cont.getIdCliente());
                        ac.setIdCliente(cont.getIdCliente());
                        
                        logger.log(ADFLogger.TRACE, "Cargo:"+cont.getCargo());
                        ac.setCargo(cont.getCargo());
                        
                        logger.log(ADFLogger.TRACE, "Correo Electronico:"+cont.getCorreoElectronico());
                        ac.setCorreoElectronico(cont.getCorreoElectronico());
                        
                        logger.log(ADFLogger.TRACE, "Nombre:"+cont.getNombre());
                        ac.setNombre(cont.getNombre());
                        
                        logger.log(ADFLogger.TRACE, "Telefono:"+cont.getTelefono());
                        ac.setTelefono(cont.getTelefono());
                        
                        ac.setRecibeAvisoCobro(recibeAvisoCobro(contactosClienteVO, cont.getIdContacto()));
                        logger.log(ADFLogger.TRACE, "RecibeAvisoCobro:"+ac.getRecibeAvisoCobro());
                    }
                }
            }
        } catch (Exception e) {
            JboException ex = new JboException(e);
            throw ex;
        }
        logger.log(ADFLogger.WARNING, "Finaliza refrescarContactos");
    }
    
    private ConsultaContactosClienteVOImpl getconsultaContactosClienteVO(Long idCliente) {
        logger.warning("Ingresa metodo: getconsultaContactosClienteVO");
        FenixAMImpl fenixAMImpl = null;
                    fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        ConsultaContactosClienteVOImpl consultaContactosClienteVO = null;
        consultaContactosClienteVO = fenixAMImpl.getConsultaContactosClienteVO();
        if(null != consultaContactosClienteVO){
            consultaContactosClienteVO.setvarIdCliente(idCliente);
            try{
                logger.warning("Ejecutando query consultaContactosClienteVO");
                consultaContactosClienteVO.executeQuery();
            }catch(Exception e){
                logger.warning("Error al ejecutar query");
            }
        }
        logger.warning("Finaliza metodo: getconsultaContactosClienteVO");
        return consultaContactosClienteVO;
    }
    
    private Boolean recibeAvisoCobro(ConsultaContactosClienteVOImpl contactoClienteVO, long idContacto) {
        logger.log(ADFLogger.WARNING, "Dentro de: recibeAvisoCobro");
        Boolean recibeAvisoCobro = Boolean.FALSE;
        RowSetIterator iterator = null;
        
        iterator = contactoClienteVO.createRowSetIterator(null);
        iterator.reset();
        
        Integer avisoCobro = null;
        while (iterator.hasNext()) {
            Row rowAviso = iterator.next();
            Long idContactoRow = (Long) rowAviso.getAttribute("IdContacto");
            if (idContactoRow.compareTo(idContacto) == 0) {
                logger.warning("idContactoRow" + idContactoRow);
                logger.warning("getIdContacto" + idContacto);
                if (rowAviso.getAttribute("RecibeAvisoCobro") != null) {
                    avisoCobro = (Integer) rowAviso.getAttribute("RecibeAvisoCobro");
                    logger.warning("RecibeAvisoCobro" + avisoCobro);
                    logger.log(ADFLogger.TRACE, "RecibeAvisoCobro: " + avisoCobro);
                    if (avisoCobro.compareTo(1) == 0) {
                        recibeAvisoCobro = Boolean.TRUE;   
                    }
                } else {
                    logger.warning("RecibeAvisoCobro RecibeAvisoCobro");
                    recibeAvisoCobro = Boolean.FALSE;
                }
            }
        }
        iterator.closeRowSetIterator();
        logger.log(ADFLogger.WARNING, "Finaliza recibeAvisoCobro");
        return recibeAvisoCobro;
    }
}

