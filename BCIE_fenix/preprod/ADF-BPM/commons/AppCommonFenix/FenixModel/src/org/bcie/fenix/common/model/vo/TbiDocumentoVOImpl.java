package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.vo.common.TbiDocumentoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 27 19:30:11 CDT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TbiDocumentoVOImpl extends ViewObjectImpl implements TbiDocumentoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TbiDocumentoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    /**
     * @param idDocumento
     * @param idTarea
     * @param usuario
     * @param nombreUsuario
     * @param numInstancia
     * @param estado
     * @param seHaNotificado
     * @param banEstatus
     * @param esRegistroActivo
     * @param descripcion
     * @return
     */
    public Boolean crearRegistroTbiDocumento(Long idDocumento, Integer idTarea, String usuario,String nombreUsuario,
                                                String numInstancia,String estado,Integer seHaNotificado,
                                                    Integer banEstatus,Integer esRegistroActivo,String descripcion) {
        logger.warning("Dentro crearTramoFormalizar");
        logger.warning("idDocumento :"+idDocumento);
        logger.warning("idTarea :"+idTarea);
        logger.warning("usuario :"+usuario);
        logger.warning("nombreUsuario :"+nombreUsuario);
        logger.warning("numInstancia :"+numInstancia);
        logger.warning("estado :"+estado);
        logger.warning("seHaNotificado :"+seHaNotificado);
        logger.warning("banEstatus :"+banEstatus);
        logger.warning("esRegistroActivo :"+esRegistroActivo);
        logger.warning("descripcion :"+descripcion);
        
        //declaracion de variables
        Row rowTbiDocumento = null;
        oracle.jbo.domain.Number idTbiDocumento = null;
        NameValuePairs nvpTbiDocumento = null;
        SequenceImpl seqTbiDocumento = null;
        //variable para retornar TRUE or FALSE
        Boolean resultado = null;
        
        //generar id apartir de un secuencia
        seqTbiDocumento = new SequenceImpl("TBI_DOCUMENTO_SEQ", getDBTransaction());
        idTbiDocumento = seqTbiDocumento.getSequenceNumber();
        
        nvpTbiDocumento = new NameValuePairs();
        //asignar valores al row
        nvpTbiDocumento.setAttribute("Id", idTbiDocumento);
        nvpTbiDocumento.setAttribute("IdDocumento", idDocumento);
        nvpTbiDocumento.setAttribute("IdTcaTareaBpm", idTarea);
        nvpTbiDocumento.setAttribute("LoginUsuario", usuario);
        nvpTbiDocumento.setAttribute("NombreUsuario", nombreUsuario);
        nvpTbiDocumento.setAttribute("NumInstancia", numInstancia);
        nvpTbiDocumento.setAttribute("SeHaNotificado",seHaNotificado);
        nvpTbiDocumento.setAttribute("BanEstatus", banEstatus);
        nvpTbiDocumento.setAttribute("Descripcion", descripcion);
        nvpTbiDocumento.setAttribute("EsRegActivo", esRegistroActivo);
        nvpTbiDocumento.setAttribute("Estado", estado);
        nvpTbiDocumento.setAttribute("FechaRegistro",new java.sql.Timestamp(System.currentTimeMillis()));
        
        //insertar row
        rowTbiDocumento = this.createAndInitRow(nvpTbiDocumento);
        
        try{
            logger.warning("Se ejecuta commit");
            //commit a DB
            getDBTransaction().commit();
            //regresar TRUE
            resultado = Boolean.TRUE;
        }catch(Exception e){
            logger.severe("Error en commit en crearRegistroTbiDocumento :",e);
            try{
                logger.warning("Se ejecuta segundo commit");
                //si falla el primer commit reintar una ves mas
                getDBTransaction().commit();
                //regresar TRUE
                resultado = Boolean.TRUE;
            }catch(Exception ex){
                logger.severe("Error en segundo scommit en crearRegistroTbiDocumento :",ex);
                //regresar FALSE
                resultado = Boolean.FALSE;
            }
        }
        
        //ejecutar query
        this.executeQuery();
        
        logger.warning("Fuera crearTramoFormalizar,return :"+resultado);
        
        //retornar resultado
        return resultado;
    }
}

