package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.FormularioImplementacionPctVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 13:43:42 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FormularioImplementacionPctVOImpl extends ViewObjectImpl implements FormularioImplementacionPctVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public FormularioImplementacionPctVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowFormularioImplementacionPct(String tipoProceso, 
                                                    String nombreAdquisicion, BigDecimal montoPresupuestado,
                                                    Integer idTcaTipoMoneda, String obervacionGestion,
                                                    Timestamp fechaRegistro, Integer banEstatus, 
                                                    Timestamp fechaPublicacion, Timestamp fechaLimiteRecepcion,
                                                    Integer requiereTramos, String idTcaResultadoProceso,
                                                    Timestamp fechaOrdenInicio){
        logger.log(ADFLogger.TRACE, "INTO crearRowFormularioImplementacionPct.");
        this.clearCache();
        Row row = this.createRow();
        try{
            String idImplementacionPct = new Integer(1).toString();
            row.setAttribute(FormularioImplementacionPctVORowImpl.ID, Long.parseLong(idImplementacionPct));
            row.setAttribute(FormularioImplementacionPctVORowImpl.TIPOPROCESO, tipoProceso);
            row.setAttribute(FormularioImplementacionPctVORowImpl.NOMBREADQUISICION, nombreAdquisicion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.MONTOPRESUPUESTADO, montoPresupuestado);
            row.setAttribute(FormularioImplementacionPctVORowImpl.IDTCATIPOMONEDA, idTcaTipoMoneda);
            row.setAttribute(FormularioImplementacionPctVORowImpl.OBSERVACIONGESTION, obervacionGestion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.FECHAREGISTRO, fechaRegistro);
            row.setAttribute(FormularioImplementacionPctVORowImpl.BANESTATUS, banEstatus);
            row.setAttribute(FormularioImplementacionPctVORowImpl.FECHAPUBLICACION, fechaPublicacion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.FECHALIMITERECEPCION, fechaLimiteRecepcion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.REQUIERELOTES, requiereTramos);
            row.setAttribute(FormularioImplementacionPctVORowImpl.IDTCARESULTADOPROCESO, idTcaResultadoProceso);
            row.setAttribute(FormularioImplementacionPctVORowImpl.FECHAORDENINICIO, fechaOrdenInicio);
            row.setNewRowState(Row.STATUS_INITIALIZED);
            
            this.insertRowAtRangeIndex(0, row); 
            this.setCurrentRow(row); // Se asigna row como current (Fila actual)
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormularioImplementacionPct." + e.getClass() + e.getMessage());
        }
    }
    
    public void crearRowFormImpPctInsertarActualizar(Long idImplementacion, String tipoProceso, 
                                                    String nombreAdquisicion, BigDecimal montoPresupuestado, 
                                                    String observacion, Timestamp fechaPublicacion, 
                                                    Timestamp fechaLimiteRecepcionPropuesta, Integer idTcaTipoMoneda, 
                                                    Integer requiereLotes){
        logger.log(ADFLogger.TRACE, "INTO crearRowFormularioImplementacionPctSCC.");
        this.clearCache();
        Row row = this.createRow();
        try{
            row.setAttribute(FormularioImplementacionPctVORowImpl.ID, idImplementacion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.TIPOPROCESO, tipoProceso);
            row.setAttribute(FormularioImplementacionPctVORowImpl.NOMBREADQUISICION, nombreAdquisicion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.FECHAPUBLICACION, fechaPublicacion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.FECHALIMITERECEPCION, fechaLimiteRecepcionPropuesta);
            row.setAttribute(FormularioImplementacionPctVORowImpl.MONTOPRESUPUESTADO, montoPresupuestado);
            row.setAttribute(FormularioImplementacionPctVORowImpl.OBSERVACIONGESTION, observacion);
            row.setAttribute(FormularioImplementacionPctVORowImpl.IDTCATIPOMONEDA, idTcaTipoMoneda);
            row.setAttribute(FormularioImplementacionPctVORowImpl.REQUIERELOTES, requiereLotes);
            row.setNewRowState(Row.STATUS_INITIALIZED);
            
            this.insertRowAtRangeIndex(0, row); 
            this.setCurrentRow(row); // Se asigna row como current (Fila actual)
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormularioImplementacionPct." + e.getClass() + e.getMessage());
        }
    }
    
    public Map validarFormularioImplementacion(){
        logger.log(ADFLogger.TRACE, "INTO validarFormularioImplementacion.");
        
        String tipoProceso = null;
        String nombreAdquisicion = null;
        BigDecimal montoPresupuestado = null;
        BigDecimal monto = new BigDecimal(35000.00);
        
        Integer banderaElementosVacios = 1;
        Integer banderaMontoPresupuestado = 0;
        
        Map<String,Object> valoresImplementacion = new HashMap<String,Object>();
        
        FormularioImplementacionPctVORowImpl formularioImplementacionVORowImpl = (FormularioImplementacionPctVORowImpl) this.getCurrentRow();
        
        try{
            tipoProceso = formularioImplementacionVORowImpl.getTipoProceso();
            nombreAdquisicion = formularioImplementacionVORowImpl.getNombreAdquisicion();
            montoPresupuestado = formularioImplementacionVORowImpl.getMontoPresupuestado();
            
            if(null != tipoProceso && null != nombreAdquisicion && null != montoPresupuestado){
                banderaElementosVacios = 1;
                try{
                    if(tipoProceso.compareTo("Abreviado") == 0){
                        if(montoPresupuestado.compareTo(monto) == 1){
                            banderaMontoPresupuestado = 1;
                            logger.warning("banderaMontoPresupuestado: " + banderaMontoPresupuestado);
                        }
                        else if((montoPresupuestado.compareTo(monto) == -1 || (montoPresupuestado.compareTo(monto) == 0)) && montoPresupuestado.compareTo(new BigDecimal(0.00)) == 1){
                            banderaMontoPresupuestado = 2;
                            logger.warning("banderaMontoPresupuestado: " + banderaMontoPresupuestado);
                        }
                    }
                    else{
                        banderaMontoPresupuestado = 3;
                        logger.warning("banderaMontoPresupuestado: " + banderaMontoPresupuestado);
                    }
                }catch(Exception e){
                    logger.warning("Error en las comparaciones de datos de tipo BigDecimal");
                }
            }
            else{
                banderaElementosVacios = 0;
            }
            
            valoresImplementacion.put("banderaElementosVacios", banderaElementosVacios);
            valoresImplementacion.put("banderaMontoPresupuestado", banderaMontoPresupuestado);

        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Excepcion en validarFormularioCargoPrepago." + e.getClass() + e.getMessage()); 
        }
        
        return (valoresImplementacion);
    }
    
    public Map validarFormularioImplementacionObservacion(){
        logger.log(ADFLogger.TRACE, "INTO validarFormularioImplementacionObservacion.");
        
        String tipoProceso = null;
        String nombreAdquisicion = null;
        BigDecimal montoPresupuestado = null;
        BigDecimal monto = new BigDecimal(35000.00);
        String observacion = null;
        
        Integer banderaElementosVacios = 1;
        Integer banderaMontoPresupuestado = 0;
        
        Map<String,Object> valoresImplementacion = new HashMap<String,Object>();
        
        FormularioImplementacionPctVORowImpl formularioImplementacionVORowImpl = (FormularioImplementacionPctVORowImpl) this.getCurrentRow();
        
        try{
            tipoProceso = formularioImplementacionVORowImpl.getTipoProceso();
            nombreAdquisicion = formularioImplementacionVORowImpl.getNombreAdquisicion();
            montoPresupuestado = formularioImplementacionVORowImpl.getMontoPresupuestado();
            observacion = formularioImplementacionVORowImpl.getObservacionGestion();
            
            if(null != tipoProceso && null != nombreAdquisicion && null != montoPresupuestado && null != observacion){
                banderaElementosVacios = 1;
                try{
                    if(tipoProceso.compareTo("Abreviado") == 0){
                        if(montoPresupuestado.compareTo(monto) == 1){
                            banderaMontoPresupuestado = 1;
                            logger.warning("banderaMontoPresupuestado: " + banderaMontoPresupuestado);
                        }
                        else if(montoPresupuestado.compareTo(monto) == -1 && montoPresupuestado.compareTo(new BigDecimal(0.00)) == 1){
                            banderaMontoPresupuestado = 2;
                            logger.warning("banderaMontoPresupuestado: " + banderaMontoPresupuestado);
                        }
                    }
                    else{
                        banderaMontoPresupuestado = 3;
                        logger.warning("banderaMontoPresupuestado: " + banderaMontoPresupuestado);
                    }
                }catch(Exception e){
                    logger.warning("Error en las comparaciones de datos de tipo BigDecimal");
                }
            }
            else{
                banderaElementosVacios = 0;
            }
            
            valoresImplementacion.put("banderaElementosVacios", banderaElementosVacios);
            valoresImplementacion.put("banderaMontoPresupuestado", banderaMontoPresupuestado);

        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Excepcion en validarFormularioCargoPrepago." + e.getClass() + e.getMessage()); 
        }
        
        return (valoresImplementacion);
    }
    
    public Boolean validarFormularioImplementacionIniciarAdquisicion(){
        logger.log(ADFLogger.TRACE, "INTO validarFormularioImplementacionIniciarAdquisicion.");
        
        String nombreAdquisicion = null;
        Timestamp fechaPublicacion = null;
        Timestamp fechaLimiteRecepcionPropuestas = null;
        BigDecimal montoPresupuestado = null;
        Integer idTcaTipoMoneda = null;
        
        Boolean validarFormulario = Boolean.FALSE;
        
        FormularioImplementacionPctVORowImpl formularioImplementacionVORowImpl = (FormularioImplementacionPctVORowImpl) this.getCurrentRow();
        
        try{
            nombreAdquisicion = formularioImplementacionVORowImpl.getNombreAdquisicion();
            fechaPublicacion = formularioImplementacionVORowImpl.getFechaPublicacion();
            fechaLimiteRecepcionPropuestas = formularioImplementacionVORowImpl.getFechaLimiteRecepcion();
            montoPresupuestado = formularioImplementacionVORowImpl.getMontoPresupuestado();
            idTcaTipoMoneda = formularioImplementacionVORowImpl.getIdTcaTipoMoneda();
            logger.warning("valor NombreAdquisicion obtenido del formulario: " + nombreAdquisicion);
            logger.warning("valor FechaPublicacion obtenido del formulario: " + fechaPublicacion);
            logger.warning("valor FechaLimite Recepcion obtenido del formulario: " + fechaLimiteRecepcionPropuestas);
            logger.warning("valor MontoPresupuestado obtenido del formulario: " + montoPresupuestado);
            logger.warning("valor IdTcaTipoMoneda obtenido del formulario: " + idTcaTipoMoneda);
            
            if(null != nombreAdquisicion && null != fechaPublicacion && null != fechaLimiteRecepcionPropuestas 
               && null != montoPresupuestado && null != idTcaTipoMoneda){
                validarFormulario = Boolean.TRUE;
            }
            else{
                validarFormulario = Boolean.FALSE;
            }
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Excepcion en validarFormularioImplementacionIniciarAdquisicion." + e.getClass() + e.getMessage()); 
        }
        
        return (validarFormulario);
    }
    
    public Boolean validarFormularioImplementacionRequiereLotes(){
        logger.log(ADFLogger.TRACE, "INTO validarFormularioImplementacionRequiereLotes.");
        
        Integer requiereLotes = null;
        
        Boolean validarFormulario = Boolean.FALSE;
        
        FormularioImplementacionPctVORowImpl formularioImplementacionVORowImpl = (FormularioImplementacionPctVORowImpl) this.getCurrentRow();
        
        try{
            requiereLotes = formularioImplementacionVORowImpl.getRequiereLotes();
            logger.warning("valor RequiereLotes obtenido del formulario: " + requiereLotes);
            
            if(null != requiereLotes){
                if(requiereLotes == 1){
                    validarFormulario = Boolean.TRUE;
                    logger.warning("valor RequiereLotes obtenido del formulario bandera: " + validarFormulario);
                }
                else if(requiereLotes == 0){
                    validarFormulario = Boolean.FALSE;
                    logger.warning("valor RequiereLotes obtenido del formulario bandera: " + validarFormulario);
                }
            }
            else{
                validarFormulario = Boolean.FALSE;
            }
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Excepcion en validarFormularioImplementacionRequiereLotes." + e.getClass() + e.getMessage()); 
        }
        
        return (validarFormulario);
    }
    
    public Boolean validarFormularioImplementacionRegistrarResultadoAdquisicion(){
        logger.log(ADFLogger.TRACE, "INTO validarFormularioImplementacionRegistrarResultadoAdquisicion.");
        
        Timestamp fechaLimiteRecepcionPropuestas = null;
        Integer idTcaResultadoProceso = null;
        
        Boolean validarFormulario = Boolean.FALSE;
        
        FormularioImplementacionPctVORowImpl formularioImplementacionVORowImpl = (FormularioImplementacionPctVORowImpl) this.getCurrentRow();
        
        try{
            fechaLimiteRecepcionPropuestas = formularioImplementacionVORowImpl.getFechaLimiteRecepcion();
            idTcaResultadoProceso = formularioImplementacionVORowImpl.getIdTcaResultadoProceso();
            logger.warning("valor FechaLimite Recepcion obtenido del formulario: " + fechaLimiteRecepcionPropuestas);
            logger.warning("valor idTcaResultadoProceso obtenido del formulario: " + idTcaResultadoProceso);
            
            if(null != idTcaResultadoProceso){
                validarFormulario = Boolean.TRUE;
            }
            else{
                validarFormulario = Boolean.FALSE;
            }
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Excepcion en validarFormularioImplementacionRegistrarResultadoAdquisicion." + e.getClass() + e.getMessage()); 
        }
        
        return (validarFormulario);
    }
    
    
    public Row obtenerCurrentEnFormularioImplementacionVO(){
        logger.warning("Inicia metodo obtenerCurrent  en FomularioImplementacionVO");
        Row filaCurrent = null;
                
            if(getEstimatedRowCount() > 0)         
                filaCurrent = getCurrentRow();
            else
                logger.warning("No se pudo recuperar el Current de Formulario Implementacion");            
        
        logger.warning("Termina metodo obtenerCurrent  en FomularioImplementacionVO");
        return filaCurrent;
    }
    
    
}

