package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.operacionservice.Operacion12BndQSService;
import com.bcie.xmlns.operacionservice.Operacion12Port;

import java.math.BigDecimal;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.atributobo.NivelType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DatosGeneralesDesembolsoVO;
import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType;
import org.bcie.operacionbo.MontoOperacion;
import org.bcie.operacionbo.MontosOperacion;
import org.bcie.operacionbo.Operacion;
import org.bcie.operacionmo.ConsultarOperacionByIdOperacionRequestType;
import org.bcie.operacionmo.ConsultarOperacionResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 29 19:05:27 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosGeneralesDesembolsoVOImpl extends ViewObjectImpl implements DatosGeneralesDesembolsoVO {
    private static ADFLogger logger = null;

    /**
     * This is the default constructor (do not remove).
     */
    public DatosGeneralesDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /** Metodo para obtener los datos generales de contrato desembolso
     * 1.- Consulta si existe un contrato desembolso fenixGestorDesembolsosAMImpl.getDatosDesembolsoVO().monto(idContrato);
     * 1.1.- En caso de tener una actividad eocnomica detecta la iniciativa estrategica (recordando que la actividad economica se guarda en la iniciativa y el idIniciativa en la actividad debido a que no se muestra los datos anteriormente)
     * 1.2 se obtiene el monto en dolares se usa metodo para convertir el monto en monto usd indicando el tipo de moneda y la cantidad
     * @param idOperacion
     * @param idContrato
     * @param modalidad
     * @param codigoTarea
     * @param linea
     */
    public void cargarDatosDesembolso(Long idOperacion, Long idContrato, Integer modalidad, Integer codigoTarea,
                                      Long linea, Boolean cargarInformacion) {
        logger.log(ADFLogger.WARNING, "Entrando en cargarDatosDesembolso.");
        logger.warning("idOperacion " + idOperacion);
        logger.warning("idContrato " + idContrato);
        logger.warning("modalidad " + modalidad);
        logger.warning("codigoTarea " + codigoTarea);
        logger.warning("linea " + linea);
        logger.warning("cargarInformacion " + cargarInformacion);

        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio =
            System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        if (null != cargarInformacion) {
            if (!cargarInformacion) {
                logger.warning("Atributo cargarInformacion es FALSE. NO se cargará informacion.");
                return;
            }
        } else {
            logger.warning("Atributo cargarInformacion es NULL. NO se cargará informacion.");
            return;
        }

        Long producto = null;
        Integer estadoContrato = null;
        Integer tipoMoneda = null;
        BigDecimal montoDesembolsado = null;
        BigDecimal montoDesembolsadoUSD = null;
        Boolean esIntermediario = Boolean.FALSE;
        Boolean esIntermediarioInstrumento = Boolean.FALSE;
        Boolean esAPE = Boolean.FALSE;
        Integer opcionActividad = 2;
        Integer iniciativa = null;
        String programa1 = null;
        String destinoFinan = null;
        Integer idEje = null;
        Integer idArea = null;
        Integer idActividad = null;
        Integer idActividadAsoc = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        logger.log(ADFLogger.NOTIFICATION, "Entro consultarDetalleOperacion");
        NameValuePairs nVpDatos = new NameValuePairs();

        Row newDatosDesembolso = null;
        Row rowDatosOperacionCliente = null;
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.OPERACION);
        //String wsdl = "http://hn-obpm-qa-1.bcie.org:7013/Entidad/OperacionService/V1.0?wsdl";
        Map consultaContrato = new HashMap<String, Object>();

        //Limpiarmos la VO Programatica
        executeQuery();

        if (null != idContrato) {
            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
                (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
            try {
                if (null != codigoTarea) {
                    nVpDatos.setAttribute("idTarea", codigoTarea);
                }
                consultaContrato = fenixGestorDesembolsosAMImpl.getDatosDesembolsoVO().monto(idContrato);
                if (((Boolean) consultaContrato.get("resultado"))) {
                    logger.warning("proyecto " + (Integer) consultaContrato.get("proyecto"));
                    if (null != (BigDecimal) consultaContrato.get("monto")) {
                        nVpDatos.setAttribute("MontoContrato", (BigDecimal) consultaContrato.get("monto"));
                        montoDesembolsado = (BigDecimal) consultaContrato.get("monto");
                    }
                    if (null != (Integer) consultaContrato.get("tipomonto")) {
                        nVpDatos.setAttribute("IdTipoMoneda", (Integer) consultaContrato.get("tipomonto"));
                        tipoMoneda = (Integer) consultaContrato.get("tipomonto");
                    }
                    if (null != (String) consultaContrato.get("programa")) {
                        logger.warning("programa operacion recuperado: " + consultaContrato.get("programa"));
                        nVpDatos.setAttribute("ProgramaOperacion", (String) consultaContrato.get("programa"));
                        programa1 = (String) consultaContrato.get("programa");
                    }
                    if (null != (String) consultaContrato.get("destino")) {
                        nVpDatos.setAttribute("DestinoFinanciamiento", (String) consultaContrato.get("destino"));
                        destinoFinan = (String) consultaContrato.get("destino");
                    }
                    if (null != (Integer) consultaContrato.get("modalidad")) {
                        nVpDatos.setAttribute("ModalidadFinanciamiento", (Integer) consultaContrato.get("modalidad"));
                    }
                    if (null != (Integer) consultaContrato.get("actividadf1")) {
                        nVpDatos.setAttribute("IdActividadEconomicaF1", (Integer) consultaContrato.get("actividadf1"));
                        idActividadAsoc =
                            (Integer) consultaContrato.get("actividadf1"); // se usa para obterner la inciativa estrategica
                    }
                    if (null != (Integer) consultaContrato.get("actividad")) {
                        nVpDatos.setAttribute("IdIniciativaEstrategica", (Integer) consultaContrato.get("actividad"));
                        idActividad = (Integer) consultaContrato.get("actividad");
                    }
                    if (null != (Integer) consultaContrato.get("iniciativa")) {
                        nVpDatos.setAttribute("IdActividadEconomica", (Integer) consultaContrato.get("iniciativa"));
                        iniciativa = (Integer) consultaContrato.get("iniciativa");
                    }
                    if (null != (Integer) consultaContrato.get("area")) {
                        nVpDatos.setAttribute("IdAreaFocalizacion", (Integer) consultaContrato.get("area"));
                        idArea = (Integer) consultaContrato.get("area");
                    }
                    if (null != (Integer) consultaContrato.get("eje")) {
                        nVpDatos.setAttribute("IdEjeEstrategico", (Integer) consultaContrato.get("eje"));
                        idEje = (Integer) consultaContrato.get("eje");
                    }
                    if (null != (Integer) consultaContrato.get("proyecto")) {
                        nVpDatos.setAttribute("IdProyectoMunicipal", (Integer) consultaContrato.get("proyecto"));
                        logger.warning("proyecto F " + nVpDatos.getAttribute("IdProyectoMunicipal"));
                    }
                    if (null != (Long) consultaContrato.get("IdTcaProductoPrograma")) {
                        nVpDatos.setAttribute("IdTcaProductoPrograma",
                                              (Long) consultaContrato.get("IdTcaProductoPrograma"));
                        logger.warning("IdTcaProductoPrograma: " + nVpDatos.getAttribute("IdTcaProductoPrograma"));
                    }
                    if (null != (Integer) consultaContrato.get("estado")) {
                        nVpDatos.setAttribute("IdEstadoContrato", (Integer) consultaContrato.get("estado"));
                        estadoContrato = (Integer) consultaContrato.get("estado");
                        logger.warning("Aplica estado contrato");
                        logger.warning("montoDesembolsado " + montoDesembolsado);
                        logger.warning("tipoMoneda " + tipoMoneda);
                        if (null != estadoContrato) {
                            if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_REGISTRADO) == 0 ||
                                estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSADO) == 0) {
                                logger.warning("Aplica estado contrato");
                                if (null != (BigDecimal) consultaContrato.get("montousd")) {
                                    nVpDatos.setAttribute("MontoUSD", (BigDecimal) consultaContrato.get("montousd"));
                                } else {

                                    if (null != montoDesembolsado && null != tipoMoneda) {
                                        montoDesembolsadoUSD =
                                            fenixAMImpl.convertirMonedas(tipoMoneda,
                                                                         FenixModelConstants.CODIGO_MONEDA_USD,
                                                                         montoDesembolsado);
                                        if (null != montoDesembolsadoUSD) {
                                            nVpDatos.setAttribute("MontoUSD", montoDesembolsadoUSD);
                                        }
                                    }
                                }
                            } else {
                                if (null != montoDesembolsado && null != tipoMoneda) {
                                    montoDesembolsadoUSD =
                                        fenixAMImpl.convertirMonedas(tipoMoneda, FenixModelConstants.CODIGO_MONEDA_USD,
                                                                     montoDesembolsado);
                                    if (null != montoDesembolsadoUSD) {
                                        nVpDatos.setAttribute("MontoUSD", montoDesembolsadoUSD);
                                    }
                                }
                            }

                        } else {
                            logger.warning("no tiene estado de contrato");
                        }
                    }
                } else {
                    logger.warning("no tiene estado de contrato");
                }
            } catch (Exception exp) {
                logger.warning("Error al consultar la configuracion", exp);
            }

            //recuepramos el atributo revolvencia
            Integer revolvencia =
                fenixGestorDesembolsosAMImpl.getConsultarLineaCreditoDesembolsoVO().getRevolvenciaLinea(linea);
            logger.warning("valor de revolvencia recuperado: " + revolvencia);
            nVpDatos.setAttribute("RevolvenciaLineaCred", revolvencia);

            //Seteo del tipo de tasa para filtrar el programa
            Integer tipoTasa = obtenerTipoTasaDesembolso();
            logger.warning("Valor tipo tasa seteada : " + tipoTasa);
            nVpDatos.setAttribute("IdTcaTipoTasa", tipoTasa);

            try {
                Long idSectorMercado = null;
                String descripcionSectorMercado = null;
                Long idSectorInstitucional = null;
                String descripcionSectorInstitucional = null;
                Boolean consultaOperacion = Boolean.TRUE;

                try {
                    logger.warning("Recuperando datos de Operacion y Cliente de DetalleDesembolsosOperacionVO.");
                    rowDatosOperacionCliente =
                        fenixGestorDesembolsosAMImpl.getDetalleDesembolsosOperacionVO().getCurrentRow();
                } catch (Exception e) {
                    logger.warning("ERROR al recuperar informacion de Operacion y cliente.", e);
                    consultaOperacion = Boolean.FALSE;
                }

                //Controlar cuando se pierda el row de DetalleDesembolsosOperacionVO,volver a consumir el servicio
                if (null == rowDatosOperacionCliente) {
                    logger.severe("Se perdio el row de DetalleDesembolsosOperacionVO");
                    logger.severe("Se consume nuevamente el servicio de consulta de operacion");
                    fenixGestorDesembolsosAMImpl.getDetalleDesembolsosOperacionVO().consultarOperacionPorIdOperacion(idOperacion);
                    rowDatosOperacionCliente =
                        fenixGestorDesembolsosAMImpl.getDetalleDesembolsosOperacionVO().getCurrentRow();
                    if (null != rowDatosOperacionCliente) {
                        logger.warning("Se recupera row DetalleDesembolsosOperacionVO");
                    } else {
                        logger.warning("No se recupera row DetalleDesembolsosOperacionVO");
                    }
                }


                if (consultaOperacion) {
                    if (null != rowDatosOperacionCliente) {
                        if (null != rowDatosOperacionCliente.getAttribute("IdProducto")) {
                            logger.warning("IdProducto" + rowDatosOperacionCliente.getAttribute("IdProducto"));
                            try {
                                producto = (Long) rowDatosOperacionCliente.getAttribute("IdProducto");
                                nVpDatos.setAttribute("IdProducto", producto.intValue());
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar IdProducto.", e);
                            }
                        } else {
                            logger.warning("El campo PRODUCTO de la operacion es NULL.");
                        }
                        if (null != rowDatosOperacionCliente.getAttribute("IdSectorMercado")) {
                            logger.warning("IdSectorMercado" +
                                           rowDatosOperacionCliente.getAttribute("IdSectorMercado"));
                            try {
                                idSectorMercado = (Long) rowDatosOperacionCliente.getAttribute("IdSectorMercado");
                                nVpDatos.setAttribute("IdSectorMercado", idSectorMercado.intValue());
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar IdSectorMercado.", e);
                            }
                        }

                        if (null != rowDatosOperacionCliente.getAttribute("DescSectorMercado")) {
                            logger.warning("NombreSectorMercado " +
                                           rowDatosOperacionCliente.getAttribute("DescSectorMercado"));
                            try {
                                descripcionSectorMercado =
                                    (String) rowDatosOperacionCliente.getAttribute("DescSectorMercado");
                                nVpDatos.setAttribute("NombreSectorMercado", descripcionSectorMercado);
                            } catch (Exception e) {
                                logger.warning("ERROR al recuprar DescripcionSectorMercado.", e);
                            }
                        }
                        if (null != rowDatosOperacionCliente.getAttribute("Sector")) {
                            logger.warning("IdSectorInstitucional " + rowDatosOperacionCliente.getAttribute("Sector"));
                            try {
                                idSectorInstitucional = (Long) rowDatosOperacionCliente.getAttribute("Sector");
                                nVpDatos.setAttribute("IdSectorInstitucional", idSectorInstitucional.intValue());
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar el IdSectorInstitucional.", e);
                            }
                        }
                        if (null != rowDatosOperacionCliente.getAttribute("SectorDescripcion")) {
                            logger.warning("NombreSectorInstitucion " +
                                           rowDatosOperacionCliente.getAttribute("SectorDescripcion"));
                            try {
                                descripcionSectorInstitucional =
                                    (String) rowDatosOperacionCliente.getAttribute("SectorDescripcion");
                                nVpDatos.setAttribute("NombreSectorInstitucion", descripcionSectorInstitucional);
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar la DescripcionSectorInstitucional.", e);
                            }
                        }
                        //S&P: 29/07/2019 Se anexa codigo para data multisectorial
                        if (null != rowDatosOperacionCliente.getAttribute("EsMultisectorial")) {
                            logger.warning("EsMultisectorial " +
                                           rowDatosOperacionCliente.getAttribute("EsMultisectorial"));
                            try {
                                nVpDatos.setAttribute("EsMultisectorial",(Boolean)  rowDatosOperacionCliente.getAttribute("EsMultisectorial"));
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar EsMultisectorial.", e);
                            }
                        }else {
                                logger.warning("EsMultisectorial nulo.");
                            
                            }
                    } else {
                        logger.warning("rowDatosOperacionCliente es NULL.");
                    }

                    /*
                      //Datos de prueba
                    Long idSectorMercado = null;
                    String descripcionSectorMercado = null;
                    Long idSectorInstitucional = null;
                    String descripcionSectorInstitucional = null;
                    Boolean consultaOperacion = Boolean.TRUE;
                    producto=3L;
                    nVpDatos.setAttribute("IdProducto", producto.intValue());
                    descripcionSectorMercado = "Prueba sector de mercado";
                    nVpDatos.setAttribute("NombreSectorMercado", descripcionSectorMercado);
                    descripcionSectorInstitucional ="Prueba sector de institucion";
                    nVpDatos.setAttribute("NombreSectorInstitucion", descripcionSectorInstitucional);
                    */

                    //Obtener el intermediario
                    if (null != producto) {
                        esIntermediario = obtenerColumnaProducto(producto.intValue(), FenixModelConstants.COL_09);
                        logger.warning("EsIntermediario: " + esIntermediario);
                        //fenixAMImpl.obtenerCampo(producto.intValue(), FenixModelConstants.COL_09);
                        esIntermediarioInstrumento =
                            obtenerColumnaProducto(producto.intValue(), FenixModelConstants.COL_10);
                        logger.warning("esIntermediarioInstrumento: " + esIntermediarioInstrumento);
                        esAPE = obtenerColumnaProducto(producto.intValue(), FenixModelConstants.COL_11);
                    } else {
                        logger.warning("VAriable PRODUCTO es NULL. No se pudo recuperar el valor de la columna de CatProducto.");
                    }

                    logger.warning("esAPE: " + esAPE);
                    logger.warning("esOR: " + !esAPE);
                    Integer variante = FenixModelConstants.VARIANTE_1;
                    nVpDatos.setAttribute("IdInstrumento", variante);
                    if (null == esIntermediario) {
                        logger.warning("***Error, la variable esIntermediario es resuelta a null");
                        nVpDatos.setAttribute("EsIntermediario", Boolean.FALSE);
                        variante = FenixModelConstants.VARIANTE_1;
                        nVpDatos.setAttribute("IdInstrumento", variante);

                    }
                    /*
                    if(esIntermediarioInstrumento){
                            esIntermediario=Boolean.TRUE;
                        }
                    else{
                            esIntermediario=Boolean.FALSE;
                    //nVpDatos.setAttribute("EsIntermediario", Boolean.FALSE);
                        }
                    */
                    if (esIntermediario) {
                        nVpDatos.setAttribute("EsIntermediario", Boolean.TRUE); //Boolean.TRUE
                        logger.warning("Inf, esIntermediario : " + esIntermediario);
                    } 
                    
                    if(!esIntermediario || producto.equals(4L))
                    {
                        logger.warning("Inf, esIntermediario : " + esIntermediario);


                        if (esAPE) {
                            //  nVpDatos.setAttribute("ProgramaOperacion", FenixModelConstants.PROGRAMA_APE);
                            variante = FenixModelConstants.VARIANTE_2;
                            nVpDatos.setAttribute("IdInstrumento", variante);
                        } else {
                            //  nVpDatos.setAttribute("ProgramaOperacion", FenixModelConstants.PROGRAMA_OR);
                            variante = FenixModelConstants.VARIANTE_3;
                            nVpDatos.setAttribute("IdInstrumento", variante);
                        }

                        logger.warning("variante: " + variante);

                        //nVpDatos.setAttribute("DestinoFinanciamiento", FenixModelConstants.DESTINO_ND);
                        logger.warning("Programa insertado: " + nVpDatos.getAttribute("ProgramaOperacion"));
                        nVpDatos.setAttribute("EsIntermediario", Boolean.FALSE);
                        logger.warning("Destino destinoFinan: " + destinoFinan);
                        if (destinoFinan == null) {
                            nVpDatos.setAttribute("DestinoFinanciamiento", FenixModelConstants.DESTINO_ND);
                        }
                        logger.warning("Destino Financiamiento insertado: " + nVpDatos.getAttribute("DestinoFinanciamiento"));

                        String wsdl2 = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
                        //String wsdl2 = "http://hn-obpm-qa-1.bcie.org:7013/Entidad/LineaCreditoService/V1.0?wsdl";

                        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService =
                            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class,
                                                              wsdl2);
                        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
                            lineaCredito12BndQSService.getLineaCredito12Bnd();

                        logger.log(ADFLogger.WARNING, ">HNWS" + lineaCreditoPT.toString());
                        org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType request2 =
                            new org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType();
                        //se agrega los parametros al request idOperacion e instanciaProceso
                        //idOperacion
                        request2.setIdLineaCredito(linea);
                        //instanciaProceso
                        try {
                            Date horaInicio2 =
                                ModelUtils.logStartWS(logger, request2,
                                                      FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO);
                            org.bcie.lineacreditomo.ConsultarLineaCreditoBPELResponseType response2 =
                                lineaCreditoPT.consultarLineaCreditoById(request2);
                            ModelUtils.logEndWS(logger, response2,
                                                FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO,
                                                horaInicio2);
                            if (null != response2.getLineaCredito()) {
                                if (null != response2.getLineaCredito().getHerramientaCE()) {
                                    if (null !=
                                        response2.getLineaCredito().getHerramientaCE().getActividadEconomica()) {
                                        if (null == idActividad) {
                                            if (response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getId() !=
                                                null)
                                                logger.warning("ACTIVIDAD ECONOMICA : " +
                                                               response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getId());
                                            nVpDatos.setAttribute("IdIniciativaEstrategica",
                                                                  response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getId().intValue());
                                            idActividad = response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getId().intValue();
                                        }
                                        if (response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getDescripcion() !=
                                            null) {
                                            logger.warning("ACTIVIDAD ECONOMICA NOMBRE : " +
                                                           response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getDescripcion());
                                            nVpDatos.setAttribute("NombreActividadEconomica",
                                                                  response2.getLineaCredito().getHerramientaCE().getActividadEconomica().getDescripcion());
                                        }
                                    }

                                    if (null != response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion()) {
                                        if (null == idArea) {
                                            if (response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getId() !=
                                                null)
                                                logger.warning("AREA FOCALIZACION: " +
                                                               response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getId());
                                            nVpDatos.setAttribute("IdAreaFocalizacion",
                                                                  response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getId().intValue());
                                            idArea = response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getId().intValue();
                                        }
                                        if (response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getDescripcion() !=
                                            null) {
                                            logger.warning("AREA FOCALIZACION NOMBRE: " +
                                                           response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getDescripcion());
                                            nVpDatos.setAttribute("NombreAreaFocalizacion",
                                                                  response2.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getDescripcion());
                                        }
                                    }

                                    if (null != response2.getLineaCredito().getHerramientaCE().getEjeEstrategico()) {
                                        if (null == idEje) {
                                            if (response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getId() !=
                                                null)
                                                logger.warning("EJE ESTRATEGICO: " +
                                                               response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getId());
                                            nVpDatos.setAttribute("IdEjeEstrategico",
                                                                  response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getId().intValue());
                                            idEje = response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getId().intValue();
                                        }
                                        if (response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getDescripcion() !=
                                            null) {
                                            logger.warning("EJE ESTRATEGICO NOMBRE: " +
                                                           response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getDescripcion());
                                            nVpDatos.setAttribute("NombreEjeEstrategico",
                                                                  response2.getLineaCredito().getHerramientaCE().getEjeEstrategico().getDescripcion());
                                        }
                                    }
                                    
                                    
                                    //JURBINA@2/6/2020 Cuando el producto sea 4, se debera utilizar el nuevo VO de datosGeneralesIntermediacion para obtener los valores por defecto
                                    if(producto.equals(4L)) {
                                        Row row = fenixGestorDesembolsosAMImpl.getDatosGeneralesIntermediacionVO().getDatosIntermediacionFirst(idArea, idEje, idActividad, programa1);
                                        
                                        if(row != null)
                                        {
                                            nVpDatos.setAttribute("IdActividadEconomicaF1", (Integer) row.getAttribute("IdTcaActividadEconomicaF1"));
                                                idActividadAsoc = (Integer) row.getAttribute("IdTcaActividadEconomicaF1"); 
                                                
                                            nVpDatos.setAttribute("IdIniciativaEstrategica", (Integer) row.getAttribute("IdActividadEconomica"));
                                            idActividad = (Integer) row.getAttribute("IdActividadEconomica");
                                            
                                            nVpDatos.setAttribute("IdActividadEconomica", (Integer) row.getAttribute("IdIniciativaEstrategica"));
                                            iniciativa = (Integer) row.getAttribute("IdIniciativaEstrategica");
                                            
                                            nVpDatos.setAttribute("IdAreaFocalizacion", (Integer) row.getAttribute("IdAreaFocalizacion"));
                                            idArea = (Integer) row.getAttribute("IdAreaFocalizacion");
                                            
                                            nVpDatos.setAttribute("IdEjeEstrategico", (Integer) row.getAttribute("IdEjeEstrategico"));
                                            idEje = (Integer) row.getAttribute("IdEjeEstrategico");
                                            
                                        }
                                        
                                    }
                                    
                                }
                            }
                        } catch (Exception e) {
                            logger.log(ADFLogger.WARNING, "No se recupero ninguna informacion, ", e);
                        }
                    }

                } else {
                    logger.log(ADFLogger.WARNING, "No se recupero ninguna operacion");
                }
            } catch (Exception e) {
                logger.log(ADFLogger.WARNING, "No se recupero ninguna operacion", e);
                // logger.log(ADFLogger.ERROR, e.getMessage().toString());
            }

            nVpDatos.setAttribute("IdOperacion", idOperacion);
            nVpDatos.setAttribute("IdDesembolso", idContrato);
            nVpDatos.setAttribute("EsIntermediario", esIntermediario);

            logger.warning("Se comienza a validar el valor modalida: " + modalidad);
            if (null != modalidad) {
                if (modalidad.compareTo(FenixModelConstants.MODALIDAD_DATOS_GENERALES_LECTURA) == 0) {
                    logger.warning("Se ingresa a la modalidad datos generales lectura");
                    if (null != codigoTarea) {
                        nVpDatos.setAttribute("idTarea", codigoTarea);
                        logger.warning("codigoTarea: " + codigoTarea);
                        if (codigoTarea.compareTo(FenixModelConstants.TAREA_DEFINIR_CLASIFICACION_DESEMBOLSO) == 0) {
                            nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                            logger.warning("Modo Escritura POR TAREA");
                        } else {
                            if (codigoTarea.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO) == 0) {
                                if (null != estadoContrato) {
                                    if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_TRANSITO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_FONDOS) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_DESEMBOLSADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_REGISTRADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_APROBADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_LIQUIDADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO) ==
                                        0) {
                                        logger.warning("Modo Lectura POR ESTADO");
                                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                        nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                                    } else {
                                        logger.warning("Modo Escritura ES DIEFERENTE A LOS ESTADOS DE MODO LECTURA");
                                        if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_VALIDACION) ==
                                            0 ||
                                            estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_PREPARADO) ==
                                            0 ||
                                            estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_CUMPLIMIENTO) ==
                                            0) {
                                            nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                            nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                        } else {
                                            nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                            nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                        }
                                        nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                    }
                                } else {
                                    logger.warning("Modo Escritura NO TIENE ESTADO DE CONTRATO");
                                    nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                    nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                                }
                            } else {
                                logger.warning("Modo Lectura GESTOR DESEMBOLSO");
                                nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                                nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                            }
                        }

                    } else {
                        logger.warning("Modo Lectura");
                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                        nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                    }
                } else {
                    if (modalidad.compareTo(FenixModelConstants.MODALIDAD_DATOS_GENERALES_ESCRITURA) == 0) {
                        logger.warning("Se ingresa a la modalidad datos generales escritura");
                        if (codigoTarea.compareTo(FenixModelConstants.TAREA_DEFINIR_CLASIFICACION_DESEMBOLSO) == 0) {
                            logger.warning("Modo Escritura POR MODALIDAD DE ESCRITURA Clasificacion Estrategica");
                            nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                            nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                        } else {
                            if (codigoTarea.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO) == 0) {
                                logger.warning("Modo Escritura POR MODALIDAD DE ESCRITURA Gestor de Desembolsos");
                                if (null != estadoContrato) {
                                    logger.warning("Dentro de Gestor de desembolsos, Valor estadoContrato: " +
                                                   estadoContrato);
                                    if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_VALIDACION) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_PREPARADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_CUMPLIMIENTO) ==
                                        0) {
                                        nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                        logger.warning("Valor EsContrato se setea como true");
                                        logger.warning("Valor EsEscritura se setea como false");
                                    } else {
                                        nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                        nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                        logger.warning("Valor EsContrato se setea como true");
                                        logger.warning("Valor EsEscritura se setea como true");
                                    }
                                } else {
                                    nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                    nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                }
                            } else {
                                logger.warning("Modo Escritura POR MODALIDAD DE ESCRITURA");
                                nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                            }
                        }

                    } else {
                        logger.warning("Modo Lectura NO ENCONTRO LA VALDIACION DE ESCRITURA");
                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                        nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                    }
                }
            } else {
                logger.warning("Modo Lectura NO ENCONTRO MODALIDAD");
                nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
            }
            if (codigoTarea.compareTo(FenixModelConstants.TAREA_REALIZAR_AJUSTES_DESEMBOLSO) == 0) {
                logger.warning("DatosGenerales invocado en TAREA_REALIZAR_AJUSTES_DESEMBOLSO ");
                nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
            }


            try {
                newDatosDesembolso = createAndInitRow(nVpDatos);
                insertRow(newDatosDesembolso);
                setCurrentRow(newDatosDesembolso);
                validarProgramaOperacion(esIntermediario);
            } catch (Exception exc) {
                logger.warning("error al aplicar el seteo a los datos generales", exc);
            }
            logger.warning("se aplica el setCurrent de la Vo Programatica");
        } else {
            logger.warning("Important! No se recibio el id de contrato, no se ejecutara ninguna accion sobre el tab");
        }

        if (null != newDatosDesembolso) {
            logger.log(ADFLogger.WARNING, "Valores de salida.");
            logger.log(ADFLogger.WARNING,
                       "MONTOCONTRATO: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.MONTOCONTRATO));
            logger.log(ADFLogger.WARNING,
                       "MONTOUSD: " + newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.MONTOUSD));
            logger.log(ADFLogger.WARNING,
                       "IDSECTORMERCADO: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDSECTORMERCADO));
            logger.log(ADFLogger.WARNING,
                       "IDSECTORINSTITUCIONAL: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDSECTORINSTITUCIONAL));
            logger.log(ADFLogger.WARNING,
                       "IDACTIVIDADECONOMICA: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDACTIVIDADECONOMICA));
            logger.log(ADFLogger.WARNING,
                       "IDAREAFOCALIZACION: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDAREAFOCALIZACION));
            logger.log(ADFLogger.WARNING,
                       "IDEJEESTRATEGICO: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDEJEESTRATEGICO));
            logger.log(ADFLogger.WARNING,
                       "PROGRAMAOPERACION: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.PROGRAMAOPERACION));
        }


        if (codigoTarea.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO) == 0) {
            logger.warning("Evaluando usuario como responsable en AM");
            String loginSession = null;
            loginSession = ADFContext.getCurrent().getSecurityContext().getUserName();
            logger.warning("loginSession: " + loginSession);

            FenixAMImpl fenixAMImpl2 = null;
            fenixAMImpl2 = (FenixAMImpl) this.getRootApplicationModule();
            FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
                (FenixGestorDesembolsosAMImpl) fenixAMImpl2.getFenixGestorDesembolsosAM();

            Boolean esResponsableOperacion =
                gestorDesembolsoAMImpl.getConsultarOperacionVO().verificarUsuarioComoResponsable(loginSession,
                                                                                                 idOperacion);

            if (!esResponsableOperacion) {
                logger.warning("usuario diferente a responsable estableciendo modo lectura");
                setAtributosPregarcarga();
            }

            logger.warning("esResponsableOperacion : " + esResponsableOperacion);
        }


        TFin =
            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.log(ADFLogger.WARNING, "Saliendo de cargarDatosDesembolso con una duracion de: " + tiempo + " segundos");
    }


    public void validarProgramaOperacion(Boolean esIntermediario) {
        logger.warning("*inf inicia metodo validarProgramaOperacion");

        if (!esIntermediario) {
            logger.warning("Asignando valor ProgramaOperacion por default..");
            
            FenixAMImpl fenixAMImpl = null;
            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            
             Row currentFilaDatosGen = getCurrentRow();
             
                Long producto =  (currentFilaDatosGen.getAttribute("IdProducto") == null) ? null
                              : new Long((Integer)currentFilaDatosGen.getAttribute("IdProducto"));
             
             Long revolvencia = ( currentFilaDatosGen.getAttribute("RevolvenciaLineaCred")== null) ? null 
                              : new Long((Integer)currentFilaDatosGen.getAttribute("RevolvenciaLineaCred"));
             
             Integer tipoTasa = (Integer)currentFilaDatosGen.getAttribute("IdTcaTipoTasa");
             
                  Long sector = (currentFilaDatosGen.getAttribute("IdSectorInstitucional") == null )? null
                              : new Long ((Integer)currentFilaDatosGen.getAttribute("IdSectorInstitucional"));
   
   
            fenixGestorDesembolsosAMImpl =
                (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
            Row row =
                fenixGestorDesembolsosAMImpl.getConsultarProgramaOperacionVO().getProgramaFirst(producto, revolvencia,
                                                                                                sector, tipoTasa);

            if (row != null) {
                String codProgra = (String) row.getAttribute("CodigoPrograma");
                logger.warning("ProgramaOperacion recuperado: " + codProgra);
                currentFilaDatosGen.setAttribute("ProgramaOperacion", codProgra);
            } else {
                logger.warning("No se pudo recuperar el valor del ProgramaOperacion");
            }
        }

        logger.warning("*inf inicia metodo validarProgramaOperacion");
    }

    /**
     * - Metodo para obtener el tipo de tasa de la condicion financiera al cargar el tba de datos generales
     * - El tipo de tasa se ocupa para filtrar la lista de programas que se muestra en el campo programa
     *   del tab de datos generales.
     * @return Integer
     */
    private Integer obtenerTipoTasaDesembolso() {
        logger.warning("Entra en obtenerTipoTasaDesembolso.");
        FenixAMImpl fenixAMImpl = null;
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl = null;
        Row row = null;
        Integer tcaTipoTasaDesembolso = null;
        try {
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            fenixGestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
            logger.warning("Se recupera el current de CondicionesFinancierasVO para obtener el tipo de tasa.");
            row = fenixGestorDesembolsosAMImpl.getCondicionesFinancierasVO().getCondicionFinancieraCurrent();
            if (null != row) {
                if (null != row.getAttribute("IdTcaTipoTasaDesembolso")) {
                    tcaTipoTasaDesembolso = (Integer) row.getAttribute("IdTcaTipoTasaDesembolso");
                } else {
                    logger.warning("El IdTcaTipoTasaDesembolso es nulo.");
                }
            } else {
                logger.warning("No se recupero el row de condiciones financieras, es nulo.");
            }
        } catch (Exception e) {
            logger.warning("Error en obtenerTipoTasaDesembolso.", e);
        }
        return tcaTipoTasaDesembolso;
    }

    /**
     * Metodo para filtrar la lista de programas cuando se realiza un cambio de tasa en
     * el tab de datos generales.
     * @param idTipoTasaDesembolso
     * @return
     */
    public Boolean aplicarCambioFiltroProgramaPorTipoTasa(Integer idTipoTasaDesembolso) {
        logger.warning("Entra en aplicarCambioFiltroProgramaPorTipoTasa");
        Row row = null;
        Boolean cambioCorrecto = Boolean.FALSE;
        try {
            logger.warning("Valor de idTipoTasaDesembolso : " + idTipoTasaDesembolso);
            row = this.getCurrentRow();
            if (null != row) {
                if (null != idTipoTasaDesembolso) {
                    row.setAttribute("IdTcaTipoTasa", idTipoTasaDesembolso);
                    logger.warning("Nuevo valor de tasa para filtrar programa : " + row.getAttribute("IdTcaTipoTasa"));
                    cambioCorrecto = Boolean.TRUE;
                } else {
                    logger.warning("El nuevo id de la tasa es nulo.");
                }
            } else {
                logger.warning("No se recupero el row.");
            }
        } catch (Exception e) {
            logger.warning("Error en aplicarCambioFiltroProgramaPorTipoTasa.", e);
        }
        return cambioCorrecto;
    }

    public Boolean obtenerColumnaProducto(Integer producto, Integer columna) {
        Boolean resultado = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        resultado = fenixAMImpl.obtenerCampo(producto, columna);
        return resultado;
    }


    public Map validarCampos(Boolean aplicaProyecto, Integer valida, Long idOperacion, Long idContratoActual,
                             Integer modalidadActual, Integer codigoTarea, Integer productoActual) {
        logger.warning("Entrando a guardar datos generales en el metodo de validarCampos");
        Map resultado = new HashMap<String, Object>();
        Boolean actualizoRegistro = Boolean.TRUE;
        Boolean errorValidacion = Boolean.TRUE;
        Boolean errorValidacionClasificacion = Boolean.TRUE;
        Boolean esIntermediario = Boolean.TRUE;
        Boolean esContrato = Boolean.FALSE;
        Boolean esEscritura = Boolean.FALSE;
        Boolean aplicaClasificacion = Boolean.FALSE;
        String mensaje = null;
        String programaOp = null;
        Integer actividadf1 = null;
        Integer actividad = null;
        Integer area = null;
        Integer eje = null;
        Integer proyecto = null;
        Integer tarea = null;
        String destino = null;
        Integer iniciativa = null;
        Integer modalidad = null;
        Long idContrato = null;
        Long idTcaProductoPrograma = null;
        Row row = getCurrentRow();
        FenixAMImpl fenixAMImpl = null;
        String promuni = "PR";
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        if (null != row) {
            logger.warning("Entra al row de DatosGeneralesDesembolsoVO ");
            idContrato = (Long) row.getAttribute("IdDesembolso");
            esIntermediario = (Boolean) row.getAttribute("EsIntermediario");
            esContrato = (Boolean) row.getAttribute("EsContrato");
            tarea = (Integer) row.getAttribute("idTarea");
            esEscritura = (Boolean) row.getAttribute("EsEscritura");
            idTcaProductoPrograma = (Long) row.getAttribute("IdTcaProductoPrograma");
            logger.warning("Se obtiene el valor del campo IdDesembolso: " + idContrato);
            logger.warning("Se obtiene el valor del campo EsIntermediario: " + esIntermediario);
            logger.warning("Se obtiene el valor del campo EsContrato: " + esContrato);
            logger.warning("Se obtiene el valor del campo esEscritura: " + esEscritura);
            logger.warning("Se obtiene el valor del campo idTcaProductoPrograma: " + idTcaProductoPrograma);
            try {
                if (null == row.getAttribute("ProgramaOperacion")) {
                    errorValidacion = Boolean.FALSE;
                    logger.warning("ProgramaOperacion es null");
                    mensaje = "Error al obtener el registro de contrato";
                    resultado.put("mensajepro", mensaje);
                    actualizoRegistro = Boolean.FALSE;

                } else {
                    programaOp = (String) row.getAttribute("ProgramaOperacion");
                    try {
                        if (null != row.getAttribute("IdIniciativaEstrategica")) {
                            actividad = (Integer) row.getAttribute("IdIniciativaEstrategica");
                            if (((Integer) row.getAttribute("IdIniciativaEstrategica")).compareTo(0) == 0) {
                                // errorValidacion = Boolean.FALSE;
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdIniciativaEstrategica es null");
                            }
                        }
                    } catch (Exception ew) {
                        logger.warning("Error en el log" + ew.getMessage());
                    }
                    try {
                        if (null == row.getAttribute("DestinoFinanciamiento")) {
                            errorValidacion = Boolean.FALSE;
                            logger.warning("DestinoFinanciamiento es null");
                            mensaje = "Error al obtener el registro de destino";
                            resultado.put("mensajedest", mensaje);
                        } else {
                            destino = (String) row.getAttribute("DestinoFinanciamiento");
                        }
                    } catch (Exception eu) {
                        logger.warning("Error en el log" + eu.getMessage());
                    }

                    try {
                        if (null != row.getAttribute("IdActividadEconomica")) {
                            iniciativa = (Integer) row.getAttribute("IdActividadEconomica");
                        }
                    } catch (Exception eq) {
                        logger.warning("Error en el log" + eq.getMessage());
                    }
                    try {
                        if (null != row.getAttribute("IdAreaFocalizacion")) {
                            area = (Integer) row.getAttribute("IdAreaFocalizacion");
                            if (((Integer) row.getAttribute("IdAreaFocalizacion")).compareTo(0) == 0) {
                                //errorValidacion = Boolean.FALSE;
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdAreaFocalizacion es null");
                            }
                        }
                    } catch (Exception er) {
                        logger.warning("Error en el log" + er.getMessage());
                    }
                    try {
                        if (null != row.getAttribute("IdEjeEstrategico")) {
                            eje = (Integer) row.getAttribute("IdEjeEstrategico");
                            if (((Integer) row.getAttribute("IdEjeEstrategico")).compareTo(0) == 0) {
                                //errorValidacion = Boolean.FALSE;
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdEjeEstrategico es null");
                            }
                        }
                    } catch (Exception et) {
                        logger.warning("Error en el log" + et.getMessage());
                    }
                    if (programaOp.equalsIgnoreCase(promuni)) {
                        if (null == row.getAttribute("IdProyectoMunicipal")) {
                            errorValidacionClasificacion = Boolean.FALSE;
                            logger.warning("IdProyectoMunicipal es null");
                            mensaje = "Error al obtener el registro de proyecto";
                            resultado.put("mensajeproy", mensaje);
                        } else {
                            if (((Integer) row.getAttribute("IdProyectoMunicipal")).compareTo(0) == 0) {
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdProyectoMunicipal es null");
                            }
                            Integer idProyectoMunicipal = (Integer) row.getAttribute("IdProyectoMunicipal");

                            proyecto = idProyectoMunicipal;

                        }
                    }
                    try {
                        if (null == row.getAttribute("IdActividadEconomicaF1")) {
                            if (esIntermediario) {
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdActividadEconomicaF1 es null");
                                mensaje = "Error al obtener el registro de actividad economica f1";
                                resultado.put("mensajeactf1", mensaje);
                            }
                        } else {
                            if (esIntermediario) {
                                if (((Integer) row.getAttribute("IdActividadEconomicaF1")).compareTo(0) == 0) {
                                    errorValidacionClasificacion = Boolean.FALSE;
                                    logger.warning("IdActividadEconomicaF1 es null");
                                }
                            }
                            actividadf1 = (Integer) row.getAttribute("IdActividadEconomicaF1");
                        }
                    } catch (Exception ey) {
                        logger.warning("Error en el log" + ey.getMessage());
                    }

                    try {
                        if (null == row.getAttribute("ModalidadFinanciamiento")) {
                            if (esIntermediario) {
                                errorValidacion = Boolean.FALSE;
                                logger.warning("ModalidadFinanciamiento es null");
                                mensaje = "Error al obtener el registro de modalidad";
                                resultado.put("mensajemod", mensaje);
                            }
                        } else {
                            modalidad = (Integer) row.getAttribute("ModalidadFinanciamiento");
                        }
                    } catch (Exception ep) {
                        logger.warning("Error en el log" + ep.getMessage());
                    }
                    if (null == actividad) {
                        errorValidacionClasificacion = Boolean.FALSE;
                        logger.warning("actividad es null");
                        mensaje = "Error al obtener el registro de la activdad economica";
                        resultado.put("mensajeact", mensaje);
                    }
                    if (null == area) {
                        errorValidacionClasificacion = Boolean.FALSE;
                        logger.warning("area es null");
                        mensaje = "Error al obtener el registro de area";
                        resultado.put("mensajearea", mensaje);
                    }
                    if (null == eje) {
                        errorValidacionClasificacion = Boolean.FALSE;
                        logger.warning("eje es null");
                        mensaje = "Error al obtener el registro de eje";
                        resultado.put("mensajeeje", mensaje);
                    }
                    BigDecimal dolar = BigDecimal.ZERO;
                    actualizoRegistro =
                        fenixGestorDesembolsosAMImpl.getDatosContratoDesembolsoVO().actualizarDatosContrato(idContrato,
                                                                                                            programaOp,
                                                                                                            esIntermediario,
                                                                                                            destino,
                                                                                                            modalidad,
                                                                                                            actividad,
                                                                                                            iniciativa,
                                                                                                            actividadf1,
                                                                                                            area, eje,
                                                                                                            proyecto,
                                                                                                            Boolean.FALSE,
                                                                                                            dolar,
                                                                                                            idTcaProductoPrograma);
                }
            } catch (Exception es) {
                logger.warning("Error en el log" + es.getMessage());
            }

            if (valida.compareTo(1) == 0) {
                resultado.put("valida", Boolean.TRUE);
            } else {
                logger.warning("errorValidacion: " + errorValidacion + ", errorValidacionClasificacion: " +
                               errorValidacionClasificacion);
                Boolean result = errorValidacion && errorValidacionClasificacion;
                if (esIntermediario) {
                    if (!esEscritura) {
                        resultado.put("valida", errorValidacion);
                        logger.warning("Valor que devuelve a validar: " + result);
                    } else {
                        logger.warning("Valor que devuelve a validar: " + errorValidacion);
                        resultado.put("valida", result);

                    }
                } else {
                    result = Boolean.TRUE;
                    logger.warning("Valor que devuelve a validar: " + result);
                    resultado.put("valida", result);
                }

            }
            resultado.put("actualiza", actualizoRegistro);
            logger.warning("Valor que devuelve a guardar: " + actualizoRegistro);
            try {
                logger.warning("EsEscritura" + row.getAttribute("EsEscritura"));
                logger.warning("IdDesembolso" + row.getAttribute("IdDesembolso"));
                logger.warning("EsIntermediario" + row.getAttribute("EsIntermediario"));
                logger.warning("ProgramaOperacion" + row.getAttribute("ProgramaOperacion"));
                logger.warning("IdIniciativaEstrategica" + row.getAttribute("IdIniciativaEstrategica"));
                logger.warning("IdAreaFocalizacion" + row.getAttribute("IdAreaFocalizacion"));
                logger.warning("IdEjeEstrategico" + row.getAttribute("IdEjeEstrategico"));
                logger.warning("IdProyectoMunicipal" + row.getAttribute("IdProyectoMunicipal"));
                logger.warning("IdActividadEconomica" + row.getAttribute("IdActividadEconomica"));
                logger.warning("IdActividadEconomicaF1" + row.getAttribute("IdActividadEconomicaF1"));
                logger.warning("DestinoFinanciamiento" + row.getAttribute("DestinoFinanciamiento"));
                logger.warning("ModalidadFinanciamiento" + row.getAttribute("ModalidadFinanciamiento"));
                logger.warning("actividad" + actividad);
                logger.warning("area" + area);
                logger.warning("eje" + eje);
            } catch (Exception em) {
                logger.warning("Error en el log" + em.getMessage());
            }
        } else {
            logger.warning("El row de datos generales desembolso esta vacio");
            validarDatosBase(idOperacion, idContratoActual, modalidadActual, codigoTarea, productoActual);
            resultado =
                validarCampos(aplicaProyecto, valida, idOperacion, idContratoActual, modalidadActual, codigoTarea,
                              productoActual);
            /*
            errorValidacion = Boolean.FALSE;
            resultado.put("valida", errorValidacion);
            resultado.put("actualiza", Boolean.FALSE);
            mensaje = "Error al obtener el registro de contrato";
            resultado.put("mensajeerror", mensaje);
*/
        }

        return resultado;
    }


    public Boolean validarCamposSinGuardar(Long idOperacion, Long idContratoActual, Integer modalidadActual,
                                           Integer codigoTarea, Integer productoActual) {
        logger.warning("Entrando a guardar datos generales en el metodo de validarCampos(validarCamposSinGuardar)");
        Boolean actualizoRegistro = Boolean.TRUE;
        Boolean errorValidacion = Boolean.TRUE;
        Boolean errorValidacionClasificacion = Boolean.TRUE;
        Boolean esIntermediario = Boolean.TRUE;
        Boolean esContrato = Boolean.FALSE;
        Boolean esEscritura = Boolean.FALSE;
        Boolean respuestaMetodo = Boolean.FALSE;
        String mensaje = null;
        String programaOp = null;
        Integer actividadf1 = null;
        Integer actividad = null;
        Integer area = null;
        Integer eje = null;
        Integer proyecto = null;
        Integer tarea = null;
        String destino = null;
        Integer iniciativa = null;
        Integer modalidad = null;
        Long idContrato = null;
        Row row = getCurrentRow();
        FenixAMImpl fenixAMImpl = null;
        String promuni = "PR";
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        if (null != row) {
            logger.warning("Entra al row de desembolso ");
            idContrato = (Long) row.getAttribute("IdDesembolso");
            esIntermediario = (Boolean) row.getAttribute("EsIntermediario");
            esContrato = (Boolean) row.getAttribute("EsContrato");
            esEscritura = (Boolean) row.getAttribute("EsEscritura");
            logger.warning("Se obtiene el valor del campo IdDesembolso: " + idContrato);
            logger.warning("Se obtiene el valor del campo EsIntermediario: " + esIntermediario);
            logger.warning("Se obtiene el valor del campo EsContrato: " + esContrato);
            logger.warning("Se obtiene el valor del campo esEscritura: " + esEscritura);
            if (null != row.getAttribute("idTarea")) {
                tarea = (Integer) row.getAttribute("idTarea");
            }

            try {
                if (null == row.getAttribute("ProgramaOperacion")) {
                    errorValidacion = Boolean.FALSE;
                    logger.warning("ProgramaOperacion es null, errorValidacion es false");
                    mensaje = "Error al obtener el registro de contrato";
                    actualizoRegistro = Boolean.FALSE;
                } else {
                    programaOp = (String) row.getAttribute("ProgramaOperacion");
                    try {
                        if (null != row.getAttribute("IdIniciativaEstrategica")) {
                            actividad = (Integer) row.getAttribute("IdIniciativaEstrategica");
                            if (((Integer) row.getAttribute("IdIniciativaEstrategica")).compareTo(0) == 0) {
                                // errorValidacion = Boolean.FALSE;
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdIniciativaEstrategica es null, errorValidacionClasificacion es false");
                            }
                        }
                    } catch (Exception ew) {
                        logger.warning("Error en el log" + ew.getMessage());
                    }
                    try {
                        if (null == row.getAttribute("DestinoFinanciamiento")) {
                            errorValidacion = Boolean.FALSE;
                            logger.warning("DestinoFinanciamiento es null, errorValidacion es false");
                            mensaje = "Error al obtener el registro de destino";
                        } else {
                            destino = (String) row.getAttribute("DestinoFinanciamiento");
                        }
                    } catch (Exception eu) {
                        logger.warning("Error en el log" + eu.getMessage());
                    }

                    try {
                        if (null != row.getAttribute("IdActividadEconomica")) {
                            iniciativa = (Integer) row.getAttribute("IdActividadEconomica");
                        }
                    } catch (Exception eq) {
                        logger.warning("Error en el log" + eq.getMessage());
                    }
                    try {
                        if (null != row.getAttribute("IdAreaFocalizacion")) {
                            area = (Integer) row.getAttribute("IdAreaFocalizacion");
                            if (((Integer) row.getAttribute("IdAreaFocalizacion")).compareTo(0) == 0) {
                                //errorValidacion = Boolean.FALSE;
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdAreaFocalizacion es null, errorValidacionClasificacion es false");
                            }
                        }
                    } catch (Exception er) {
                        logger.warning("Error en el log" + er.getMessage());
                    }
                    try {
                        if (null != row.getAttribute("IdEjeEstrategico")) {
                            eje = (Integer) row.getAttribute("IdEjeEstrategico");
                            if (((Integer) row.getAttribute("IdEjeEstrategico")).compareTo(0) == 0) {
                                //errorValidacion = Boolean.FALSE;
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdEjeEstrategico es null, errorValidacionClasifiacion es false");
                            }
                        }
                    } catch (Exception et) {
                        logger.warning("Error en el log" + et.getMessage());
                    }

                    if (programaOp.equalsIgnoreCase(promuni)) {
                        if (null == row.getAttribute("IdProyectoMunicipal")) {
                            errorValidacionClasificacion = Boolean.FALSE;
                            logger.warning("IdProyectoMunicipal es null, errorValidacionClasificacion es false");
                            mensaje = "Error al obtener el registro de proyecto";
                        } else {
                            if (((Integer) row.getAttribute("IdProyectoMunicipal")).compareTo(0) == 0) {
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdProyectoMunicipal es null, errorValidacionClasificacion es false");
                            }
                            Integer idProyectoMunicipal = (Integer) row.getAttribute("IdProyectoMunicipal");
                            proyecto = idProyectoMunicipal;
                        }
                    }
                    try {
                        if (null == row.getAttribute("IdActividadEconomicaF1")) {
                            if (esIntermediario) {
                                errorValidacionClasificacion = Boolean.FALSE;
                                logger.warning("IdActividadEconomicaF1 es null, errorValidacionClasificacion es false");
                                mensaje = "Error al obtener el registro de actividad economica f1";
                            }
                        } else {
                            if (esIntermediario) {
                                if (((Integer) row.getAttribute("IdActividadEconomicaF1")).compareTo(0) == 0) {
                                    errorValidacionClasificacion = Boolean.FALSE;
                                    logger.warning("IdActividadEconomicaF1 es null, errorValidacionClasificacion es false");
                                }
                            }
                            actividadf1 = (Integer) row.getAttribute("IdActividadEconomicaF1");
                        }
                    } catch (Exception ey) {
                        logger.warning("Error en el log" + ey.getMessage());
                    }

                    try {
                        if (null == row.getAttribute("ModalidadFinanciamiento")) {
                            if (esIntermediario) {
                                errorValidacion = Boolean.FALSE;
                                logger.warning("ModalidadFinanciamiento es null, errorValidacion es false");
                                mensaje = "Error al obtener el registro de modalidad";
                            }
                        } else {
                            modalidad = (Integer) row.getAttribute("ModalidadFinanciamiento");
                        }
                    } catch (Exception ep) {
                        logger.warning("Error en el log" + ep.getMessage());
                    }

                    if (null == actividad) {
                        errorValidacionClasificacion = Boolean.FALSE;
                        logger.warning("actividad es null, errorValidacionClasificacion es false");
                        mensaje = "Error al obtener el registro de la activdad economica";
                    }
                    if (null == area) {
                        errorValidacionClasificacion = Boolean.FALSE;
                        logger.warning("area es null, errorValidacionClasificacion es false");
                        mensaje = "Error al obtener el registro de area";
                    }
                    if (null == eje) {
                        errorValidacionClasificacion = Boolean.FALSE;
                        logger.warning("eje es null, errorValidacionClasificacion es false");
                        mensaje = "Error al obtener el registro de eje";
                    }
                    BigDecimal dolar = BigDecimal.ZERO;
                }
            } catch (Exception es) {
                logger.warning("Error en el log" + es.getMessage());
            }

            Boolean result = errorValidacion && errorValidacionClasificacion;
            logger.warning("Valor bandera errorValidacion: " + errorValidacion);
            logger.warning("Valor bandera errorValidacionClasificacion: " + errorValidacionClasificacion);
            logger.warning("Valor bandera result: " + result);
            if (null != tarea) {
                if (tarea.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO) == 0) {
                    logger.warning("tarea es Gestor de Desembolsos");
                    logger.warning("Valor esIntermediario: " + esIntermediario);
                    logger.warning("Valor esContrato: " + esContrato);
                    logger.warning("Valor esEscritura: " + esEscritura);
                    if (esIntermediario) {
                        if (!esEscritura) {
                            logger.warning("Se aplica validacion: respuestaMetodo=errorValidacion");
                            respuestaMetodo = errorValidacion;
                        } else {
                            logger.warning("Se aplica validacion: respuestaMetodo=result");
                            respuestaMetodo = result;
                        }
                    } else {
                        logger.warning("No es Intermediario, entra al else, no se aplica validacion: respuestaMetodo = Boolean.TRUE");
                        respuestaMetodo = Boolean.TRUE;
                    }
                } else {
                    logger.warning("tarea no es Gestor de Desembolsos, Se aplica validacion: respuestaMetodo=result");
                    respuestaMetodo = result;
                }
            } else {
                logger.warning("tarea es null, Se aplica validacion: respuestaMetodo=result");
                respuestaMetodo = result;
            }
        } else {
            logger.warning("El row de datos generales desembolso esta vacio");
            validarDatosBase(idOperacion, idContratoActual, modalidadActual, codigoTarea, productoActual);
            respuestaMetodo =
                validarCamposSinGuardar(idOperacion, idContratoActual, modalidadActual, codigoTarea, productoActual);
        }

        try {
            if (row != null) {
                logger.warning("EsContrato: " + row.getAttribute("EsContrato"));
                logger.warning("EsEscritura: " + row.getAttribute("EsEscritura"));
                logger.warning("IdDesembolso: " + row.getAttribute("IdDesembolso"));
                logger.warning("EsIntermediario: " + row.getAttribute("EsIntermediario"));
                logger.warning("ProgramaOperacion: " + row.getAttribute("ProgramaOperacion"));
                logger.warning("IdIniciativaEstrategica: " + row.getAttribute("IdIniciativaEstrategica"));
                logger.warning("IdAreaFocalizacion: " + row.getAttribute("IdAreaFocalizacion"));
                logger.warning("IdEjeEstrategico: " + row.getAttribute("IdEjeEstrategico"));
                logger.warning("IdProyectoMunicipal: " + row.getAttribute("IdProyectoMunicipal"));
                logger.warning("IdActividadEconomica: " + row.getAttribute("IdActividadEconomica"));
                logger.warning("IdActividadEconomicaF1: " + row.getAttribute("IdActividadEconomicaF1"));
                logger.warning("DestinoFinanciamiento: " + row.getAttribute("DestinoFinanciamiento"));
                logger.warning("ModalidadFinanciamiento: " + row.getAttribute("ModalidadFinanciamiento"));
                logger.warning("actividad" + actividad);
                logger.warning("area" + area);
                logger.warning("eje" + eje);
            }

        } catch (Exception em) {
            logger.warning("Error en el log" + em.getMessage());
        }

        logger.warning("Valor respuestaMetodo a retornar: " + respuestaMetodo);

        return respuestaMetodo;
    }

    public Map consultarLinea(Long linea) {
        Map resultado = new HashMap<String, Object>();
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl2 = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);

        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService =
            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl2);
        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
            lineaCredito12BndQSService.getLineaCredito12Bnd();
        try {
            logger.log(ADFLogger.WARNING, ">HNWS" + lineaCreditoPT.toString());
        } catch (Exception ex) {
        }
        org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType request =
            new org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType();
        //se agrega los parametros al request idOperacion e instanciaProceso
        //idOperacion
        request.setIdLineaCredito(linea);
        //instanciaProceso
        try {
            Date horaInicio =
                ModelUtils.logStartWS(logger, request,
                                      FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO);
            org.bcie.lineacreditomo.ConsultarLineaCreditoBPELResponseType response =
                lineaCreditoPT.consultarLineaCreditoById(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO,
                                horaInicio);


        } catch (Exception e) {
            e.printStackTrace();
        }
        return resultado;
    }

    public void consultarDatosActivo() {
        Row row = getCurrentRow();
        if (null != row) {
            logger.warning("El row de datos generales existe algunos valores son los siguientes: ");
            logger.warning("IdContrato: " + row.getAttribute("IdDesembolso"));
            logger.warning("EsEscritura: " + row.getAttribute("EsEscritura"));
            logger.warning("IdMercado: " + row.getAttribute("IdSectorMercado"));
            logger.warning("IdPrograma: " + row.getAttribute("ProgramaOperacion"));
            logger.warning("IdArea: " + row.getAttribute("IdAreaFocalizacion"));
        } else {
            logger.warning("El row de datos generales no existe");
        }
    }

    public Boolean validarDatosBase(Long idOperacion, Long idContrato, Integer modalidad, Integer codigoTarea,
                                    Integer productoActual) {
        Boolean respuesta = Boolean.FALSE;
        logger.warning("Validar campos directo de base");


        logger.warning("idOperacion " + idOperacion);
        logger.warning("idContrato " + idContrato);
        logger.warning("modalidad " + modalidad);
        logger.warning("codigoTarea " + codigoTarea);
        Long producto = null;
        Integer estadoContrato = null;
        Integer tipoMoneda = null;
        BigDecimal montoDesembolsado = null;
        BigDecimal montoDesembolsadoUSD = null;
        Boolean esIntermediario = Boolean.FALSE;
        Boolean esIntermediarioInstrumento = Boolean.FALSE;
        Boolean esAPE = Boolean.FALSE;
        Integer opcionActividad = 2;
        Integer iniciativa = null;
        String programa1 = null;
        String destinoFinan = null;
        Integer idEje = null;
        Integer idArea = null;
        Integer idActividad = null;
        Integer idActividadAsoc = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        logger.log(ADFLogger.NOTIFICATION, "Entro consultarDetalleOperacion");
        NameValuePairs nVpDatos = new NameValuePairs();

        Row newDatosDesembolso = null;
        Row rowDatosOperacionCliente = null;
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.OPERACION);
        //String wsdl = "http://hn-obpm-qa-1.bcie.org:7013/Entidad/OperacionService/V1.0?wsdl";
        Map consultaContrato = new HashMap<String, Object>();

        //Limpiarmos la VO Programatica
        executeQuery();

        if (null != idContrato) {
            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =
                (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
            try {
                if (null != codigoTarea) {
                    nVpDatos.setAttribute("idTarea", codigoTarea);
                }
                consultaContrato = fenixGestorDesembolsosAMImpl.getDatosDesembolsoVO().monto(idContrato);
                if (((Boolean) consultaContrato.get("resultado"))) {
                    logger.warning("proyecto " + (Integer) consultaContrato.get("proyecto"));
                    if (null != (BigDecimal) consultaContrato.get("monto")) {
                        nVpDatos.setAttribute("MontoContrato", (BigDecimal) consultaContrato.get("monto"));
                        montoDesembolsado = (BigDecimal) consultaContrato.get("monto");
                    }
                    if (null != (Integer) consultaContrato.get("tipomonto")) {
                        nVpDatos.setAttribute("IdTipoMoneda", (Integer) consultaContrato.get("tipomonto"));
                        tipoMoneda = (Integer) consultaContrato.get("tipomonto");
                    }
                    if (null != (String) consultaContrato.get("programa")) {
                        nVpDatos.setAttribute("ProgramaOperacion", (String) consultaContrato.get("programa"));
                        programa1 = (String) consultaContrato.get("programa");
                    }
                    if (null != (String) consultaContrato.get("destino")) {
                        nVpDatos.setAttribute("DestinoFinanciamiento", (String) consultaContrato.get("destino"));
                        destinoFinan = (String) consultaContrato.get("destino");
                    }
                    if (null != (Integer) consultaContrato.get("modalidad")) {
                        nVpDatos.setAttribute("ModalidadFinanciamiento", (Integer) consultaContrato.get("modalidad"));
                    }
                    if (null != (Integer) consultaContrato.get("actividadf1")) {
                        nVpDatos.setAttribute("IdActividadEconomicaF1", (Integer) consultaContrato.get("actividadf1"));
                        idActividadAsoc =
                            (Integer) consultaContrato.get("actividadf1"); // se usa para obterner la inciativa estrategica
                    }
                    if (null != (Integer) consultaContrato.get("actividad")) {
                        nVpDatos.setAttribute("IdIniciativaEstrategica", (Integer) consultaContrato.get("actividad"));
                        idActividad = (Integer) consultaContrato.get("actividad");
                    }
                    if (null != (Integer) consultaContrato.get("iniciativa")) {
                        nVpDatos.setAttribute("IdActividadEconomica", (Integer) consultaContrato.get("iniciativa"));
                        iniciativa = (Integer) consultaContrato.get("iniciativa");
                    }
                    if (null != (Integer) consultaContrato.get("area")) {
                        nVpDatos.setAttribute("IdAreaFocalizacion", (Integer) consultaContrato.get("area"));
                        idArea = (Integer) consultaContrato.get("area");
                    }
                    if (null != (Integer) consultaContrato.get("eje")) {
                        nVpDatos.setAttribute("IdEjeEstrategico", (Integer) consultaContrato.get("eje"));
                        idEje = (Integer) consultaContrato.get("eje");
                    }
                    if (null != (Integer) consultaContrato.get("proyecto")) {
                        nVpDatos.setAttribute("IdProyectoMunicipal", (Integer) consultaContrato.get("proyecto"));
                        logger.warning("proyecto F " + nVpDatos.getAttribute("IdProyectoMunicipal"));
                    }
                    if (null != (Integer) consultaContrato.get("estado")) {
                        nVpDatos.setAttribute("IdEstadoContrato", (Integer) consultaContrato.get("estado"));
                        estadoContrato = (Integer) consultaContrato.get("estado");
                        logger.warning("Aplica estado contrato");
                        logger.warning("montoDesembolsado " + montoDesembolsado);
                        logger.warning("tipoMoneda " + tipoMoneda);
                        if (null != estadoContrato) {
                            if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_REGISTRADO) == 0 ||
                                estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSADO) == 0) {
                                logger.warning("Aplica estado contrato");
                                if (null != (BigDecimal) consultaContrato.get("montousd")) {
                                    nVpDatos.setAttribute("MontoUSD", (BigDecimal) consultaContrato.get("montousd"));
                                } else {

                                    if (null != montoDesembolsado && null != tipoMoneda) {
                                        montoDesembolsadoUSD =
                                            fenixAMImpl.convertirMonedas(tipoMoneda,
                                                                         FenixModelConstants.CODIGO_MONEDA_USD,
                                                                         montoDesembolsado);
                                        if (null != montoDesembolsadoUSD) {
                                            nVpDatos.setAttribute("MontoUSD", montoDesembolsadoUSD);
                                        }
                                    }
                                }
                            } else {
                                if (null != montoDesembolsado && null != tipoMoneda) {
                                    montoDesembolsadoUSD =
                                        fenixAMImpl.convertirMonedas(tipoMoneda, FenixModelConstants.CODIGO_MONEDA_USD,
                                                                     montoDesembolsado);
                                    if (null != montoDesembolsadoUSD) {
                                        nVpDatos.setAttribute("MontoUSD", montoDesembolsadoUSD);
                                    }
                                }
                            }

                        } else {
                            logger.warning("no tiene estado de contrato");
                        }
                    }
                } else {
                    logger.warning("no tiene estado de contrato");
                }
            } catch (Exception exp) {
                logger.warning("Error al consultar la configuracion", exp);
            }

            try {
                Long idSectorMercado = null;
                String descripcionSectorMercado = null;
                Long idSectorInstitucional = null;
                String descripcionSectorInstitucional = null;
                Boolean consultaOperacion = Boolean.TRUE;

                try {
                    logger.warning("Recuperando datos de Operacion y Cliente de DetalleDesembolsosOperacionVO.");
                    rowDatosOperacionCliente =
                        fenixGestorDesembolsosAMImpl.getDetalleDesembolsosOperacionVO().getCurrentRow();
                } catch (Exception e) {
                    logger.warning("ERROR al recuperar informacion de Operacion y cliente.", e);
                    consultaOperacion = Boolean.FALSE;
                }

                //Controlar cuando se pierda el row de DetalleDesembolsosOperacionVO,volver a consumir el servicio
                if (null == rowDatosOperacionCliente) {
                    logger.severe("Se perdio el row de DetalleDesembolsosOperacionVO");
                    logger.severe("Se consume nuevamente el servicio de consulta de operacion");
                    fenixGestorDesembolsosAMImpl.getDetalleDesembolsosOperacionVO().consultarOperacionPorIdOperacion(idOperacion);
                    rowDatosOperacionCliente =
                        fenixGestorDesembolsosAMImpl.getDetalleDesembolsosOperacionVO().getCurrentRow();
                    if (null != rowDatosOperacionCliente) {
                        logger.warning("Se recupera row DetalleDesembolsosOperacionVO");
                    } else {
                        logger.warning("No se recupera row DetalleDesembolsosOperacionVO");
                    }
                }


                if (consultaOperacion) {
                    if (null != rowDatosOperacionCliente) {
                        if (null != rowDatosOperacionCliente.getAttribute("IdProducto")) {
                            logger.warning("IdProducto" + rowDatosOperacionCliente.getAttribute("IdProducto"));
                            try {
                                producto = (Long) rowDatosOperacionCliente.getAttribute("IdProducto");
                                nVpDatos.setAttribute("IdProducto", producto.intValue());
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar IdProducto.", e);
                            }
                        } else {
                            logger.warning("El campo PRODUCTO de la operacion es NULL.");
                        }
                        if (null != rowDatosOperacionCliente.getAttribute("IdSectorMercado")) {
                            logger.warning("IdSectorMercado" +
                                           rowDatosOperacionCliente.getAttribute("IdSectorMercado"));
                            try {
                                idSectorMercado = (Long) rowDatosOperacionCliente.getAttribute("IdSectorMercado");
                                nVpDatos.setAttribute("IdSectorMercado", idSectorMercado.intValue());
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar IdSectorMercado.", e);
                            }
                        }

                        if (null != rowDatosOperacionCliente.getAttribute("DescSectorMercado")) {
                            logger.warning("NombreSectorMercado " +
                                           rowDatosOperacionCliente.getAttribute("DescSectorMercado"));
                            try {
                                descripcionSectorMercado =
                                    (String) rowDatosOperacionCliente.getAttribute("DescSectorMercado");
                                nVpDatos.setAttribute("NombreSectorMercado", descripcionSectorMercado);
                            } catch (Exception e) {
                                logger.warning("ERROR al recuprar DescripcionSectorMercado.", e);
                            }
                        }
                        if (null != rowDatosOperacionCliente.getAttribute("Sector")) {
                            logger.warning("IdSectorInstitucional " + rowDatosOperacionCliente.getAttribute("Sector"));
                            try {
                                idSectorInstitucional = (Long) rowDatosOperacionCliente.getAttribute("Sector");
                                nVpDatos.setAttribute("IdSectorInstitucional", idSectorInstitucional.intValue());
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar el IdSectorInstitucional.", e);
                            }
                        }
                        if (null != rowDatosOperacionCliente.getAttribute("SectorDescripcion")) {
                            logger.warning("NombreSectorInstitucion " +
                                           rowDatosOperacionCliente.getAttribute("SectorDescripcion"));
                            try {
                                descripcionSectorInstitucional =
                                    (String) rowDatosOperacionCliente.getAttribute("SectorDescripcion");
                                nVpDatos.setAttribute("NombreSectorInstitucion", descripcionSectorInstitucional);
                            } catch (Exception e) {
                                logger.warning("ERROR al recuperar la DescripcionSectorInstitucional.", e);
                            }
                        }
                    } else {
                        logger.warning("rowDatosOperacionCliente es NULL.");
                    }

                    //Obtener el intermediario
                    if (null != productoActual) {
                        esIntermediario = obtenerColumnaProducto(productoActual, FenixModelConstants.COL_09);
                        logger.warning("EsIntermediario: " + esIntermediario);
                        //fenixAMImpl.obtenerCampo(producto.intValue(), FenixModelConstants.COL_09);
                        esIntermediarioInstrumento =
                            obtenerColumnaProducto(producto.intValue(), FenixModelConstants.COL_10);
                        logger.warning("esIntermediarioInstrumento: " + esIntermediarioInstrumento);
                        esAPE = obtenerColumnaProducto(producto.intValue(), FenixModelConstants.COL_11);
                    } else {
                        logger.warning("VAriable PRODUCTO es NULL. No se pudo recuperar el valor de la columna de CatProducto.");

                    }

                    logger.warning("esAPE: " + esAPE);
                    logger.warning("esOR: " + !esAPE);
                    Integer variante = FenixModelConstants.VARIANTE_1;
                    nVpDatos.setAttribute("IdInstrumento", variante);
                    if (null == esIntermediario) {
                        logger.warning("***Error, la variable esIntermediario es resuelta a null");
                        nVpDatos.setAttribute("EsIntermediario", Boolean.FALSE);
                        variante = FenixModelConstants.VARIANTE_1;
                        nVpDatos.setAttribute("IdInstrumento", variante);

                    }

                    if (esIntermediario) {
                        nVpDatos.setAttribute("EsIntermediario", Boolean.TRUE); //Boolean.TRUE
                        logger.warning("Inf, esIntermediario : " + esIntermediario);
                    } else {
                        logger.warning("Inf, esIntermediario : " + esIntermediario);

                        if (esAPE) {
                            //nVpDatos.setAttribute("ProgramaOperacion", FenixModelConstants.PROGRAMA_APE);
                            variante = FenixModelConstants.VARIANTE_2;
                            nVpDatos.setAttribute("IdInstrumento", variante);
                        } else {
                            //nVpDatos.setAttribute("ProgramaOperacion", FenixModelConstants.PROGRAMA_OR);
                            variante = FenixModelConstants.VARIANTE_3;
                            nVpDatos.setAttribute("IdInstrumento", variante);
                        }
                        //nVpDatos.setAttribute("DestinoFinanciamiento", FenixModelConstants.DESTINO_ND);
                        logger.warning("Programa insertado2: " + nVpDatos.getAttribute("ProgramaOperacion"));
                        nVpDatos.setAttribute("EsIntermediario", Boolean.FALSE);
                        logger.warning("Destino destinoFinan: " + destinoFinan);
                        if (destinoFinan == null) {
                            nVpDatos.setAttribute("DestinoFinanciamiento", FenixModelConstants.DESTINO_ND);
                        }
                        logger.warning("Destino Financiamiento insertado: " + nVpDatos.getAttribute("DestinoFinanciamiento"));
                    }

                } else {
                    logger.log(ADFLogger.WARNING, "No se recupero ninguna operacion");
                }
            } catch (Exception e) {
                logger.log(ADFLogger.WARNING, "No se recupero ninguna operacion", e);
                // logger.log(ADFLogger.ERROR, e.getMessage().toString());
            }

            nVpDatos.setAttribute("IdOperacion", idOperacion);
            nVpDatos.setAttribute("IdDesembolso", idContrato);
            nVpDatos.setAttribute("EsIntermediario", esIntermediario);

            logger.warning("Se comienza a validar el valor modalida: " + modalidad);
            if (null != modalidad) {
                if (modalidad.compareTo(FenixModelConstants.MODALIDAD_DATOS_GENERALES_LECTURA) == 0) {
                    logger.warning("Se ingresa a la modalidad datos generales lectura");
                    if (null != codigoTarea) {
                        nVpDatos.setAttribute("idTarea", codigoTarea);
                        if (codigoTarea.compareTo(FenixModelConstants.TAREA_DEFINIR_CLASIFICACION_DESEMBOLSO) == 0) {
                            nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                            logger.warning("Modo Escritura POR TAREA");
                        } else {
                            if (codigoTarea.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO) == 0) {
                                if (null != estadoContrato) {
                                    if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_TRANSITO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_FONDOS) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_DESEMBOLSADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_REGISTRADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO) ==
                                        0) {
                                        logger.warning("Modo Lectura POR ESTADO");
                                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                        nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                                    } else {
                                        logger.warning("Modo Escritura ES DIEFERENTE A LOS ESTADOS DE MODO LECTURA");
                                        if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_VALIDACION) ==
                                            0 ||
                                            estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_PREPARADO) ==
                                            0 ||
                                            estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_CUMPLIMIENTO) ==
                                            0) {
                                            nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                            nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                        } else {
                                            nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                            nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                        }
                                        nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                    }
                                } else {
                                    logger.warning("Modo Escritura NO TIENE ESTADO DE CONTRATO");
                                    nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                    nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                                }
                            } else {
                                logger.warning("Modo Lectura GESTOR DESEMBOLSO");
                                nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                                nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                            }
                        }

                    } else {
                        logger.warning("Modo Lectura");
                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                        nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                    }
                } else {
                    if (modalidad.compareTo(FenixModelConstants.MODALIDAD_DATOS_GENERALES_ESCRITURA) == 0) {
                        logger.warning("Se ingresa a la modalidad datos generales escritura");
                        if (codigoTarea.compareTo(FenixModelConstants.TAREA_DEFINIR_CLASIFICACION_DESEMBOLSO) == 0) {
                            logger.warning("Modo Escritura POR MODALIDAD DE ESCRITURA Clasificacion Estrategica");
                            nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                            nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                        } else {
                            if (codigoTarea.compareTo(FenixModelConstants.TAREA_GESTOR_DESEMBOLSO) == 0) {
                                logger.warning("Modo Escritura POR MODALIDAD DE ESCRITURA Gestor de Desembolsos");
                                if (null != estadoContrato) {
                                    logger.warning("Dentro de Gestor de desembolsos, Valor estadoContrato: " +
                                                   estadoContrato);
                                    if (estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_VALIDACION) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_PREPARADO) ==
                                        0 ||
                                        estadoContrato.compareTo(FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_CUMPLIMIENTO) ==
                                        0) {
                                        nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                                        logger.warning("Valor EsContrato se setea como true");
                                        logger.warning("Valor EsEscritura se setea como false");
                                    } else {
                                        nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                        nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                        logger.warning("Valor EsContrato se setea como true");
                                        logger.warning("Valor EsEscritura se setea como true");
                                    }
                                } else {
                                    nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                    nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                                }
                            } else {
                                logger.warning("Modo Escritura POR MODALIDAD DE ESCRITURA");
                                nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                                nVpDatos.setAttribute("EsEscritura", Boolean.TRUE);
                            }
                        }

                    } else {
                        logger.warning("Modo Lectura NO ENCONTRO LA VALDIACION DE ESCRITURA");
                        nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                        nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
                    }
                }
            } else {
                logger.warning("Modo Lectura NO ENCONTRO MODALIDAD");
                nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
                nVpDatos.setAttribute("EsContrato", Boolean.FALSE);
            }
            if (codigoTarea.compareTo(FenixModelConstants.TAREA_REALIZAR_AJUSTES_DESEMBOLSO) == 0) {
                logger.warning("DatosGenerales invocado en TAREA_REALIZAR_AJUSTES_DESEMBOLSO ");
                nVpDatos.setAttribute("EsContrato", Boolean.TRUE);
                nVpDatos.setAttribute("EsEscritura", Boolean.FALSE);
            }
            try {
                newDatosDesembolso = createAndInitRow(nVpDatos);
                insertRow(newDatosDesembolso);
                setCurrentRow(newDatosDesembolso);
            } catch (Exception exc) {
                logger.warning("error al aplicar el seteo a los datos generales" + exc.getMessage());
            }
            logger.warning("se aplica el setCurrent de la Vo Programatica");
        } else {
            logger.warning("Important! No se recibio el id de contrato, no se ejecutara ninguna accion sobre el tab");
        }

        if (null != newDatosDesembolso) {
            logger.log(ADFLogger.WARNING, "Valores de salida.");
            logger.log(ADFLogger.WARNING,
                       "MONTOCONTRATO: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.MONTOCONTRATO));
            logger.log(ADFLogger.WARNING,
                       "MONTOUSD: " + newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.MONTOUSD));
            logger.log(ADFLogger.WARNING,
                       "IDSECTORMERCADO: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDSECTORMERCADO));
            logger.log(ADFLogger.WARNING,
                       "IDSECTORINSTITUCIONAL: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDSECTORINSTITUCIONAL));
            logger.log(ADFLogger.WARNING,
                       "IDACTIVIDADECONOMICA: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDACTIVIDADECONOMICA));
            logger.log(ADFLogger.WARNING,
                       "IDAREAFOCALIZACION: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.IDAREAFOCALIZACION));
            logger.log(ADFLogger.WARNING,
                       "PROGRAMAOPERACION: " +
                       newDatosDesembolso.getAttribute(DatosGeneralesDesembolsoVORowImpl.PROGRAMAOPERACION));
        }


        return respuesta;
    }


    public void setAtributosPregarcarga() {
        logger.warning("Inicia metodo validacionPrecargaDTGen");

        if (getCurrentRow() != null) {
            logger.warning("Ejecucion de tab en tarea BPM finalizada");

            try {
                getCurrentRow().setAttribute("EsContrato", Boolean.FALSE);
                getCurrentRow().setAttribute("EsEscritura", Boolean.FALSE);

            } catch (Exception e) {
                logger.warning("Ha ocurrido un error al setear valor a binding ->", e);
            }

        } else {
            logger.warning("Importante! El current del datos generales es resuelto a NULL");
        }

        logger.warning("termina metodo validacionPrecargaDTGen");
    }


}

