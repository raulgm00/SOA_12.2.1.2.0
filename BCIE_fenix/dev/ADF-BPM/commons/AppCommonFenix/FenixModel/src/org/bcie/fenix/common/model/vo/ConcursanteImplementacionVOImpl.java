package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.vo.common.ConcursanteImplementacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 29 18:56:26 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConcursanteImplementacionVOImpl extends ViewObjectImpl implements ConcursanteImplementacionVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    private static final Integer CONCURSANTE_PARTICIPANTE = 4;
    private static final Integer CONCURSANTE_ADJUDICATARIO = 2;
    public ConcursanteImplementacionVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Long insertarParticipante(Long idLote, String nombreParticipante, Integer idCatPais){
        logger.warning("Entra en insertarParticipante.");
        
        Row rowParticipante = null;
        
        oracle.jbo.domain.Number idParticipante = null;
        SequenceImpl sequenceConcursante = null;
        NameValuePairs nvpConcursanteParticipante = null;
        
        try{
            sequenceConcursante = new SequenceImpl("CONCURSANTE_IMPLEMENTACION_SEQ", getDBTransaction());
            idParticipante = sequenceConcursante.getSequenceNumber();
            nvpConcursanteParticipante = new NameValuePairs();
            
            nvpConcursanteParticipante.setAttribute("Id",idParticipante.longValue());
            nvpConcursanteParticipante.setAttribute("IdLoteImplementacion", idLote);
            nvpConcursanteParticipante.setAttribute("NombreParticipante", nombreParticipante);
            nvpConcursanteParticipante.setAttribute("IdCatPais", idCatPais);
            nvpConcursanteParticipante.setAttribute("IdTcaTipoPerfil", CONCURSANTE_PARTICIPANTE);
            nvpConcursanteParticipante.setAttribute("BanEstatus", BANESTATUS_TRUE);
            
            rowParticipante = this.createAndInitRow(nvpConcursanteParticipante);
            getDBTransaction().commit();
            
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error al insertar el participante : "+e.getMessage());
            getDBTransaction().rollback();
            //return null;
        }
        //this.executeQuery();
        return idParticipante.longValue();
    }
    
    public Boolean obtenerParticipanteById(Long id, Long idLoteImplementacion){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerParticipanteById : ");
        Integer contador = 0;
        Boolean validaParticipante = Boolean.FALSE;
        
        try {
            if(id == null && idLoteImplementacion == null)
            {
                validaParticipante = Boolean.FALSE;
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varId", id);
                criteria.ensureVariableManager().setVariableValue("varIdLoteImplementacion", idLoteImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsConcursanteImplementacionVo = createRowSetIterator(null);
                rowsConcursanteImplementacionVo.reset();
                    while (rowsConcursanteImplementacionVo.hasNext()) {
                        ConcursanteImplementacionVORowImpl rowL = (ConcursanteImplementacionVORowImpl) rowsConcursanteImplementacionVo.next();
                        contador++;
                    }
                logger.warning("Numero de rows: " + contador);
                
                try{
                    if(contador>0)
                        validaParticipante = Boolean.TRUE;
                    else
                        validaParticipante = Boolean.FALSE;
                }catch(Exception e){
                    logger.warning("Numero de rows: vacío");
                }
                rowsConcursanteImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerParticipanteById " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");
        }
        
        return validaParticipante;
    }
    
    public Boolean actualizarConcursanteImplementacion(Long id, String nombreParticipante, Integer idCatPais){
        Boolean resultado=Boolean.TRUE;
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        logger.warning("Id recibido: "+ id);
        logger.warning("nombreParticipante recibido: "+ nombreParticipante);
        logger.warning("idCatPais recibido: "+ idCatPais);
        
        if(id == null){
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try{      
            criteria = getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varId", id);
            applyViewCriteria(criteria);
            executeQuery();
        
            if(getEstimatedRowCount() > 0){               
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Valor anterior nombreParticipante: "+ filaRecuperada.getAttribute("NombreParticipante"));
                logger.warning("Valor anterior idCatPais: "+ filaRecuperada.getAttribute("IdCatPais"));
                if(null!=nombreParticipante && null!=idCatPais){
                    filaRecuperada.setAttribute("NombreParticipante", nombreParticipante);
                    filaRecuperada.setAttribute("IdCatPais", idCatPais);
                        try{
                            getDBTransaction().commit();
                            logger.warning("Se hace commit a la DB");
                        }catch(Exception e){
                            logger.log(ADFLogger.ERROR, "Error al intentar guardar en el metodo actualizarConcursanteImplementacion ->: "+e.getMessage());
                            getDBTransaction().rollback();
                            resultado = Boolean.FALSE;
                        }
                }
                else{
                    logger.warning("Se reciben valores como null");
                    resultado=Boolean.FALSE;
                }
            }else{
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
                 getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");
                 resultado=Boolean.FALSE;
                 executeQuery();
                }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());     
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");              
        }
           
        logger.warning("*** Termina metodo actualizarConcursanteImplementacion");
        
        return resultado;
    }
    
    public void eliminarConcursanteImplementacion(Long id) {
        logger.log(ADFLogger.TRACE, "Inside eliminarConcursanteImplementacion.");
        
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        logger.warning("Id recibido: "+ id);
        
        if(id == null){
            logger.warning("*** El parametro id es requerido para eliminar el registro");
        }
        try{      
            criteria = getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varId", id);
            applyViewCriteria(criteria);
            executeQuery();
        
            if(getEstimatedRowCount() > 0){               
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Metodo eliminarConcursanteImplementacion------Ingresa al If");
                filaRecuperada.remove();
                logger.warning("Metodo eliminarConcursanteImplementacion------Aplica row.remove");
                getDBTransaction().commit();
                logger.warning("Metodo eliminarConcursanteImplementacion------Hace el commit");
            }else{
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
                 getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");
                 executeQuery();
                }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());     
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");              
        }
        
        logger.warning("*** Termina metodo eliminarConcursanteImplementacion");
    }
    
    public Boolean actualizarAdjudicatario(Long id, BigDecimal montoAdjudicado, Integer idTcaTipoMoneda){
        Boolean resultado=Boolean.TRUE;
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        logger.warning("Id recibido: "+ id);
        logger.warning("montoAdjudicado recibido: "+ montoAdjudicado);
        logger.warning("idTcaTipoMoneda recibido: "+ idTcaTipoMoneda);
        
        if(id == null){
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try{      
            criteria = getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varId", id);
            applyViewCriteria(criteria);
            executeQuery();
        
            if(getEstimatedRowCount() > 0){
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Valor anterior montoAdjudicado: "+ filaRecuperada.getAttribute("MontoAdjudicado"));
                logger.warning("Valor anterior idTcaTipoMoneda: "+ filaRecuperada.getAttribute("IdTcaTipoMoneda"));
                filaRecuperada.setAttribute("MontoAdjudicado", montoAdjudicado);
                filaRecuperada.setAttribute("IdTcaTipoMoneda", idTcaTipoMoneda);
                    try{
                        getDBTransaction().commit();
                        logger.warning("Se hace commit a la DB");
                    }catch(Exception e){
                        logger.log(ADFLogger.ERROR, "Error al intentar guardar en el metodo actualizarConcursanteImplementacion ->: "+e.getMessage());
                        getDBTransaction().rollback();
                        resultado = Boolean.FALSE;
                    }
            }else{
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
                 getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");
                 resultado=Boolean.FALSE;
                 executeQuery();
                }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());     
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");              
        }
           
        logger.warning("*** Termina metodo actualizarConcursanteImplementacion");
        
        return resultado;
    }
    
    public Boolean eliminarAdjudicatario(Long id){
        Boolean resultado=Boolean.TRUE;
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        logger.warning("Id recibido: "+ id);
        if(id == null){
            logger.warning("*** El parametro id es requerido para borrar campos en la accion eliminarAdjudicatario");
            return null;
        }
        try{      
            criteria = getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varId", id);
            applyViewCriteria(criteria);
            executeQuery();
        
            if(getEstimatedRowCount() > 0){               
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Valor anterior montoAdjudicado: "+ filaRecuperada.getAttribute("MontoAdjudicado"));
                logger.warning("Valor anterior idTcaTipoMoneda: "+ filaRecuperada.getAttribute("IdTcaTipoMoneda"));
                filaRecuperada.setAttribute("MontoAdjudicado", null);
                filaRecuperada.setAttribute("IdTcaTipoMoneda", null);
                    try{
                        getDBTransaction().commit();
                        logger.warning("Se hace commit a la DB");
                    }catch(Exception e){
                        logger.log(ADFLogger.ERROR, "Error al intentar guardar en el metodo actualizarConcursanteImplementacion ->: "+e.getMessage());
                        getDBTransaction().rollback();
                        resultado = Boolean.FALSE;
                    }
            }else{
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
                 getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");
                 resultado=Boolean.FALSE;
                 executeQuery();
                }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());     
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionVOCriteria");              
        }
           
        logger.warning("*** Termina metodo actualizarConcursanteImplementacion");
        
        return resultado;
    }
    
    public BigDecimal obtenerSumaMontosAdjudicadosByIdLoteImplementacion(Long idLoteImplementacion){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerSumaMontosAdjudicadosByIdLoteImplementacion : ");
        BigDecimal sumaTotalMontosAdjudicados = BigDecimal.valueOf(0);
        BigDecimal montosAdjudicado = BigDecimal.valueOf(0);
        //Integer banEstatus = 0;
        logger.warning("idLoteImplementacion :" + idLoteImplementacion);
        try {
            if(idLoteImplementacion == null)
            {
                sumaTotalMontosAdjudicados = BigDecimal.valueOf(0);
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdLoteImplementacion", idLoteImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                logger.warning("Numero de rows participantes :" + this.getEstimatedRowCount());
                RowSetIterator rowsConcursanteImplementacionVo = createRowSetIterator(null);
                rowsConcursanteImplementacionVo.reset();
                    while (rowsConcursanteImplementacionVo.hasNext()) {
                        ConcursanteImplementacionVORowImpl rowL = (ConcursanteImplementacionVORowImpl) rowsConcursanteImplementacionVo.next();
                        //banEstatus = rowL.getBanEstatus();
                        //if(banEstatus == 1){
                        if(null != rowL.getMontoAdjudicado()){
                            montosAdjudicado = rowL.getMontoAdjudicado();
                            logger.warning("monto adjudicado :" + montosAdjudicado);
                            sumaTotalMontosAdjudicados = sumaTotalMontosAdjudicados.add(montosAdjudicado);
                        }else{
                            logger.warning("El valor del monto del adjudicatario es nulo.");
                        }
                        //}
                    }
                logger.warning("Suma total de todos los concursantes: " + sumaTotalMontosAdjudicados);
                rowsConcursanteImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerSumaMontosAdjudicadosByIdLoteImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
        }
        
        return sumaTotalMontosAdjudicados;
    }
    
    public Boolean obtenerParticipantesByIdLoteImplementacion(Long idLoteImplementacion){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerParticipantesByIdLoteImplementacion : ");
        Integer contador = 0;
        Boolean validaImplementacion = Boolean.FALSE;
        
        try {
            if(idLoteImplementacion == null)
            {
                validaImplementacion = Boolean.FALSE;
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdLoteImplementacion", idLoteImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsConcursanteImplementacionVo = createRowSetIterator(null);
                rowsConcursanteImplementacionVo.reset();
                    while (rowsConcursanteImplementacionVo.hasNext()) {
                        ConcursanteImplementacionVORowImpl rowL = (ConcursanteImplementacionVORowImpl) rowsConcursanteImplementacionVo.next();
                        contador++;
                    }
                logger.warning("Numero de rows: " + contador);
                
                try{
                    if(contador>0)
                        validaImplementacion = Boolean.TRUE;
                    else
                        validaImplementacion = Boolean.FALSE;
                }catch(Exception e){
                    logger.warning("Numero de rows: vacío");
                }
                rowsConcursanteImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerParticipantesByIdLoteImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
        }
        
        return validaImplementacion;
    }
    
    public Boolean obtenerAdjudicatariosByIdLoteImplementacion(Long idLoteImplementacion){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerAdjudicatariosByIdLoteImplementacion : ");
        Integer contador = 0;
        Boolean validaImplementacion = Boolean.FALSE;
        BigDecimal montoAdjudicado = BigDecimal.ZERO;
        Integer idTcaTipoMoneda = 0;
        
        try {
            if(idLoteImplementacion == null)
            {
                validaImplementacion = Boolean.FALSE;
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdLoteImplementacion", idLoteImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsConcursanteImplementacionVo = createRowSetIterator(null);
                rowsConcursanteImplementacionVo.reset();
                    while (rowsConcursanteImplementacionVo.hasNext()) {
                        ConcursanteImplementacionVORowImpl rowL = (ConcursanteImplementacionVORowImpl) rowsConcursanteImplementacionVo.next();
                        montoAdjudicado = rowL.getMontoAdjudicado();
                        idTcaTipoMoneda = rowL.getIdTcaTipoMoneda();
                        if( montoAdjudicado != null && idTcaTipoMoneda != null){
                            contador++;
                        }
                    }
                logger.warning("Numero de rows: " + contador);
                
                try{
                    if(contador>0)
                        validaImplementacion = Boolean.TRUE;
                    else
                        validaImplementacion = Boolean.FALSE;
                }catch(Exception e){
                    logger.warning("Numero de rows: vacío");
                }
                rowsConcursanteImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerParticipantesByIdLoteImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
        }
        
        return validaImplementacion;
    }
    
    public void setValoresInicializarConcursanteImplementacion(Long idLoteImplementacion) {
        
        logger.warning("Entra idLoteImplementacion: " + idLoteImplementacion);
        setvarId(idLoteImplementacion);
        this.executeQuery();
        logger.warning("Numero de rows obtenidos :" + this.getRowCount());
        
        FenixAMImpl fenixAM = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl fenixImplementacionPct = (FenixImplementacionPctAMImpl) fenixAM.getFenixImplementacionPctAM();
        
        Integer contador = 0;
        Long id = null;
        String nombreParticipante = null;
        Integer idCatPaisParticipante = null;
        String nombrePais=null;
        
        BigDecimal montoAdjudicado = null;
        Integer idTcaTipoMoneda = null;
        
        try {
            if(idLoteImplementacion == null)
            {
                logger.warning("idLoteImplementacion es null");
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdLoteImplementacion", idLoteImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                //logger.warning("paso 1");
                if(getEstimatedRowCount()>0){
                    //logger.warning("paso 2");
                    setCurrentRow(first());
                    if(getEstimatedRowCount()==1){
                        //logger.warning("paso 3 getEstimatedRowCount()==1");
                        Row fila = getCurrentRow();
                        
                        if(null != fila.getAttribute("Id")){
                            id = (Long)fila.getAttribute("Id"); 
                        }
                        if(null != fila.getAttribute("NombreParticipante")){
                            nombreParticipante = (String)fila.getAttribute("NombreParticipante");
                                                                }
                        if(null != fila.getAttribute("IdCatPais")){
                            idCatPaisParticipante = (Integer)fila.getAttribute("IdCatPais");
                            nombrePais=fenixImplementacionPct.getTcaPaisesVO().nombrePais(idCatPaisParticipante);
                        }
                        if(null != fila.getAttribute("MontoAdjudicado")){
                            montoAdjudicado = (BigDecimal)fila.getAttribute("MontoAdjudicado");
                        }else{
                            logger.warning("No existe valor de monto del adjudicatario.");
                        }
                        if(null != fila.getAttribute("IdTcaTipoMoneda")){
                            idTcaTipoMoneda = (Integer)fila.getAttribute("IdTcaTipoMoneda");
                        }else{
                            logger.warning("No existe valor de moneda del adjudicatario.");
                        }
                        fenixImplementacionPct.getImplementacionParticipanteVO().crearRowImplementacionParticipante(id, idLoteImplementacion, nombreParticipante, idCatPaisParticipante, nombrePais);
                        
                        if(idTcaTipoMoneda != null ){
                            fenixImplementacionPct.getImplementacionAdjudicatarioVO().crearRowImplementacionAdjudicatario(id, nombreParticipante, idCatPaisParticipante, montoAdjudicado, idTcaTipoMoneda);
                            logger.warning("Se inserta row Adjudicatario");
                        }else{
                            logger.warning("No se encontro registro del adjudicatario.");
                        }
                    }
                    else if(getEstimatedRowCount()>1)
                    {
                        //logger.warning("paso 3 getEstimatedRowCount()>1");
                        RowSetIterator rowsConcursanteImplementacionVo = createRowSetIterator(null);
                        rowsConcursanteImplementacionVo.reset();
                            while (rowsConcursanteImplementacionVo.hasNext()) {
                                ConcursanteImplementacionVORowImpl rowL = (ConcursanteImplementacionVORowImpl) rowsConcursanteImplementacionVo.next();
                                id = rowL.getId();
                                nombreParticipante = rowL.getNombreParticipante();
                                idCatPaisParticipante = rowL.getIdCatPais();
                                nombrePais=fenixImplementacionPct.getTcaPaisesVO().nombrePais(idCatPaisParticipante);
                                //logger.warning("id: " + rowL.getId());
                                //logger.warning("nombreParticipante: " + rowL.getNombreParticipante());
                                //logger.warning("idCatPaisParticipante: " + rowL.getIdCatPais());
                                fenixImplementacionPct.getImplementacionParticipanteVO().crearRowImplementacionParticipante(id, idLoteImplementacion, nombreParticipante, idCatPaisParticipante, nombrePais);
                                logger.warning("Se inserta row Participante");
                                
                                montoAdjudicado = rowL.getMontoAdjudicado();
                                idTcaTipoMoneda = rowL.getIdTcaTipoMoneda();
                                //logger.warning("montoAdjudicado: " + rowL.getMontoAdjudicado());
                                //logger.warning("idTcaTipoMoneda: " + rowL.getIdTcaTipoMoneda());
                                
                                if(idTcaTipoMoneda != null ){
                                    fenixImplementacionPct.getImplementacionAdjudicatarioVO().crearRowImplementacionAdjudicatario(id, nombreParticipante, idCatPaisParticipante, montoAdjudicado, idTcaTipoMoneda);
                                    logger.warning("Se inserta row Adjudicatario");
                                }
                                
                                contador++;
                            }
                        logger.warning("Numero de rows: " + contador);
                        rowsConcursanteImplementacionVo.closeRowSetIterator();
                    }
                    else{
                        logger.warning("Error al estimar la cantidad de registros");
                    }
                }
                else{
                    logger.warning("No hay ningun registro");
                }
            }
        }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en setValoresInicializarConcursanteImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConcursanteImplementacionByIdLoteImplementacionVOCriteria");
        }
        
        //logger.warning("paso 4");
        logger.warning("finaliza metodo setValoresInicializarConcursanteImplementacion");
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }

    /**
     * Returns the variable value for varIdImplementacion.
     * @return variable value for varIdImplementacion
     */
    public Long getvarIdLoteImplementacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdLoteImplementacion");
    }

    /**
     * Sets <code>value</code> for variable varIdImplementacion.
     * @param value value to bind as varIdImplementacion
     */
    public void setvarIdLoteImplementacion(Long value) {
        ensureVariableManager().setVariableValue("varIdLoteImplementacion", value);
    }
}

