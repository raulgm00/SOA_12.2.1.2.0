package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.vo.common.ContratadosAdjudicatariosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 21 12:08:17 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratadosAdjudicatariosVOImpl extends ViewObjectImpl implements ContratadosAdjudicatariosVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContratadosAdjudicatariosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    public void crearRowContratadosAdjudicatarios(Row row) {
        logger.warning("inside crearRowContratadosAdjudicatarios.");

        Row rowContratadosAdjudicatarios = null;

        if (row.getAttribute("Id") != null) {
            
            rowContratadosAdjudicatarios = this.createRow();
            rowContratadosAdjudicatarios.setAttribute("Id", row.getAttribute("Id"));
            rowContratadosAdjudicatarios.setAttribute("NumeroCorrespondencia", row.getAttribute("NumeroCorrespondencia"));
            rowContratadosAdjudicatarios.setAttribute("Nombre", row.getAttribute("Nombre"));
            rowContratadosAdjudicatarios.setAttribute("Nacionalidad", row.getAttribute("Nacionalidad"));
            rowContratadosAdjudicatarios.setAttribute("Monto", row.getAttribute("Monto"));
            this.insertRow(rowContratadosAdjudicatarios);
        }
    }
    
    public void cargarContratados(String nombre, String nacionalidad, BigDecimal monto, Long id) {
        logger.warning("inside cargarContratados.");

        Row rowContratadosAdjudicatarios = null;

        if (id != null) {
            
            rowContratadosAdjudicatarios = this.createRow();
            rowContratadosAdjudicatarios.setAttribute("Id", id);
            rowContratadosAdjudicatarios.setAttribute("NumeroCorrespondencia", null);
            rowContratadosAdjudicatarios.setAttribute("Nombre", nombre);
            rowContratadosAdjudicatarios.setAttribute("Nacionalidad", nacionalidad);
            rowContratadosAdjudicatarios.setAttribute("Monto", monto);
            this.insertRow(rowContratadosAdjudicatarios);
        }
    }
    
    public void limpiarContratados() {
        logger.warning("inside crearRowContratadosAdjudicatarios.");
        this.executeQuery();
    }
    
    public void eliminarContratadoAdjudicatario(Row contratado) {
        logger.warning("Into eliminarAdjudicatarioContrato.");
        removeCurrentRow();
        /*
        if (null != contratado) {
            contratado.remove();
        }*/
    }
    
    public long numRegistros() {
        return this.getEstimatedRowCount();
    }

    public void fusionarCamposTrasient(Long idNoObjecion) {
        logger.warning("into method fusionarCamposTrasient in ContraradosAdjudicatariosVO");
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();
        if (getEstimatedRowCount() > 0) {
            RowSetIterator rs = this.createRowSetIterator(null);
            rs.reset();

            while (rs.hasNext()) {
                ContratadosAdjudicatariosVORowImpl contratadoRow = (ContratadosAdjudicatariosVORowImpl) rs.next();
                fenixAdquisicionesAMImpl.getConcursanteActivoVO().actualizaPerfil(contratadoRow.getId(), idNoObjecion,
                                                                                  FenixModelConstants.CONCURSANTE_CONTRATADO);
                logger.warning("contratado.Id:" + contratadoRow.getId());
                logger.warning("contratado.Nombre:" + contratadoRow.getNombre());
                logger.warning("contratado.Nacionalidad:" + contratadoRow.getNacionalidad());
            }
            rs.closeRowSetIterator();
        }
    }
}

