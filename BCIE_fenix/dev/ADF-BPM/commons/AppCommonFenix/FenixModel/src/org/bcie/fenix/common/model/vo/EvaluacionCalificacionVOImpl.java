package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.EvaluacionCalificacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 19 12:40:59 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EvaluacionCalificacionVOImpl extends ViewObjectImpl implements EvaluacionCalificacionVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public EvaluacionCalificacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean obtenerIdEvaluacionById(Long id){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerIdEvaluacionById : ");
        Integer contador = 0;
        Boolean validaIdEvaluacionVO = Boolean.FALSE;
        try {
            if(validaIdEvaluacionVO == null)
            {
                validaIdEvaluacionVO = Boolean.FALSE;
            }
            else{
                
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("EvaluacionCalificacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varId", id);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsEvaluacionCalificacionVo = createRowSetIterator(null);
                rowsEvaluacionCalificacionVo.reset();
                    
                    while (rowsEvaluacionCalificacionVo.hasNext()) {
                        EvaluacionCalificacionVORowImpl rowL = (EvaluacionCalificacionVORowImpl) rowsEvaluacionCalificacionVo.next();
                        contador++;
                    }
                    
                logger.warning("Numero de rows: " + contador);
                
                try{
                    if(contador>0)
                        validaIdEvaluacionVO = Boolean.TRUE;
                    else
                        validaIdEvaluacionVO = Boolean.FALSE;
                }catch(Exception e){
                    logger.warning("Numero de rows: vacío");
                }
                    
                rowsEvaluacionCalificacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerIdEvaluacionById " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("EvaluacionCalificacionVOCriteria");
        }
        
        return validaIdEvaluacionVO;
    }
    
    public Boolean agregarEvaluacionCalificacion( Long id, Long idOperacion, Integer idEvaluacion, Integer enAnalisis,
                                   Integer tipoEvaluacion, Integer idTcaTipoEvaluacion, BigDecimal calificacion) {
        logger.log(ADFLogger.TRACE, "Inside agregarEvaluacionCalificacion.");
        logger.warning("Inicia metodo agregarEvaluacionCalificacion de EvaluacionCalificacionVO");
        Boolean respuesta = Boolean.FALSE;
        try{
            NameValuePairs nvpEvaluacionCalificacion = null;
            
            nvpEvaluacionCalificacion = new NameValuePairs();
            nvpEvaluacionCalificacion.setAttribute("Id", id);
            nvpEvaluacionCalificacion.setAttribute("IdOperacion", idOperacion);
            nvpEvaluacionCalificacion.setAttribute("IdEvaluacion", idEvaluacion);
            
            if(enAnalisis == null)
                enAnalisis = 1;
            
            nvpEvaluacionCalificacion.setAttribute("EnAnalisis", enAnalisis);
            nvpEvaluacionCalificacion.setAttribute("TipoEvaluacion", tipoEvaluacion);
            nvpEvaluacionCalificacion.setAttribute("IdTcaTipoEvaluacion", idTcaTipoEvaluacion);
            java.util.Date today = new java.util.Date();
            
            nvpEvaluacionCalificacion.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            nvpEvaluacionCalificacion.setAttribute("BanEstatus", 1);
            
            nvpEvaluacionCalificacion.setAttribute("CalificacionIbcie", calificacion);
            
            logger.warning("Id--->" + id);
            logger.warning("IdOperacion--->" + idOperacion);
            logger.warning("IdEvaluacion--->" + idEvaluacion);
            logger.warning("EnAnalisis--->" + enAnalisis);
            logger.warning("TipoEvaluacion--->" + tipoEvaluacion);
            logger.warning("IdTcaTipoEvaluacion--->" + idTcaTipoEvaluacion);
            logger.warning("CalificacionIbcie--->" + calificacion);
            
            this.createAndInitRow(nvpEvaluacionCalificacion);
            
            getDBTransaction().commit();
            logger.warning("Se hace commit a la VO)");
            respuesta = Boolean.TRUE;
            
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en agregarEvaluacionCalificacion " + ex.getClass() + ":" + ex.getMessage());
            respuesta = Boolean.FALSE;
        }
        return respuesta;
    }
    
    public Boolean actualizarCalificacion(Long id, BigDecimal calificacion){
        logger.warning("Inside actualizarCalificacion.");
        
        Boolean resultado=Boolean.TRUE;
        try{
            if(null != id){
                Row row=  getRow(new Key(new Object[] { id })); 
                if(null!= row){
                    logger.warning("Id de evaluacion encontrado :"+ id);
                    logger.warning("Valor de la calificacion a actualizar :"+ calificacion);
                    if(null!=calificacion){
                        row.setAttribute("CalificacionIbcie", calificacion);
                            try{
                                getDBTransaction().commit();
                                logger.warning("Se hace commint a la DB");
                                logger.warning("Valor Calificacion IBCIE: "+ row.getAttribute("CalificacionIbcie"));
                            }catch(Exception e){            
                                logger.log(ADFLogger.ERROR, "Error al intentar guardar la Calificacion ->: "+e.getMessage());
                                getDBTransaction().rollback();
                                resultado = Boolean.FALSE;
                            }
                    }
                    else{
                        logger.warning("Calificacion es null");
                        resultado=Boolean.FALSE;
                    }
                }
                else{
                    logger.warning("Id: "+ id + " no encontrado en DB");
                    resultado=Boolean.FALSE;
                 }
            }
            else{
                logger.warning("Id es null");
                resultado=Boolean.FALSE;
            }
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en actualizarCalificacion " + ex.getClass() + ":" + ex.getMessage());
        }
        
        return resultado;
    }
    
    public Boolean agregarActualizarCalificacionEvaluacion(Integer idTcaTipoEvaluacion, Integer eventoEvaluacion) {
        logger.warning("inside agregarActualizarCalificacionEvaluacion");
        
        RowSetIterator iter = null;
        Row row = null;
        
        Long id = null;
        BigDecimal calificacion = null;
        Boolean result = Boolean.FALSE;
        
        FenixAMImpl fenixAmpl = (FenixAMImpl) getApplicationModule();
        iter = fenixAmpl.getEvaluacionVO().createRowSetIterator(null);
            iter.reset();
            while(iter.hasNext()){
                row = iter.next();
                if(null != row) {
                    if(null != row.getAttribute("id")){
                        if (row.getAttribute("IdEvaluacionOrigen") != null) {
                            id = Long.parseLong(row.getAttribute("id").toString());
                            if(null != row.getAttribute("Calificacion")){
                                calificacion = (BigDecimal)row.getAttribute("Calificacion");
                            }else{
                                logger.log(ADFLogger.WARNING, "La calificacion es nula.");
                            }
                            
                            try {
                                logger.log(ADFLogger.WARNING, "Valor del id de evaluacion. :" + id);
                                logger.log(ADFLogger.WARNING, "Valor de la calificacion Actualizada :" + calificacion);
                                
                                result = actualizarCalificacion(id, calificacion);
                                logger.log(ADFLogger.WARNING, "Se actualiza correctamente.");
                            } catch (Exception e) {
                                logger.warning("Error en actualizarCalificacion." + e.getClass() + "." + e);
                            }   
                        } else {
                            logger.warning("Es evaluacion original, no se actualiza calificacion.");
                        }
                    }else{
                        logger.log(ADFLogger.WARNING, "No se encontro algun id de evaluacion.");
                    }   
                }else{
                    logger.warning("El row es NULL.");
                }
            }
        iter.closeRowSetIterator();   
        
        return result;
    }
    
    public Boolean actualizarCalificacionDuplicada() {
        logger.warning("Inside actualizarCalificacionDuplicada");

        RowSetIterator iter = null;
        Row row = null;

        Long id = null;
        BigDecimal calificacion = null;
        Boolean result = Boolean.FALSE;

        FenixAMImpl fenixAmpl = (FenixAMImpl) getRootApplicationModule();
        
        iter = fenixAmpl.getEvaluacionVO().createRowSetIterator(null);
        
        iter.reset();
        
        while (iter.hasNext()) {
            
            row = iter.next();
            if (null != row) {
                if (null != row.getAttribute("id")) {
                    if (row.getAttribute("idEvaluacionOrigen") != null) {
                        id = Long.parseLong(row.getAttribute("id").toString());
                        
                        if (null != row.getAttribute("Calificacion")) {
                            logger.warning("Se obtiene calificacion.");
                            calificacion = (BigDecimal) row.getAttribute("Calificacion");
                            
                        } else {
                            logger.log(ADFLogger.WARNING, "La calificacion es nula.");
                        }

                        try {
                            logger.log(ADFLogger.WARNING, "Valor del id de evaluacion. :" + id);
                            logger.log(ADFLogger.WARNING, "Valor de la calificacion Actualizada :" + calificacion);

                            result = actualizarCalificacion(id, calificacion);
                            logger.log(ADFLogger.WARNING, "Se actualiza correctamente.");
                        } catch (Exception e) {
                            logger.warning("Error en actualizarCalificacion." + e.getClass() + "." + e);
                        }
                    } else {
                        logger.warning("Es evaluacion original, no se actualiza calificacion.");
                    }
                } else {
                    logger.log(ADFLogger.WARNING, "No se encontro algun id de evaluacion.");
                }
            } else {
                logger.warning("El row es NULL.");
            }
        }

        iter.closeRowSetIterator();

        logger.warning("result: " + result);

        return result;
    }
    
    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }
}

