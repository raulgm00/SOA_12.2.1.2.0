package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;
import java.util.HashMap;
import java.util.Map;

import java.util.Objects;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.CatSubSectorEvaluacionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 28 23:22:24 CDT 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CatSubSectorEvaluacionVOImpl extends ViewObjectImpl implements CatSubSectorEvaluacionVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    public CatSubSectorEvaluacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    
    }
    
    public Map <Integer, String> generarMapaSubSector(){
        
        this.executeQuery();
        Map <Integer, String> map = null;
        //Validar que existen datos en la ejecucuón de View Object
                    if (this.getEstimatedRowCount() > 0) {
                        logger.warning("Se encontraron " + this.getEstimatedRowCount() + " registro");
                        //Iteración de View Object:
                        RowSetIterator iter = this.createRowSetIterator(null);
                        map = desempaquetarColeccion(iter);
                        //imprimirMapa(map,"Vivienda Privado");
                    } else {
                        logger.warning("No se encontraron registros");
                        map.put(null, null);
                        
                    }
        return map;
    
    }
    
    
    public Map<Integer, String> desempaquetarColeccion(RowSetIterator iter) {
        int contador;
        Map<Integer, String> mapa = new HashMap<Integer, String>();
        
        while (iter.hasNext()) {
            Row r = iter.next();
            //imprimirRow(r);
            mapa.put(Integer.parseInt( r.getAttribute("CodigoSubsectorIbcie").toString() ) , r.getAttribute("Descripcion").toString());
        }
        return mapa;
    }

    public void imprimirRow(Row fila) {
        System.out.println("==================== OBJ BD ===================================");
        System.out.println("Id = " + fila.getAttribute("CodigoSectorIbcie"));
        System.out.println("Descripcion = " + fila.getAttribute("Descripcion"));
    }
    
    public void imprimirMapa( Map<Integer, String> map, String value) {
        System.out.println("=== Key ===");
        System.out.println( getSingleKeyFromValue(map,value));
        System.out.println("=== End Key ===");
        
        for (Map.Entry <Integer, String> entry : map.entrySet()) {
            System.out.println(" ======================== " + entry.getKey() + " ================================== " );
            System.out.println(entry.getValue().toString());
        }

    }
    
    public static <K, V> K getSingleKeyFromValue(Map<K, V> map, V value) {
            for (Map.Entry<K, V> entry : map.entrySet()) {
                if (Objects.equals(value, entry.getValue())) {
                    return entry.getKey();
                }
            }
            return null;
    }
    
    
    
}

