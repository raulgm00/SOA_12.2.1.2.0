package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TreExcepcionSolicitudVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 31 13:53:41 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreExcepcionSolicitudVOImpl extends ViewObjectImpl implements TreExcepcionSolicitudVO {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public TreExcepcionSolicitudVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void agregarTreExcepcionSolicitud(Long idSolicitud, Integer idTcaRegla, Integer exceptuado, String instanciaProceso, Integer enProcesoExcepcion) {
        instanciaProceso = null;
        logger.log(ADFLogger.TRACE, "Inside agregarTreExcepcionSolicitud.");
        logger.warning("Inicia metodo agregarTreExcepcionSolicitud de TreExcepcionSolicitudVO");
        
        oracle.jbo.domain.Number idTreExcepcionSolicitud = null;
        NameValuePairs nvpTreExcepcionSolicitud = null;
        SequenceImpl seqTreExcepcionSolicitud = null;
        logger.warning("Continua proceso agregarTreExcepcionSolicitud 1");

        seqTreExcepcionSolicitud = new SequenceImpl("TRE_EXCEPCION_SOLICITUD_SEQ", getDBTransaction());
        idTreExcepcionSolicitud = seqTreExcepcionSolicitud.getSequenceNumber();
        logger.warning("Continua porceso agregarTreExcepcionSolicitud 2");
        nvpTreExcepcionSolicitud = new NameValuePairs();
        nvpTreExcepcionSolicitud.setAttribute("Id", idTreExcepcionSolicitud);
        nvpTreExcepcionSolicitud.setAttribute("IdSolicitud", idSolicitud);
        nvpTreExcepcionSolicitud.setAttribute("IdTcaRegla", idTcaRegla);
        nvpTreExcepcionSolicitud.setAttribute("Exceptuado", exceptuado);
        nvpTreExcepcionSolicitud.setAttribute("InstanciaProceso", instanciaProceso);
        nvpTreExcepcionSolicitud.setAttribute("EnProcesoExcepcion", enProcesoExcepcion);
        logger.warning("Id--->" + idTreExcepcionSolicitud);
        logger.warning("IdSolicitud--->" + idSolicitud);
        logger.warning("IdTcaRegla--->" + idTcaRegla);
        logger.warning("Exceptuado--->" + exceptuado);
        logger.warning("InstanciaProceso--->" + instanciaProceso);
        logger.warning("EnProcesoExcepcion--->" + enProcesoExcepcion);
        logger.warning("Continua proceso agregarTreExcepcionSolicitud 3");
        
        this.createAndInitRow(nvpTreExcepcionSolicitud);
        logger.warning("Continua proceso agregarTreExcepcionSolicitud 4");
                
        getDBTransaction().commit();
        logger.warning("Continua porceso agregarTreExcepcionSolicitud 5 (se hace commit a la VO)");
    }
    
    public Boolean existeDesembolsoExcepcionByIdSolicitudIdRegla(Long idSolicitud, Integer regla) {

        logger.log(ADFLogger.WARNING, "Ingresa metodo  existeDesembolsoExcepcionByIdSolicitudIdRegla : ");
        Integer contador = 0;
        Boolean validaDesembolsoExcepcion = Boolean.FALSE;

        try {
            if (idSolicitud == null || regla == null) {
                logger.warning("idSolicitud o regla son null");
                validaDesembolsoExcepcion = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("TreExcepcionSolicitudByIdSolicitudIdReglaVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdSolicitud", idSolicitud);
                criteria.ensureVariableManager().setVariableValue("varIdRegla", regla);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsTreExcepcionSolicitudVo = createRowSetIterator(null);
                rowsTreExcepcionSolicitudVo.reset();
                while (rowsTreExcepcionSolicitudVo.hasNext()) {
                    TreExcepcionSolicitudVORowImpl rowL = (TreExcepcionSolicitudVORowImpl) rowsTreExcepcionSolicitudVo.next();
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);
                
                try {
                    if (contador > 0)
                        validaDesembolsoExcepcion = Boolean.TRUE;
                    else
                        validaDesembolsoExcepcion = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsTreExcepcionSolicitudVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en existeDesembolsoExcepcionByIdSolicitudIdRegla ", ex);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("TreExcepcionSolicitudByIdSolicitudIdReglaVOCriteria");
        }
        
        logger.log(ADFLogger.WARNING, "Valor a retornar como respuesta: " + validaDesembolsoExcepcion);
        logger.log(ADFLogger.WARNING, "Finaliza metodo  existeDesembolsoExcepcionByIdSolicitudIdRegla...");
        
        return validaDesembolsoExcepcion;
    }


    public Boolean validarReglaExceptuada(Long idSolicitud, Integer idTcaRegla){
        logger.warning("*Inf, Incia metodo validarReglaExceptuada");
        logger.warning("*Inf, idSolicitud: "+idSolicitud+"idTcaRegla: "+idTcaRegla);       
        
        Boolean respuesta = Boolean.FALSE;        
        
        if (idSolicitud == null || idTcaRegla == null) {
            logger.warning("***Error, Parametros requeridos resueltos a Null");
            respuesta = null;
        }
        
        try {                
            ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("TreExcepcionSolicitudByIdSolicitudIdReglaVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varIdSolicitud", idSolicitud);
            criteria.ensureVariableManager().setVariableValue("varIdRegla", idTcaRegla);
            applyViewCriteria(criteria);
            executeQuery();
            
            logger.warning("*Inf, Numero de registros encontrados :"+getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0){                
                setRangeSize(-1);
               
                for(Row registro : getAllRowsInRange()){
                    Integer reglaExceptuada = (Integer)registro.getAttribute("Exceptuado");
                    
                    
                    if(reglaExceptuada == 1){
                        logger.warning("*Inf, la regla "+registro.getAttribute("IdTcaRegla")+" es Exceptuada: ");
                        respuesta = Boolean.TRUE;                        
                    }else{
                        logger.warning("*Inf, regla "+registro.getAttribute("IdTcaRegla")+" no Exceptuada: ");
                        respuesta = Boolean.FALSE;
                    }
                   
                }
                
            }else{            
                logger.warning("*Inf, Importante! no se recuperaron registros para solicitud: "
                                                                                +idSolicitud+ " Regla: "+idTcaRegla);
                logger.warning("*Inf, Importante! se considerara a la regla como no exceptuada");
            }  
                           
            
        } catch (Exception e) {
            logger.warning("*Inf, ha ocurrido un error al recuperer los registros de TreExcepcionSolicitudVO ->", e);
        } finally {            
            getViewCriteriaManager().removeApplyViewCriteriaName("TreExcepcionSolicitudByIdSolicitudIdReglaVOCriteria");            
        }
         
        logger.warning("*Inf, Termina metodo validarReglaExceptuada");
        return respuesta;
    }


    /**
     * Returns the variable value for varIdSolicitud.
     * @return variable value for varIdSolicitud
     */
    public Long getvarIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("varIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable varIdSolicitud.
     * @param value value to bind as varIdSolicitud
     */
    public void setvarIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("varIdSolicitud", value);
    }

    /**
     * Returns the variable value for varIdRegla.
     * @return variable value for varIdRegla
     */
    public Integer getvarIdRegla() {
        return (Integer) ensureVariableManager().getVariableValue("varIdRegla");
    }

    /**
     * Sets <code>value</code> for variable varIdRegla.
     * @param value value to bind as varIdRegla
     */
    public void setvarIdRegla(Integer value) {
        ensureVariableManager().setVariableValue("varIdRegla", value);
    }
}

