package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ConsutarCondicionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 12 18:03:47 CDT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsutarCondicionVOImpl extends ViewObjectImpl implements ConsutarCondicionVO {
    
    private static ADFLogger logger = null;
    
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsutarCondicionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    public Boolean existenCondicionesPorIdOperacion(Long idOperacion) {
        logger.warning("Dentro existenCondicionesPorIdOperacion");
        logger.warning("idOperacion :"+idOperacion);
        
        Boolean existenCondiciones = null;
        ViewCriteria viewCriteria = null;
        
        try{
            // Los atributos idOperacion son requeridos por el ViewCriteria
            if(idOperacion != null) {
                // 1) Filtramos el VO por idOperacion
                viewCriteria = this.getViewCriteriaManager().getViewCriteria("CondicionPorIdOperacionCriteria");
                viewCriteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
                this.applyViewCriteria(viewCriteria);
                this.executeQuery();
                logger.warning("cantidad de registros :"+this.getEstimatedRowCount());

                // 2) Validar que existan registros
                if(this.getEstimatedRowCount() > 0) {
                    logger.warning("Existen registros");
                    existenCondiciones = Boolean.TRUE;
                }else{
                    logger.warning("No existen registros");
                    existenCondiciones = Boolean.FALSE;
                }
            }else{
                logger.warning("idOperacion es nulo");
            }
            
        } catch (Exception ex) {
            logger.severe("Error en existenCondicionesPorIdOperacion : ",ex);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("CondicionPorIdOperacionCriteria");
        }
        
        logger.warning("Fuera existenCondicionesPorIdOperacion,return :"+existenCondiciones);
        
        return existenCondiciones;
    }

    /**
     * Returns the variable value for pIdOperacion.
     * @return variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }
}

