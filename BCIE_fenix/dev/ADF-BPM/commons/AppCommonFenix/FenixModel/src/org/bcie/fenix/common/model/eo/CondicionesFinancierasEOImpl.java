package org.bcie.fenix.common.model.eo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.RowInconsistentException;
import oracle.jbo.server.EntityDefImpl;
import oracle.jbo.server.EntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 10 11:26:48 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CondicionesFinancierasEOImpl extends EntityImpl {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(CondicionesFinancierasEOImpl.class);
    
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        CodigoTasaReferencia,
        CodigoTasaReferenciaSpread,
        ExceptoVencimiento,
        FechaPrimerPagoCapital,
        FechaProximaRevisionSpread,
        FechaProximaRevisionTasa,
        FechaProximoPagoInteres,
        FechaVencimiento,
        FrecuenciaPagoCapital,
        FrecuenciaPagoInteres,
        FrecuenciaPeriodoGracia,
        FrecuenciaPlazo,
        FrecuenciaRevisionSpread,
        FrecuenciaRevisionTasa,
        Id,
        IdContratoDesembolso,
        IdProductoFlexcube,
        IdTcaBaseCalculo,
        IdTcaEspecificacionFecha,
        IdTcaFrecuenciaPagoCapital,
        IdTcaFrecuenciaPagoInteres,
        IdTcaFrecuenciaPeriodoGra,
        IdTcaFrecuenciaPlazo,
        IdTcaFrecuenciaRevSpread,
        IdTcaFrecuenciaRevTasa,
        IdTcaTipoCalendario,
        IdTcaTipoTasaDesembolso,
        LimiteTasaMaxima,
        LimiteTasaMinima,
        MontoDescuento,
        NumeroCuotasPagoCapital,
        NumeroCuotasPagoInteres,
        NumeroRevisionesSpread,
        NumeroRevisionesTasa,
        SePuedeAlinearDiaPago,
        SePuedeMoverEntreMeses,
        SpreadMora,
        SpreadTasa,
        TasaTotal,
        TratamientoDiasFeriados,
        ValorTasa,
        ValorTasaReferenciaSpread,
        ContratoDesembolsoEO,
        DocumentoCalendarioEO,
        CalendarioComplejoEO;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }

    public static final int CODIGOTASAREFERENCIA = AttributesEnum.CodigoTasaReferencia.index();
    public static final int CODIGOTASAREFERENCIASPREAD = AttributesEnum.CodigoTasaReferenciaSpread.index();
    public static final int EXCEPTOVENCIMIENTO = AttributesEnum.ExceptoVencimiento.index();
    public static final int FECHAPRIMERPAGOCAPITAL = AttributesEnum.FechaPrimerPagoCapital.index();
    public static final int FECHAPROXIMAREVISIONSPREAD = AttributesEnum.FechaProximaRevisionSpread.index();
    public static final int FECHAPROXIMAREVISIONTASA = AttributesEnum.FechaProximaRevisionTasa.index();
    public static final int FECHAPROXIMOPAGOINTERES = AttributesEnum.FechaProximoPagoInteres.index();
    public static final int FECHAVENCIMIENTO = AttributesEnum.FechaVencimiento.index();
    public static final int FRECUENCIAPAGOCAPITAL = AttributesEnum.FrecuenciaPagoCapital.index();
    public static final int FRECUENCIAPAGOINTERES = AttributesEnum.FrecuenciaPagoInteres.index();
    public static final int FRECUENCIAPERIODOGRACIA = AttributesEnum.FrecuenciaPeriodoGracia.index();
    public static final int FRECUENCIAPLAZO = AttributesEnum.FrecuenciaPlazo.index();
    public static final int FRECUENCIAREVISIONSPREAD = AttributesEnum.FrecuenciaRevisionSpread.index();
    public static final int FRECUENCIAREVISIONTASA = AttributesEnum.FrecuenciaRevisionTasa.index();
    public static final int ID = AttributesEnum.Id.index();
    public static final int IDCONTRATODESEMBOLSO = AttributesEnum.IdContratoDesembolso.index();
    public static final int IDPRODUCTOFLEXCUBE = AttributesEnum.IdProductoFlexcube.index();
    public static final int IDTCABASECALCULO = AttributesEnum.IdTcaBaseCalculo.index();
    public static final int IDTCAESPECIFICACIONFECHA = AttributesEnum.IdTcaEspecificacionFecha.index();
    public static final int IDTCAFRECUENCIAPAGOCAPITAL = AttributesEnum.IdTcaFrecuenciaPagoCapital.index();
    public static final int IDTCAFRECUENCIAPAGOINTERES = AttributesEnum.IdTcaFrecuenciaPagoInteres.index();
    public static final int IDTCAFRECUENCIAPERIODOGRA = AttributesEnum.IdTcaFrecuenciaPeriodoGra.index();
    public static final int IDTCAFRECUENCIAPLAZO = AttributesEnum.IdTcaFrecuenciaPlazo.index();
    public static final int IDTCAFRECUENCIAREVSPREAD = AttributesEnum.IdTcaFrecuenciaRevSpread.index();
    public static final int IDTCAFRECUENCIAREVTASA = AttributesEnum.IdTcaFrecuenciaRevTasa.index();
    public static final int IDTCATIPOCALENDARIO = AttributesEnum.IdTcaTipoCalendario.index();
    public static final int IDTCATIPOTASADESEMBOLSO = AttributesEnum.IdTcaTipoTasaDesembolso.index();
    public static final int LIMITETASAMAXIMA = AttributesEnum.LimiteTasaMaxima.index();
    public static final int LIMITETASAMINIMA = AttributesEnum.LimiteTasaMinima.index();
    public static final int MONTODESCUENTO = AttributesEnum.MontoDescuento.index();
    public static final int NUMEROCUOTASPAGOCAPITAL = AttributesEnum.NumeroCuotasPagoCapital.index();
    public static final int NUMEROCUOTASPAGOINTERES = AttributesEnum.NumeroCuotasPagoInteres.index();
    public static final int NUMEROREVISIONESSPREAD = AttributesEnum.NumeroRevisionesSpread.index();
    public static final int NUMEROREVISIONESTASA = AttributesEnum.NumeroRevisionesTasa.index();
    public static final int SEPUEDEALINEARDIAPAGO = AttributesEnum.SePuedeAlinearDiaPago.index();
    public static final int SEPUEDEMOVERENTREMESES = AttributesEnum.SePuedeMoverEntreMeses.index();
    public static final int SPREADMORA = AttributesEnum.SpreadMora.index();
    public static final int SPREADTASA = AttributesEnum.SpreadTasa.index();
    public static final int TASATOTAL = AttributesEnum.TasaTotal.index();
    public static final int TRATAMIENTODIASFERIADOS = AttributesEnum.TratamientoDiasFeriados.index();
    public static final int VALORTASA = AttributesEnum.ValorTasa.index();
    public static final int VALORTASAREFERENCIASPREAD = AttributesEnum.ValorTasaReferenciaSpread.index();
    public static final int CONTRATODESEMBOLSOEO = AttributesEnum.ContratoDesembolsoEO.index();
    public static final int DOCUMENTOCALENDARIOEO = AttributesEnum.DocumentoCalendarioEO.index();
    public static final int CALENDARIOCOMPLEJOEO = AttributesEnum.CalendarioComplejoEO.index();

    /**
     * This is the default constructor (do not remove).
     */
    public CondicionesFinancierasEOImpl() {
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Long id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("org.bcie.fenix.common.model.eo.CondicionesFinancierasEO");
    }


    public void lock() {
        logger.warning("Inicio method lock CondicionesFinancierasEOImpl");
        try {
            boolean vIsLock = this.isLocked();
            logger.warning("vIsLock: " + vIsLock);
            super.lock();
        } catch (RowInconsistentException e) {
            logger.warning("RowInconsistentException lock CondicionesFinancierasEOImpl: " + e);
            
            boolean vIsLock = this.isLocked();
            logger.warning("vIsLock 1: " + vIsLock);
            
            refresh(REFRESH_WITH_DB_ONLY_IF_UNCHANGED | REFRESH_CONTAINEES | REFRESH_UNDO_CHANGES);
            
            vIsLock = this.isLocked();
            logger.warning("vIsLock 2: " + vIsLock);
             
        } catch (Exception e) {
            logger.warning("RowInconsistentException lock CondicionesFinancierasEOImpl: " + e);
            
            boolean vIsLock = this.isLocked();
            logger.warning("vIsLock 1: " + vIsLock);  
        }
        logger.warning("Fin method lock CondicionesFinancierasEOImpl");
    }
}

