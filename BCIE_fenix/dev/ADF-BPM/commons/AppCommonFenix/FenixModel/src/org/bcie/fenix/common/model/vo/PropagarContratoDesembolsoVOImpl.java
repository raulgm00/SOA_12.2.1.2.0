package org.bcie.fenix.common.model.vo;import java.sql.ResultSet;import java.util.Date;import java.util.GregorianCalendar;import java.util.List;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.Row;import oracle.jbo.server.ViewObjectImpl;import oracle.jbo.server.ViewRowImpl;import oracle.jbo.server.ViewRowSetImpl;import org.bcie.catalogobo.Catalogo;import org.bcie.commonbo.MontoType;import org.bcie.fenix.common.model.FenixModelConstants;import org.bcie.fenix.common.model.am.FenixAMImpl;import org.bcie.fenix.common.model.utils.IWsdlLocation;import org.bcie.fenix.common.model.utils.ModelUtils;import org.bcie.fenix.common.model.vo.common.PropagarContratoDesembolsoVO;import org.bcie.lineacreditobo.InformacionAdicional;import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELResponseType;// ---------------------------------------------------------------------// ---    File generated by Oracle ADF Business Components Design Time.// ---    Wed Nov 23 15:19:37 CST 2016// ---    Custom code may be added to this class.// ---    Warning: Do not modify method signatures of generated methods.// ---------------------------------------------------------------------public class PropagarContratoDesembolsoVOImpl extends ViewObjectImpl implements PropagarContratoDesembolsoVO {        private static ADFLogger logger = null;        public PropagarContratoDesembolsoVOImpl() {        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }    }    public String consultarDesembolsoWsdl(Long idDesembolso) {        logger.log(ADFLogger.NOTIFICATION, "---INTO_consultarLineaCredito--->"+idDesembolso);        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DESEMBOLSO);        String acuseBHQ = null;        ConsultaLineaCreditoVORowImpl newLineaCredito = (ConsultaLineaCreditoVORowImpl) createRow();        PropagarContratoDesembolsoVORowImpl newCondicionFinanciera =             (PropagarContratoDesembolsoVORowImpl)  createRow();                com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService =            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);                       com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =            lineaCredito12BndQSService.getLineaCredito12Bnd();        try {            logger.log(ADFLogger.WARNING, "<*> HNWS lineaCreditoPT <*>" + lineaCreditoPT.toString());            org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType request =                new org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType();            //se agrega los parametros al request idOperacion e instanciaProceso            request.setIdLineaCredito(idDesembolso);                                 Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);            ConsultarLineaCreditoBPELResponseType response = lineaCreditoPT.consultarLineaCreditoById(request);            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);            //Vamos a guardar los datos en el ROW            if (response.getLineaCredito() != null) {                //LineaCredito listaCredito = listaLineasObtenidas.get(0);                if (response.getLineaCredito().getIdLineaCredito() > 0) {                                        newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.IDLINEACREDITO,                                                  response.getLineaCredito().getIdLineaCredito());                }                //Vamos por los montos que estan en List<MontoType>                List<MontoType> lista=response.getLineaCredito().getMonto();                for(MontoType montos: lista){                    if(montos.getTipo().getDescripcionCorta().equals("DISPONIBLE")){                        newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.DISPONIBLE,                                                      montos.getImporte());                                            }else if(montos.getTipo().getDescripcionCorta().equals("TRANSITO")){                        newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.TRANSITO,                                                      montos.getImporte());                    }else if(montos.getTipo().getDescripcionCorta().equals("DISPONIBLE_DESEMBOLSO")){                         newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.DISPONIBLE_DESEMBOLSO,                                                       montos.getImporte());                      }else if(montos.getTipo().getDescripcionCorta().equals("PROGRAMADO")){                         newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.PROGRAMADO,                                                      montos.getImporte());                                          }                }                //Vamos por las fechas:                if(response.getLineaCredito().getFechaRegistro() != null){                    GregorianCalendar fechaReguistro =                                 response.getLineaCredito().getFechaRegistro().toGregorianCalendar();                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.FECHAREGISTRO,                                 new java.sql.Timestamp(fechaReguistro.getTimeInMillis()));                }                if(response.getLineaCredito().getFechaVencimiento() != null){                    GregorianCalendar fechaVencimiento =                                 response.getLineaCredito().getFechaVencimiento().toGregorianCalendar();                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.FECHAVENCIMIENTO,                                 new java.sql.Timestamp(fechaVencimiento.getTimeInMillis()));                }                if(response.getLineaCredito().getFechaMaximaDesembolso() != null){                    GregorianCalendar fechaMaximaDesembolso =                                 response.getLineaCredito().getFechaMaximaDesembolso().toGregorianCalendar();                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.FECHAMAXIMADESEMBOLSO,                                 new java.sql.Timestamp(fechaMaximaDesembolso.getTimeInMillis()));                }                //Vamos por el insert en el ROW de consultaLineaCredito                insertRow(newLineaCredito);                setCurrentRow(newLineaCredito);                                            } else {                logger.log(ADFLogger.WARNING, "No se recupero ninguna Lineas Credito");            }        } catch (Exception e) {            e.printStackTrace();            logger.log(ADFLogger.ERROR, e.getMessage().toString());        }        return acuseBHQ;    }    /**     * executeQueryForCollection - overridden for custom java data source support.     */    @Override    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {        super.executeQueryForCollection(qc, params, noUserParams);    }    /**     * hasNextForCollection - overridden for custom java data source support.     */    @Override    protected boolean hasNextForCollection(Object qc) {        boolean bRet = super.hasNextForCollection(qc);        return bRet;    }    /**     * createRowFromResultSet - overridden for custom java data source support.     */    @Override    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);        return value;    }    /**     * getQueryHitCount - overridden for custom java data source support.     */    @Override    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {        long value = super.getQueryHitCount(viewRowSet);        return value;    }    /**     * getCappedQueryHitCount - overridden for custom java data source support.     */    @Override    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);        return value;    }    /**     * Returns the variable value for pIdDesembolso.     * @return variable value for pIdDesembolso     */    public Long getpIdDesembolso() {        return (Long) ensureVariableManager().getVariableValue("pIdDesembolso");    }    /**     * Sets <code>value</code> for variable pIdDesembolso.     * @param value value to bind as pIdDesembolso     */    public void setpIdDesembolso(Long value) {        ensureVariableManager().setVariableValue("pIdDesembolso", value);    }}