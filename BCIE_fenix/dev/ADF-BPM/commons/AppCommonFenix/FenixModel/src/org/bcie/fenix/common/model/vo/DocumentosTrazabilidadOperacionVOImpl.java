package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.util.Calendar;

import java.util.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.DocumentosTrazabilidadOperacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 19 17:36:10 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentosTrazabilidadOperacionVOImpl extends ViewObjectImpl implements DocumentosTrazabilidadOperacionVO {
    
    private static ADFLogger logger = null;
    
    public static final String BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC = "DocumentosTrazabilidadOperacionVOCriteria";
    
    /**
     * This is the default constructor (do not remove).
     */
    public DocumentosTrazabilidadOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for pIdOp.
     * @return bind variable value for pIdOp
     */
    public Long getpIdOp() {
        return (Long) getNamedWhereClauseParam("pIdOp");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOp.
     * @param value value to bind as pIdOp
     */
    public void setpIdOp(Long value) {
        logger.warning(" setpIdOperacion como where clause ->"+value);
        setNamedWhereClauseParam("pIdOp", value);
        executeQuery();
        logger.warning("termino metodo setpIdOperacion  ->");
    }
    
    
    
    public void agregarEvidencias(Long idSolicitud, String instancia) {
        logger.warning("*** Metodo agregarEvidencias VO DocumentosTRazabilidadOperacion");
        logger.log(ADFLogger.TRACE, "Inside agregarEvidencias.");
        FenixAMImpl fenixAM = null;
        
        // Crea una instancia del AM
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        // Obtenemos las evidencias seleccionadas 
        Row[] rowsEvidenciasAgregadas = this.getFilteredRows("seleccion",Boolean.TRUE);
        logger.warning("*** Se han obtenido las evidencias seleccionadas");
        for (Row rowEvidenciaAgregada : rowsEvidenciasAgregadas) {
            logger.warning("*** Ciclio for, Row---->"+rowEvidenciaAgregada);
            // validar "idDocumento" y "idSolicitud" no sean null
            if(rowEvidenciaAgregada.getAttribute("IdDocumento") != null && idSolicitud != null) 
            {
                Long idDocumento = (Long)rowEvidenciaAgregada.getAttribute("IdDocumento");
                // Invocar el metodo "agregarTreEvidenciaCondicion" del TreEvidenciaCondicionVOImpl
                // Agregar los rows a "agregarTreEvidenciaCondicion"
                //logger.warning("***idDocumento--->" + idDocumento);
                //logger.warning("***idSolicitud--->" + idSolicitud);
                //logger.warning("***InstanciaProceso--->" + instancia);
                fenixAM.getTreEvidenciaSolicitudVO().agregarTreEvidenciaSolicitud(idDocumento, idSolicitud, instancia);
            }
        }
    }
    
    public void agregarEvidenciasAdquisicion(Long idAdquisicion) {
        logger.warning("Id Adquisicion: " + idAdquisicion);
        logger.warning("*** Metodo agregarEvidenciasAdquisicion VO DocumentosTRazabilidadOperacion");
        logger.log(ADFLogger.TRACE, "Inside agregarEvidencias.");
        FenixAMImpl fenixAM = null;
        
        // Crea una instancia del AM
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        // Obtenemos las evidencias seleccionadas 
        Row[] rowsEvidenciasAgregadas = this.getFilteredRows("seleccion",Boolean.TRUE);
        logger.warning("*** Se han obtenido las evidencias seleccionadas");
        for (Row rowEvidenciaAgregada : rowsEvidenciasAgregadas) {
            logger.warning("*** Ciclio for, Row---->"+rowEvidenciaAgregada);
            // validar "idDocumento" y "idSolicitud" no sean null
            if(rowEvidenciaAgregada.getAttribute("IdDocumento") != null && idAdquisicion != null) 
            {
                Long idDocumento = (Long)rowEvidenciaAgregada.getAttribute("IdDocumento");
                // Invocar el metodo "agregarTreEvidenciaCondicion" del TreEvidenciaCondicionVOImpl
                // Agregar los rows a "agregarTreEvidenciaCondicion"
                logger.warning("***idDocumento--->" + idDocumento);
                logger.warning("***idAdquisicion--->" + idAdquisicion);
                fenixAM.getTreEvidenciaAdquisicionVO().agregarTreEvidenciaAdquisicion(idDocumento, idAdquisicion);
            }
        }
    }
    
    public void limpiarFilas(){        
          executeEmptyRowSet();        
      }
    
    public void buscarDocumentosTrazabilidadOperacion(String Documento, Integer idTipoDocumento,Integer idProcesoBpm, Timestamp fechaIni, Timestamp fechaFin ){
                logger.warning("***Inicia metodo buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionVOImp***");
                ViewCriteria criteria = null;
                
                try{                                                    
                    this.setvarDocumento(Documento);    
                    logger.warning("**->"+Documento);                                            
                    this.setvarIdTipoDocumento(idTipoDocumento);
                    logger.warning("**->"+idTipoDocumento);                                             
                    this.setvarIdProcesoBpm(idProcesoBpm); 
                    logger.warning("**->"+idProcesoBpm);                                            
                    this.setvarFechaIni(fechaIni);  
                    logger.warning("**->"+fechaIni);
                    
                    Calendar calendar = Calendar.getInstance();
                    calendar.setTime(fechaFin);     
                    calendar.add(Calendar.DAY_OF_YEAR, 1);  
                    Timestamp fecha2 = new Timestamp(calendar.getTimeInMillis());

                    this.setvarFechaFin(fecha2);
                    
                    logger.warning("**->"+calendar.getTime());                                             
                       
                    logger.warning("******* APLICANDO CRITERIA PARA BUSQUEDA DE DOCUMENTOS***********");
                    criteria = getViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);                       
                    applyViewCriteria(criteria);
                    executeQuery();                    
                        
                    logger.warning("***Filas obtenidas: " + getEstimatedRowCount());  
                   
                }catch(Exception e){
                    logger.warning("***Error al ejecutar el criterias x( ");                                    
                    e.printStackTrace();
                }finally{
                    logger.warning("*** -Removiendo criterias aplicadas anteriormente- ***");
                    getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);  
                    //getViewCriteriaManager().removeViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);
                    //executeQuery(); 
                }
              logger.warning("***buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionVOImp");                                  
        }
    
//    public void buscarDocumentosTrazabilidadOperacion(String Documento, Integer idTipoDocumento,Integer idProcesoBpm, Timestamp fechaIni, Timestamp fechaFin ){
//                logger.warning("***Inicia metodo buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionVOImp***");
//                ViewCriteria criteria = null;
//                
//                if(Documento == null && idTipoDocumento == null && idProcesoBpm == null && fechaIni == null && fechaFin==null){
//                    logger.warning("No hay criterios para iniciar la busqueda");
//                }else{                                                                                
//                    try{                                                    
//                        this.setvarDocumento(Documento);    
//                        logger.warning("**->"+Documento);                                            
//                        this.setvarIdTipoDocumento(idTipoDocumento);
//                        logger.warning("**->"+idTipoDocumento);                                             
//                        this.setvarIdProcesoBpm(idProcesoBpm); 
//                        logger.warning("**->"+idProcesoBpm);                                            
//                        this.setvarFechaIni(fechaIni);  
//                        logger.warning("**->"+fechaIni);                                              
//                        this.setvarFechaFin(fechaFin);
//                        logger.warning("**->"+fechaFin);                                             
//                       
//                        logger.warning("******* APLICANDO CRITERIA PARA BUSQUEDA DE DOCUMENTOS***********");
//                        ViewCriteria vc1 = getViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);                       
//                        applyViewCriteria(vc1);
//                        executeQuery();                    
//                        
//                        logger.warning("***Filas obtenidas: " + getEstimatedRowCount());  
//                   
//                    }catch(Exception e){
//                        logger.warning("***Error al ejecutar el criterias x( ");                                    
//                        e.printStackTrace();
//                    }finally{
//                        logger.warning("*** -Removiendo criterias aplicadas anteriormente- ***");
//                        getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);  
//                        //getViewCriteriaManager().removeViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);
//                        //executeQuery(); 
//                    }
//              }
//              logger.warning("***buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionVOImp");                                  
//        }

    /**
     * Returns the variable value for varIdTipoDocumento.
     * @return variable value for varIdTipoDocumento
     */
    public Integer getvarIdTipoDocumento() {
        return (Integer) ensureVariableManager().getVariableValue("varIdTipoDocumento");
    }

    /**
     * Sets <code>value</code> for variable varIdTipoDocumento.
     * @param value value to bind as varIdTipoDocumento
     */
    public void setvarIdTipoDocumento(Integer value) {
        ensureVariableManager().setVariableValue("varIdTipoDocumento", value);
    }

    /**
     * Returns the variable value for varIdProcesoBpm.
     * @return variable value for varIdProcesoBpm
     */
    public Integer getvarIdProcesoBpm() {
        return (Integer) ensureVariableManager().getVariableValue("varIdProcesoBpm");
    }

    /**
     * Sets <code>value</code> for variable varIdProcesoBpm.
     * @param value value to bind as varIdProcesoBpm
     */
    public void setvarIdProcesoBpm(Integer value) {
        ensureVariableManager().setVariableValue("varIdProcesoBpm", value);
    }

    /**
     * Returns the variable value for varDocumento.
     * @return variable value for varDocumento
     */
    public String getvarDocumento() {
        return (String) ensureVariableManager().getVariableValue("varDocumento");
    }

    /**
     * Sets <code>value</code> for variable varDocumento.
     * @param value value to bind as varDocumento
     */
    public void setvarDocumento(String value) {
        ensureVariableManager().setVariableValue("varDocumento", value);
    }

    /**
     * Returns the variable value for varFechaIni.
     * @return variable value for varFechaIni
     */
    public Timestamp getvarFechaIni() {
        return (Timestamp) ensureVariableManager().getVariableValue("varFechaIni");
    }

    /**
     * Sets <code>value</code> for variable varFechaIni.
     * @param value value to bind as varFechaIni
     */
    public void setvarFechaIni(Timestamp value) {
        ensureVariableManager().setVariableValue("varFechaIni", value);
    }

    /**
     * Returns the variable value for varFechaFin.
     * @return variable value for varFechaFin
     */
    public Timestamp getvarFechaFin() {
        return (Timestamp) ensureVariableManager().getVariableValue("varFechaFin");
    }

    /**
     * Sets <code>value</code> for variable varFechaFin.
     * @param value value to bind as varFechaFin
     */
    public void setvarFechaFin(Timestamp value) {
        ensureVariableManager().setVariableValue("varFechaFin", value);
    }
}

