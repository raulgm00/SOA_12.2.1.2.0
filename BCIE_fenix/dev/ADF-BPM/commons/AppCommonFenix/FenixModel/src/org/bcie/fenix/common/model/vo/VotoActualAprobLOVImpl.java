package org.bcie.fenix.common.model.vo;

import java.util.Iterator;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.VotoActualAprobLOV;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 27 11:07:07 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VotoActualAprobLOVImpl extends ViewObjectImpl implements VotoActualAprobLOV {
    
    /**
     * Define Log de la aplicacion
     */
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(VotoActualAprobLOVImpl.class);
    
    /**
     * Define nombre de view criteria para realizar busqueda por Id solicitud aprobacion
     */
    private static final String BUSCAR_POR_ID_SOL_VC = "BuscarPorIdSolicitud";
    
    /**
     * This is the default constructor (do not remove).
     */
    public VotoActualAprobLOVImpl() {
    }
    
    /**
     * Obtiene todos los registros de votacion de una reunion especifica
     * @param listIdUsuarioReunion Valor de Id de Reunion
     */
    public void obtenerVotosReunion(List<UsuarioReunionAprobacionLOVRowImpl> listIdUsuarioReunion){
        
        if(listIdUsuarioReunion == null ||
           listIdUsuarioReunion.size() < 1){
            return;
        }
        
        String concatIdSolicitud = "";
        for(UsuarioReunionAprobacionLOVRowImpl idSolicitud : listIdUsuarioReunion){
            if(idSolicitud.getId() != null){
                if("".equals(concatIdSolicitud)){
                    concatIdSolicitud = idSolicitud.getId().toString();    
                }else{
                    concatIdSolicitud = concatIdSolicitud + "," + idSolicitud.getId().toString();
                }
            }
        }
        obtenerVotosReunion(concatIdSolicitud);
    }
    
    /**
     * Ejecuta View Criteria para obtener los registros de votacion de una reunion especifica
     * @param params contiene cadena de Id's de Usuario reunion.
     */
    private void obtenerVotosReunion(String params){
        
        if(params == null){
            return;
        }
        //Limpia el parametro where
        setWhereClause(null);
        
        setWhereClause("VA_ID_USUARIO_REUNION IN (" + params + ")");
        executeQuery();
        
        setCurrentRow(first());
    }
    
    /**
     * Realiza una busqueda de votos actuales por id de solicitud aprobacion
     * @param idSolicitud contiene id de solicitud aprobacion
     */
    public void buscarPorIdSolicitud(Number idSolicitud){
        
        if(idSolicitud == null){
            return;
        }
        
        //Asigna valor a variable bind
        setpIdSolicitudAprob(idSolicitud);
        
        try{
            ViewCriteria vc = getViewCriteria(BUSCAR_POR_ID_SOL_VC);
            appendViewCriteria(vc);
            executeQuery();
        }catch(Exception e){
            LOGGER.severe("Error al aplicar view criteria: " + BUSCAR_POR_ID_SOL_VC, e);
        }
    }

    /**
     * Returns the variable value for pIdSolicitudAprob.
     * @return variable value for pIdSolicitudAprob
     */
    public Number getpIdSolicitudAprob() {
        return (Number) ensureVariableManager().getVariableValue("pIdSolicitudAprob");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitudAprob.
     * @param value value to bind as pIdSolicitudAprob
     */
    public void setpIdSolicitudAprob(Number value) {
        ensureVariableManager().setVariableValue("pIdSolicitudAprob", value);
    }
    
    /**
     * Devuelve la cantidad de registros de decisiones o votos registrados
     * @return devuelve valor numerico
     */
    public long obtenerCantidadDecisiones(){
        long lngCantidad = getEstimatedRowCount();        
        return lngCantidad;
    }
}

