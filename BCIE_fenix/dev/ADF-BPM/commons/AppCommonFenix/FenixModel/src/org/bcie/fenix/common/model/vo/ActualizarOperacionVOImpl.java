package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.comisionservice.Comision;

import com.bcie.xmlns.comisionservice.ComisionPT;

import java.math.BigDecimal;

import java.math.MathContext;
import java.math.RoundingMode;

import java.sql.SQLException;

import java.sql.Timestamp;

import java.text.DateFormat;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.comisionmo.ConsultarFechaCargoRequestType;
import org.bcie.comisionmo.ConsultarFechaCargoResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ActualizarOperacionVO;
import org.bcie.resultbo.Resultado;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 10 11:34:40 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ActualizarOperacionVOImpl extends ViewObjectImpl implements ActualizarOperacionVO {
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(ActualizarOperacionVOImpl.class);
    
    /**
     * Define nombre de view criteria para realizar busqueda por Id de Termino
     */
    public static final String BUSCAR_POR_ID_VC = "ActualizarOperacionByIdOperacionCriteria";
    
    /**
     * This is the default constructor (do not remove).
     */
    public ActualizarOperacionVOImpl() {
    }
    
    public void buscarOperacionPorId(Number id){
        logger.entering(ActualizarOperacionVOImpl.class.getName(), 
                        "buscarOperacionPorId", 
                        id);
        
        if(id == null){
            return;
        }
        
        setvarIdOperacion(id);
        ViewCriteria vc = null;
        try{
            vc = getViewCriteria(BUSCAR_POR_ID_VC);
            applyViewCriteria(vc);
            executeQuery();
            setCurrentRow(first());            
        }catch(Exception e){
            logger.severe("Error en la ejecucion del view criteria: " + BUSCAR_POR_ID_VC, e);
        }finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_POR_ID_VC);
        }
        
        logger.exiting(TccTerminoVOImpl.class.getName(), 
                       "buscarTerminoPorId");
    }

    @SuppressWarnings("unchecked")
    public Map obtenerTasaFechaFinalizacionEstudios(Long idOperacion){
        logger.warning("Inicia metodo obtenerTasaFechaFinalizacionEstudios con idOperacion: " + idOperacion);
        Map datosTasaOperacion = new HashMap();
        Number idOperacionNumber = null;
        Row row = null;
        Integer esFactible = null;
        Integer idTipoTasa = null;
        String codigoTasaReferencia  = null;
        Number valorTasa = null;
        Number valorSpread = null;
        oracle.jbo.domain.Date fechaFinalizacionEstudios = null;
        
        if(null == idOperacion){
            logger.warning("Parametro idOperacion requerido es NULL.");
            datosTasaOperacion.put("tasaFinalizacionEstudios", null);
            datosTasaOperacion.put("fechaFinalizacionEstudios", null);
            return datosTasaOperacion;
        }
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        if(null != idOperacionNumber){
            buscarOperacionPorId(idOperacionNumber);
            //row = getRow(new Key(new Object[] { idOperacionNumber }));
            logger.warning("Numero de registros :" + this.getEstimatedRowCount());
            row = this.getCurrentRow();
            logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
        }else{
            logger.warning("idOperacion null.");
        }
        
        if(null != row){
            if(null != row.getAttribute("EsFactible")){
                try{
                    esFactible = (Integer) row.getAttribute("EsFactible");
                }catch(Exception e){
                    logger.warning("No se pudo obtener la tasa de esFactible.");
                }
            }else{
                logger.warning("Atributo esFactible es null.");
            }
            
            if(null != row.getAttribute("IdTcaTipoTasa")){
                try{
                    idTipoTasa = (Integer) row.getAttribute("IdTcaTipoTasa");
                }catch(Exception e){
                    logger.warning("No se pudo obtener IdTcaTipoTasa.");
                }
            }else{
                logger.warning("Atributo IdTcaTipoTasa es null.");
            }
            
            if(null != row.getAttribute("CodigoTasaReferencia")){
                try{
                    codigoTasaReferencia = (String) row.getAttribute("CodigoTasaReferencia");
                }catch(Exception e){
                    logger.warning("No se pudo obtener el CodigoTasaReferencia.");
                }
            }else{
                logger.warning("Atributo CodigoTasaReferencia es null.");
            }
            
            if(null != row.getAttribute("ValorTasa")){
                try{
                    valorTasa = (Number) row.getAttribute("ValorTasa");
                }catch(Exception e){
                    logger.warning("No se pudo obtener la tasa de finalizacion de estudios.");
                }
            }else{
                logger.warning("Tasa de finalizacion de estudios es null.");
            }
            
            if(null != row.getAttribute("ValorSpread")){
                try{
                    valorSpread = (Number) row.getAttribute("ValorSpread");
                }catch(Exception e){
                    logger.warning("No se pudo obtener ValorSpread.");
                }
            }else{
                logger.warning("ValorSpread es null.");
            }
            
            if(null != row.getAttribute("FechaFinalizacionEstudios")){                
                try{
                    fechaFinalizacionEstudios =
                        (oracle.jbo.domain.Date) row.getAttribute("FechaFinalizacionEstudios");
                }catch(Exception e){
                    logger.warning("No se pudo obtener la fecha de finalizacion de estudios.", e);
                }
            }else{
                logger.warning("Fecha de finalizacion de estudios es null.");
            }
        }else{
            logger.warning("Row es null.No hay registro de operacion.");
        }
        
        logger.warning("Es factible: " + esFactible);
        logger.warning("Tipo de tasa: " + idTipoTasa);
        logger.warning("Codigo de tasa de referencia: " + codigoTasaReferencia);
        logger.warning("Valor de tasa: " + valorTasa);
        logger.warning("Valor de Spread: " + valorSpread);
        logger.warning("Fecha de finalizacion de estudios: " + fechaFinalizacionEstudios);
        
        datosTasaOperacion.put("esFactible", esFactible);
        datosTasaOperacion.put("idTipoTasa", idTipoTasa);
        datosTasaOperacion.put("codigoTasaReferencia", codigoTasaReferencia);
        datosTasaOperacion.put("valorTasa", valorTasa);
        datosTasaOperacion.put("valorSpread", valorSpread);
        datosTasaOperacion.put("fechaFinalizacionEstudios", fechaFinalizacionEstudios);
        
        logger.warning("Termina metodo obtenerTasaFechaFinalizacionEstudios");
        return datosTasaOperacion;
    }

    /* Utilizar guardarDatosConTasaOperacion */
    @Deprecated
    public Boolean guardarDatosFinalizacionEstudiosOperacion(Long idOperacion){
        logger.warning("Inicia metodo guardarDatosFinalizacionEstudiosOperacion");
        Boolean resultado = Boolean.FALSE;
        Number idOperacionNumber = null;
        Row finalizacionEstudioRow = null;
        Row row = null;
        FenixImplementacionPctAMImpl implementacionPctAMImpl = (FenixImplementacionPctAMImpl) getApplicationModule();
        
        if(null == idOperacion){
            logger.warning("Parametro idOperacion requerido es NULL.");
            return resultado;
        }
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        if(null != idOperacionNumber){
            //row = getRow(new Key(new Object[] { idOperacionNumber }));
            buscarOperacionPorId(idOperacionNumber);
            logger.warning("Numero de registros :" + this.getEstimatedRowCount());
            row = this.getCurrentRow();
            logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
        }else{
            logger.warning("idOperacion null.");
        }
        
        if(null != implementacionPctAMImpl){
            finalizacionEstudioRow = implementacionPctAMImpl.getFinalizacionEstudiosVO().getCurrentRow();
        }else{
            logger.warning("Instancia de implementacioPctAMImpl es NULL.");
        }
        
        if(null != finalizacionEstudioRow){
            BigDecimal tasa = null;
            BigDecimal spreadFinalizacion = null;
            Number valorTasa = null;
            Number spread = null;
            
            try{
                valorTasa = new Number(finalizacionEstudioRow.getAttribute("Tasa").toString());
            }catch(Exception e){
                logger.warning("Error al recuperar valores de tasa.");
            }
            
            try{
                spread = new Number(finalizacionEstudioRow.getAttribute("Spread").toString());
            }catch(Exception e){
                logger.warning("Error al recuperar valores de spread.");
            }
            logger.warning("Tasa: " + valorTasa + ", spread: " + spread);
            
            row.setAttribute("IdTcaTipoTasa", finalizacionEstudioRow.getAttribute("IdTipoTasa"));
            row.setAttribute("CodigoTasaReferencia", finalizacionEstudioRow.getAttribute("CodigoTasaReferencia"));
            row.setAttribute("ValorTasa", valorTasa);
            row.setAttribute("ValorSpread", spread);
            row.setAttribute("FechaFinalizacionEstudios", finalizacionEstudioRow.getAttribute("FechaFinalizacionEstudios"));
            
            logger.warning("IdTcaTipoTasa: " + row.getAttribute("IdTcaTipoTasa"));
            logger.warning("CodigoTasaReferencia: " + row.getAttribute("CodigoTasaReferencia"));
            logger.warning("ValorTasa: " + row.getAttribute("ValorTasa"));
            logger.warning("ValorSpread: " + row.getAttribute("ValorSpread"));
            logger.warning("FechaFinalizacionEstudios: " + row.getAttribute("FechaFinalizacionEstudios"));
            
            try{
                getDBTransaction().commit();
                resultado = Boolean.TRUE;
            }catch(Exception e){
                logger.warning("Error al realizar el commit. Realizando ROLLBACK.", e);
                getDBTransaction().rollback();
            }
        }else{
            logger.warning("Row de finalizacionEstudios es NULL.");
        }
        logger.warning("Termina metodo guardarDatosFinalizacionEstudiosOperacion");
        return resultado;
    }
    
    public Boolean guardarDatosConTasaOperacion(Long idOperacion, String codigoTasa){
        logger.warning("Inicia metodo guardarDatosConTasaOperacion");
        logger.warning("idOperacion: " + idOperacion);
        logger.warning("codigoTasa:" + codigoTasa);
        Boolean resultado = Boolean.FALSE;
        Number idOperacionNumber = null;
        Row finalizacionEstudioRow = null;
        Row row = null;
        FenixImplementacionPctAMImpl implementacionPctAMImpl = (FenixImplementacionPctAMImpl) getApplicationModule();
        
        if(null == idOperacion){
            logger.warning("Parametro idOperacion requerido es NULL.");
            return resultado;
        }
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        if(null != idOperacionNumber){
            //row = getRow(new Key(new Object[] { idOperacionNumber }));
            buscarOperacionPorId(idOperacionNumber);
            logger.warning("Numero de registros :" + this.getEstimatedRowCount());
            row = this.getCurrentRow();
            logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
        }else{
            logger.warning("idOperacion null.");
        }
        
        if(null != implementacionPctAMImpl){
            finalizacionEstudioRow = implementacionPctAMImpl.getFinalizacionEstudiosVO().getCurrentRow();
        }else{
            logger.warning("Instancia de implementacioPctAMImpl es NULL.");
        }
        
        if(null != finalizacionEstudioRow){
            BigDecimal tasa = null;
            BigDecimal spreadFinalizacion = null;
            Number valorTasa = null;
            Number spread = null;
            
            try{
                valorTasa = new Number(finalizacionEstudioRow.getAttribute("Tasa").toString());
            }catch(Exception e){
                logger.warning("Error al recuperar valores de tasa.");
            }
            
            try{
                spread = new Number(finalizacionEstudioRow.getAttribute("Spread").toString());
            }catch(Exception e){
                logger.warning("Error al recuperar valores de spread.");
            }
            logger.warning("Tasa: " + valorTasa + ", spread: " + spread);
            
            row.setAttribute("IdTcaTipoTasa", finalizacionEstudioRow.getAttribute("IdTipoTasa"));
            row.setAttribute("CodigoTasaReferencia", codigoTasa);
            row.setAttribute("ValorTasa", valorTasa);
            row.setAttribute("ValorSpread", spread);
            row.setAttribute("FechaFinalizacionEstudios", finalizacionEstudioRow.getAttribute("FechaFinalizacionEstudios"));
            
            logger.warning("IdTcaTipoTasa: " + row.getAttribute("IdTcaTipoTasa"));
            logger.warning("CodigoTasaReferencia: " + row.getAttribute("CodigoTasaReferencia"));
            logger.warning("ValorTasa: " + row.getAttribute("ValorTasa"));
            logger.warning("ValorSpread: " + row.getAttribute("ValorSpread"));
            logger.warning("FechaFinalizacionEstudios: " + row.getAttribute("FechaFinalizacionEstudios"));
            
            try{
                getDBTransaction().commit();
                resultado = Boolean.TRUE;
            }catch(Exception e){
                logger.warning("Error al realizar el commit. Realizando ROLLBACK.", e);
                getDBTransaction().rollback();
            }
        }else{
            logger.warning("Row de finalizacionEstudios es NULL.");
        }
        logger.warning("Termina metodo guardarDatosConTasaOperacion");
        return resultado;
    }
    
    public Boolean guardarDatosSinTasaOperacion(Long idOperacion){
        logger.warning("Inicia metodo guardarDatosSinTasaOperacion");
        logger.warning("idOperacion: " + idOperacion);
        Boolean resultado = Boolean.FALSE;
        Number idOperacionNumber = null;
        Row finalizacionEstudioRow = null;
        Row row = null;
        FenixImplementacionPctAMImpl implementacionPctAMImpl = (FenixImplementacionPctAMImpl) getApplicationModule();
        
        if(null == idOperacion){
            logger.warning("Parametro idOperacion requerido es NULL.");
            return resultado;
        }
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        if(null != idOperacionNumber){
            //row = getRow(new Key(new Object[] { idOperacionNumber }));
            buscarOperacionPorId(idOperacionNumber);
            logger.warning("Numero de registros :" + this.getEstimatedRowCount());
            row = this.getCurrentRow();
            logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
        }else{
            logger.warning("idOperacion null.");
        }
        
        if(null != implementacionPctAMImpl){
            finalizacionEstudioRow = implementacionPctAMImpl.getFinalizacionEstudiosVO().getCurrentRow();
        }else{
            logger.warning("Instancia de implementacioPctAMImpl es NULL.");
        }
        
        if(null != finalizacionEstudioRow){
            BigDecimal tasa = null;
            BigDecimal spreadFinalizacion = null;
            Number valorTasa = null;
            Number spread = null;
            
            try{
                valorTasa = new Number(finalizacionEstudioRow.getAttribute("Tasa").toString());
            }catch(Exception e){
                logger.warning("Error al recuperar valores de tasa.");
            }
            
            try{
                spread = new Number(finalizacionEstudioRow.getAttribute("Spread").toString());
            }catch(Exception e){
                logger.warning("Error al recuperar valores de spread.");
            }
            logger.warning("Tasa: " + valorTasa + ", spread: " + spread);
            
            row.setAttribute("IdTcaTipoTasa", finalizacionEstudioRow.getAttribute("IdTipoTasa"));
            row.setAttribute("CodigoTasaReferencia", null);
            row.setAttribute("ValorTasa", valorTasa);
            row.setAttribute("ValorSpread", null);
            row.setAttribute("FechaFinalizacionEstudios", finalizacionEstudioRow.getAttribute("FechaFinalizacionEstudios"));
            
            logger.warning("IdTcaTipoTasa: " + row.getAttribute("IdTcaTipoTasa"));
            logger.warning("CodigoTasaReferencia: " + row.getAttribute("CodigoTasaReferencia"));
            logger.warning("ValorTasa: " + row.getAttribute("ValorTasa"));
            logger.warning("ValorSpread: " + row.getAttribute("ValorSpread"));
            logger.warning("FechaFinalizacionEstudios: " + row.getAttribute("FechaFinalizacionEstudios"));
            
            try{
                getDBTransaction().commit();
                resultado = Boolean.TRUE;
            }catch(Exception e){
                logger.warning("Error al realizar el commit. Realizando ROLLBACK.", e);
                getDBTransaction().rollback();
            }
        }else{
            logger.warning("Row de finalizacionEstudios es NULL.");
        }
        logger.warning("Termina metodo guardarDatosSinTasaOperacion");
        return resultado;
    }
    
    public void obtenerRegistroContratoEnvioAlCobro(Long idOperacion){
        logger.warning("Inicia metodo obtenerRegistroContratoEnvioAlCobro");
        Number idOperacionNumber = null;
        
        if(null == idOperacion){
            logger.warning("Parametro idOperacion requerido es NULL.");
            return;
        }
        
        logger.warning("Termina metodo obtenerRegistroContratoEnvioAlCobro");
    }
    
    public Boolean guardarJustificacionEnvio(Long idOperacion, String justificacion, oracle.jbo.domain.Date fechaFlexActual){
        logger.warning("Inicia metodo guardarJustificacionEnvio");
        Boolean resultado = Boolean.FALSE;
        Number idOperacionNumber = null;
        Row row = null;
        
        if(null == idOperacion || null == justificacion){
            logger.warning("Parametros requeridos son NULL.");
            return resultado;
        }
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        if (null != idOperacionNumber) {
            //row = getRow(new Key(new Object[] { idOperacionNumber }));
            buscarOperacionPorId(idOperacionNumber);
            logger.warning("Numero de registros :" + this.getEstimatedRowCount());
            row = this.getCurrentRow();
            logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
        } else {
            logger.warning("idOperacion null.");
        }
        
        if(null != row){
            row.setAttribute("JustificacionEnvio", justificacion);
            row.setAttribute("FechaCalculoInteres", fechaFlexActual);
        }else{
            logger.warning("Row es NULL.");
        }

        logger.warning("Justificacion: " + justificacion);
        logger.warning("fechaFlexActual: " + fechaFlexActual);
        
        if(null != justificacion){
            try{
                getDBTransaction().commit();
                logger.warning("COMMIT realizado con exito.");
                resultado = Boolean.TRUE;
            }catch(Exception e){
                logger.warning("Error al realizar el COMMIT. Realizando ROLLBACK.", e);
                getDBTransaction().rollback();
            }
        }else{
            logger.warning("Justificacion es NULL. No se pudo guardar la justificacion.");
        }
        
        logger.warning("Termina metodo guardarJustificacionEnvio");
        return resultado;
    }
    
    
    public oracle.jbo.domain.Date obtenerFechaFlex(){
        logger.warning("*Inf, inicia metodo obtenerFechaFlex");
         java.util.Date fechaFlex = null;
         oracle.jbo.domain.Date  fechaCargo = null;
        
            FenixAMImpl fenixAM = null;
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();            
            String wsdl = fenixAM.getWsdl(IWsdlLocation.COMISION );
            
            Comision comision = IWsdlLocation.Service.getInstance(Comision.class, wsdl);
            ComisionPT comisionPT = comision.getComision12Bnd();
            logger.warning("*Inf, creado variables de tipo request y response");
            ConsultarFechaCargoRequestType request = new ConsultarFechaCargoRequestType();
            ConsultarFechaCargoResponseType response = null;
            
            request.setIdComision(0);
            
            try{
                java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_FECHA_CARGO);
                response = comisionPT.consultarFechaCargo(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_FECHA_CARGO, horaInicio);
            }catch(Exception e){
                logger.warning("***Error al ejecutar el sevicio de ConsultarFechaCargo : ", e);
            }
            
            if(null != response){
                if(response.getResultado() != null){
                     if(response.getResultado().getResult().value() == "OK"){
                          logger.warning("Respuesta del servicio OK. ");
                           
                            if(response.getFechaCargo() != null ){
                                     XMLGregorianCalendar xcal = response.getFechaCargo();
                                     logger.warning("*Inf, valor recuperado del servicio : "+xcal);
                                     fechaFlex = xcal.toGregorianCalendar().getTime();                                  
                                 
                                 try{                                                                        
                                      java.sql.Date sqlDate = new java.sql.Date(fechaFlex.getTime());                                     
                                      fechaCargo = new oracle.jbo.domain.Date(sqlDate);
                                 }catch(Exception e){
                                     logger.warning("***Error, fallo al convertir java.util.date a oracle.jbo.domain.Date : "+e);
                                 }
                                     logger.warning("*Inf, valor con formato oracle.jbo.domain.Date : "+xcal);                                 
                                 /* 
                                     Row fila = null;
                                    
                                     if(getCurrentRow()!= null ){
                                            fila = getCurrentRow();
                                            fila.setAttribute("FechaInteresesCalculados", fechaCargo);
                                     }else{
                                             logger.warning("*Inf, No se pudo recuperar un Current");
                                         }                                      
                                */
                             }else{
                                logger.warning("***Error, response.getFechaCargo() es resuelto a null ");
                             }                                                    
                     }else{
                             logger.warning("***Error, getResult().value() : "+response.getResultado().getResult().value() );
                         }
                }else{
                        logger.warning("***Error, response.getResultado()  es resuelto a null");
                    }
            }else{
                    logger.warning("***Error, El response es resuelto a null");
                }
            
        logger.warning("Inf, termina metodo obtenerFechaFlex");
        return fechaCargo;
        }
    
    public oracle.jbo.domain.Date obtenerFechaFlexStatic(Long idOperacion) {
        logger.warning("Into obtenerFechaFlexStatic.");
        
        Number idOperacionNumber = null;
        Row row = null;
        oracle.jbo.domain.Date fechaFlexStatic = null;
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        if (null != idOperacionNumber) {
            //row = getRow(new Key(new Object[] { idOperacionNumber }));
            buscarOperacionPorId(idOperacionNumber);
            logger.warning("Numero de registros :" + this.getEstimatedRowCount());
            row = this.getCurrentRow();
            logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
        } else {
            logger.warning("idOperacion null.");
        }
        
        if (null != row.getAttribute("FechaCalculoInteres")) {
        
            fechaFlexStatic = (oracle.jbo.domain.Date) row.getAttribute("FechaCalculoInteres");
        } else {
            logger.log(ADFLogger.WARNING, "No se encuentra atributo Fecha Flex Static");
        }
        
        return fechaFlexStatic;
    }
    
    public oracle.jbo.domain.Date obtenerFechaFlexActual(Long idOperacion) {
        
        oracle.jbo.domain.Date fecha = obtenerFechaFlexStatic(idOperacion);
        
        if (fecha != null) {
            logger.warning("Fecha flex almacenada : " + fecha);
        } else {
            
            fecha = obtenerFechaFlex();
            logger.warning("Fecha flex recuperada de servicio: " + fecha);
        }
        
        return fecha;
    }
    
    /**
     * Returns the variable value for varIdOperacion.
     * @return variable value for varIdOperacion
     */
    public Number getvarIdOperacion() {
        return (Number) ensureVariableManager().getVariableValue("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Number value) {
        ensureVariableManager().setVariableValue("varIdOperacion", value);
    }
    
     public Boolean eligeOperacionFactible(Number idOperacion) {
        logger.log(ADFLogger.WARNING, "Inside eligeOperacionFactible.");
        logger.warning("idOperacion : " + idOperacion);
        Boolean resultado = Boolean.FALSE;
        Row operacionRow = null;
        ViewCriteria criteria = null;
        
        this.executeQuery();
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("ActualizarOperacionByIdOperacionCriteria");
            criteria.ensureVariableManager().setVariableValue("varIdOperacion", idOperacion);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                operacionRow = getCurrentRow();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error al buscar por Id: " + e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("ActualizarOperacionByIdOperacionCriteria");
            //this.executeQuery();
        }
        if (null != operacionRow) {
            setCurrentRow(operacionRow);
            if (null != operacionRow.getAttribute("EsFactible")) {
                resultado = Boolean.TRUE;
            } else {
                logger.log(ADFLogger.WARNING, "Aun no se aplica lo factible a la operacion");
            }
            
            /*Se atiende FNXII-6235*/
            try{
                FenixAMImpl fenixAM = null;
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                Integer idTipoMoneda = null;
                String descripcionMoneda = null;
                idTipoMoneda = fenixAM.getTccTerminoVO().obtenerTipoMonedaMontoFormalizado(Long.valueOf(idOperacion.toString()));
                logger.warning("Valor obtenido idTipoMoneda: " + idTipoMoneda);
                if(null != idTipoMoneda){
                    descripcionMoneda = fenixAM.getTcaTipoMonedaVO().obtenerDescripcionMoneda(idTipoMoneda);
                    logger.warning("Valor obtenido descripcionMoneda: " + descripcionMoneda);
                }else{
                    logger.warning("IdTipoMoneda es NULL. No se pudo recuperar la descripcion de la moneda del monto Formalizado.");
                }
                if(null != descripcionMoneda){
                    operacionRow.setAttribute("CodigoMoneda", descripcionMoneda);
                    logger.warning("Se setea al campo CodigoMoneda el valor de: " + descripcionMoneda);
                }
                else{
                    logger.warning("descripcionMoneda es NULL. No se pudo cargar la Vista de tasas desembolsos flexcube.");
                }
            }catch(Exception e){
                logger.warning("Error al cargar el campo descripcionMoneda en la Vista de tasas desembolsos flexcube");
            }
            /*Finaliza FNXII-6235*/
            
        } else {
            logger.log(ADFLogger.WARNING, "Error no se pudo obtener la operacion");
        }
        logger.warning("Valor obtenido: " + resultado);
        logger.warning("termina metodo de eligeOperacionFactible");
        return resultado;

    }
     
    public Boolean confirmaFactibilidad() {
        logger.log(ADFLogger.WARNING, "Inside confirmaFactibilidad.");
        
        Boolean resultado = Boolean.FALSE;
        Row operacionRow = getCurrentRow();
        
        logger.warning("Numero de rows: " + getEstimatedRowCount());
        
        if (null != operacionRow) {
            
            if (null != operacionRow.getAttribute("EsFactible")) {
                Integer esFactible = (Integer) operacionRow.getAttribute("EsFactible");
                if (esFactible.compareTo(1) == 0) {
                    resultado = Boolean.TRUE;
                }
            } else {
                logger.log(ADFLogger.WARNING, "Aun no se aplica lo factible a la operacion");
            }
        } else {
            logger.log(ADFLogger.WARNING, "El Row es nulo.");
        }
        
        logger.warning("confirmaFactibilidad: " + resultado);
        
        return resultado;
    }
    
    public Boolean actualizarOperacionFactible() {
        logger.warning("Inside actualizarOperacionFactible");
        
        validarCampos(1);
        
        Boolean resultado = Boolean.FALSE;
        try {
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } catch (Exception e) {
            logger.warning("Mensaje: " + e);
        }
        return resultado;
    }
    
    public Boolean actualizarCalculoInteresesCobro() {
        logger.warning("Inside actualizarCalculoInteresesCobro");
        
        validarCampos(2);
        
        Boolean resultado = Boolean.FALSE;
        try {
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } catch (Exception e) {
            logger.warning("Mensaje: " + e);
        }
        return resultado;
    }
    
    public Boolean actualizarOperacion() {
        logger.warning("Inside actualizarOperacion");
        
        Boolean resultado = Boolean.FALSE;
        
        try {
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } catch (Exception e) {
            logger.warning("Mensaje: " + e);
        }
        return resultado;
    }
    
    public void calcularTotal() {
        logger.warning("Inside calcularTotal.");

        Row row = getCurrentRow();
        Number tasaTotal = null;

        if (row != null) {
            Number valorSpread = (Number) row.getAttribute("ValorSpread");
            Number valorTasa = (Number) row.getAttribute("ValorTasa");
            
            logger.warning("valorSpread: " + valorSpread);
            logger.warning("valorTasa: " + valorTasa);
            
            if (valorSpread != null && valorTasa != null) {
                try {
                    tasaTotal = new Number(valorSpread.doubleValue() + valorTasa.doubleValue());
                } catch (SQLException e) {

                }
                row.setAttribute("TasaTotal", tasaTotal);
            } else {
                row.setAttribute("TasaTotal", null);
            }
        }
        
        logger.warning("TasaTotal: " + tasaTotal);
    }
    
    public void validarCampos(Integer accion) {
        logger.warning("Inside validarCampos.");
        
        Row row = getCurrentRow();
        
        //Determinar Factibilidad
        if (accion.compareTo(1) == 0) {
            if (row != null) {
                if (((Integer) row.getAttribute("EsFactible")).compareTo(1) == 0) {
                    row.setAttribute("ValorSpread", null);
                    row.setAttribute("ValorTasa", null);
                    row.setAttribute("FechaCalculoInteres", null);
                    row.setAttribute("CodigoTasaReferencia", null);
                    row.setAttribute("IdTcaTipoTasa", null);
                }
                
                if (((Integer) row.getAttribute("EsFactible")).compareTo(0) == 0 &&
                    ((Integer) row.getAttribute("IdTcaTipoTasa")).compareTo(2) == 0) {
                    row.setAttribute("ValorSpread", null);
                    row.setAttribute("CodigoTasaReferencia", null);
                }
            }
        }
        
        //Calculo de interes y cobro
        if (accion.compareTo(2) == 0) {
            if (row != null) {
                if (((Integer) row.getAttribute("EsFactible")).compareTo(1) == 0 &&
                    ((Integer) row.getAttribute("IdTcaTipoTasa")).compareTo(2) == 0) {
                    row.setAttribute("ValorSpread", null);
                    row.setAttribute("CodigoTasaReferencia", null);
                }
            }   
        }
    }
    
    public Boolean validaCalculoIntereses() {
        logger.warning("Inside validaCalculoIntereses.");
        
        Boolean result = Boolean.FALSE;
        Row operacionRow = getCurrentRow();
        
        if (operacionRow != null) {
            if (operacionRow.getAttribute("EsFactible") != null) {
                if (((Integer) operacionRow.getAttribute("EsFactible")).compareTo(1) == 0) {
                    if (operacionRow.getAttribute("IdTcaTipoTasa") != null &&
                        operacionRow.getAttribute("ValorTasa") != null &&
                        operacionRow.getAttribute("FechaFinalizacionEstudios") != null) {
                        result = Boolean.TRUE;
                    } else {
                        logger.warning("La Operacion no cuenta con datos de Factibilidad.");
                    }
                }
            }
        } else {
            logger.warning("El Row es nulo.");
        }
        
        return result;
    }
    
    
    public Boolean actualizarAplicaLAFT(Long idOperacion, Number aplicaLaft){
        logger.warning("Dentro de actualizarAplicaLAFT");
        logger.warning("idOperacion :"+idOperacion);
        logger.warning("aplicaLaft :"+aplicaLaft);
        
        Boolean resultado = Boolean.FALSE;
        Number idOperacionNumber = null;
        Row row = null;
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.severe("Error en cast idOperacion a Number :"+e);
        }
        
        if (null != idOperacionNumber) {
            buscarOperacionPorId(idOperacionNumber);
            row = this.getCurrentRow();
            logger.warning("Numero de operacion encontrado:" + row.getAttribute("IdOperacion"));
            if(null != row){
                row.setAttribute("AplicaLaft", aplicaLaft);
                getDBTransaction().commit();
                logger.warning("Se realiza commit");
                resultado = Boolean.TRUE;
            }else{
                logger.warning("Row es nulo");
                resultado = Boolean.FALSE;
            }
        } else {
            logger.warning("idOperacion es nulo");
            resultado = Boolean.FALSE;
        }


        logger.warning("Fuera de actualizarAplicaLAFT");
        return resultado;
    }
    
    public void asignarFechaFlexActual(Long idOperacion, oracle.jbo.domain.Date fechaFlexActual){
        logger.warning("Inside asignarFechaFlexActual");
        logger.warning("idOperacion: " + idOperacion);
        logger.warning("fechaFlexActual: " + fechaFlexActual);
        
        Boolean resultado = Boolean.FALSE;
        Number idOperacionNumber = null;
        Row row = null;
        
        try{
            idOperacionNumber = new Number(idOperacion);
        }catch(Exception e){
            logger.warning("No se pudo castear el idOperacion de Long a Number");
        }
        
        row = this.getCurrentRow();
        
        if (row != null) {
            row.setAttribute("FechaCalculoInteres", fechaFlexActual);
            
        } else {
            if (null != idOperacionNumber) {
                //row = getRow(new Key(new Object[] { idOperacionNumber }));
                buscarOperacionPorId(idOperacionNumber);
                logger.warning("Numero de registros :" + this.getEstimatedRowCount());
                row = this.getCurrentRow();
                logger.warning("Numero de operacion :" + row.getAttribute("IdOperacion"));
            } else {
                logger.warning("idOperacion null.");
            }
            
            row.setAttribute("FechaCalculoInteres", fechaFlexActual);
        }
        
        logger.warning("Termina metodo asignarFechaFlexActual");
    }
}

