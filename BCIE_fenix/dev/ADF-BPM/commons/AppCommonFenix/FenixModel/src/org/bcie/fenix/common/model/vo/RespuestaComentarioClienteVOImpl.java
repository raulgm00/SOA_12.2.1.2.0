package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.RespuestaComentarioClienteVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu May 18 16:54:31 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RespuestaComentarioClienteVOImpl extends ViewObjectImpl implements RespuestaComentarioClienteVO {
    /**
     * This is the default co
     * nstructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public RespuestaComentarioClienteVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean eliminarComentarioClienteIndividual(Integer idComentario){
        logger.warning("Inicia metodo eliminarComentarioClienteIndividual... ");
        Boolean resultado = Boolean.TRUE;
        Row filaRecuperada = null;
        ViewCriteria criteria = null;
        Long id = null;

        logger.warning("idComentario recibido: " + idComentario);

        if (idComentario == null) {
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("RespuestaComentarioClienteVOCriteriaById");
            criteria.ensureVariableManager().setVariableValue("varIdComentario", idComentario);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Id: " + filaRecuperada.getAttribute("Id"));
                id = Long.parseLong(filaRecuperada.getAttribute("Id").toString());
                filaRecuperada.setAttribute("BanEstatus", 0);
                try {
                    getDBTransaction().commit();
                    logger.warning("Se hace commit a la DB");
                    resultado = Boolean.TRUE;
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR,
                          "Error al intentar hacer el eliminado logico en el metodo eliminarComentarioClienteIndividual ->: ", e);
                    
                    try{
                        logger.warning("se reintenta commit");
                        getDBTransaction().commit();
                        resultado = Boolean.TRUE;
                    }catch(Exception ex){
                        logger.severe("Error en el segundo commit ",ex);
                        //getDBTransaction().rollback();
                        resultado = Boolean.FALSE;
                    }
                }
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("RespuestaComentarioClienteVOCriteriaById");
                resultado = Boolean.FALSE;
                executeQuery();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->", e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("RespuestaComentarioClienteVOCriteriaById");
        }
        
        logger.warning("Valor a retornar de resultado: " + resultado);
        logger.warning("Finaliza metodo eliminarComentarioClienteIndividual... ");

        return resultado;
    }
    
    public Boolean eliminarComentarioClientePadreCascada(Integer idComentarioPadre){
        logger.warning("Inicia metodo eliminarComentarioClientePadreCascada... ");
        Boolean resultado = Boolean.FALSE;
        ViewCriteria criteria = null;
        int contador = 0;

        logger.warning("idComentarioPadre recibido: " + idComentarioPadre);

        if (idComentarioPadre == null) {
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("RespuestaComentarioClienteVOCriteriaByIdComentarioCliente");
            criteria.ensureVariableManager().setVariableValue("varIdComentarioCliente", idComentarioPadre);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            
            logger.warning("Numero de comentarios encontrados: " + getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0){
                RowSetIterator rowsRespuestaComentarioClienteVo = createRowSetIterator(null);
                rowsRespuestaComentarioClienteVo.reset();
                while (rowsRespuestaComentarioClienteVo.hasNext()) {
                    RespuestaComentarioClienteVORowImpl rowL = (RespuestaComentarioClienteVORowImpl) rowsRespuestaComentarioClienteVo.next();
                    if(rowL.getAttribute("Id") != null){
                        logger.warning("Id de comentario a eliminar: " + rowL.getAttribute("Id"));
                        rowL.setAttribute("BanEstatus", 0);
                        try {
                            getDBTransaction().commit();
                            logger.warning("Se hace commit a la DB");
                            contador++;
                        } catch (Exception e) {
                            logger.log(ADFLogger.ERROR,
                                  "Error al intentar hacer el eliminado logico en el metodo eliminarComentarioClientePadreCascada ->: ", e);
                            try{
                                getDBTransaction().commit();
                                logger.warning("Se hace segundo commit a la DB");
                                contador++;
                            }catch(Exception ex){
                                //getDBTransaction().rollback();
                                logger.severe("Error en segundo commit :"+ex);
                            }
                        }
                    }
                }
                if(contador == getEstimatedRowCount())
                    resultado = Boolean.TRUE;
                else
                    resultado = Boolean.FALSE;
                
                rowsRespuestaComentarioClienteVo.closeRowSetIterator();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->", e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("RespuestaComentarioVOCriteriaByIdComentarioOperacion");
        }
        
        logger.warning("Valor a retornar de resultado: " + resultado);
        logger.warning("Finaliza metodo eliminarComentarioClientePadreCascada... ");

        return resultado;
    }

    /**
     * Returns the variable value for varIdComentario.
     * @return variable value for varIdComentario
     */
    public Integer getvarIdComentario() {
        return (Integer) ensureVariableManager().getVariableValue("varIdComentario");
    }

    /**
     * Sets <code>value</code> for variable varIdComentario.
     * @param value value to bind as varIdComentario
     */
    public void setvarIdComentario(Integer value) {
        ensureVariableManager().setVariableValue("varIdComentario", value);
    }

    /**
     * Returns the variable value for varIdComentarioCliente.
     * @return variable value for varIdComentarioCliente
     */
    public Integer getvarIdComentarioCliente() {
        return (Integer) ensureVariableManager().getVariableValue("varIdComentarioCliente");
    }

    /**
     * Sets <code>value</code> for variable varIdComentarioCliente.
     * @param value value to bind as varIdComentarioCliente
     */
    public void setvarIdComentarioCliente(Integer value) {
        ensureVariableManager().setVariableValue("varIdComentarioCliente", value);
    }
}

