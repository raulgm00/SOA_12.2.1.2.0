package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TccTcaProcesoTareaBpmVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 08 12:23:12 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TccTcaProcesoTareaBpmVOImpl extends ViewObjectImpl implements TccTcaProcesoTareaBpmVO {
    
    /**
     * Define Log de la aplicacion
     */
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(TccTcaProcesoTareaBpmVOImpl.class);
    
    /**
     * Define nombre de view criteria para buscar por Id de Tarea BPM
     */
    public static final String BUSCAR_POR_ID_TAREA_BPM_VC = "BuscarPorIdTareaBpmVC";
    
    /**
     * This is the default constructor (do not remove).
     */
    public TccTcaProcesoTareaBpmVOImpl() {
    }
    
    /**
     * Realiza la busqueda del registro del Proceso BPM filtrando por Id de Tarea
     * @param idTareaBpm contiene id de tarea BPM
     * @return devuelve id del proceso BPM
     */
    public Integer buscarProcesoPorIdTareaBpm(Integer idTareaBpm){
        
        LOGGER.entering(TccTcaProcesoTareaBpmVOImpl.class.getName(), 
                        "buscarProcesoPorIdTareaBpm", 
                        idTareaBpm);
        
        Integer idProcesoBpm = null;
        if(idTareaBpm != null){
            ViewCriteria vc = null;
            try{
                LOGGER.warning("Asigna filtro Id de Tarea: " + idTareaBpm);
                //Asigna Id de Tarea
                setpIdTareaBpm(idTareaBpm);
                
                vc = getViewCriteria(BUSCAR_POR_ID_TAREA_BPM_VC);
                if(vc != null){
                    LOGGER.warning("Aplica view criteria: " + BUSCAR_POR_ID_TAREA_BPM_VC);
                    appendViewCriteria(vc);
                    executeQuery();    
                }else{
                    LOGGER.severe("Error definicion de view criteria no encontrado: " +
                                  BUSCAR_POR_ID_TAREA_BPM_VC);
                }
                
                if(getEstimatedRowCount() > 0){
                    setCurrentRow(first());    
                }else{
                    LOGGER.warning("No se encontraron registros");
                }
            }catch(Exception e){
                LOGGER.severe("Error al realizar la busqueda del Proceso BPM");
            }
            
            if(getCurrentRow() != null){
                TccTcaProcesoTareaBpmVORowImpl currentRow = null;
                currentRow = (TccTcaProcesoTareaBpmVORowImpl) getCurrentRow();
                idProcesoBpm = currentRow.getId();
                
                if(idProcesoBpm != null){
                    LOGGER.warning("Id de Proceso BPM encontrado y devuelto: " + idProcesoBpm);
                }
            }
        }else{
            LOGGER.severe("Error el id de Tarea BPM recibido es NULL");
        }
        
        LOGGER.exiting(TccTcaProcesoTareaBpmVOImpl.class.getName(), 
                       "buscarProcesoPorIdTareaBpm", 
                       idProcesoBpm);
        return idProcesoBpm;
    }

    /**
     * Returns the variable value for pIdTareaBpm.
     * @return variable value for pIdTareaBpm
     */
    public Integer getpIdTareaBpm() {
        return (Integer) ensureVariableManager().getVariableValue("pIdTareaBpm");
    }

    /**
     * Sets <code>value</code> for variable pIdTareaBpm.
     * @param value value to bind as pIdTareaBpm
     */
    public void setpIdTareaBpm(Integer value) {
        ensureVariableManager().setVariableValue("pIdTareaBpm", value);
    }
}

