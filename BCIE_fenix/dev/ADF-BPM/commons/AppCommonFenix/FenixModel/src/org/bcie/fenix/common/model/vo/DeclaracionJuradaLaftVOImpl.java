package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.declaracionjuradaservice.DeclaracionJuradaPT;

import java.io.StringWriter;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.namespace.QName;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.declaracionjuradabo.CalificacionDeRiesgo;
import org.bcie.declaracionjuradabo.DeclaracionJurada;
import org.bcie.declaracionjuradabo.EstadoBusqueda;
import org.bcie.declaracionjuradabo.EstadoDeclaracion;
import org.bcie.declaracionjuradamo.ActualizarDeclaracionJuradaRequestType;
import org.bcie.declaracionjuradamo.ActualizarDeclaracionJuradaResponseType;
import org.bcie.declaracionjuradamo.ConsultarDeclaracionByIdOperacionRequestType;
import org.bcie.declaracionjuradamo.ConsultarDeclaracionByIdOperacionResponseType;
import org.bcie.declaracionjuradamo.CrearDeclaracionJuradaRequestType;
import org.bcie.declaracionjuradamo.CrearDeclaracionJuradaResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.DeclaracionJuradaLaftVO;

import static org.bcie.fenix.common.model.FenixModelConstants.CONVERTIR_MILISEGUNDOS_SEGUNDOS;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.utils.PropertiesUtils;
import org.bcie.operacionbo.Operacion;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 10 20:25:51 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DeclaracionJuradaLaftVOImpl extends ViewObjectImpl implements DeclaracionJuradaLaftVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public DeclaracionJuradaLaftVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowDeclaracionJurada(){
        logger.log(ADFLogger.TRACE, "Inside crearRowDeclaracionJurada.");
        
        this.clearCache(); // Limpiamos VO
        Row row = this.createRow();
        row.setAttribute("IdDeclaracion", new oracle.jbo.domain.Number(-1));
        
        this.insertRowAtRangeIndex(0, row); // Insertamos row en VO
        this.setCurrentRow(row); // Asignamos nuevo row como current
    }
    
    public Map actualizarDeclaracionJurada(Long idOperacion, String ejecutivo) {
        logger.warning("Dentro de actualizarDeclaracionJurada");
        logger.warning("idOperacion :"+idOperacion);
        logger.warning("ejecutivo :"+ejecutivo);
        HashMap<String, ActualizarDeclaracionJuradaResponseType> respuestaServicio = null;
        DeclaracionJuradaPT declaracionJuradaPT = null;
        com.bcie.xmlns.declaracionjuradaservice.DeclaracionJurada declaracionJuradaService = null;
        ActualizarDeclaracionJuradaRequestType request = null;
        ActualizarDeclaracionJuradaResponseType response = null;
        DeclaracionJuradaLaftVORowImpl declaracionJuradaLaftRow = null;
        Operacion operacion = null;
        DeclaracionJurada declaracion = null;
        String mensaje="";
        
        try{
            mensaje = "Obtener row en DeclaracionJuradaLaftVO";
            declaracionJuradaLaftRow = (DeclaracionJuradaLaftVORowImpl) this.getRowAtRangeIndex(0);
            
            if(declaracionJuradaLaftRow != null) {
                
                mensaje = "Conexión a EndPoint de DeclaracionJurada";
                FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                String wsdl = fenixAM.getWsdl(IWsdlLocation.DECLARACION_JURADA);
                
                declaracionJuradaService = IWsdlLocation.Service.getInstance(com.bcie.xmlns.declaracionjuradaservice.DeclaracionJurada.class, wsdl);
                declaracionJuradaPT = declaracionJuradaService.getDeclaracionJurada12Bnd();
                request = new ActualizarDeclaracionJuradaRequestType();
                
                mensaje = "Mapeo de datos";
                operacion = new Operacion();
                operacion.setIdOperacion(idOperacion);
                operacion.setResponsable(ejecutivo);
                request.setOperacion(operacion);
                
                declaracion = this.mappingDeclaracion(declaracionJuradaLaftRow);
                request.setDeclaracionJurada(declaracion);
                request.setPropagarEnLAA(true);

                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ACTUALIZAR_DECLARACION_JURADA);
                response = declaracionJuradaPT.actualizarDeclaracionJurada(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ACTUALIZAR_DECLARACION_JURADA, horaInicio);

                respuestaServicio = new HashMap<String, ActualizarDeclaracionJuradaResponseType>();
                respuestaServicio.put("response", response);
            }
            else {
                logger.log(ADFLogger.WARNING, "DeclaracionJuradaLaftVO en getRowAtRangeIndex(0) es null");  
            }
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception(mensaje + ". Error al actualizar la declaración, favor de intentar más tarde."));
            throw ex;
        }
        logger.warning("Fuera de actualizarDeclaracionJurada");
        return respuestaServicio;
    }
    
    public Map duplicarDeclaracionJurada(Long idOperacion){
        logger.log(ADFLogger.TRACE, "Inside duplicarDeclaracionJurada.");
        Map respuestaServicio = null;
        
        respuestaServicio = crearDeclaracionJuradaLaft(idOperacion, Boolean.TRUE, Boolean.TRUE);
        
        return respuestaServicio;
    }
    
    public Map crearDeclaracionJurada(Long idOperacion, Boolean esPropagarEnLaa){
        logger.log(ADFLogger.TRACE, "Inside crearDeclaracionJurada.");
        Map respuestaServicio = null;
        
        respuestaServicio = crearDeclaracionJuradaLaft(idOperacion, esPropagarEnLaa, Boolean.FALSE);
        
        return respuestaServicio;
    }
    
    private Map crearDeclaracionJuradaLaft(Long idOperacion, Boolean esPropagarEnLaa, Boolean esDuplicarDeclaracion){
        logger.log(ADFLogger.TRACE, "Inside crearDeclaracionJuradaLaft.");
        HashMap<String, CrearDeclaracionJuradaResponseType> respuestaServicio = null;
        DeclaracionJuradaPT declaracionJuradaPT = null;
        com.bcie.xmlns.declaracionjuradaservice.DeclaracionJurada declaracionJuradaService = null;
        CrearDeclaracionJuradaRequestType request = null;
        CrearDeclaracionJuradaResponseType response = null;
        DeclaracionJuradaLaftVORowImpl declaracionJuradaLaftRow = null;
        Operacion operacion = null;
        DeclaracionJurada declaracion = null;
        String mensaje="";
        
        try{
            mensaje = "Obtener row en DeclaracionJuradaLaftVO";
            declaracionJuradaLaftRow = (DeclaracionJuradaLaftVORowImpl) this.getRowAtRangeIndex(0);
            
            if(declaracionJuradaLaftRow != null) {
                
                mensaje = "Conexión a EndPoint de DeclaracionJurada";
                FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                String wsdl = fenixAM.getWsdl(IWsdlLocation.DECLARACION_JURADA);
                
                declaracionJuradaService = IWsdlLocation.Service.getInstance(com.bcie.xmlns.declaracionjuradaservice.DeclaracionJurada.class, wsdl);
                declaracionJuradaPT = declaracionJuradaService.getDeclaracionJurada12Bnd();
                request = new CrearDeclaracionJuradaRequestType();
                
                mensaje = "Mapeo de datos";
                operacion = new Operacion();
                operacion.setIdOperacion(idOperacion);
                request.setOperacion(operacion);
                
                declaracion = this.mappingDeclaracion(declaracionJuradaLaftRow);
                request.setDeclaracionJurada(declaracion);
                
                if(esPropagarEnLaa != null) // PropagarEnLAA debe ir en false para Realizar analisis LAFT fondos externos
                    request.setPropagarEnLAA(esPropagarEnLaa);
                
                if(esDuplicarDeclaracion != null)
                    request.setDuplicarDeclaracion(esDuplicarDeclaracion);

                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CREAR_DECLARACION_JURADA);
                response = declaracionJuradaPT.crearDeclaracionJurada(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CREAR_DECLARACION_JURADA, horaInicio);

                respuestaServicio = new HashMap<String, CrearDeclaracionJuradaResponseType>();
                respuestaServicio.put("response", response);
            }
            else {
                logger.log(ADFLogger.WARNING, "DeclaracionJuradaLaftVO en getRowAtRangeIndex(0) es null");  
            }
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception(mensaje + ". Error al crear la declaración, favor de intentar más tarde."));
            throw ex;
        }
        
        return respuestaServicio;
    }
    
    public Map consultarDeclaracionJurada( String idOperacion) {
        
        logger.warning("Inicia consultarDeclaracionJurada");
        
        logger.warning("Se recibe idOperacion: " + idOperacion);
        
        HashMap<String, Object> respuestaServicio = new HashMap<String, Object>();
        ConsultarDeclaracionByIdOperacionRequestType request = null;
        ConsultarDeclaracionByIdOperacionResponseType response = null;
        com.bcie.xmlns.declaracionjuradaservice.DeclaracionJurada declaracionJuradaService = null;
        DeclaracionJuradaPT declaracionJuradaPT = null;
        DeclaracionJuradaLaftVORowImpl declaracionJuradaLaftRow = null;
        oracle.jbo.domain.Date fechaFirmaDeclaracion = null;
        oracle.jbo.domain.Date fechaVencimiento = null;
        oracle.jbo.domain.Date fechaRecepcion = null;
        Date dateAux = null;
        
        // Limpiamos VO
        this.clearCache();
        
        // Creamos row de captura
        declaracionJuradaLaftRow = (DeclaracionJuradaLaftVORowImpl)this.createRow();
    
        if (idOperacion != null && (idOperacion.trim().length() >0)) {
            FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.DECLARACION_JURADA);
            
            try {
                declaracionJuradaService = IWsdlLocation.Service.getInstance(com.bcie.xmlns.declaracionjuradaservice.DeclaracionJurada.class, wsdl);
                declaracionJuradaPT = declaracionJuradaService.getDeclaracionJurada12Bnd();
            } catch (Exception e) {
                logger.warning("El servicio de declaracion jurada no esta disponible", e);
                String mensajeServicioNoDisponible = PropertiesUtils.getResourceString("SERVICIO_DECLARACION_JURADA_NO_DISPONIBLE");
                
                throw new JboException(mensajeServicioNoDisponible);
            }
            

            try{    
                request = new ConsultarDeclaracionByIdOperacionRequestType();
                request.setIdOperacion(Long.valueOf(idOperacion).longValue());

                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_DECLARACION_JURADA);
                response = declaracionJuradaPT.consultarDeclaracionJurada(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_DECLARACION_JURADA, horaInicio);

                if(response.getDeclaracionJurada() != null){
                    
                    if(response.getDeclaracionJurada().size() > 0){
                        
                        DeclaracionJurada decJur = null;
                        decJur = response.getDeclaracionJurada().get(0);
                        
                        logger.warning("Cantidad de elementos recibidos de Declaracion Jurada: " + 
                                       response.getDeclaracionJurada().size());
                        logger.warning("Se obtiene el primer elemento de la lista de Declaracion Jurada para obtener los datos requeridos");
                        
                        //Setting values from service to the view
                        if(decJur.getIdDeclaracion() != null){
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.IDDECLARACION, decJur.getIdDeclaracion());
                        }else{
                            logger.severe("Error el Id de Declaracion Jurada es NULL");
                        }
                        
                        if(decJur.getCodigoExternoDeclaracion() != null){
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.CODIGOEXTERNODECLARACION, decJur.getCodigoExternoDeclaracion());
                        }
                             
                        if(decJur.getFechaRegistro() != null) {
                            
                            dateAux = decJur.getFechaRegistro().toGregorianCalendar().getTime();
                            fechaRecepcion = new oracle.jbo.domain.Date(new java.sql.Timestamp( dateAux.getTime()));
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.FECHARECEPCION, fechaRecepcion);
                        }
                        
                        if(decJur.getFechaFirmaDeclaracion() != null) {
                            
                            dateAux = decJur.getFechaFirmaDeclaracion().toGregorianCalendar().getTime();
                            fechaFirmaDeclaracion = new oracle.jbo.domain.Date(new java.sql.Timestamp( dateAux.getTime()));   
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.FECHAFIRMADECLARACION, fechaFirmaDeclaracion);
                        }
                        
                        if(decJur.getFechaVencimiento() != null) {
                            
                            dateAux = decJur.getFechaVencimiento().toGregorianCalendar().getTime();
                            fechaVencimiento = new oracle.jbo.domain.Date(new java.sql.Timestamp( dateAux.getTime()));
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.FECHAVENCIMIENTO, fechaVencimiento);
                        }
                                        
                        if(decJur.getEstadoDeclaracion() != null &&
                           decJur.getEstadoDeclaracion().getCodigoEstadoDeclaracion() != null)          
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.ESTADODECLARACION, decJur.getEstadoDeclaracion().getCodigoEstadoDeclaracion());
                        
                        if(decJur.getEstadoBusqueda() != null &&
                           decJur.getEstadoBusqueda().getCodigoEstadoBusqueda() != null)
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.ESTADOBUSQUEDA, decJur.getEstadoBusqueda().getCodigoEstadoBusqueda());
                        
                        if(decJur.getCalificacionDeRiesgo() != null &&
                           decJur.getCalificacionDeRiesgo().getCodigoCalificacionDeRiesgo() != null)
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.RIESGO, decJur.getCalificacionDeRiesgo().getCodigoCalificacionDeRiesgo());
                        
                        if(decJur.getComentarioDeclaracion() != null)               
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.CONCLUSIONANALISISDECLARACION, decJur.getComentarioDeclaracion());
                        
                        if(decJur.getComentarioBusqueda() != null)               
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.CONCLUSIONANALISISBUSQUEDA, decJur.getComentarioBusqueda());
                        
                        if(decJur.getEstadoDeclaracion().isEstadoNoObjecion() == null) {
                            
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.NOOBJECION, "No cuenta con n\u00FAmero de objeci\u00F3n");
                        }
                        else{
                            if(decJur.getEstadoDeclaracion().isEstadoNoObjecion())  
                                declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.NOOBJECION, "SI");
                            else
                                declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.NOOBJECION, "NO");
                        }
                        declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.NOMBRENOOBJECION, decJur.getEstadoDeclaracion().getNombreEstadoNoObjecion());
                        declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.OBJECIONNO, decJur.getEstadoDeclaracion().isEstadoNoObjecion());
                        
                        if(decJur.isElevarAOtraInstancia() != null) 
                            declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.ESELEVAROTRAINSTANCIA, decJur.isElevarAOtraInstancia());
                        
                        // TipoOrigen - se mapea porque hay escenarios en que se crea una nueva DJ, se consulta y después se manda actualizar
                        declaracionJuradaLaftRow.setAttribute(DeclaracionJuradaLaftVORowImpl.TIPOORIGEN, decJur.getTipoOrigen());
                        
                        respuestaServicio.put("idDeclaracion", decJur.getIdDeclaracion());
                        respuestaServicio.put("esElevarOtraInstancia", decJur.isElevarAOtraInstancia());
                        
                    }else{
                        logger.severe("No existen elemento de Declaracion Jurada");
                    }
                }else{
                    logger.severe("Error no se recibio Datos de Declaracion Jurada");
                }
                
                respuestaServicio.put("response", response);
                
            } catch(Exception e){
                logger.log(ADFLogger.ERROR, e.getMessage());
                
                JboException ex = new JboException(e);
                ex.addToExceptions(new Exception("Error al consultar la declaración, favor de intentar más tarde."));
                throw ex;
            }
        }
        
        // Insertamos row de captura 
        // Nota by FCP 18/abril/2016: Se realiza de esta forma, insertRowAtRangeIndex(), en lugar de insertRow(), porque 
        // en posteriores llamadas a este método cambia el index. Por lo tanto, mandaba null si en lugar de getCurrentRow() 
        // se usaba getRowAtRangeIndex(0) -como se hace en LAFT-
        this.insertRowAtRangeIndex(0, declaracionJuradaLaftRow);
        this.setCurrentRow(declaracionJuradaLaftRow);
        
        logger.warning("Finaliza consultarDeclaracionJurada");
        return respuestaServicio;
    }
    
    private DeclaracionJurada mappingDeclaracion(DeclaracionJuradaLaftVORowImpl declaracionJuradaLaftRow) {
        logger.warning("Dentro de mappingDeclaracion");
        logger.warning("row :"+declaracionJuradaLaftRow);
        DeclaracionJurada declaracion = new DeclaracionJurada();
        EstadoDeclaracion estadoDeclaracion = new EstadoDeclaracion(); 
        EstadoBusqueda estadoBusqueda = new EstadoBusqueda();
        CalificacionDeRiesgo riesgo = new CalificacionDeRiesgo();
        GregorianCalendar gregorianDateAux = null;
                       
        // Mapeos de EstadoDeclaracion
        if(declaracionJuradaLaftRow.getEstadoDeclaracion() != null) {
            logger.warning("estadoDeclaracion :"+declaracionJuradaLaftRow.getEstadoDeclaracion());
            // Para el caso de la pantalla Realizar analisis LAFT fondos externos, pregunta norma vigente se tiene que
            // SI = Completa = código 2 y NO = Retornada x hallazgo = código 14
            estadoDeclaracion.setCodigoEstadoDeclaracion(declaracionJuradaLaftRow.getEstadoDeclaracion().intValue());
        }else{
            logger.warning("estadoDeclaracion es nulo");
        }
        
        if((declaracionJuradaLaftRow.getNoObjecion() == null) || declaracionJuradaLaftRow.getNoObjecion().equalsIgnoreCase("NO"))
            estadoDeclaracion.setEstadoNoObjecion(Boolean.FALSE);
        else
            estadoDeclaracion.setEstadoNoObjecion(Boolean.TRUE);
        
        // Mapeos de EstadoBusqueda
        if(declaracionJuradaLaftRow.getEstadoBusqueda() != null) {
            logger.warning("estadoBusqueda :"+declaracionJuradaLaftRow.getEstadoBusqueda());
            // Para el caso de la pantalla Realizar analisis LAFT fondos externos, pregunta contraparte solicitante se tiene que
            // SI = Realizado sin hallazgo = código 1 y NO = Realizado con hallazgo = código 2
            estadoBusqueda.setCodigoEstadoBusqueda(declaracionJuradaLaftRow.getEstadoBusqueda().intValue());
        }else{
            logger.warning("estadoBusqueda es nulo");
        }
        
        // Mapeos de CalificacionDeRiesgo
        if((declaracionJuradaLaftRow.getRiesgo() != null) && (declaracionJuradaLaftRow.getRiesgo().intValue() != 0))
            riesgo.setCodigoCalificacionDeRiesgo(declaracionJuradaLaftRow.getRiesgo().intValue());
        
        // Mapeos de DeclaracionJurada        
        // El -1 se usa en VO de captura cuando no se usa el servicio de consulta DJ para llenar el VO 
        if((declaracionJuradaLaftRow.getIdDeclaracion() != null) 
           && (declaracionJuradaLaftRow.getIdDeclaracion().intValue() != -1) 
           && (declaracionJuradaLaftRow.getIdDeclaracion().intValue() != 0)) 
            declaracion.setIdDeclaracion(declaracionJuradaLaftRow.getIdDeclaracion().longValue()); 
        
        if((declaracionJuradaLaftRow.getCodigoExternoDeclaracion() != null) 
           && (declaracionJuradaLaftRow.getCodigoExternoDeclaracion().intValue() != 0))
            declaracion.setCodigoExternoDeclaracion(declaracionJuradaLaftRow.getCodigoExternoDeclaracion());
        
        if(declaracionJuradaLaftRow.getFechaRecepcion() != null) {
            gregorianDateAux = new GregorianCalendar();
            gregorianDateAux.setTime(declaracionJuradaLaftRow.getFechaRecepcion().getValue());
            
            try{
                declaracion.setFechaRegistro(DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianDateAux));
            } catch(javax.xml.datatype.DatatypeConfigurationException e){
                logger.log(ADFLogger.ERROR, e.getMessage());
            }
        }
        
        if((declaracionJuradaLaftRow.getFechaFirmaDeclaracion() != null) 
            || (declaracionJuradaLaftRow.getFechaFirmaDeclaracionRetorno() != null)) {
            
            gregorianDateAux = new GregorianCalendar();
            
            // En las pantallas Recopilar información OFIC, hay escenarios (ej. cuando es por retorno) en que se muestra 
            // un campo Fecha firma. Ese campo está mapeado a FechaFirmaDeclaracionRetorno y se guarda en FechaFirmaDeclaracion
            if(declaracionJuradaLaftRow.getFechaFirmaDeclaracionRetorno() == null) {
                
                if(declaracionJuradaLaftRow.getFechaFirmaDeclaracion() != null)
                    gregorianDateAux.setTime(declaracionJuradaLaftRow.getFechaFirmaDeclaracion().getValue());
            }
            else{
                gregorianDateAux.setTime(declaracionJuradaLaftRow.getFechaFirmaDeclaracionRetorno().getValue());
            }
            
            try{
                declaracion.setFechaFirmaDeclaracion(DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianDateAux));
            } catch(javax.xml.datatype.DatatypeConfigurationException e){
                logger.log(ADFLogger.ERROR, e.getMessage());
            }
        }
        
        if(declaracionJuradaLaftRow.getFechaVencimiento() != null) {
            gregorianDateAux = new GregorianCalendar();
            gregorianDateAux.setTime(declaracionJuradaLaftRow.getFechaVencimiento().getValue());
            
            try{
                declaracion.setFechaVencimiento(DatatypeFactory.newInstance().newXMLGregorianCalendar(gregorianDateAux));
            } catch(javax.xml.datatype.DatatypeConfigurationException e){
                logger.log(ADFLogger.ERROR, e.getMessage());
            }
        }
        
        // Para el caso de la pantalla Realizar analisis LAFT fondos externos, se llenan los campos 
        // comentarioContraparte/comentarioNorma de forma obligatoria
        if((declaracionJuradaLaftRow.getComentarioContraparte() != null) 
           && (declaracionJuradaLaftRow.getComentarioContraparte().trim().length() > 0))
        
            declaracion.setComentarioBusqueda(declaracionJuradaLaftRow.getComentarioContraparte());
        else
            declaracion.setComentarioBusqueda(declaracionJuradaLaftRow.getConclusionAnalisisBusqueda());
        
        if((declaracionJuradaLaftRow.getComentarioNorma() != null) 
           && (declaracionJuradaLaftRow.getComentarioNorma().trim().length() > 0))
            
            declaracion.setComentarioDeclaracion(declaracionJuradaLaftRow.getComentarioNorma());
        else
            declaracion.setComentarioDeclaracion(declaracionJuradaLaftRow.getConclusionAnalisisDeclaracion());
        
        // Bandera Elevar a otra instancia
        if(declaracionJuradaLaftRow.getEsElevarOtraInstancia() != null) 
            declaracion.setElevarAOtraInstancia(declaracionJuradaLaftRow.getEsElevarOtraInstancia());
        
        // Atributo TipoOrigen
        if(declaracionJuradaLaftRow.getTipoOrigen() != null){
            logger.warning("tipoOrigen :"+declaracionJuradaLaftRow.getTipoOrigen());
            declaracion.setTipoOrigen(declaracionJuradaLaftRow.getTipoOrigen());
        }else{
            logger.warning("tipoOrigen es nulo, set value :"+FenixModelConstants.TIPO_ORIGEN_NUEVA);
            declaracion.setTipoOrigen(FenixModelConstants.TIPO_ORIGEN_NUEVA);
        }
        
        declaracion.setEstadoDeclaracion(estadoDeclaracion);
        declaracion.setEstadoBusqueda(estadoBusqueda);
        declaracion.setCalificacionDeRiesgo(riesgo);
        logger.warning("Fuera de mappingDeclaracion");
        return declaracion;
    }
    
    public StringWriter writeXMLRequest(Object request, Class requestClass) throws JAXBException {
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(requestClass);       
        Marshaller m = context.createMarshaller();
        m.marshal(new JAXBElement(new QName(requestClass.getName()), requestClass, request), writer);        
        return writer;
    }
}

