package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ConsultarLineaCreditoDesembolsoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 28 14:25:00 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarLineaCreditoDesembolsoVOImpl extends ViewObjectImpl implements ConsultarLineaCreditoDesembolsoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultarLineaCreditoDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    @SuppressWarnings("unchecked")
    public Map obtenerFondoLinea(Long idLineaCredito){
        logger.warning("Inicia metodo obtenerFondoLinea");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        Map mapaDatosFondo = new HashMap();
        String idFondo = null;
        String descripcionFondo = null;
        Integer idTipoMoneda = null;
        BigDecimal montoDisponible = null;
        ViewCriteria criteria = null;        
        Row lineaCreditoRow = null;
        
        this.executeQuery();
        
        try{  
            logger.warning("Ejecutando criteria de busqueda de contrato.");
            criteria = this.getViewCriteriaManager().getViewCriteria("ConsultarLineaCreditoPorIdVC");
            criteria.ensureVariableManager().setVariableValue("pIdLineaCredito", idLineaCredito);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        
            logger.warning("Registros de contratos encontrados: " + getEstimatedRowCount());
            if(getEstimatedRowCount() > 0){
                lineaCreditoRow = first();
            }
        }catch(Exception e){
            logger.warning("ERROR al ejecutar el crietria ConsultarLineaCreditoPorIdVC.", e);
        }finally{
            //Eliminamos el ViewCriteria
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarLineaCreditoPorIdVC");
        }
        
        if(null != lineaCreditoRow){
            try{
                idFondo = (String) lineaCreditoRow.getAttribute("Fondo");
            }catch(Exception e){
                logger.warning("Error al castear idFondo");
            }
            if(null != idFondo){
                logger.warning("IdFondo: " + idFondo);
            }else{
                logger.warning("El registro tiene Fondo NULL");
            }
            
            try{
                descripcionFondo = (String) lineaCreditoRow.getAttribute("DescripcionFondo");
            }catch(Exception e){
                logger.warning("Error al castear descripcionFondo");
            }
            if(null != descripcionFondo){
                logger.warning("DescripcionFondo: " + idFondo);
            }else{
                logger.warning("El registro tiene Descripcion de fondo NULL");
            }
            try{
                idTipoMoneda = new Integer(lineaCreditoRow.getAttribute("IdTipoMoneda").toString());
            }catch(Exception e){
                logger.warning("Error al tipo de moneda del monto de la linea.", e);
            }
            if(null != idTipoMoneda){
                logger.warning("idTipoMoneda: " + idTipoMoneda);
            }else{
                logger.warning("El registro tiene IdTipoMoneda NULL");
            }
            try{
                montoDisponible = new BigDecimal(lineaCreditoRow.getAttribute("MontoLinea").toString());
            }catch(Exception e){
                logger.warning("Error al obtener el monto de la linea.", e);
            }
            if(null != montoDisponible){
                logger.warning("MontoLinea: " + montoDisponible);
            }else{
                logger.warning("El registro tiene MontoLinea NULL");
            }
        }else{
            logger.warning("El row es NULL, no se encontró registro de Linea de credito: " + idLineaCredito);
        }
        
        mapaDatosFondo.put("idFondo", idFondo);
        mapaDatosFondo.put("descripcionFondo", descripcionFondo);
        mapaDatosFondo.put("montoDisponible", montoDisponible);
        mapaDatosFondo.put("idTipoMoneda", idTipoMoneda);
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo obtenerFondoLinea con una duracion de: "+tiempo+" segundos");
        return mapaDatosFondo;
    }

    public void setlineaComoCurrent(Long idLineaCredito) {
        logger.warning("Inicia el metodo lineaComoCurrent");
        ViewCriteria criteria = null;

        if (idLineaCredito == null) {
            logger.warning("El parametro requerido idLinea es resuelto a null");
        } else {
            try {
                criteria = this.getViewCriteriaManager().getViewCriteria("ConsultarLineaCreditoPorIdVC");
                criteria.ensureVariableManager().setVariableValue("pIdLineaCredito", idLineaCredito);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                logger.warning("Registros de LineaCredito obtenidos de criteria: " + getEstimatedRowCount());
                if (getEstimatedRowCount() > 0) {
                    logger.warning("Seteando CurrentRow de LineaCredito: " + first().getAttribute("Id"));
                    setCurrentRow(first());
                } else {
                    logger.warning("o se encontro la linea con el id: " + idLineaCredito);
                }
            } catch (Exception e) {
                logger.log(ADFLogger.WARNING, "Error en filtraLineaById ", e);
            } finally {
                this.getViewCriteriaManager().removeApplyViewCriteriaName("LineaCriteria");
            }
        }

        logger.warning("Termina el metodo lineaComoCurrent");
    }
    
    public Integer getRevolvenciaLinea(Long idLinea){
     logger.warning("Inicia el metodo getRevolvenciaLinea");    
      Integer revolvencia = null;
    
     logger.warning("set linea "+idLinea+" como current");
       setlineaComoCurrent(idLinea);
    
         if(getCurrentRow() != null){
             
             revolvencia = (null == getCurrentRow().getAttribute("EsRevolvente"))? null
                         : (Integer)getCurrentRow().getAttribute("EsRevolvente");
             
             logger.warning("Revolvencia recuperada "+revolvencia+" de la linea: "+getCurrentRow().getAttribute("Id"));    
      
         }else{ 
             logger.warning("Importante! no se encontro un Current de la linea de credito");                
         }                        
    
        logger.warning("Termina el metodo getRevolvenciaLinea");
     return revolvencia;
    }

    /**
     * Returns the variable value for pIdLineaCredito.
     * @return variable value for pIdLineaCredito
     */
    public Long getpIdLineaCredito() {
        return (Long) ensureVariableManager().getVariableValue("pIdLineaCredito");
    }

    /**
     * Sets <code>value</code> for variable pIdLineaCredito.
     * @param value value to bind as pIdLineaCredito
     */
    public void setpIdLineaCredito(Long value) {
        ensureVariableManager().setVariableValue("pIdLineaCredito", value);
    }
}

