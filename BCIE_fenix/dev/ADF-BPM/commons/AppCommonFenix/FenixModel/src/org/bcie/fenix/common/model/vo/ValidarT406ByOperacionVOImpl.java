package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.clienteservice.Cliente12BndQSService;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.clientebo.Cliente;
import org.bcie.clientemo.ConsultarClienteResponseType;
import org.bcie.clientemo.ConsultarClientesByIdClienteRequestType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ValidarT406ByOperacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Apr 11 15:55:54 CDT 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ValidarT406ByOperacionVOImpl extends ViewObjectImpl implements ValidarT406ByOperacionVO {
     
    private static ADFLogger logger = null;
     
    public ValidarT406ByOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }



    public Map validarTermino406(Long idOperacion){
        logger.warning("Inicia metodo validarTermino406 para la operacion: "+idOperacion);
       
        Map datos = new HashMap();
        Boolean respuesta = Boolean.TRUE;
        
        
        setpIdOperacion(idOperacion);
        this.executeQuery();
        
        logger.warning("Numero contrapartes encontradas para la operacion: "+getEstimatedRowCount());
        
         if(getEstimatedRowCount() > 0){
              
            this.setRangeSize(-1);
         
            Row[] rows = getAllRowsInRange();
            
            for(Row row: rows){
                   Long idCliente = (Long)row.getAttribute("IdCliente");
                   
                    try{ 
                        if(clienteEnMora(idCliente)){
                            datos.put("clietneEnMora", idCliente);
                            respuesta = Boolean.FALSE; 
                            break;
                        }
                    }catch(Exception e){                    
                        JboException ex = new JboException(e.getMessage());
                        throw ex;
                    } 
            }                        
            
         }else{
             logger.warning("no se encontraron registros de contrapartes para el desembolso, no aplica validacion T406 ");
         }
         
        datos.put("respuesta", respuesta);
        
        
        logger.warning("Termina metodo pasoValidacionTermino406 respuesta: "+respuesta);
        return datos;
    }
    
    
    public Boolean clienteEnMora(Long idCliente){
        logger.warning("inicia metodo consultarClienteByIdCliente");
        boolean respuesta = Boolean.TRUE;
      
        boolean infoMora = Boolean.TRUE;
        boolean infoDeterioro = Boolean.FALSE;
                            
        try{
            FenixAMImpl fenixAM;   
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);
            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            ConsultarClientesByIdClienteRequestType request = new ConsultarClientesByIdClienteRequestType();
            
            request.setIdCliente(idCliente);
            request.setInfoDeterioro(infoDeterioro);
            request.setInfoMora(infoMora);
            
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_CLIENTE);
            ConsultarClienteResponseType response = cliente12BndQSService.getCliente12BndQSPort().consultarByIdCliente(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_CLIENTE, horaInicio);
            
            if(0 < response.getCliente().size() && null != response.getCliente()){                            
                
                Cliente cliente = response.getCliente().get(0);
                logger.warning("Cliente en Mora: "+cliente.isEnMora());                
                
                   respuesta = cliente.isEnMora();                                
                           
            }else{
                logger.warning("ConsultarClienteResponse es resuleto a null, no se puede validar la mora");
            }
            
        }catch(Exception e){
            
            JboException ex = new JboException("Error no se pudo validar la Mora del cliente: "+idCliente+ " error->" +e.getMessage());
            throw ex;
        } 
        
        return respuesta;
    }
    

    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        setNamedWhereClauseParam("pIdOperacion", value);
    }
}

