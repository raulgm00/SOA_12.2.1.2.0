package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.BigInteger;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import java.util.GregorianCalendar;

import java.util.HashMap;
import java.util.Map;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.clientebo.ReservaType;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;

import org.bcie.desembolsobo.Transferencia;
import org.bcie.desembolsomo.PropagarReservaRequestType;
import org.bcie.desembolsomo.PropagarReservaResponseType;
import org.bcie.desembolsomo.PropagarTransferenciaRequestType;
import org.bcie.desembolsomo.PropagarTransferenciaResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.TransferenciaBancariaVO;
import org.bcie.resultbo.Resultado;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 07 12:10:13 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferenciaBancariaVOImpl extends ViewObjectImpl implements TransferenciaBancariaVO {

    private static ADFLogger logger = null;

    public TransferenciaBancariaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    public Row establecerFilaComoActual(Long idTransaccion){
        Row fila = null;
        ViewCriteria criteria = null;

        try {
            criteria = getViewCriteriaManager().getViewCriteria("BuscarByIdTransferenciaBancariaVC");
            criteria.ensureVariableManager().setVariableValue("pIdInstruccion", idTransaccion);
            applyViewCriteria(criteria);
            executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                fila = getCurrentRow();
                logger.warning(" Seteando idTransferencia ->" + fila.getAttribute("Id") + " como current ");
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("BuscarByIdTransferenciaBancariaVC");
                executeQuery();
            }

        } catch (Exception e) {
            logger.log(ADFLogger.WARNING,
                       "*** Error al buscar id transferencia  ->" + e.getClass() + ":" + e.getMessage());
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("BuscarByIdTransferenciaBancariaVC");

        }

        return fila;
    }
  

    

    /** Importante Este metodo ya no se ocupa debido a que se cambio el esquema de BD
     * Este metodo realiza el comit de lo preparado en la VO
     * y actualiza TransferenciasBancariasTablaVO
     *
     * @since 05/11/2016
     * @author Carlos Lopez
     */

    public Boolean comitTransferencia() {
        logger.warning("*** Inicia metodo comitTransferencia");
        Row instruccionCurrent = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();                

        Boolean respuesta = Boolean.FALSE;
        try {
            getDBTransaction().commit();
            respuesta = Boolean.TRUE;
            logger.warning("commit exitoso");
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error al intentar guardar la transferencia ->: ", e);
            try{
                getDBTransaction().commit();
                respuesta = Boolean.TRUE;
                logger.warning("segundo commit exitoso");
            }catch(Exception e1){
                logger.warning("error en el segundo commit de comitTransferencia:"+e1);
            }
        }
       
        gestorDesembolsoAMImpl.getTransferenciasBancariasTablaVO().refrescarTabla();


        logger.warning("*** Termina metodo comitTransferencia");
        return respuesta;
    }
    
    
    public Boolean commitReservaFondos(){
     logger.warning("*Inf, inicia metodo commitReservaFondos");
        Boolean respuesta = Boolean.FALSE;
        try {
            getDBTransaction().commit();
            respuesta = Boolean.TRUE;
        } catch (Exception e) {
            logger.warning("*Inf, rv Ha ocurrido un error al realizar commit reintentando ...");
            try {
                getDBTransaction().commit();
                respuesta = Boolean.TRUE;
            } catch (Exception ex) {
                logger.warning("*Inf, rv Ha ocurrido un error al realizar commit reintentando ...");
                logger.warning("Error al intentar guardar datos a la transferencia ->: ", ex); 
                try {
                    logger.warning("*Se ejecutar rollback para commitReservaFondos");
                    getDBTransaction().commit();
                    respuesta = Boolean.TRUE;
                } catch (Exception exp) {
                    logger.warning("Error al intentar guardar datos a la transferencia ->: ", exp); 
                JboException exception = new JboException("Error al intentar guardar datos a la transferencia ->: " + ex.getMessage());
                throw exception;
            }
            }
            
            
        }
     logger.warning("*Inf, termina metodo commitReservaFondos");      
     return respuesta;
    }
    


    public Boolean commitConsolidarTransferencia(){
        
            Boolean respuesta = Boolean.FALSE;
            try {
                getDBTransaction().commit();
                respuesta = Boolean.TRUE;
                logger.warning("commit exitoso");
            } catch (Exception e) {
                logger.warning("error en commit de commitConsolidarTransferencia:"+e);
                try{
                    getDBTransaction().commit();
                    respuesta = Boolean.TRUE;
                    logger.warning("segundo commit exitoso");
                }catch(Exception e1){
                    logger.log(ADFLogger.ERROR, "Error al intentar guardar la transferencia ->: ", e1);
                    JboException exception = new JboException("Error al intentar guardar datos a la transferencia ->: " + e1.getMessage());
                    throw exception;
                }
            }
            return respuesta;
        }
    
    /**
     * Este metodo establece una transferencia como current mediante su Id, el parametro de la descripcion de la moneda
     * se utiliza para cargar el atributo trancient, ya que este se ocupa para cargar los accesors ligados
     *  - utiliza en reservar fondos
     *
     * @param idTransferencia, descripcionMoneda
     * @since 08/11/2016
     * @author Carlos Lopez
     */

    public Boolean buscarTransferenciaParaReservarFondos(Long idTransferencia, String descripcionMoneda) {
        logger.log(ADFLogger.WARNING, "Inicia metodo buscarTransferenciaParaReservarFondos");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        logger.log(ADFLogger.WARNING, "idTransferencia->" + idTransferencia);
        logger.log(ADFLogger.WARNING, "descripcionMoneda->" + descripcionMoneda);

        if (idTransferencia == null || descripcionMoneda == null) {
            logger.log(ADFLogger.WARNING, "*** Error, no se estan recupeando los parametros necesarios");
            return false;
        }

        Boolean tieneDatosCuenta = Boolean.FALSE;
        Row transferenciaRow = null;
        //transferenciaRow = getRow(new Key(new Object[] { idTransferencia }));
        transferenciaRow = buscarTransferenciaById(idTransferencia);
        if (transferenciaRow != null) {

            transferenciaRow.setAttribute("DescripcionMoneda", descripcionMoneda);
            logger.warning("*** NoCuenta:" + transferenciaRow.getAttribute("NumeroCuenta"));

            if (transferenciaRow.getAttribute("NumeroReserva") != null) {
                tieneDatosCuenta = Boolean.TRUE;
                logger.warning("la transferencia ya tiene datos cuenta NumeroReserva: " +
                               transferenciaRow.getAttribute("NumeroReserva"));
            } else {
                logger.warning("*Inf, NumeroReserva es resulto a null");
            }
            setCurrentRow(transferenciaRow);

            if (getCurrentRow() != null)
                logger.warning("ok transferencia con ID: " + getCurrentRow().getAttribute("Id") + " como current");
            else
                logger.warning("Error el current row en transferencias es resuelto a null");

        } else {
            logger.log(ADFLogger.WARNING, "No se pudo recuperar la transferencia con el ID:" + idTransferencia);
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.log(ADFLogger.WARNING, "Termina metodo buscarTransferenciaParaReservarFondos con una duracion de: "+tiempo+" segundos");
        return tieneDatosCuenta;
    }


    public Long consolidarTransferencias(String cadenaId, Long primerTransferencia, Long contrato, BigDecimal montoTotal) {
        Long idTransferenciaLong = null;
        Integer activo = 1;
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        Map datosObtenidos=new HashMap<String, Object>();
        datosObtenidos=
            gestorDesembolsoAMImpl.getTransferrenciaAConsolidarVO().recuperarTransferencia(primerTransferencia);
        
        if (((Boolean) datosObtenidos.get("respuesta"))){
                logger.warning("Entra al metodo para crear el registro consolidado");
                oracle.jbo.domain.Number idTransferencia = null;
                SequenceImpl seqTransferencia = null;
                seqTransferencia = new SequenceImpl("TRANSFERENCIA_BANCARIA_SEQ", getDBTransaction());
                idTransferencia = seqTransferencia.getSequenceNumber();
                idTransferenciaLong = new Long(idTransferencia.longValue());
                logger.warning("** Nuevo Id generado para la transaccion->" + idTransferenciaLong);
                TransferenciaBancariaVORowImpl fila = (TransferenciaBancariaVORowImpl) createRow();   
                fila.setAttribute(TransferenciaBancariaVORowImpl.ID, idTransferenciaLong);
                fila.setAttribute(TransferenciaBancariaVORowImpl.IDCONTRATODESEMBOLSO, contrato);
                fila.setAttribute(TransferenciaBancariaVORowImpl.REFERENCIAMSJ, cadenaId);
                fila.setAttribute(TransferenciaBancariaVORowImpl.ESCONSOLIDACIONPADRE, activo);
                fila.setAttribute(TransferenciaBancariaVORowImpl.MONTOTRANSFERENCIA, montoTotal);
                fila.setAttribute(TransferenciaBancariaVORowImpl.FECHAREGISTRO, new Date());
                fila.setAttribute(TransferenciaBancariaVORowImpl.BANESTATUS, 1);
                //fila.setAttribute(TransferenciaBancariaVORowImpl.IDINSTRUCCIONPAGO, 2);
                //String instruccion_validada="VALIDADA";
                //fila.setAttribute(TransferenciaBancariaVORowImpl.ESTADOINSTRUCCION, instruccion_validada);
                
                logger.warning("cadenaReferencia "+ cadenaId);
                logger.warning("contrato "+ contrato);
                logger.warning("montoTotal "+ montoTotal);
                
                logger.warning("moneda "+ datosObtenidos.get("moneda"));
                if(null!=datosObtenidos.get("moneda")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.IDTCATIPOMONEDA, 
                                          (Integer) datosObtenidos.get("moneda"));
                    }
                logger.warning("idbanco "+ datosObtenidos.get("idbanco"));
                if(null!=datosObtenidos.get("idbanco")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.IDBANCOTRANSFERENCIA, 
                                          (String) datosObtenidos.get("idbanco"));
                    }    
                logger.warning("nombrebanco "+ datosObtenidos.get("nombrebanco"));
                if(null!=datosObtenidos.get("nombrebanco")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NOMBREBANCOTRANSFERENCIA, 
                                          (String) datosObtenidos.get("nombrebanco"));
                    }
                logger.warning("numcuenta "+ datosObtenidos.get("numcuenta"));
                if(null!=datosObtenidos.get("numcuenta")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NUMEROCUENTA, 
                                          (String) datosObtenidos.get("numcuenta"));
                    }
                logger.warning("nombrecuenta "+ datosObtenidos.get("nombrecuenta"));
                if(null!=datosObtenidos.get("nombrecuenta")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NOMBRECUENTA, 
                                          (String) datosObtenidos.get("nombrecuenta"));
                    }
                logger.warning("numreserva "+ datosObtenidos.get("numreserva"));
                if(null!=datosObtenidos.get("numreserva")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NUMERORESERVA, 
                                          (BigInteger) datosObtenidos.get("numreserva"));
                    }
                logger.warning("idoperacion "+ datosObtenidos.get("idoperacion"));
                if(null!=datosObtenidos.get("idoperacion")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.IDOPERACION, 
                                          (Long) datosObtenidos.get("idoperacion"));
                    }
                logger.warning("tipomensaje "+ datosObtenidos.get("tipomensaje"));
                if(null!=datosObtenidos.get("tipomensaje")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.TIPOMENSAJE, 
                                          (String) datosObtenidos.get("tipomensaje"));
                    }
                logger.warning("tipobenef "+ datosObtenidos.get("tipobenef"));
                if(null!=datosObtenidos.get("tipobenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.TIPOOPCIONBENEF, 
                                          (String) datosObtenidos.get("tipobenef"));
                    }
                logger.warning("numbenef "+ datosObtenidos.get("numbenef"));
                if(null!=datosObtenidos.get("numbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NUMEROCTABENEF, 
                                          (String) datosObtenidos.get("numbenef"));
                    }
                logger.warning("idbenef "+ datosObtenidos.get("idbenef"));
                if(null!=datosObtenidos.get("idbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.IDENTIFICADORBENEF, 
                                          (String) datosObtenidos.get("idbenef"));
                    }
                logger.warning("benefbenef "+ datosObtenidos.get("benefbenef"));
                if(null!=datosObtenidos.get("benefbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.BENEFICIARIOBENEF, 
                                          (String) datosObtenidos.get("benefbenef"));
                    }
                logger.warning("dirbenef "+ datosObtenidos.get("dirbenef"));
                if(null!=datosObtenidos.get("dirbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.DIRECCIONBENEF, 
                                          (String) datosObtenidos.get("dirbenef"));
                    }
                logger.warning("tipobanbenef "+ datosObtenidos.get("tipobanbenef"));
                if(null!=datosObtenidos.get("tipobanbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.TIPOOPCIONBANBENEF, 
                                          (String) datosObtenidos.get("tipobanbenef"));
                    }
                
                
                logger.warning("numbanbenef "+ datosObtenidos.get("numbanbenef"));
                if(null!=datosObtenidos.get("numbanbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NUMEROCTABANBENEF, 
                                          (String) datosObtenidos.get("numbanbenef"));
                    }
                logger.warning("idbanbenef "+ datosObtenidos.get("idbanbenef"));
                if(null!=datosObtenidos.get("idbanbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.IDENTIFICADORBANBENEF, 
                                          (String) datosObtenidos.get("idbanbenef"));
                    }
                logger.warning("benebanbenef "+ datosObtenidos.get("benebanbenef"));
                if(null!=datosObtenidos.get("benebanbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.BENEFICIARIOBANBENEF, 
                                          (String) datosObtenidos.get("benebanbenef"));
                    }
                logger.warning("dirbanbenef "+ datosObtenidos.get("dirbanbenef"));
                if(null!=datosObtenidos.get("dirbanbenef")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.DIRECCIONBANBENEF, 
                                          (String) datosObtenidos.get("dirbanbenef"));
                    }
                
                
                logger.warning("tipointer "+ datosObtenidos.get("tipointer"));
                if(null!=datosObtenidos.get("tipointer")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.TIPOOPCIONBANINTER, 
                                          (String) datosObtenidos.get("tipointer"));
                    }
                logger.warning("numinter "+ datosObtenidos.get("numinter"));
                if(null!=datosObtenidos.get("numinter")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.NUMEROCTABANINTER, 
                                          (String) datosObtenidos.get("numinter"));
                    }
                logger.warning("idinter "+ datosObtenidos.get("idinter"));
                if(null!=datosObtenidos.get("idinter")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.IDENTIFICADORBANINTER, 
                                          (String) datosObtenidos.get("idinter"));
                    }
                logger.warning("beneinter "+ datosObtenidos.get("beneinter"));
                if(null!=datosObtenidos.get("beneinter")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.BENEFICIARIOBANINTER, 
                                          (String) datosObtenidos.get("beneinter"));
                    }
                
                logger.warning("dirinter "+ datosObtenidos.get("dirinter"));
                if(null!=datosObtenidos.get("dirinter")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.DIRECCIONBANINTER, 
                                          (String) datosObtenidos.get("dirinter"));
                    }
                logger.warning("estado "+ datosObtenidos.get("estado"));
                if(null!=datosObtenidos.get("estado")){
                        fila.setAttribute(TransferenciaBancariaVORowImpl.ESTADOINSTRUCCION, 
                                          (String) datosObtenidos.get("estado"));
                    }
                                
                insertRow(fila);    
            
            }
        
        logger.warning("termina metodo de insertar consolidado");
        logger.warning("Valor a retornar " +idTransferenciaLong);
        return idTransferenciaLong;
    }

    public Boolean actualizarTransferencias(Long idConsolidado, Long transferencia) {
        logger.warning("IdTransferencia: " + transferencia);
        logger.warning("idConsolidado: " + idConsolidado);
        Boolean resultado = Boolean.FALSE;
        Integer activo = 1;
        setRangeSize(-1);
        logger.warning("registros encontrados: " + getEstimatedRowCount());
        Row fila = null;
        ViewCriteria criteria = null;
        
        if(transferencia == null){
                logger.warning("*Error,Se requiere el parametro idTransferencia");
            }
        
        try{  
            //executeQuery();
            logger.warning("*Inf ,numero de transferencias actualmente: "+getEstimatedRowCount());
            criteria = getViewCriteriaManager().getViewCriteria("BuscarTransferenciaById");
            criteria.ensureVariableManager().setVariableValue("pIdTransferencia", transferencia);
            applyViewCriteria(criteria);
            executeQuery();
           
            logger.warning("*Inf, Numero de transferencias encontradas : "+getEstimatedRowCount()); 
          
            if(getEstimatedRowCount() > 0){               
                fila = getRowAtRangeIndex(0);
                if(null!=fila){
                        fila.setAttribute("EnConsolidacion", activo);
                        fila.setAttribute("IdConsolidacionPadre", idConsolidado);
                        logger.warning("*Inf, ok se recupero el row transferencuia con un id : "+fila.getAttribute("Id"));
                        resultado=Boolean.TRUE;
                    }
            }else{
                 logger.warning("*Inf, Important! No hay transferencias en la busqueda");
            }
            
        }catch(Exception e){
            logger.warning("***Error al Bucar por IdTransferencia "+e);
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("BuscarTransferenciaById");                
        }                  
        
        return resultado;
    }
    
    
    public Boolean estadoInstruccion(Long idTransferecnias, String estado) {
        logger.warning("estado: " + estado);
        logger.warning("idTransferecnias: " + idTransferecnias);
        Boolean resultado = Boolean.FALSE;
        Integer activo = 1;
        this.executeQuery();
        setRangeSize(-1);
        logger.warning("registros encontrados: " + getEstimatedRowCount());
        Row fila = null;
        ViewCriteria criteria = null;
        
        if(idTransferecnias == null){
                logger.warning("*Error,Se requiere el parametro idTransferencia");
            }
        
        try{  
            //executeQuery();
            logger.warning("*Inf ,numero de transferencias actualmente: "+getEstimatedRowCount());
            criteria = getViewCriteriaManager().getViewCriteria("BuscarTransferenciaById");
            criteria.ensureVariableManager().setVariableValue("pIdTransferencia", idTransferecnias);
            applyViewCriteria(criteria);
            executeQuery();
           
            logger.warning("*Inf, Numero de transferencias encontradas : "+getEstimatedRowCount()); 
          
            if(getEstimatedRowCount() > 0){               
                fila = getRowAtRangeIndex(0);
                if(null!=fila){
                        fila.setAttribute("EstadoInstruccion", estado);
                        if(commitConsolidarTransferencia()){
                                resultado=Boolean.TRUE;
                            }
                    }
            }else{
                 logger.warning("*Inf, Important! No hay transferencias en la busqueda");
            }
            
        }catch(Exception e){
            logger.warning("***Error al Bucar por IdTransferencia "+e);
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("BuscarTransferenciaById");                
        }                  
        
        return resultado;
    }
    
    
    public Boolean actualizarConsolidado(String cuenta, String nombreCuenta, Long transferencia) {
        logger.warning("IdTransferencia: " + transferencia);
        logger.warning("cuenta: " + cuenta);
        logger.warning("nombreCuenta: " + nombreCuenta);
        Boolean resultado = Boolean.FALSE;
        Integer activo = 1;
        setRangeSize(-1);
        logger.warning("registros encontrados: " + getEstimatedRowCount());
        Row fila = null;
        ViewCriteria criteria = null;
        
        if(transferencia == null){
                logger.warning("*Error,Se requiere el parametro idTransferencia");
            }
        
        try{  
            logger.warning("*Inf ,numero de transferencias actualmente: "+getEstimatedRowCount());
            criteria = getViewCriteriaManager().getViewCriteria("BuscarTransferenciaById");
            criteria.ensureVariableManager().setVariableValue("pIdTransferencia", transferencia);
            applyViewCriteria(criteria);
            executeQuery();
           
            logger.warning("*Inf, Numero de transferencias encontradas : "+getEstimatedRowCount()); 
          
            if(getEstimatedRowCount() > 0){               
                fila = getRowAtRangeIndex(0);
                if(null!=fila){
                        fila.setAttribute("NumeroCuenta", cuenta);
                        fila.setAttribute("NombreCuenta", nombreCuenta);
                       // fila.setAttribute("NumeroCuenta1", cuenta);
                       //fila.setAttribute("NombreCuenta1", nombreCuenta);
                        resultado=commitConsolidarTransferencia();
                    }
            }else{
                 logger.warning("*Inf, Important! No hay transferencias en la busqueda");
            }
            
        }catch(Exception e){
            logger.warning("***Error al Bucar por IdTransferencia "+e);
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("BuscarTransferenciaById");                
        }                  
        
        return resultado;
    }

    public Boolean revertirConsolidaciones(Long transferenciaConsolidado) {
        logger.warning("Inside revertirConsolidaciones.");
        
        this.executeQuery();
        logger.warning("Registros encontrados: " + this.getEstimatedRowCount());
        
        Boolean resultado = Boolean.TRUE;
        Long idConsolidado = null;
        Integer esConsolidado = null;
        Long idTransferencia = null;
        Integer ban = 0;
        
        RowSetIterator rowsTrnsferencia = createRowSetIterator(null);
        TransferenciaBancariaVORowImpl transferenciaBancariaVORowImpl = null;
        
        rowsTrnsferencia.reset();
        //Se revierte la consolidacion de las transferencias
        while (rowsTrnsferencia.hasNext()) {
            transferenciaBancariaVORowImpl = (TransferenciaBancariaVORowImpl) rowsTrnsferencia.next();
            if (null != (Long) transferenciaBancariaVORowImpl.getId()) {
                idTransferencia = (Long) transferenciaBancariaVORowImpl.getId();
                if (idTransferencia.compareTo(transferenciaConsolidado) == 0) {
                    transferenciaBancariaVORowImpl.setAttribute(TransferenciaBancariaVORowImpl.BANESTATUS, ban);
                    logger.warning("idTransferencia: " + transferenciaBancariaVORowImpl.getId() + " se aplica eliminacion logica.");
                } else {
                    if (null != (Integer) transferenciaBancariaVORowImpl.getEnConsolidacion()) {
                        esConsolidado = (Integer) transferenciaBancariaVORowImpl.getEnConsolidacion();
                        if (esConsolidado.compareTo(1) == 0) {
                            if (null != (Long) transferenciaBancariaVORowImpl.getIdConsolidacionPadre()) {
                                idConsolidado = (Long) transferenciaBancariaVORowImpl.getIdConsolidacionPadre();
                                if (idConsolidado.compareTo(transferenciaConsolidado) == 0) {
                                    logger.warning("trannsferencia id " + transferenciaBancariaVORowImpl.getId() +
                                                   " aplica eliminacion de consolidacion y de consolidacion padre ");
                                    transferenciaBancariaVORowImpl.setAttribute(TransferenciaBancariaVORowImpl.IDCONSOLIDACIONPADRE, null);
                                    transferenciaBancariaVORowImpl.setAttribute(TransferenciaBancariaVORowImpl.ENCONSOLIDACION, null);
                                }
                            }
                        }

                    }

                }
            }
            logger.warning("idTransferencia: " + transferenciaBancariaVORowImpl.getId());
        }
        rowsTrnsferencia.closeRowSetIterator();
        
        resultado = commitConsolidarTransferencia();
        return resultado;
    }

    public Boolean actualizarTransferencia() {
        Boolean finaliza = Boolean.TRUE;

        try {
            getDBTransaction().commit();
            logger.warning("commit exitoso");
        } catch (Exception e) {
            logger.warning("error en commit en actualizarTransferencia:"+e);
            try{
                getDBTransaction().commit();
                logger.warning("segundo commit exitoso");
            }catch(Exception e1){
                e.printStackTrace();
                logger.warning("Error al realizar Commit", e1);
                finaliza = Boolean.FALSE;
            }
        }
        if (!finaliza) {
            logger.warning("No se pudo actalizar la transferencia");
        }

        return finaliza;
    }

    public Boolean existenTransferenciasRegistradasByIdContrato(Long idContrato) {
        logger.warning("*** Inicia metodo existenTransferenciasRegistradasByIdContrato");

        Boolean existen = Boolean.FALSE;
        ViewCriteria criteria = null;
        
        idContrato = obtenerIdContratoDesembolsoActivo();

        if (idContrato == null) {
            logger.warning("*** El parametro idContrato es requerido para la busqueda");
            return null;
        } else {
            try {
                criteria =
                    getViewCriteriaManager().getViewCriteria("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
                criteria.ensureVariableManager().setVariableValue("pIdContrato", idContrato);
                applyViewCriteria(criteria);
                executeQuery();

                if (getEstimatedRowCount() > 0) {
                    existen = Boolean.TRUE;
                } else {
                    logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                }
            } catch (Exception e) {
                logger.log(ADFLogger.WARNING,
                           "*** Error al existenTransferenciasRegistradasByIdContrato??->" + e.getClass() + ":" +
                           e.getMessage());
            } finally {
                getViewCriteriaManager().removeApplyViewCriteriaName("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
                executeQuery();
            }
        }
        logger.warning("*** Termina metodo existenTransferenciasRegistradasByIdContrato");
        return existen;
    }
    
    public Long obtenerIdContratoDesembolsoActivo(){
        logger.warning("Inicia metodo obtenerIdContratoDesembolsoActivo");
        Long idContrato = null;
        Row row = null;
        
        FenixGestorDesembolsosAMImpl fenixAMImpl = null;
        
        try{
            fenixAMImpl = (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        }catch(Exception e){
            logger.warning("ERROR al crear instancia de FENIXAMIMPL.", e);
        }
        
        if(null != fenixAMImpl){
            try{
                row = fenixAMImpl.getCrearActualizarContratoDesembolsoVO().getCurrentRow();
            }catch(Exception e){
                logger.warning("ERROR al recuperar el row de contrato.", e);
            }
            
            if(null != row){
                try{
                    idContrato = (Long) row.getAttribute("Id");
                }catch(Exception e){
                    logger.warning("ERROR al recuperar el idContrato.", e);
                }
            }else{
                logger.warning("El currentRow de ContratoDesembolsos es NULL.");
            }
        }else{
            logger.warning("Instancia de FENIXAMIMPL es NULL.");
        }
        
        logger.warning("ContratoDesembolso recuperado: " + idContrato);
        logger.warning("Termina metodo obtenerIdContratoDesembolsoActivo");
        return idContrato;
    }

    /**
     * Este metodo ejecuta un servicio para obtener un BHQ de transferencia     
     *    
     * @param idTransferencia
     * @since 08/11/2016
     * @author Carlos Lopez
     */

    public String aplicarTransferencia(Long idTransferencia, String usuario, String instanciaProceso) {
        logger.warning("*Inf, Inicia el metodo aplicarTransferencia ...");
        String codigoBHQTransferencia = null;
        String respuestaServicio=null;
        final String ESTADO_VALIDADA = "VALIDADA";       
        
        logger.warning("*Inf, idTransferencia: "+idTransferencia);
        logger.warning("*Inf, usuario: "+usuario);
        logger.warning("*Inf, instanciaProceso: "+instanciaProceso);
        
        if (null == idTransferencia || null == usuario || null == instanciaProceso) {            
            logger.warning("***Error, no se recibieron todos los parametros necesarios ");
            return null;
        }
                                        
            Long instancia = Long.parseLong(instanciaProceso);

            FenixAMImpl fenixAM = null;
            fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);

            DesembolsoPTSOAP12BindingQSService desembolsoService =
                IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();

            PropagarTransferenciaRequestType request = new PropagarTransferenciaRequestType();
            PropagarTransferenciaResponseType response = null;
            request.setIdTransferencia(idTransferencia);
            request.setEjecutivo(usuario);
            request.setInstanciaProceso(instancia);

            try {
                java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA);
                response = desembolsoPT.propagarTransferencia(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA, horaInicio);
            } catch (Exception e) {
                logger.warning("ERROR al ejecutar servicio obtener el BHQ de la transferencia ", e);
                respuestaServicio = "ERROR al ejecutar el serivcio propagarTransferencia: " + e.getMessage();
            }

                if (null != response){
                    if (response.getResultado() != null && response.getResultado().getResult() != null &&
                        response.getResultado().getResult().value() == "OK") {
                        logger.warning("Respuesta del servicio OK. Obteniendo BHQ de la transferencia");
                        if (null != response.getTransferencia()){

                            Transferencia transferencia = response.getTransferencia();
                            if (transferencia != null && null != transferencia.getBhqTransferencia()) {
                                codigoBHQTransferencia = transferencia.getBhqTransferencia();
                                
                                logger.warning("OK. BHQ Obteniendo de la transferencia->" + codigoBHQTransferencia);
                                
                                 if (codigoBHQTransferencia != null && !codigoBHQTransferencia.isEmpty()) {
                                        logger.warning("El BHQ: " + codigoBHQTransferencia+"se asignara a la transferencia "+idTransferencia);
                                        logger.warning("*Inf, actualizando el estado de la instruccion de pago de la transferencia con id: " + idTransferencia);
                                       
                                            if (estadoInstruccion(idTransferencia, ESTADO_VALIDADA)) {                                               
                                                logger.warning("ok, Se actualizo el estado de la instruccion de la transferencia con id: " + idTransferencia);
                                            }else{                                                
                                                logger.warning("***Error, No se actualizo el estado de la instruccion de la transferencia con id: " + idTransferencia);                                                
                                            }
                                                                                                        
                                 }else{
                                     logger.warning("Error, no se recibio un BHQ de la transferencia");
                                     respuestaServicio = "Error: no se recibió un BHQ de la transferencia";
                                 }
                                
                            }else{
                                logger.warning("Error, no se recibio ningun dato respuesta de la transferencia");
                                respuestaServicio = "Error: no se recibió ningun dato respuesta de la transferencia";
                            }
                        }else{
                            logger.warning("Error el objeto transferencia es null");
                            respuestaServicio = "Error: el objeto transferencia del servicio viene vacío";
                        }
                    }else{
                        logger.warning("El response del servicio de propagarTransferencia devuelve errores");
                        respuestaServicio = "Error: "+response.getResultado().getMessage();
                        
                       /* if(response.getResultado() != null && response.getResultado().getMessage() != null){                            
                            respuestaServicio = " "+response.getResultado().getResult()+" : "+response.getResultado().getMessage();                            
                          }else{                        
                          } 
                       */ 
                    
                    }
                }else{
                    logger.warning("El response del servicio Desembolso devuelve vacio");
                    respuestaServicio = "Error: el response del servicio Desembolso se encuentra vacio";
                }
                
                if (null != respuestaServicio) {
                    JboException exception = new JboException(respuestaServicio);
                    throw exception;
                }
                                                                                    
        logger.warning("EL codigo BHQ del la transferencia: " + codigoBHQTransferencia);
        logger.warning("Termina metodo obtenerCodigoBHQTransferencuaById");
        return codigoBHQTransferencia;
    }


    /**
     * Este metodo ejecuta el servicio para la reservar de los fondos
     * la definicion del servicio es obsoleto se remplazo por reservarFondosService
     * @param 
     * @since 10/11/2016
     * @author Carlos Lopez
     */
    
 
    public String servicioReservarFondos(Long idDesembolso, String usuarioAutoriza, Date fechaRequerido ) {
      logger.warning("Inicia metodo servicioReservarFondos para contrato ->"+idDesembolso);  
      logger.warning("usuarioAutoriza ->"+usuarioAutoriza);   
      logger.warning("fechaRequerido ->"+fechaRequerido);   
      
    String respuesta = null;  
    
            XMLGregorianCalendar fecha = null;             
              try{  
                   GregorianCalendar c = new GregorianCalendar();
                    c.setTime(fechaRequerido);                                     
                     fecha = DatatypeFactory.newInstance().newXMLGregorianCalendar(c);
              }catch(Exception e){
                  e.printStackTrace();
                  } 
                        
            if(idDesembolso == null || usuarioAutoriza == null || fechaRequerido == null){
                respuesta = "No se recuperaron todos los parametros necesarios para ejectar el servicio";
                logger.warning("No se recuperaron todos los parametros necesarios para ejectar el servicio");
                return null;
            } 
            
            FenixAMImpl fenixAM = null;
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();            
            String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);
        
            DesembolsoPTSOAP12BindingQSService desembolsoService =  IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class , wsdl);        
            DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();        
            
            PropagarReservaRequestType request = new PropagarReservaRequestType();
            PropagarReservaResponseType response = null;
            request.setIdDesembolso(idDesembolso);
            request.setUsuarioAutoriza(usuarioAutoriza);
            //request.setFechaRequerido(fecha);           
            
            try{
                java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_PROPAGAR_RESERVA_FONDOS);
                response = desembolsoPT.propagarReserva(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_PROPAGAR_RESERVA_FONDOS, horaInicio);
            }catch(Exception e){
                logger.warning("ERROR al ejecutar servicio prpagar reserva de fondos ", e);
            }
           
            if(null != response){
                if(response.getResultado().getResult().value() == "OK"){
                    logger.warning("Respuesta del servicio OK. ");
                        if(null != response.getResultado()){
                           Resultado resultado = response.getResultado();                                     
                                if(resultado.getMessage() != null){
                                      respuesta = resultado.getMessage().toString();                                      
                                     logger.warning("ok reserva de fondos aplicada");  
                                 }else{
                                         respuesta ="Error en la peticion al servicio popagarFondos, resultado.getMessage() resuelto a null";
                                         logger.warning("Error en la peticion al servicio popagarFondos, resultado.getMessage() resuelto a null");  
                                         //getDBTransaction().rollback();
                                     }                                
                            }else{ 
                              respuesta = "Error en la peticion al servicio popagarFondos, response.getResultado() resuelto a null ";
                            logger.warning("El servicio reservarFondos debuelve un result Error");  
                             // getDBTransaction().rollback();
                          }
                }else{
                   // getDBTransaction().rollback();
                    logger.warning("Respuesta del servicio ERROR. ");                    
                    if(null != response.getResultado()){
                       Resultado resultado = response.getResultado();                                     
                            if(resultado.getMessage() != null){
                                  respuesta = "Servicio popagarFondos dice:-> "+response.getResultado().getResult().value()+" "+resultado.getMessage().toString(); 
                             }else{
                                     respuesta ="Servicio popagarFondos, Response "+response.getResultado().getResult().value()+"resultado.getMessage() resuelto a null";
                                     logger.warning("Error en la peticion al servicio popagarFondos, resultado.getMessage() resuelto a null");  
                                 }                                
                    }else{
                            respuesta = "Response "+response.getResultado().getResult().value()+", response.getResultado() resuelto a null ";
                            logger.warning("El servicio reservarFondos debuelve un respons null");  
                        }
        
                }                      
            }else{
                    respuesta = "Error en la peticion al servicio reservar fondos, response es resuelto a null";
                }
            

         logger.warning("Termina metodo reservarFondos");          
        return respuesta;
    }
    
    /**
     * Este metodo ejecuta el servicio para la reservar de los fondos     
     * @param 
     * @since 15/11/2016
     * @author Carlos Lopez
     */
    public Map reservarFondosService( String usuarioAutoriza, ArrayList<Long>idTransferencia){
       logger.warning("Inicia metodo reservarFondosService con array de transferencias");  
           Map mapaDatosReservaFondo = new HashMap();
            mapaDatosReservaFondo.put("reservoFondos", Boolean.FALSE);
            String respuesta = null; 
            
            if(usuarioAutoriza == null || idTransferencia == null){
                respuesta = "No se recuperaron todos los parametros necesarios para ejectar el servicio";
                logger.warning("No se recuperaron todos los parametros necesarios para ejectar el servicio");
                    mapaDatosReservaFondo.put("reservoFondos", Boolean.FALSE);
                    mapaDatosReservaFondo.put("mensaje", respuesta);
                return mapaDatosReservaFondo;
            } 
    
      
                FenixAMImpl fenixAM = null;
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();            
                String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);
                
                DesembolsoPTSOAP12BindingQSService desembolsoService =  IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class , wsdl);        
                DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();        
                
                PropagarReservaRequestType request = new PropagarReservaRequestType();
                PropagarReservaResponseType response = null;
                request.setUsuarioAutoriza(usuarioAutoriza);
                
                for(Long transferencia :idTransferencia){
                   request.getIdTransferencia().add(transferencia);
                 }
    
            try{
                java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_PROPAGAR_RESERVA_FONDOS);
                response = desembolsoPT.propagarReserva(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_PROPAGAR_RESERVA_FONDOS, horaInicio);
            }catch(Exception e){
                logger.warning("ERROR al ejecutar servicio prpagar reserva de fondos ", e);
           }
    
            if(null != response){
               if(response.getResultado().getResult().value() == "OK"){
                    logger.warning("Respuesta del servicio OK. ");
                        if(null != response.getResultado()){
                           Resultado resultado = response.getResultado();                                     
                                if(resultado.getMessage() != null){
                                      respuesta = resultado.getMessage().toString();                                      
                                     logger.warning("ok reserva de fondos aplicada");  
                                     mapaDatosReservaFondo.put("reservoFondos", Boolean.TRUE);
                                 }else{
                                         respuesta ="Error en la peticion al servicio popagarFondos, resultado.getMessage() resuelto a null";
                                         logger.warning("Error en la peticion al servicio popagarFondos, resultado.getMessage() resuelto a null");  
                                         mapaDatosReservaFondo.put("mensaje",respuesta);                        
                                         //getDBTransaction().rollback();
                                     }                                
                            }else{ 
                              respuesta = "Error en la peticion al servicio popagarFondos, response.getResultado() resuelto a null ";
                              mapaDatosReservaFondo.put("mensaje",respuesta);                        
                            logger.warning("El servicio reservarFondos debuelve un result Error");  
                            // getDBTransaction().rollback();
                          }
                }else{
                   try{
                            //getDBTransaction().rollback();
                            logger.warning("Respuesta del servicio ERROR. ");                    
                            if(null != response.getResultado()){
                               Resultado resultado = response.getResultado();                                     
                                    if(resultado.getMessage() != null){
                                          respuesta = "Servicio popagarFondos dice: "+response.getResultado().getResult().value()+" "+resultado.getMessage().toString(); 
                                          logger.warning("Error en la peticion al servicio popagarFondos ->"+respuesta);  
                                          mapaDatosReservaFondo.put("mensaje",respuesta);                        
                                     }else{
                                             respuesta ="Servicio popagarFondos, Response "+response.getResultado().getResult().value()+"resultado.getMessage() resuelto a null";
                                             logger.warning("Error en la peticion al servicio popagarFondos, resultado.getMessage() resuelto a null");  
                                             mapaDatosReservaFondo.put("mensaje",respuesta);
                                             
                                         }                                
                            }else{
                                    respuesta = "Response "+response.getResultado().getResult().value()+", response.getResultado() resuelto a null ";
                                    logger.warning("El servicio reservarFondos debuelve un respons null");  
                                    mapaDatosReservaFondo.put("mensaje",respuesta);                        
                                }  
                   
                   }catch(Exception e){
                       logger.warning("*Inf, Error Servicio popagarFondos ->:"+e);  
                   }
                   
                } 
               
               
            }else{
                    mapaDatosReservaFondo.put("mensaje",respuesta);
                    respuesta = "Error en la peticion al servicio reservar fondos, response es resuelto a null";
                }

        return mapaDatosReservaFondo;
        }



    public Boolean guardarDatosCuentaTransferenciaCurrent(String usuarioAutoriza){
       logger.warning("*Inf, inicia el metodo guardarDatosCuentaTransferenciaCurrent");
        
         ArrayList<Long> transferencias = new  ArrayList<Long>();
            Boolean respuestaComit = Boolean.FALSE;
            Boolean reservoFondos = Boolean.FALSE;
            String mensajeError = "";
            
            if(getCurrentRow() != null){
               
             Row row = getCurrentRow(); 
             Long idTransferencia = (Long)row.getAttribute("Id");
             logger.warning("*Inf, transferencia current: "+idTransferencia);
         //guarda los datos de la cuenta en la base
               respuestaComit =  (Boolean)commitReservaFondos();
            if(respuestaComit){
                   transferencias.add(idTransferencia);
                //ejecuta el servicio de reserva de fondos
                     Map mapaRespuestaReservarFondo = new HashMap();  
                     
                   logger.warning("*Inf, se guardaron datos cuenta se procede a ejecutar el servicio ");  
                     
                     try{
                            mapaRespuestaReservarFondo = (Map)reservarFondosService(usuarioAutoriza, transferencias);                   
                            reservoFondos = (mapaRespuestaReservarFondo.get("reservoFondos") == null)? Boolean.FALSE
                                          : (Boolean)mapaRespuestaReservarFondo.get("reservoFondos");
                         
                            mensajeError = (mapaRespuestaReservarFondo.get("mensaje") == null)? "Error reservarFondosService"
                                         :  mapaRespuestaReservarFondo.get("mensaje").toString() ;
                                
                     }catch(Exception e){
                          logger.warning("***Error , ocuirrio un error al ejecutar metodo reservarFondosService : "+e);
                          mensajeError = ""+e;
                          throw new JboException(mensajeError);
                      }
                     
                     
                     
                    if(reservoFondos){ 
                         logger.warning("ok la reserva de los fondos se realizo exitosamente");                        
                    }else{
                          logger.warning("** Error, no se guardaran los datos cuenta de la transferencia, el servicio fallo");
                            
                            row.setAttribute("IdBancoTransferencia", null);
                            row.setAttribute("NombreBancoTransferencia", null);
                            row.setAttribute("NombreCuenta", null);
                            row.setAttribute("NumeroCuenta", null);
                            commitReservaFondos();
                         
                           throw new JboException(mensajeError);
                        
                        }
               }
            
            
            }else{
                    logger.warning("***Error, Important! no hay un current en la vo de transferencias Bancarias");
                }
            
            
            logger.warning("termina el metodo guardarDatosCuentaTransferenciaCurrent");
        return reservoFondos;
        }

    /**
     * Este metodo sirve para agregarle datos de la cuenta nostro a las transferencias de un contrato de desembolso,
     *  siempre y cuando no tengan ya datos asignados
     * -Se ocupa en la tarea de Reservar Fondos
     *
     * @param idContrato, codigoBanco, nombreBanco, nombreCuenta, numCuenta
     * @since 08/11/2016
     * @author Carlos Lopez
     */

    public Boolean agregarDatosCuantaAllTransferencias(Long idContrato, String codigoBanco, String nombreBanco,String nombreCuenta, String numCuenta, String usuarioAutoriza){
           logger.log(ADFLogger.WARNING, "Inicia metodo agregarDatosCuantaParaReservaFondo contrato: "+idContrato); 
           logger.warning("idContrato :"+idContrato);
           logger.warning("codigoBanco :"+codigoBanco);
           logger.warning("nombreBanco :"+nombreBanco);
           logger.warning("nombreCuenta :"+nombreCuenta);
           logger.warning("numCuenta :"+numCuenta);
           logger.warning("usuarioAutoriza :"+usuarioAutoriza);
           
           
           ArrayList<Long> transferencias = new  ArrayList<Long>();      
           Row fila = null;
           Boolean reservoFondos = Boolean.FALSE;
           ViewCriteria criteria = null;
           String moneda = "";
           Long idTransferenciaActual = null;
           String mensajeError = "";
           
           if(getCurrentRow() == null ){
                   logger.warning("***Error no hay un current en transferenciaBancariaVO, no se podra recuperar la moneda");
                   throw new JboException("Error no se encotro transferencia");
           }else{               
                    moneda = getCurrentRow().getAttribute("DescripcionMoneda").toString();
                    idTransferenciaActual = (null == getCurrentRow().getAttribute("Id"))? null 
                                          : (Long)getCurrentRow().getAttribute("Id");
               }
           
                     
           try {
               criteria = getViewCriteriaManager().getViewCriteria("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
               criteria.ensureVariableManager().setVariableValue("pIdContrato", idContrato);
               applyViewCriteria(criteria);
               executeQuery();
               
               }catch(Exception e) {
                   logger.log(ADFLogger.WARNING,  "*** Error  ->" + e);
               } 
               
               logger.warning("Numero de transferencias encontradas: " + getEstimatedRowCount());
               
               

               if (getEstimatedRowCount() > 0) {

                   RowSetIterator iter = createRowSetIterator(null);
                   TransferenciaBancariaVORowImpl row = null;
                                                
                   while (iter.hasNext()) {
                       row = (TransferenciaBancariaVORowImpl) iter.next();
                                                                               
                               logger.warning("Revisando Transferencia->"+row.getAttribute("Id")+" del contrato->"+idContrato);
                               logger.warning("idContrato->"+row.getAttribute("IdContratoDesembolso")+" NumeroCuenta->"+row.getAttribute("NumeroCuenta"));
                                      
                                   Long contrato = (row.getAttribute("IdContratoDesembolso") == null)? -1L 
                                                 : (Long)row.getAttribute("IdContratoDesembolso");
                                   
                   if(row.getAttribute("NumeroReserva") == null  && idContrato.compareTo(contrato)== 0  ){
                           logger.warning("Se asociaran datos cuanta a transferencia: " + row.getAttribute("Id"));
                           
                           transferencias.add((Long)row.getAttribute("Id"));
                           
                           logger.warning("moneda :"+moneda);
                           row.setAttribute("DescripcionMoneda", moneda);
                           logger.warning("codigoBanco :"+codigoBanco);
                           row.setAttribute("IdBancoTransferencia", codigoBanco);
                           logger.warning("codigoBanco en row :"+row.getAttribute("IdBancoTransferencia"));
                           row.setAttribute("NombreBancoTransferencia", nombreBanco);
                           row.setAttribute("NombreCuenta", nombreCuenta);
                           row.setAttribute("NumeroCuenta", numCuenta);
                           
                       } else {
                            logger.warning("La Transferencia: "+row.getAttribute("Id")+" No sera afectada,");                                    
                       }
                   }                
                   iter.closeRowSetIterator();   
                   logger.warning("Registros a  propagar: " +transferencias.size());
                   if(transferencias.size()>0){
                           if(commitReservaFondos()){
                              
                               // se ejecuta el servicio para la reserva de fondos  
                                  Row transferenciaRow = null;              
                                  Map mapaRespuestaReservarFondo = new HashMap();  
                                  
                                    try{      
                                          mapaRespuestaReservarFondo = (Map)reservarFondosService(usuarioAutoriza, transferencias);
                                          
                                                 reservoFondos = (mapaRespuestaReservarFondo.get("reservoFondos") == null)? Boolean.FALSE
                                                               : (Boolean)mapaRespuestaReservarFondo.get("reservoFondos");     
                                        
                                                   mensajeError = (mapaRespuestaReservarFondo.get("mensaje") == null)? "Error reservarFondosService"
                                                                :  mapaRespuestaReservarFondo.get("mensaje").toString() ;
                                         
                                   }catch(Exception e){
                                        logger.warning("***Error , ocuirrio un error al ejecutar metodo reservarFondosService : "+e);
                                        mensajeError = ""+e;
                                        throw new JboException(mensajeError);
                                    }
                                          
                                          if(reservoFondos){
                                              logger.warning("ok la reserva de los fondos se realizo exitosamente");                        
                                          }else{
                                              logger.warning("*** Error el servicio de reserva de fondos fallo");                            
                                              for(Long id : transferencias){                                              
                                                      transferenciaRow = getRow(new Key(new Object[] { id }));
                                                      if (transferenciaRow != null) {                               
                                                          fila = transferenciaRow;                               
                                                              logger.warning("se eliminaran los datos cuenta para la transferencia: "+id);          
                                                              fila.setAttribute("IdBancoTransferencia", null);
                                                              fila.setAttribute("NombreBancoTransferencia", null);
                                                              fila.setAttribute("NombreCuenta", null);
                                                              fila.setAttribute("NumeroCuenta", null);                                                
                                                             }else{
                                                                  logger.warning("***Error, no se pudo eliminar datos cuenta para la transferencia: "+id);                                                                
                                                              }                      
                                                     }
                                                 commitReservaFondos();
                                                 throw new JboException(mensajeError);                                  
                                             }
                                          
                               }
                       }
                   else{
                       mensajeError="Todas las transferencias ya cuenta con un número de reserva";
                           throw new JboException(mensajeError); 
                       }
                
               
               } else {
                   logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                   getViewCriteriaManager().removeApplyViewCriteriaName("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
                   executeQuery();
               }

          
               getViewCriteriaManager().removeApplyViewCriteriaName("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
           
                   
          Row transferenciaRow = getRow(new Key(new Object[] { idTransferenciaActual }));
           if (transferenciaRow != null) {                               
               fila = transferenciaRow;                               
                   logger.warning("seteando current transferencia: "+idTransferenciaActual);                            
                   fila.setAttribute("DescripcionMoneda", moneda);    
                   setCurrentRow(fila);
                  }
                      
           logger.log(ADFLogger.WARNING, "Termina metodo agregarDatosCuantaParaReservaFondo");
           
         return reservoFondos;
       }
    
    
    /**
     * Este metodo sirve para saber si todas las transferencias de un contrato de desembolso
     * tienen numero reserva
     *
     * @param idContrato
     * @since 15/11/2016
     * @modify 22/11/2016 by Carlos Lopez
     * @return Boolean respuesta
     * @author Carlos Lopez
     */
    public Boolean verificarReservaContrato(Long idContrato){
         logger.log(ADFLogger.WARNING, "inicia metodo verificarReservaContrato");
          Boolean respuesta = Boolean.TRUE;
            
            ViewCriteria criteria = null;

            try {
                criteria = getViewCriteriaManager().getViewCriteria("buscarTransferenciasSinReservaVC");
                criteria.ensureVariableManager().setVariableValue("pIdContrato", idContrato);
                applyViewCriteria(criteria);
                executeQuery();
                logger.warning("Numero de transferencias del contrato "+idContrato+": " + getEstimatedRowCount());

                if (getEstimatedRowCount() > 0) {
                     respuesta = Boolean.FALSE;
                              
                } else {
                    logger.warning("Noy hay transferencias en el contrato son datos cuenta");
                    getViewCriteriaManager().removeApplyViewCriteriaName("buscarTransferenciasSinDatosCuentaByContratoVC");
                    executeQuery();
                }

            } catch (Exception e) {
                logger.log(ADFLogger.WARNING,  "*** Error al buscar id transferencia  ->" + e.getClass() + ":" + e.getMessage());
            } finally {
                getViewCriteriaManager().removeApplyViewCriteriaName("buscarTransferenciasSinDatosCuentaByContratoVC");

            }
           logger.log(ADFLogger.WARNING, "Termina metodo verificarReservaContrato");
         return respuesta;
        }

    public Boolean eliminarNumReservaATransacciones(Long idContrato){
        logger.log(ADFLogger.WARNING, "Inicia metodo eliminarNumReservaATransacciones");
         Boolean respuesta = Boolean.FALSE;
            ViewCriteria criteria = null;
            try {
                criteria = getViewCriteriaManager().getViewCriteria("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
                criteria.ensureVariableManager().setVariableValue("pIdContrato", idContrato);
                applyViewCriteria(criteria);
                executeQuery();
                logger.warning("Numero de transferencias encontradas: " + getEstimatedRowCount());

                if (getEstimatedRowCount() > 0) {

                    RowSetIterator iter = createRowSetIterator(null);
                    TransferenciaBancariaVORowImpl row = null;
                                                 
                    while (iter.hasNext()) {
                        row = (TransferenciaBancariaVORowImpl) iter.next();                                                                                                        
                              logger.warning("idContrato: "+row.getAttribute("IdContratoDesembolso")+" NumeroReserva transferencia: "+row.getAttribute("NumeroReserva"));
                               row.setAttribute("NumeroReserva", null);                                    
                        } 
                    iter.closeRowSetIterator();
                    logger.warning("Numero de reservas actualizado realizando commit");  
                            try {
                                getDBTransaction().commit();
                                respuesta = Boolean.TRUE;    
                                logger.warning("commit exitoso");
                            } catch (Exception e) {
                                logger.warning("error en commit en eliminarNumReservaATransacciones:"+e);
                                    try{
                                        getDBTransaction().commit();
                                        respuesta = Boolean.TRUE;    
                                        logger.warning("segundo commit exitoso");
                                    }catch(Exception e1){
                                        logger.warning("Error al intentar guardar la transferencia ->: " + e1.getMessage());
                                    }
                            }   
                       
                }else{
                        logger.warning("El contrato no tiene transferencias asignadas");
                        getViewCriteriaManager().removeApplyViewCriteriaName("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
                        executeQuery();
                    }

            }catch(Exception e) {
                logger.log(ADFLogger.WARNING,  "*** Error  ->" + e.getClass() + ":" + e.getMessage());
            } finally {
                getViewCriteriaManager().removeApplyViewCriteriaName("ExistenTransferenciasRegistradasByIdContratoVOCriteria");
            }  
            logger.log(ADFLogger.WARNING, "Termina metodo eliminarNumReservaATransacciones");
        return respuesta;  
        }



    public Row obtenerTransferenciaActual(){
        logger.warning( "*Inf, Inicia metodo obtenerTransferenciaActual");
        Row fila = null;
        
        if(getCurrentRow() != null ){
            fila = getCurrentRow();
        }else{
             logger.warning("*Inf, !Important no se encontro un Current en TransferenciaBancariaVO");
            }

        logger.warning( "Termina metodo obtenerTransferenciaActual");
        return fila;
        }



    /** --------------- Accesors ------------------------**/

    /**
     * Returns the variable value for pIdInstruccion.
     * @return variable value for pIdInstruccion
     */
    public Long getpIdInstruccion() {
        return (Long) ensureVariableManager().getVariableValue("pIdInstruccion");
    }

    /**
     * Sets <code>value</code> for variable pIdInstruccion.
     * @param value value to bind as pIdInstruccion
     */
    public void setpIdInstruccion(Long value) {
        ensureVariableManager().setVariableValue("pIdInstruccion", value);
    }

    /**
     * Returns the variable value for pIdContrato.
     * @return variable value for pIdContrato
     */
    public Long getpIdContrato() {
        return (Long) ensureVariableManager().getVariableValue("pIdContrato");
    }

    /**
     * Sets <code>value</code> for variable pIdContrato.
     * @param value value to bind as pIdContrato
     */
    public void setpIdContrato(Long value) {
        ensureVariableManager().setVariableValue("pIdContrato", value);
    }
    
    /*
     * 19/04/2017 se cambia el metodo de aplicar consolidacion ya desde la vista se puede obtener la instruccion de pago
     * este cambio solo se afecta al metodo y se va a copiar el mismo codigo que aplicar transferencia
     */

    public Boolean aplicarConsolidacion(Long consolidado, String usuario, String instanciaProceso) {
        logger.warning("inside aplicarConsolidacion.");
        logger.warning("consolidado " + consolidado);
        logger.warning("usuario " + usuario);
        logger.warning("instanciaProceso " + instanciaProceso);
        Boolean resultado = Boolean.FALSE;       
        String estadoValidada=FenixModelConstants.ESTADO_VALIDADA;
        String codigoBHQTransferencia = null;
        String respuestaServicio=null;
        
        if (null == consolidado && null== usuario && null==instanciaProceso) {
            logger.warning("Parametro idTransferencia requerido es NULL");
            return null;
        }
        
        Long instancia = Long.parseLong(instanciaProceso);

        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);

        DesembolsoPTSOAP12BindingQSService desembolsoService =
            IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
        DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();

        PropagarTransferenciaRequestType request = new PropagarTransferenciaRequestType();
        PropagarTransferenciaResponseType response = null;
        request.setIdTransferencia(consolidado);
        request.setEjecutivo(usuario);
        request.setInstanciaProceso(instancia);

        try {
            java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA);
            response = desembolsoPT.propagarTransferencia(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA, horaInicio);
        } catch (Exception e) {
            logger.warning("ERROR al ejecutar servicio obtener el BHQ de la transferencia ", e);
            respuestaServicio = "ERROR al ejecutar el serivcio propagarTransferencia: " + e.getMessage();
        }

        if (null != response){
            if (response.getResultado() != null && response.getResultado().getResult() != null &&
                response.getResultado().getResult().value() == "OK") {
                logger.warning("Respuesta del servicio OK. Obteniendo BHQ de la transferencia");
                if (null != response.getTransferencia()){

                    Transferencia transferencia = response.getTransferencia();
                    if (transferencia != null && null != transferencia.getBhqTransferencia()) {
                        codigoBHQTransferencia = transferencia.getBhqTransferencia();
                        
                        logger.warning("OK. BHQ Obteniendo de la transferencia->" + codigoBHQTransferencia);
                        if (codigoBHQTransferencia != null && !codigoBHQTransferencia.isEmpty()) {
                            logger.warning("seteando BHQ a la transferencia->" + codigoBHQTransferencia);
                            resultado=Boolean.TRUE;

                            FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
                            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                            if(null != fenixAMImpl){
                                gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
                                
                                if(null != gestorDesembolsosAMImpl){
                                    if (estadoInstruccion(consolidado, estadoValidada)) {
                                        resultado=Boolean.TRUE;
                                        logger.warning("Se actualiza el estado de la instruccion de la transferencia con id: " + consolidado);
                                    }else{
                                        resultado=Boolean.FALSE;
                                        logger.warning("No se actualiza el estado de la instruccion de la transferencia con id: " + consolidado);
                                        respuestaServicio = "No se actualiza el estado de la instruccion de la transferencia con id: " + consolidado;
                                    }
                                    
                                }else{
                                    resultado=Boolean.FALSE;
                                    logger.warning("La instancia de gestorDesembolsosAMImpl es NULL.");
                                }
                            }else{
                                logger.warning("La instancia de fenixAMImpl es NULL.");
                            }
                        }else{
                            logger.warning("Error, no se recibio un BHQ de la transferencia");
                            respuestaServicio = "Error: no se recibió un BHQ de la transferencia";
                        }
                    }else{
                        logger.warning("Error, no se recibio ningun dato respuesta de la transferencia");
                        respuestaServicio = "Error: no se recibió ningun dato respuesta de la transferencia";
                    }
                }else{
                    logger.warning("Error el objeto transferencia es null");
                    respuestaServicio = "Error: el objeto transferencia del servicio viene vacío";
                }
            }else{
                logger.warning("El response del servicio Desembolso_utilidades devuelve errores");
                respuestaServicio = "Error: el response del servicio propagarTransferencia devuelve errores. ";

                if (response.getResultado() == null || (response.getResultado().getResult() != null &&
                     response.getResultado().getResult().value().equalsIgnoreCase("ERROR"))) {
                    logger.log(ADFLogger.WARNING, "Error propagarTransferencia.");

                    if (response.getResultado().getMessage() != null) {
                        respuestaServicio += "Message: " + response.getResultado().getMessage() + ". ";
                    }

                    if (response.getResultado().getError() != null && response.getResultado().getError().getErrorCode() != null) {
                        respuestaServicio += "Code Error: " + response.getResultado().getError().getErrorCode() + ". ";
                    }

                    if (response.getResultado().getError() != null && response.getResultado().getError().getErrorDescription() != null) {
                        respuestaServicio += "Message Error: " + response.getResultado().getError().getErrorDescription();
                    }
                }
            }
        }else{
            logger.warning("El response del servicio Desembolso devuelve vacio");
          //  respuestaServicio = "Error: el response del servicio Desembolso se encuentra vacio";
        }
        
        if (null != respuestaServicio) {
            JboException exception = new JboException(respuestaServicio);
            throw exception;
        }
        logger.warning("EL codigo BHQ del la transferencia: " + codigoBHQTransferencia);
        logger.warning("resultado del proceso: " + resultado);
        logger.warning("Termina metodo aplicarConsolidacion");
        return resultado;
    }
    
    
    public Row buscarTransferenciaById(Long idTransferencia){
            logger.warning("*Inf, Inicia metodo buscarTransferenciaById  ID: "+idTransferencia); 
            double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
            TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

            Row fila = null;
            ViewCriteria criteria = null;
            
            if(idTransferencia == null){
                    logger.warning("*Error,Se requiere el parametro idTransferencia");
                return null;
                }
            
            try{  
                executeQuery();
                logger.warning("*Inf ,numero de transferencias actualmente: "+getEstimatedRowCount());
                criteria = getViewCriteriaManager().getViewCriteria("BuscarTransferenciaById");
                criteria.ensureVariableManager().setVariableValue("pIdTransferencia", idTransferencia);
                applyViewCriteria(criteria);
                executeQuery();
               
                logger.warning("*Inf, Numero de transferencias encontradas : "+getEstimatedRowCount()); 
              
                if(getEstimatedRowCount() > 0){               
                    fila = first();
                    logger.warning("*Inf, ok se recupero el row transferencuia con un id : "+fila.getAttribute("Id"));
                }else{
                     logger.warning("*Inf, Important! No hay transferencias en la busqueda");
                }
                
            }catch(Exception e){
                logger.warning("***Error al Bucar por IdTransferencia "+e);
            }finally{
               getViewCriteriaManager().removeApplyViewCriteriaName("BuscarTransferenciaById");                
            }                  

            TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
            tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
            logger.warning("*Inf, Termina metodo buscarTransferenciaById con una duracion de: "+tiempo+" segundos");
            return fila;
        }
    
    public void refreshCampos(Long idTransferencia, String descripcionMoneda) {
        logger.warning("idTransferencia: " + idTransferencia);
        logger.warning("descripcionMoneda: " + descripcionMoneda);
        
        Row transferenciaBancariaRow = null;
        ViewCriteria criteria = null;
        
        if (idTransferencia != null) {
            try {
                executeQuery();
                logger.warning("*Inf ,numero de transferencias actualmente: " + getEstimatedRowCount());
                criteria = getViewCriteriaManager().getViewCriteria("BuscarTransferenciaById");
                criteria.ensureVariableManager().setVariableValue("pIdTransferencia", idTransferencia);
                applyViewCriteria(criteria);
                executeQuery();

                logger.warning("*Inf, Numero de transferencias encontradas : " + getEstimatedRowCount());

                if (getEstimatedRowCount() > 0) {
                    setCurrentRow(first());
                    
                    transferenciaBancariaRow = getCurrentRow();
                    
                    transferenciaBancariaRow.setAttribute("DescripcionMoneda", descripcionMoneda);
                    logger.warning("NumeroCuenta: " + transferenciaBancariaRow.getAttribute("NumeroCuenta"));
                    logger.warning("NumeroReserva: " + transferenciaBancariaRow.getAttribute("NumeroReserva"));
                } else {
                    logger.warning("No existe tranferencia en la busqueda.");
                }

            } catch (Exception e) {
                logger.warning("Error al buscar por IdTransferencia " + e);
            } finally {
                getViewCriteriaManager().removeApplyViewCriteriaName("BuscarTransferenciaById");
            }
        }
    }


    public Row getTransferenciaCurrent(){
        logger.warning("*Inf, inicia metodo getTransferenciaCurrent");
        Row transferenciaRow = null;
        
         if(getCurrentRow() != null)
             transferenciaRow = getCurrentRow();
        
        return transferenciaRow;
    }
    
    public void setValueClaveNombreBanco(){        
        logger.warning("*Inf, inicia metodo getTransferenciaCurrent");
        Row transferenciaRow = null;
        
        if(getCurrentRow() != null){
            
            transferenciaRow = getCurrentRow();
        
            String claveBanco = (transferenciaRow.getAttribute("IdBancoTransferencia") == null )
                               ? "" : (String)transferenciaRow.getAttribute("IdBancoTransferencia");
            
            String nombreBaco = (transferenciaRow.getAttribute("NombreBancoTransferencia") == null )
                               ? "" : (String)transferenciaRow.getAttribute("NombreBancoTransferencia");
                        
            transferenciaRow.setAttribute("ClaveNombreBanco", claveBanco+" "+nombreBaco);
        
        }else{
            logger.warning("*Inf, no se encontro una transferencia Current");
        }
        
        logger.warning("*Inf, termian el metodo getTransferenciaCurrent");
    }


    /**
     * Returns the variable value for pIdTransferencia.
     * @return variable value for pIdTransferencia
     */
    public Long getpIdTransferencia() {
        return (Long) ensureVariableManager().getVariableValue("pIdTransferencia");
    }

    /**
     * Sets <code>value</code> for variable pIdTransferencia.
     * @param value value to bind as pIdTransferencia
     */
    public void setpIdTransferencia(Long value) {
        ensureVariableManager().setVariableValue("pIdTransferencia", value);
    }
}

