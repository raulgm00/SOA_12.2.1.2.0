package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.sql.CallableStatement;
import java.sql.ResultSet;

import java.sql.SQLException;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixPrepagoAMImpl;
import org.bcie.fenix.common.model.vo.common.CalcularInteresContratoByIdPrepagoSpVO;
import org.bcie.prepagomo.CalculoInteresPrepagoInteresType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 06 13:55:52 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CalcularInteresContratoByIdPrepagoSpVOImpl extends ViewObjectImpl implements CalcularInteresContratoByIdPrepagoSpVO {
   
    private static ADFLogger logger = null;
   
    public CalcularInteresContratoByIdPrepagoSpVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }            
    }
    
  
    /** Este metodo ejecuta el SP_CALCULO_DE_INTERES y llena la VO con el resul set del SP
    *   @param  idPrepago
    *   @since 06/12/2016
    *   @by Carlos Lopez Orozco
    **/  
    public BigDecimal interesContratoByIdPrepago(Long idPrepago){
        logger.warning("Inf, inicia el metodo ejecutarSPCalculoInteres.");   
            Long id = 1L;            
            BigDecimal interes = null;
           
            logger.warning("Parametro recibido idPrepago : " + idPrepago);
            
            if(idPrepago == null){
                return null;
            }
            
            try 
            { 
                FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                FenixPrepagoAMImpl fenixPrepagoAMImpl =(FenixPrepagoAMImpl) fenixAMImpl.getFenixPrepagoAM();
                
                BigDecimal VIdPrepago = new BigDecimal(idPrepago.toString());
                List<Map<String, Object>> listaIntereses = fenixPrepagoAMImpl.ObtenerInteresesPrepago(VIdPrepago);
                
                for(Map<String, Object>  item : listaIntereses)
                {
                    Map<String, Object> map = new HashMap<String, Object>();
                    String Vcontractdesembolso = item.get("CONTRACT_DESEMBOLSO") != null ?  (String)item.get("CONTRACT_DESEMBOLSO") : null;  
                    BigDecimal Vintereses = item.get("INTERESES") != null ?  (BigDecimal)item.get("INTERESES") : null; 
                    BigDecimal Vidtreprecont = item.get("ID_TRE_PRE_CONT") != null ?  (BigDecimal)item.get("ID_TRE_PRE_CONT") : null; 

                    Row row = this.createRow(); 
                    row.setAttribute("Id",id); 
                    row.setAttribute("ContractDesembolso", Vcontractdesembolso); 
                    row.setAttribute("Interes", Vintereses); 
                    row.setAttribute("Id_tre_pre_count", Vidtreprecont);                  
                    id++;
                    this.insertRow(row); 
                }
                
              Row fila = getRow(new Key(new Object[] {new Long(1L)}));
                if(fila != null){
                   setCurrentRow(fila);
                    interes = (BigDecimal)getCurrentRow().getAttribute("Interes");
                }else{
                    logger.warning("Inf, No se ningun regitro al ejecutar el SP_CALCULO_DE_INTERES");
                }
                
            }catch(Exception error){
                logger.log(ADFLogger.ERROR,"Exception al llenar ObtenerInteresesPrepago : " + error.getMessage());
                throw new JboException(error);
            } 

            logger.warning("Inf, Termina el metodo ejecutarSPCalculoInteres. interes recuperado : " + interes + " del idPrepago : " + idPrepago); 
            return interes;
        }
    
    /**
     * Este metodo para obtener los intereses por contrato, utilizado para la pantalla de envio al cobro
     * Creado por la FNXII-6752
     * @param  idContratoFlexcube
     * @since 13/10/2017
     * @by Jonathan Ruiz
     **/
    public BigDecimal obtenerInteresPorIdContratoFlexcube(String idContratoFlexcube, Timestamp fechaFlexcube) {
        logger.warning("Entrando en obtenerInteresPorIdContratoFlexcube.");
        logger.warning("idContrato: " + idContratoFlexcube);
        logger.warning("fechaFlexcube: " + fechaFlexcube);
        ResultSet rs = null;
        Long id = 1L;
        BigDecimal interes = null;

        if (idContratoFlexcube != null) {
            try {
                String storeProcedure = "{call SP_CALCULO_DE_INTERES_ENV_COB(?,?,?)}";
                CallableStatement callableStatement = null;
                callableStatement = getDBTransaction().createCallableStatement(storeProcedure, 0);
                callableStatement.setString(1, idContratoFlexcube);
                callableStatement.setObject(2, fechaFlexcube);
                callableStatement.registerOutParameter(3, OracleTypes.CURSOR);
                callableStatement.executeUpdate();

                rs = (ResultSet) callableStatement.getObject(3);
                //recuperar el resultado de la ejecuccion del stored procedure

                while (rs.next()) {
                    Row row = this.createRow();
                    //agrega un id incremental para poder indentificar los registros en la vista
                    row.setAttribute("Id", id);

                    row.setAttribute("ContractDesembolso",
                                     (null != rs.getString("CONTRACT_DESEMBOLSO")) ?
                                     rs.getString("CONTRACT_DESEMBOLSO") : null);

                    row.setAttribute("Interes",
                                     (null != rs.getBigDecimal("INTERESES")) ? rs.getBigDecimal("INTERESES") : null);

                    id++;
                    this.insertRow(row);
                }

                Row fila = getRow(new Key(new Object[] { new Long(1L) }));
                if (fila != null) {
                    setCurrentRow(fila);
                    interes = (BigDecimal) getCurrentRow().getAttribute("Interes");
                    
                    if (null != interes) {
                        interes = interes.setScale(2,RoundingMode.FLOOR);
                    }
                } else {
                    logger.warning("Inf, No se ningun regitro al ejecutar el SP_CALCULO_DE_INTERES_ENV_COB");
                }

            } catch (Exception e) {
                logger.warning("Exception al llenar CalcularInteresByIdPrepagoSpVo : ", e);
                throw new JboException(e);
            }
        } else {
            logger.warning("Id de contrato nulo, no se ejecutara el SP.");
        }

        return interes;
    }
    
    
}

