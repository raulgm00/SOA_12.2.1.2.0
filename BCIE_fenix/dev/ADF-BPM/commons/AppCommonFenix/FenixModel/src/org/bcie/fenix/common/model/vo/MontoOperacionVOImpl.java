package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.MontoOperacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 16 11:04:15 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MontoOperacionVOImpl extends ViewObjectImpl implements MontoOperacionVO {
    
    private static ADFLogger logger = null;
    private static final Integer ID_TCA_TIPO_MONTO = 4;
    
    /**
     * This is the default constructor (do not remove).
     */
    public MontoOperacionVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row crearMonto(Long idOperacion, Integer tipoMonto, BigDecimal monto, Integer idTcaTipoMoneda) {
        
        // Creamos un nuevo monto asignado a un IdOperacion
        Row montoRow = null;
        oracle.jbo.domain.Number idMonto = null;
        NameValuePairs nvpMonto = null;
        SequenceImpl seqMonto = null;
        
        try {
            seqMonto = new SequenceImpl("MONTO_OPERACION_SEQ", getDBTransaction());
            idMonto = seqMonto.getSequenceNumber();
            
            logger.log(ADFLogger.WARNING, "Inside crearMonto. idMonto: " + idMonto + "idOperacion: " + idOperacion 
                                          + ". tipoMonto: " + tipoMonto + ". monto: " + monto + ". idTcaTipoMoneda: " + idTcaTipoMoneda);
            
            nvpMonto = new NameValuePairs();
            nvpMonto.setAttribute("Id", idMonto);
            nvpMonto.setAttribute("IdOperacion", idOperacion);
            nvpMonto.setAttribute("IdTcaTipoMonto", tipoMonto);
            nvpMonto.setAttribute("Monto", monto);
            
			if(idTcaTipoMoneda != null) {
                nvpMonto.setAttribute("IdTcaTipoMoneda", idTcaTipoMoneda);
            }
			
            montoRow = this.createAndInitRow(nvpMonto);
                    
            getDBTransaction().commit();
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, e.getMessage());

            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al crear el Monto, favor de intentar más tarde."));
            throw ex;
        }
        
        return montoRow;
    }
    
    public BigDecimal obtenerMontoPorTipo(Long varIdOperacion, Integer varTipoMonto) {
        logger.log(ADFLogger.TRACE, "Inside obtenerMontoAprobado.");
        BigDecimal montoAprobado = null;
        
        if((varIdOperacion != null) && (varTipoMonto != null)) {
            
            // Ejecutamos VC
            ViewCriteria criteriaById = this.getViewCriteriaManager().getViewCriteria("MontoOperacionVOCriteriaByIdOperacion");
            criteriaById.ensureVariableManager().setVariableValue("varIdOperacion", varIdOperacion);
            criteriaById.ensureVariableManager().setVariableValue("varTipoMonto", varTipoMonto);
            
            this.applyViewCriteria(criteriaById);
            this.executeQuery();
            
            if(this.getEstimatedRowCount() > 0)
                montoAprobado = (BigDecimal) this.getRowAtRangeIndex(0).getAttribute("Monto");
            
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("MontoOperacionVOCriteriaByIdOperacion");
            
            // No basta con quitar el VC aplicado, hay que re-ejecutar el query o se queda filtrado el VO
            this.executeQuery();
        }
        
        return montoAprobado;
    }
    
    public Integer crearMontoImplementacionPCT(Long idOperacion, BigDecimal monto) {
        
        // Creamos un nuevo monto asignado a un IdOperacion
        Row montoImplementacionRow = null;
        oracle.jbo.domain.Number idMonto = null;
        NameValuePairs nvpMonto = null;
        SequenceImpl seqMonto = null;
        
        try {
            seqMonto = new SequenceImpl("MONTO_OPERACION_SEQ", getDBTransaction());
            idMonto = seqMonto.getSequenceNumber();
            
            logger.log(ADFLogger.WARNING, "Inside crearMonto. idMonto: " + idMonto + "idOperacion: " + idOperacion 
                                          + ". monto: " + monto);
            
            nvpMonto = new NameValuePairs();
            nvpMonto.setAttribute("Id", idMonto);
            nvpMonto.setAttribute("IdOperacion", idOperacion);
            nvpMonto.setAttribute("IdTcaTipoMonto", ID_TCA_TIPO_MONTO);
            nvpMonto.setAttribute("Monto", monto);
            
            this.createAndInitRow(nvpMonto);
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, e.getMessage());
            getDBTransaction().rollback();
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al crear el Monto, favor de intentar más tarde."));
            throw ex;
        }
        logger.log(ADFLogger.WARNING, "Valor de retorno :" + idMonto.intValue());
        return idMonto.intValue();
    }
    
    public void actualizarMontoImplementacionPCT(Integer idMontoOperacion, BigDecimal montoEscriturado) {
        logger.log(ADFLogger.WARNING, "Entra en actualizarMontoImplementacionPCT.");
        Row montoOperacionRow = null;
        logger.log(ADFLogger.WARNING, "IdMontoOperacion :" + idMontoOperacion);
        logger.log(ADFLogger.WARNING, "montoEscriturado :" + montoEscriturado);

        try {
            ViewCriteria criteriaById = this.getViewCriteriaManager().getViewCriteria("MontoOperacionVOCriteriaById");
            criteriaById.ensureVariableManager().setVariableValue("varId", idMontoOperacion);
            this.applyViewCriteria(criteriaById);
            this.executeQuery();
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error al ejecutar MontoOperacionVOCriteriaById.", e);
        }
        try {
            logger.log(ADFLogger.WARNING, "Se ejecuta criterio.");
            montoOperacionRow = this.getRowAtRangeIndex(0);
            logger.log(ADFLogger.WARNING,
                       "Row encontrado :" + montoOperacionRow.getAttribute("Id") + "-->" + this.getEstimatedRowCount());
            if (this.getEstimatedRowCount() > 0) {
                logger.log(ADFLogger.WARNING, "Inside actualizar datos." + montoOperacionRow.getAttribute("Monto"));

                montoOperacionRow.setAttribute("Monto", montoEscriturado);

                logger.log(ADFLogger.WARNING,
                           "Se realizo la actualizacion correctamente :" + montoOperacionRow.getAttribute("Monto"));
            } else {
                logger.log(ADFLogger.WARNING, "El row es nulo.");
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error alactualizar el monto escriturado." + e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("ContratoVOCriteriaByIdContrato");
        }

    }
    /**
     * Returns the variable value for varIdOperacion.
     * @return variable value for varIdOperacion
     */
    public Long getvarIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("varIdOperacion", value);
    }

    /**
     * Returns the variable value for varTipoMonto.
     * @return variable value for varTipoMonto
     */
    public Integer getvarTipoMonto() {
        return (Integer) ensureVariableManager().getVariableValue("varTipoMonto");
    }

    /**
     * Sets <code>value</code> for variable varTipoMonto.
     * @param value value to bind as varTipoMonto
     */
    public void setvarTipoMonto(Integer value) {
        ensureVariableManager().setVariableValue("varTipoMonto", value);
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Integer getvarId() {
        return (Integer) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Integer value) {
        ensureVariableManager().setVariableValue("varId", value);
    }
}

