package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.util.Calendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.DocumentosTrazabilidadOperacionAdquisicionesVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 22 15:47:06 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentosTrazabilidadOperacionAdquisicionesVOImpl extends ViewObjectImpl implements DocumentosTrazabilidadOperacionAdquisicionesVO {
    
    private static ADFLogger logger = null;
    
    public static final String BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC = "DocumentosTrazabilidadOperacionVOCriteria";
    public static final String BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC2 = "DocumentosTrazabilidadOperacionVOCriteria2";
    
    /**
     * This is the default constructor (do not remove).
     */
    public DocumentosTrazabilidadOperacionAdquisicionesVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    public void agregarEvidencias(Long idSolicitud, String instancia) {
         logger.warning("*** Metodo agregarEvidencias VO DocumentosTrazabilidadOperacionAdquisiciones");
         logger.log(ADFLogger.TRACE, "Inside agregarEvidencias.");
         FenixAMImpl fenixAM = null;
         
         // Crea una instancia del AM
         fenixAM = (FenixAMImpl)this.getRootApplicationModule();
         // Obtenemos las evidencias seleccionadas 
         Row[] rowsEvidenciasAgregadas = this.getFilteredRows("seleccion",Boolean.TRUE);
         logger.warning("*** Se han obtenido las evidencias seleccionadas");
         for (Row rowEvidenciaAgregada : rowsEvidenciasAgregadas) {
             logger.warning("*** Ciclio for, Row---->"+rowEvidenciaAgregada);
             // validar "idDocumento" y "idSolicitud" no sean null
             if(rowEvidenciaAgregada.getAttribute("IdDocumento") != null && idSolicitud != null) 
             {
                 Long idDocumento = (Long)rowEvidenciaAgregada.getAttribute("IdDocumento");
                 // Invocar el metodo "agregarTreEvidenciaCondicion" del TreEvidenciaCondicionVOImpl
                 // Agregar los rows a "agregarTreEvidenciaCondicion"
                 logger.warning("***idDocumento--->" + idDocumento);
                 logger.warning("***idSolicitud--->" + idSolicitud);
                 logger.warning("***InstanciaProceso--->" + instancia);
                 fenixAM.getTreEvidenciaSolicitudVO().agregarTreEvidenciaSolicitud(idDocumento, idSolicitud, instancia);
             }
         }
     }
     
     public void agregarEvidenciasAdquisicion(Long idAdquisicion) {
         logger.warning("Id Adquisicion: " + idAdquisicion);
         logger.warning("*** Metodo agregarEvidenciasAdquisicion VO DocumentosTrazabilidadOperacionAdquisiciones");
         logger.log(ADFLogger.TRACE, "Inside agregarEvidencias.");
         FenixAMImpl fenixAM = null;
         
         // Crea una instancia del AM
         fenixAM = (FenixAMImpl)this.getRootApplicationModule();
         // Obtenemos las evidencias seleccionadas 
         Row[] rowsEvidenciasAgregadas = this.getFilteredRows("seleccion",Boolean.TRUE);
         logger.warning("*** Se han obtenido las evidencias seleccionadas");
         for (Row rowEvidenciaAgregada : rowsEvidenciasAgregadas) {
             logger.warning("*** Ciclio for, Row---->"+rowEvidenciaAgregada);
             // validar "idDocumento" y "idSolicitud" no sean null
             if(rowEvidenciaAgregada.getAttribute("IdDocumento") != null && idAdquisicion != null) 
             {
                 Long idDocumento = (Long)rowEvidenciaAgregada.getAttribute("IdDocumento");
                 // Invocar el metodo "agregarTreEvidenciaCondicion" del TreEvidenciaCondicionVOImpl
                 // Agregar los rows a "agregarTreEvidenciaCondicion"
                 logger.warning("***idDocumento--->" + idDocumento);
                 logger.warning("***idAdquisicion--->" + idAdquisicion);
                 fenixAM.getTreEvidenciaAdquisicionVO().agregarTreEvidenciaAdquisicion(idDocumento, idAdquisicion);
             }
         }
     }
     
     public void limpiarFilas(){        
           executeEmptyRowSet();        
       }
     
     public void buscarDocumentosTrazabilidadOperacion(String Documento, Integer idTipoDocumento,Integer idProcesoBpm, Timestamp fechaIni, Timestamp fechaFin, Integer idTarea ){
                 logger.warning("***Inicia metodo buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionAdquisicionesVO***");
                 ViewCriteria criteria = null;
                 String criteriaAplicar=BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC;
                 
                 try{                                                    
                     this.setvarDocumento(Documento);    
                     logger.warning("**->"+Documento);                                            
                     this.setvarIdTipoDocumento(idTipoDocumento);
                     logger.warning("**->"+idTipoDocumento);
                     this.setvarIdProcesoBpm(idProcesoBpm);
                     logger.warning("**->"+idProcesoBpm);
                     this.setvarFechaIni(fechaIni);  
                     logger.warning("**->"+fechaIni);
                     
                     /*
                     //this.setvarIdTarea(idTarea);
                     //logger.warning("**->"+idTarea);
                     
                     
                     Calendar calendar = Calendar.getInstance();
                     calendar.setTime(fechaFin);     
                     calendar.add(Calendar.DAY_OF_YEAR, 1);  
                     Timestamp fecha2 = new Timestamp(calendar.getTimeInMillis());

                     this.setvarFechaFin(fecha2);
                     
                     logger.warning("**->"+calendar.getTime());                                             
                    */  
                     logger.warning("******* APLICANDO CRITERIA PARA BUSQUEDA DE DOCUMENTOS***********");
                     criteria = getViewCriteria(criteriaAplicar);                       
                     applyViewCriteria(criteria);
                     executeQuery();                    
                         
                     logger.warning("***Filas obtenidas: " + getEstimatedRowCount());  
                    
                 }catch(Exception e){
                     logger.warning("***Error al ejecutar el criterias x( ");                                    
                     e.printStackTrace();
                 }finally{
                     logger.warning("*** -Removiendo criterias aplicadas anteriormente- ***");
                     getViewCriteriaManager().removeApplyViewCriteriaName(criteriaAplicar);  
                     //getViewCriteriaManager().removeViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);
                     //executeQuery(); 
                 }
               logger.warning("***buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionAdquisicionesVO");                                  
         }
     
     //    public void buscarDocumentosTrazabilidadOperacion(String Documento, Integer idTipoDocumento,Integer idProcesoBpm, Timestamp fechaIni, Timestamp fechaFin ){
     //                logger.warning("***Inicia metodo buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionVOImp***");
     //                ViewCriteria criteria = null;
     //
     //                if(Documento == null && idTipoDocumento == null && idProcesoBpm == null && fechaIni == null && fechaFin==null){
     //                    logger.warning("No hay criterios para iniciar la busqueda");
     //                }else{
     //                    try{
     //                        this.setvarDocumento(Documento);
     //                        logger.warning("**->"+Documento);
     //                        this.setvarIdTipoDocumento(idTipoDocumento);
     //                        logger.warning("**->"+idTipoDocumento);
     //                        this.setvarIdProcesoBpm(idProcesoBpm);
     //                        logger.warning("**->"+idProcesoBpm);
     //                        this.setvarFechaIni(fechaIni);
     //                        logger.warning("**->"+fechaIni);
     //                        this.setvarFechaFin(fechaFin);
     //                        logger.warning("**->"+fechaFin);
     //
     //                        logger.warning("******* APLICANDO CRITERIA PARA BUSQUEDA DE DOCUMENTOS***********");
     //                        ViewCriteria vc1 = getViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);
     //                        applyViewCriteria(vc1);
     //                        executeQuery();
     //
     //                        logger.warning("***Filas obtenidas: " + getEstimatedRowCount());
     //
     //                    }catch(Exception e){
     //                        logger.warning("***Error al ejecutar el criterias x( ");
     //                        e.printStackTrace();
     //                    }finally{
     //                        logger.warning("*** -Removiendo criterias aplicadas anteriormente- ***");
     //                        getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);
     //                        //getViewCriteriaManager().removeViewCriteria(BUSCAR_DOCUMENTOS_PARA_SOLICITUD_VC);
     //                        //executeQuery();
     //                    }
     //              }
     //              logger.warning("***buscarDocumentosTrazabilidadOperacion En DocumentosTrazabilidadOperacionVOImp");
     //        }
    
     public void ejecutarVO(Long idOp) {
         logger.warning("Ingresa metodo ejecutarVO en DocumentosTrazabilidadOperacionAdquisicionesVO...");
         logger.warning("Se recibe valor IdOperacion como where clause: " + idOp);
         setNamedWhereClauseParam("pIdOp", idOp);
         executeQuery();
         logger.warning("se aplica executeQuery a la VO...");
         logger.warning("termino metodo ejecutarVO  ->");
     }
     
     /**
      * Returns the variable value for varIdTipoDocumento.
      * @return variable value for varIdTipoDocumento
      */
     public Integer getvarIdTipoDocumento() {
         return (Integer) ensureVariableManager().getVariableValue("varIdTipoDocumento");
     }

     /**
      * Sets <code>value</code> for variable varIdTipoDocumento.
      * @param value value to bind as varIdTipoDocumento
      */
     public void setvarIdTipoDocumento(Integer value) {
         ensureVariableManager().setVariableValue("varIdTipoDocumento", value);
     }


    /**
     * Returns the variable value for varDocumento.
     * @return variable value for varDocumento
     */
     public String getvarDocumento() {
         return (String) ensureVariableManager().getVariableValue("varDocumento");
     }

     /**
      * Sets <code>value</code> for variable varDocumento.
      * @param value value to bind as varDocumento
      */
     public void setvarDocumento(String value) {
         ensureVariableManager().setVariableValue("varDocumento", value);
     }

     /**
      * Returns the variable value for varFechaIni.
      * @return variable value for varFechaIni
      */
     public Timestamp getvarFechaIni() {
         return (Timestamp) ensureVariableManager().getVariableValue("varFechaIni");
     }

     /**
      * Sets <code>value</code> for variable varFechaIni.
      * @param value value to bind as varFechaIni
      */
     public void setvarFechaIni(Timestamp value) {
         ensureVariableManager().setVariableValue("varFechaIni", value);
     }

     /**
      * Returns the variable value for varFechaFin.
      * @return variable value for varFechaFin
      */
     public Timestamp getvarFechaFin() {
         return (Timestamp) ensureVariableManager().getVariableValue("varFechaFin");
     }

     /**
      * Sets <code>value</code> for variable varFechaFin.
      * @param value value to bind as varFechaFin
      */
     public void setvarFechaFin(Timestamp value) {
         ensureVariableManager().setVariableValue("varFechaFin", value);
     }


    /**
     * Returns the bind variable value for pIdOp.
     * @return bind variable value for pIdOp
     */
    public Long getpIdOp() {
        return (Long) getNamedWhereClauseParam("pIdOp");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOp.
     * @param value value to bind as pIdOp
     */
    public void setpIdOp(Long value) {
        setNamedWhereClauseParam("pIdOp", value);
    }

    /**
     * Returns the variable value for varIdProcesoBpm.
     * @return variable value for varIdProcesoBpm
     */
    public Integer getvarIdProcesoBpm() {
        return (Integer) ensureVariableManager().getVariableValue("varIdProcesoBpm");
    }

    /**
     * Sets <code>value</code> for variable varIdProcesoBpm.
     * @param value value to bind as varIdProcesoBpm
     */
    public void setvarIdProcesoBpm(Integer value) {
        ensureVariableManager().setVariableValue("varIdProcesoBpm", value);
    }
}

