package org.bcie.fenix.common.model.vo;

import java.io.StringWriter;

import java.sql.Timestamp;

import java.text.Normalizer;

import java.util.ArrayList;
import java.util.Arrays;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.atributobo.Atributo;
import org.bcie.atributobo.TipoValorType;
import org.bcie.catalogobo.Catalogo;
import org.bcie.condicionbo.CategoriaCondicion;
import org.bcie.condicionbo.Condicion;
import org.bcie.condicionbo.ObservacionCondicion;
import org.bcie.condicionbo.ValidacionCondicion;
import org.bcie.condicionmo.ActualizarEstadoCondicionRequestType;
import org.bcie.condicionmo.ActualizarEstadoCondicionResponseType;
import org.bcie.condicionmo.CondicionType;
import org.bcie.condicionmo.ConsultarCondicionValidacionByRolRequestType;
import org.bcie.condicionmo.ConsultarCondicionValidacionByRolRequestV2Type;
import org.bcie.condicionmo.ConsultarCondicionValidacionByRolResponseType;
import org.bcie.condicionmo.ValidarCondicionRequestType;
import org.bcie.condicionmo.ValidarCondicionResponseType;
import org.bcie.condicionservice.Condicion12BndQSService;
import org.bcie.condicionservice.CondicionPT;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.CondicionesOperacionVO;

import org.bcie.matriztccbo.ListaTCC;
import org.bcie.matriztccbo.TCC;

import org.bcie.matriztccbo.Tipo;

import org.bcie.matriztccmo.ActualizarEstadoTCCRequestType;

import org.bcie.matriztccmo.ActualizarEstadoTCCResponseType;

import org.bcie.matriztccservice.MatrizTCC12BndQSService;
import org.bcie.matriztccservice.MatrizTCCPT;



import org.bcie.fenix.common.model.vo.common.CondicionVO;

import org.w3c.dom.Document;
import org.w3c.dom.Element;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 18 18:58:26 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CondicionesOperacionVOImpl extends ViewObjectImpl implements CondicionesOperacionVO {
    
    private static ADFLogger logger = null;
    
    private static final String EVENTOS_LABEL = "Eventos";
    private static final String TIPO_CONTROL_LABEL = "Tipo de Control";
    private static final String NOMBRE_COMISION_LABEL = "Nombre de la comisión";
    private static final String CATEGORIA_LABEL = "Categoría";
    private static final String DESCRIPCION_LABEL = "Descripción";
    private static final String FUENTE_LABEL = "Fuente";
    private static final String LINEA_LABEL = "Línea";
    private static final String OBSERVACIONES_LABEL = "Observaciones";
    private static final String TIPO_FECHA_INICIO_LABEL = "Tipo Fecha Inicio";
    private static final String FECHA_INICIO_LABEL = "Fecha Inicio";
    private static final String PLAZO_LABEL = "Plazo";
    private static final String TIPO_PLAZO_LABEL = "Plazo";
    private static final String FECHA_FINAL_LABEL = "Fecha Final";
    private static final Integer ES_VALIDADOR = 1;
    
    /**
     * el nodo "div"
     */
    private static final String ELEMENT_NODE_DIV = "div";
    /**
     * el nodo "tr"
     */
    private static final String ELEMENT_NODE_TR = "tr";
    /**
     * el nodo "td"
     */
    private static final String ELEMENT_NODE_TD = "td";
    /**
     * el nodo "table"
     */
    private static final String ELEMENT_NODE_TABLE = "table";
    /**
     * This is the default constructor (do not remove).
     */
    public CondicionesOperacionVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    /**
     * Metodo llamado por la carga incial de condiciones.
     * 
     * @param idOperacion
     * @param idRol
     * @param agrupador
     * @param loginUsuario
     * @param esRetornoCumplirCondiciones
     * @return
     */
    public Map consultarCondicionesByIdOperacionIdEvento(Long idOperacion, Long idRol, Long agrupador, String loginUsuario, Boolean esRetornoCumplirCondiciones) {
        //En este metodo se sustituye el idEvento por Agrupador
        logger.warning("Inside consultarCondicionesByIdOperacionIdEvento. REFACTOR");
        return consultarCondiciones2(0L,idOperacion, idRol, agrupador, loginUsuario, false, esRetornoCumplirCondiciones);
    }
    
    /**
     * Metodo llamado por cumplir todas. Debemos regrescar Todo.
     * @param idCondicion
     * @param idOperacion
     * @param idRol
     * @param agrupador
     * @param loginUsuario
     * @param esRetornoCumplirCondiciones
     * @return
     */
    public Map consultarCondicionesByIdOperacionIdEvento2(Long idCondicion, Long idOperacion, Long idRol, Long agrupador, String loginUsuario, Boolean esRetornoCumplirCondiciones) {
        //En este metodo se sustituye el idEvento por Agrupador
        logger.warning("Inside consultarCondicionesByIdOperacionIdEvento2.");
        return executeRefreshCumplirTodas(idCondicion, idOperacion, idRol, agrupador, loginUsuario, false, esRetornoCumplirCondiciones);
    }
    
    /**
     * Metodo llamado por la carga inicial de la pantalla validar condiciones.
     * @param idOperacion
     * @param idRol
     * @param agrupador
     * @param loginUsuario
     * @return
     */
    public Map consultarCondicionesByIdOperacionIdRolIdEvento(Long idOperacion, Long idRol, Long agrupador, String loginUsuario) {
        //Metodo en el que se sustituye el idEvento por agrupador
        logger.warning("Inside consultarCondicionesByIdOperacionIdRolIdEvento.");
        return consultarCondiciones2(0L, idOperacion, idRol, agrupador, loginUsuario, true, false);
    }
    
    public Map consultarCondicionesByIdOperacionIdRolIdEventoV2(Long idCondicion, Long idOperacion, Long idRol, Long agrupador, String loginUsuario) {
        //Metodo en el que se sustituye el idEvento por agrupador
        logger.warning("Inside consultarCondicionesByIdOperacionIdRolIdEventoV2.");
        return consultarCondiciones2(idCondicion, idOperacion, idRol, agrupador, loginUsuario, true, false);
    }
    
    @Override
    public String obtenerDetalle(Long idCondicion, Long idOperacion, Long idAgrupador){
        String detalle = "<div><table/></div>";
        logger.warning("Inside obtenerDetalle - Inicio");
        
        ConsultarCondicionValidacionByRolRequestV2Type request = null;
        ConsultarCondicionValidacionByRolResponseType response = null;
        
        try {
            FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION2);
            
            org.bcie.condicionservice2.Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(org.bcie.condicionservice2.Condicion12BndQSService.class, wsdl);
            org.bcie.condicionservice2.CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
            request = new ConsultarCondicionValidacionByRolRequestV2Type();
            request.setIdCondicion(idCondicion);
            request.setIdOperacion(idOperacion);
            
            // El idRol se asigna en request cuando se consultan las condiciones en la tarea Validar condiciones. 
            // Sin embargo, el idRol se usa para tomar el nodo ValidacionCondicion correspondiente en la respuesta.
            //if((idRol != null) && esIdRolNecesario)
            //    request.setIdRol(idRol);
            
            if(idAgrupador != null)//Se cambia (idEvento != null) por agrupador
                //request.setIdEventoCondicion(idEvento);Se comenta el request donde se envia el idEvento
                request.setAgrupador(idAgrupador);
            
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2");
            response = condicionPT.consultarValidacionCondicionByRol(request); // condicionPT.consultarCondicionByRol(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2", horaInicio);
            
            
            // Iteramos lista de Condiciones
            if (response != null && response.getCondicion() != null && response.getCondicion().size() == 1){
                Condicion condicion = response.getCondicion().get(0).getCondicion();
                detalle =  generarHTMLDetalleCondicion(condicion.getConfigAtributo());
            }else{
                logger.severe("Se obtuvieron mas de 1 condicion con el idCondicion = " + idCondicion);
            }
        } catch (Exception e) {
            logger.warning("Error al ejecutar servicio ", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al consultar las condiciones de la operación."));
        }
        logger.warning("Inside obtenerDetalle - Fin");
        return detalle;
    }
    
    private ConsultarCondicionValidacionByRolResponseType consultarCondiciionesSvc(Long idCondicion, Long idOperacion, Long idRol, Long agrupador, String loginUsuario, Boolean esIdRolNecesario, Boolean esRetornoCumplirCondiciones){
        ConsultarCondicionValidacionByRolResponseType response = null;
        ConsultarCondicionValidacionByRolRequestV2Type request = null;
        
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION2);
        
        org.bcie.condicionservice2.Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(org.bcie.condicionservice2.Condicion12BndQSService.class, wsdl);
        org.bcie.condicionservice2.CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
        request = new ConsultarCondicionValidacionByRolRequestV2Type();
        request.setIdCondicion(0);
        request.setIdOperacion(idOperacion);
        
        // El idRol se asigna en request cuando se consultan las condiciones en la tarea Validar condiciones. 
        // Sin embargo, el idRol se usa para tomar el nodo ValidacionCondicion correspondiente en la respuesta.
        if((idRol != null) && esIdRolNecesario)
            request.setIdRol(idRol);
        
        if(agrupador != null)//Se cambia (idEvento != null) por agrupador
            //request.setIdEventoCondicion(idEvento);Se comenta el request donde se envia el idEvento
            request.setAgrupador(agrupador);
        
        Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2");
            response = condicionPT.consultarValidacionCondicionByRol(request); // condicionPT.consultarCondicionByRol(request);
        ModelUtils.logEndWS(logger, response, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2", horaInicio);
        return response;
    }
    
    private Map<Long, CondicionType> obtenerCondicionesMap(ConsultarCondicionValidacionByRolResponseType response){
        Map<Long, CondicionType> respuestaServicio = new HashMap<Long, CondicionType>();
        List<CondicionType> condicionTypeLst = response.getCondicion();
        for (CondicionType condicionType : condicionTypeLst){
            respuestaServicio.put(condicionType.getCondicion().getIdCondicion(), condicionType);
        }
        return respuestaServicio;
    }
    
    private Map consultarCondiciones2(Long idCondicion, Long idOperacion, Long idRol, Long agrupador, String loginUsuario, Boolean esIdRolNecesario, Boolean esRetornoCumplirCondiciones) {
        logger.log(ADFLogger.WARNING, "Inside consultarCondiciones2. idOperacion: " + idOperacion + ". idRol: " + idRol 
                                      + ". agrupador: " + agrupador + ". loginUsuario: " + loginUsuario + ". esIdRolNecesario: " 
                                      + esIdRolNecesario + ". esRetornoCumplirCondiciones" + esRetornoCumplirCondiciones);
        //En este metodo se sustituye el idEvento por Agrupador 
        HashMap<String, Object> respuestaServicio = null;
        ConsultarCondicionValidacionByRolRequestV2Type request = null;
        ConsultarCondicionValidacionByRolResponseType response = null;
        
        if(idOperacion != null) {
            try {
                FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION2);
                
                org.bcie.condicionservice2.Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(org.bcie.condicionservice2.Condicion12BndQSService.class, wsdl);
                org.bcie.condicionservice2.CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
                request = new ConsultarCondicionValidacionByRolRequestV2Type();
                request.setIdCondicion(0);
                request.setIdOperacion(idOperacion);
                
                // El idRol se asigna en request cuando se consultan las condiciones en la tarea Validar condiciones. 
                // Sin embargo, el idRol se usa para tomar el nodo ValidacionCondicion correspondiente en la respuesta.
                if((idRol != null) && esIdRolNecesario)
                    request.setIdRol(idRol);
                
                if(agrupador != null)//Se cambia (idEvento != null) por agrupador
                    //request.setIdEventoCondicion(idEvento);Se comenta el request donde se envia el idEvento
                    request.setAgrupador(agrupador);
                
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2");
                    response = condicionPT.consultarValidacionCondicionByRol(request); // condicionPT.consultarCondicionByRol(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2", horaInicio);
                
                // Setting values from service to the view
                mappingServicioPantalla2(response, idRol, loginUsuario, esRetornoCumplirCondiciones,idCondicion, idOperacion, agrupador);
                
                // Regresamos respuesta del servicio
                respuestaServicio = new HashMap<String, Object>();
                respuestaServicio.put("response", response);
    
            } catch (Exception e) {
                logger.warning("Error al ejecutar servicio ", e);
    
                JboException ex = new JboException(e);
                ex.addToExceptions(new Exception("Error al consultar las condiciones de la operación."));
                throw ex;
            }
        }
        obtenerCondiciones();
        return respuestaServicio;
    }
    
    
    
    private Map consultarCondiciones(Long idOperacion, Long idRol, Long agrupador, String loginUsuario, Boolean esIdRolNecesario, Boolean esRetornoCumplirCondiciones) {
        logger.log(ADFLogger.WARNING, "Inside consultarCondiciones. idOperacion: " + idOperacion + ". idRol: " + idRol 
                                      + ". agrupador: " + agrupador + ". loginUsuario: " + loginUsuario + ". esIdRolNecesario: " 
                                      + esIdRolNecesario + ". esRetornoCumplirCondiciones: " + esRetornoCumplirCondiciones);
        //En este metodo se sustituye el idEvento por Agrupador 
        HashMap<String, Object> respuestaServicio = null;
        ConsultarCondicionValidacionByRolRequestType request = null;
        ConsultarCondicionValidacionByRolResponseType response = null;
        
        if(idOperacion != null) {
            try {
                FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION);
                
                Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(Condicion12BndQSService.class, wsdl);
                CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
                request = new ConsultarCondicionValidacionByRolRequestType();
                request.setIdOperacion(idOperacion);
                
                // El idRol se asigna en request cuando se consultan las condiciones en la tarea Validar condiciones. 
                // Sin embargo, el idRol se usa para tomar el nodo ValidacionCondicion correspondiente en la respuesta.
                if((idRol != null) && esIdRolNecesario)
                    request.setIdRol(idRol);
                
                if(agrupador != null)//Se cambia (idEvento != null) por agrupador
                    //request.setIdEventoCondicion(idEvento);Se comenta el request donde se envia el idEvento
                    request.setAgrupador(agrupador);
                
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL);
                    response = condicionPT.consultarValidacionCondicionByRol(request); // condicionPT.consultarCondicionByRol(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL, horaInicio);
                
                // Setting values from service to the view
                mappingServicioPantalla(response, idRol, loginUsuario, esRetornoCumplirCondiciones);
                
                // Regresamos respuesta del servicio
                respuestaServicio = new HashMap<String, Object>();
                respuestaServicio.put("response", response);
    
            } catch (Exception e) {
                logger.severe("Error al ejecutar servicio ", e);
    
                JboException ex = new JboException(e);
                ex.addToExceptions(new Exception("Error al consultar las condiciones de la operación."));
                throw ex;
            }
        }
        obtenerCondiciones();
        return respuestaServicio;
    }
    
    public void  obtenerRow(Row row, long idCondicion, long idOperacion, long idAgrupador, Long idRol, String loginUsuario){
        Long idEstadoTccAux = null;
        Integer idEstadoTcc = null;
        List<Long> listaRoles = null;
        Condicion condicion= null;
        HashMap<String, Object> respuestaServicio = null;
        CondicionType condicionType = null;
        ConsultarCondicionValidacionByRolRequestV2Type request = null;
        ConsultarCondicionValidacionByRolResponseType response = null;
        
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION2);
        
        org.bcie.condicionservice2.Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(org.bcie.condicionservice2.Condicion12BndQSService.class, wsdl);
        org.bcie.condicionservice2.CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
        request = new ConsultarCondicionValidacionByRolRequestV2Type();
        request.setIdCondicion(idCondicion);
        request.setIdOperacion(idOperacion);

        //if(idAgrupador != null)//Se cambia (idEvento != null) por agrupador
            //request.setIdEventoCondicion(idEvento);Se comenta el request donde se envia el idEvento
            request.setAgrupador(idAgrupador);
        
        Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2");
            response = condicionPT.consultarValidacionCondicionByRol(request); // condicionPT.consultarCondicionByRol(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL+"V2", horaInicio);
            
        if (response!=null && response.getCondicion()!=null && response.getCondicion().size() == 1){
            condicion= response.getCondicion().get(0).getCondicion();   
            condicionType = response.getCondicion().get(0);
        } 

        if (condicion==null){
            return;
        }
        
        // for(CondicionType condicionType : response.getCondicion()) {
            
            //Condicion condicion = condicionType.getCondicion();
           // if ( (idCondicion.longValue() != 0 && condicion.getIdCondicion() == idCondicion.longValue() )
           //         || (idCondicion.longValue() == 0 && id == 1) ){
           //     Condicion condicionTypeIndividual =  getCondicionIndividual(condicion.getIdCondicion(), idOperacion,idAgrupador );
           //     condicion = condicionTypeIndividual;
           // }
                   
            ValidacionCondicion validacionCondicion = null;            
            String validador = "";
            //condicionOperacionRow = this.createRow();
            // Asignación de validacionCondicion
            //Si algun validador retorna a la tarea Cumplir Condiciones al EstadoValidacionCondicion se le
            //asigna el valor false. 
        //            if (esRetornoCumplirCondiciones) {
        //            } else {
            
            //Se implementa logica para descartar roles repetidos incidencia FNXII-6524
            listaRoles = new ArrayList<Long>();
            Integer numeroValidadores = 0;
            Long rolBpm = null;
            for(CategoriaCondicion categoriaCondicion : condicion.getCategoriaCondicion()){
                logger.warning("numero Validadores " + categoriaCondicion.getValidadores().size());
                for (Catalogo catalogo : categoriaCondicion.getValidadores()) {
                    logger.warning(catalogo.getDescripcionCorta());
                    rolBpm = catalogo.getId();
                    Boolean existeRol = Boolean.FALSE;
                    for(Long rol : listaRoles){
                        if(rol.compareTo(rolBpm) == 0){
                            existeRol = Boolean.TRUE;
                        }
                    }
                    if(!existeRol){
                        listaRoles.add(rolBpm);
                    }
                }
            }
            
            numeroValidadores = listaRoles.size();
            logger.warning("Numero de validadores :" + numeroValidadores);
            row.setAttribute("NumeroValidador", numeroValidadores);
            
                if (condicionType.getValidacionCondicion() != null) {
                    
                    for (ValidacionCondicion vCondicion :
                         condicionType.getValidacionCondicion()) {
                        logger.log(ADFLogger.WARNING, "Valor estado :" + vCondicion.getLoginUsuario());
                        // Tomamos de la lista el nodo que corresponda al idRol y loginUsuario
                        if ((vCondicion.getLoginUsuario() != null) && (vCondicion.getRolBPM() != null) &&
                            (vCondicion.getRolBPM().getId() != null) && (idRol != null) &&
                            (vCondicion.getLoginUsuario().equalsIgnoreCase(loginUsuario)) &&
                            (vCondicion.getRolBPM().getId().compareTo(idRol) == 0)) {
                            logger.log(ADFLogger.WARNING,
                                       "Comparacion de roles :" + "ValidacionCondicionRol = " +
                                       vCondicion.getRolBPM().getId() + ". Rol Inicia Tarea = " + idRol);
                            validacionCondicion = vCondicion;
                            logger.log(ADFLogger.WARNING, "Valor estado :" + validacionCondicion.isEstado());
                            break;
                        }else{
                            logger.log(ADFLogger.WARNING, "No se encontro algun validador con rol =" + idRol);
                        }
                    }
                }

                // Encuentra el valor del estado en que se encuentra la condicion del Cumplidor
                if (null != condicion && null != condicion.getEstadoTCC() && null != condicion.getEstadoTCC().getId()) {
                    idEstadoTccAux = condicion.getEstadoTCC().getId();
                    idEstadoTcc = idEstadoTccAux.intValue();
                    if (idEstadoTcc.compareTo(FenixModelConstants.ESTADO_TCC_VALIDADA) == 0) {
                        row.setAttribute("EstadoValidacionCondicion", Boolean.TRUE);
                        logger.warning("La condicion ha sido validada por lo tanto no cambia el valor de EstadoValidacionCondicion");
                    } else {
                        if (validacionCondicion != null) {
                            logger.log(ADFLogger.WARNING, "EstadoValidacionCondicion" + validacionCondicion.isEstado());
                            logger.log(ADFLogger.WARNING,
                                       "EstadoValidacionCondicion" + validacionCondicion.getRolBPM().getId() + ":" +
                                       validacionCondicion.getNombreUsuario());
                            row.setAttribute("EstadoValidacionCondicion", validacionCondicion.isEstado());
                        } else {
                            row.setAttribute("EstadoValidacionCondicion", Boolean.FALSE);
                            logger.log(ADFLogger.WARNING,
                                       "EstadoValidacionCondicion es FALSE :" +
                                       row.getAttribute("EstadoValidacionCondicion"));
                        }
                    }
                } else {
                    logger.warning("El estado de la condicion es nula.");
                }
        //            }
            
            //row.setAttribute("Id", id);
            row.setAttribute("IdCondicion", condicion.getIdCondicion());
            row.setAttribute("Nombre", condicion.getNombre());
            row.setAttribute("ControlCondicion", condicion.getControlCondicion().getId());
            logger.warning("id de la condicion :" + row.getAttribute("IdCondicion"));
            
            //Se asigna Fecha de Vigencia
            if (condicion.getFechaVigencia() != null) {
                row.setAttribute("FechaVigencia", new java.sql.Timestamp (condicion.getFechaVigencia().toGregorianCalendar().getTimeInMillis()));
                logger.warning("FechaVigencia: " + row.getAttribute("FechaVigencia"));    
            }
            
            // Asigna Id de Estado TCC, ShortDesc y Accion
            if((condicion.getEstadoTCC() != null) && (condicion.getEstadoTCC().getId() != null) 
               && (condicion.getEstadoTCC().getId().intValue() != 0)) {
                
                row.setAttribute("IdEstadoTcc", condicion.getEstadoTCC().getId());
                row.setAttribute("ShortDesc", condicion.getEstadoTCC().getDescripcion());
                row.setAttribute("Accion", (condicion.getEstadoTCC().getDescripcion() == null) ? "" : 
                                                   condicion.getEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
                logger.warning("Valor del estado :" + row.getAttribute("IdEstadoTcc"));
            }
            
            // Asigna Id de Sub Estado TCC. 
            // Reasigna ShortDesc y Accion por la lógica en pantalla de que sólo se muestra un ícono: 
            // el del sub-estado (si NO es null) o el del estado (cuando sub-estado es null).
            if((condicion.getSubEstadoTCC() != null) && (condicion.getSubEstadoTCC().getId() != null) 
               && (condicion.getSubEstadoTCC().getId().intValue() != 0)) {
                
                row.setAttribute("IdSubEstadoTcc", condicion.getSubEstadoTCC().getId());
                row.setAttribute("ShortDesc", condicion.getSubEstadoTCC().getDescripcion());
                row.setAttribute("Accion", (condicion.getSubEstadoTCC().getDescripcion() == null) ? "" : 
                                                   condicion.getSubEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
                logger.warning("Valor del subEstado :" + row.getAttribute("IdSubEstadoTcc"));
            }
            
            // Detalle Html dinámico (incluye Descripción, Categoría, Tipo de Control, Eventos, Fuente, Línea y Observaciones)
            String detalleGenerado =  generarHTMLDetalleCondicion(condicion.getConfigAtributo());
            
            row.setAttribute("Detalle",detalleGenerado);
            logger.warning("Detalle generado :\n" + detalleGenerado);
            // Validador(es) y roles.
            for(CategoriaCondicion categoriaCondicion : condicion.getCategoriaCondicion()) {
                for(Catalogo validadorCategoria : categoriaCondicion.getValidadores()) {
                    
                    // Mapeo de Validador. Verificamos que NO se repita
                    if((validadorCategoria.getDescripcion() != null) 
                       && (!validador.contains(validadorCategoria.getDescripcion()))) {
                        
                        validador += (validadorCategoria.getDescripcion()+ ". ");
                    }
                    logger.warning("valor de validadorCategoria: " + validadorCategoria.getDescripcionCorta());
                    String descRol = null;

                    // Mapeo de roles
                    if(validadorCategoria.getDescripcionCorta() != null) {
                        
                        descRol = validadorCategoria.getDescripcionCorta();
                        descRol = descRol.toUpperCase().trim();
                        
                        if(descRol.contains("ASJUR"))
                            row.setAttribute("RequiereAsjur", Boolean.TRUE);
                        else if(descRol.contains("SEPRI"))
                            row.setAttribute("RequiereSepri", Boolean.TRUE);
                        else if(descRol.contains("AED"))
                            row.setAttribute("RequiereAed", Boolean.TRUE);
                        else if(descRol.contains("PCT"))
                            row.setAttribute("RequierePct", Boolean.TRUE);
                        else if(descRol.contains("SUPERVISION"))
                            row.setAttribute("RequiereSupervision", Boolean.TRUE);
                        else if(descRol.contains("COFI"))
                            row.setAttribute("RequiereCofi", Boolean.TRUE);
                        
                        //Se agregan Rol de validadores por nuevas categorias de Fase 3. 
                        //Vease Fichas TCC Terminos v1.16
                        if(descRol.contains("EJECUTIVO_DAECI"))
                            row.setAttribute("RequiereAnalistaDaeci", Boolean.TRUE);
                        else if(descRol.contains("OFIC"))
                            row.setAttribute("RequiereAnalistaOfic", Boolean.TRUE);
                        else if(descRol.contains("ANALISTA_FINAM"))
                            row.setAttribute("RequiereAnalistaFinam", Boolean.TRUE);
                        else if(descRol.contains("ESPECIALISTA_AMBIENTAL"))
                            row.setAttribute("RequiereEspAmbiental", Boolean.TRUE);
                        else if(descRol.contains("EJECUTIVO_FINAM"))
                            row.setAttribute("RequiereEjecutivoFinam", Boolean.TRUE);
                        else if(descRol.contains("ANALISTA_USC"))
                            row.setAttribute("RequiereSegCred", Boolean.TRUE);
                    }else{
                        logger.warning("La descripcion corta del validador es nula.");
                    }
                }
            }
            logger.log(ADFLogger.WARNING, "Validador :" + validador);
            row.setAttribute("Validador", validador);
            
            // Insertamos row
            //this.insertRow(condicionOperacionRow);
            
            // Actualizamos valor de Id
            //id++;
       // }   
    }
    
    private Condicion getCondicionIndividual(long idCondicion, long idOperacion, long idAgrupador){
        
        HashMap<String, Object> respuestaServicio = null;
        ConsultarCondicionValidacionByRolRequestV2Type request = null;
        ConsultarCondicionValidacionByRolResponseType response = null;
        
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION2);
        
        org.bcie.condicionservice2.Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(org.bcie.condicionservice2.Condicion12BndQSService.class, wsdl);
        org.bcie.condicionservice2.CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
        request = new ConsultarCondicionValidacionByRolRequestV2Type();
        request.setIdCondicion(idCondicion);
        request.setIdOperacion(idOperacion);

        //if(idAgrupador != null)//Se cambia (idEvento != null) por agrupador
            //request.setIdEventoCondicion(idEvento);Se comenta el request donde se envia el idEvento
            request.setAgrupador(idAgrupador);
        
        Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL);
            response = condicionPT.consultarValidacionCondicionByRol(request); // condicionPT.consultarCondicionByRol(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.CONSULTAR_VALIDACION_CONDICION_BY_ROL, horaInicio);
            if (response!=null && response.getCondicion()!=null && response.getCondicion().size() == 1){
                
                return response.getCondicion().get(0).getCondicion();
                
            }else{
                return null;
            }
    }
    
    private Map executeRefreshCumplirTodas(Long idCondicion, Long idOperacion, Long idRol, Long agrupador, String loginUsuario, Boolean esIdRolNecesario, Boolean esRetornoCumplirCondiciones){
        HashMap<String, Object> respuestaServicio = new HashMap<String, Object>();
        ConsultarCondicionValidacionByRolResponseType condicionesResponse = 
            consultarCondiciionesSvc(idCondicion, idOperacion, idRol, agrupador, loginUsuario, esIdRolNecesario, esRetornoCumplirCondiciones);
        Map<Long, CondicionType> condicionesMap = obtenerCondicionesMap(condicionesResponse);
        
        Row[] condicionRows = this.getAllRowsInRange();
        for(Row row: condicionRows){
            Long idCondiconRow = (Long)row.getAttribute("IdCondicion");
            CondicionType condicionType = condicionesMap.get(idCondiconRow);
            refreshRow(row, condicionType, idRol, loginUsuario);
        }
        respuestaServicio.put("response", condicionesResponse);
        return respuestaServicio;
    }

    private  void refreshRow(Row row, CondicionType condicionType, Long idRol, String loginUsuario){
        Long idEstadoTccAux = null;
        Integer idEstadoTcc = null;
        Long rolBpm = null;
        List<Long> listaRoles = new ArrayList<Long>();
        ValidacionCondicion validacionCondicion = null;    
        
        for(CategoriaCondicion categoriaCondicion : condicionType.getCondicion().getCategoriaCondicion()){
            logger.warning("numero Validadores " + categoriaCondicion.getValidadores().size());
            for (Catalogo catalogo : categoriaCondicion.getValidadores()) {
                logger.warning(catalogo.getDescripcionCorta());
                rolBpm = catalogo.getId();
                Boolean existeRol = Boolean.FALSE;
                for(Long rol : listaRoles){
                    if(rol.compareTo(rolBpm) == 0){
                        existeRol = Boolean.TRUE;
                    }
                }
                if(!existeRol){
                    listaRoles.add(rolBpm);
                }
            }
            Integer numeroValidadores =categoriaCondicion.getValidadores().size();
            row.setAttribute("NumeroValidador", numeroValidadores);
        }
        
        if (condicionType.getValidacionCondicion() != null) {
            for (ValidacionCondicion vCondicion :
                 condicionType.getValidacionCondicion()) {
                logger.log(ADFLogger.WARNING, "Valor estado :" + vCondicion.getLoginUsuario());
                // Tomamos de la lista el nodo que corresponda al idRol y loginUsuario
                if ((vCondicion.getLoginUsuario() != null) && (vCondicion.getRolBPM() != null) &&
                    (vCondicion.getRolBPM().getId() != null) && (idRol != null) &&
                    (vCondicion.getLoginUsuario().equalsIgnoreCase(loginUsuario)) &&
                    (vCondicion.getRolBPM().getId().compareTo(idRol) == 0)) {
                    logger.log(ADFLogger.WARNING,
                               "Comparacion de roles :" + "ValidacionCondicionRol = " +
                               vCondicion.getRolBPM().getId() + ". Rol Inicia Tarea = " + idRol);
                    validacionCondicion = vCondicion;
                    logger.log(ADFLogger.WARNING, "Valor estado :" + validacionCondicion.isEstado());
                    break;
                }else{
                    logger.log(ADFLogger.WARNING, "No se encontro algun validador con rol =" + idRol);
                }
            }
        }
        
        // Encuentra el valor del estado en que se encuentra la condicion del Cumplidor
        if (null != condicionType.getCondicion() && null != condicionType.getCondicion().getEstadoTCC() && null != condicionType.getCondicion().getEstadoTCC().getId()) {
            idEstadoTccAux = condicionType.getCondicion().getEstadoTCC().getId();
            idEstadoTcc = idEstadoTccAux.intValue();
            if (idEstadoTcc.compareTo(FenixModelConstants.ESTADO_TCC_VALIDADA) == 0) {
                row.setAttribute("EstadoValidacionCondicion", Boolean.TRUE);
                logger.warning("La condicion ha sido validada por lo tanto no cambia el valor de EstadoValidacionCondicion");
            } else {
                if (validacionCondicion != null) {
                    logger.log(ADFLogger.WARNING, "EstadoValidacionCondicion" + validacionCondicion.isEstado());
                    logger.log(ADFLogger.WARNING,
                               "EstadoValidacionCondicion" + validacionCondicion.getRolBPM().getId() + ":" +
                               validacionCondicion.getNombreUsuario());
                    row.setAttribute("EstadoValidacionCondicion", validacionCondicion.isEstado());
                } else {
                    row.setAttribute("EstadoValidacionCondicion", Boolean.FALSE);
                    logger.log(ADFLogger.WARNING,
                               "EstadoValidacionCondicion es FALSE :" +
                               row.getAttribute("EstadoValidacionCondicion"));
                }
            }
        } else {
            logger.warning("El estado de la condicion es nula.");
        }
        
        //row.setAttribute("Id", id);
        row.setAttribute("IdCondicion", condicionType.getCondicion().getIdCondicion());
        row.setAttribute("Nombre", condicionType.getCondicion().getNombre());
        row.setAttribute("ControlCondicion", condicionType.getCondicion().getControlCondicion().getId());
        logger.warning("id de la condicion :" + row.getAttribute("IdCondicion"));
        
        //Se asigna Fecha de Vigencia
        if (condicionType.getCondicion().getFechaVigencia() != null) {
            row.setAttribute("FechaVigencia", new java.sql.Timestamp (condicionType.getCondicion().getFechaVigencia().toGregorianCalendar().getTimeInMillis()));
            logger.warning("FechaVigencia: " + row.getAttribute("FechaVigencia"));    
        }
        
        // Asigna Id de Estado TCC, ShortDesc y Accion
        if((condicionType.getCondicion().getEstadoTCC() != null) && (condicionType.getCondicion().getEstadoTCC().getId() != null) 
           && (condicionType.getCondicion().getEstadoTCC().getId().intValue() != 0)) {
            
            row.setAttribute("IdEstadoTcc", condicionType.getCondicion().getEstadoTCC().getId());
            row.setAttribute("ShortDesc", condicionType.getCondicion().getEstadoTCC().getDescripcion());
            row.setAttribute("Accion", (condicionType.getCondicion().getEstadoTCC().getDescripcion() == null) ? "" : 
                                               condicionType.getCondicion().getEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
            logger.warning("Valor del estado :" + row.getAttribute("IdEstadoTcc"));
        }
        
        // Asigna Id de Sub Estado TCC. 
        // Reasigna ShortDesc y Accion por la lógica en pantalla de que sólo se muestra un ícono: 
        // el del sub-estado (si NO es null) o el del estado (cuando sub-estado es null).
        if((condicionType.getCondicion().getSubEstadoTCC() != null) && (condicionType.getCondicion().getSubEstadoTCC().getId() != null) 
           && (condicionType.getCondicion().getSubEstadoTCC().getId().intValue() != 0)) {
            
            row.setAttribute("IdSubEstadoTcc", condicionType.getCondicion().getSubEstadoTCC().getId());
            row.setAttribute("ShortDesc", condicionType.getCondicion().getSubEstadoTCC().getDescripcion());
            row.setAttribute("Accion", (condicionType.getCondicion().getSubEstadoTCC().getDescripcion() == null) ? "" : 
                                               condicionType.getCondicion().getSubEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
            logger.warning("Valor del subEstado :" + row.getAttribute("IdSubEstadoTcc"));
        }
        

    }
    
    private void mappingServicioPantalla2(ConsultarCondicionValidacionByRolResponseType response, Long idRol, 
                                         String loginUsuario, Boolean esRetornoCumplirCondiciones, 
                                          Long idCondicion, Long idOperacion, Long idAgrupador) {
        logger.log(ADFLogger.WARNING, "Inside mappingServicioPantalla2." + loginUsuario);
        Integer id = Integer.valueOf(1);
        Row condicionOperacionRow = null;
        Long idEstadoTccAux = null;
        Integer idEstadoTcc = null;
        List<Long> listaRoles = null;
        // Limpiamos VO
        this.clearCache();
        
        // Iteramos lista de Condiciones
        for(CondicionType condicionType : response.getCondicion()) {
            
            Condicion condicion = condicionType.getCondicion();
           // if ( (idCondicion.longValue() != 0 && condicion.getIdCondicion() == idCondicion.longValue() )
           //         || (idCondicion.longValue() == 0 && id == 1) ){
           //     Condicion condicionTypeIndividual =  getCondicionIndividual(condicion.getIdCondicion(), idOperacion,idAgrupador );
           ///     condicion = condicionTypeIndividual;
           // }
                   
            ValidacionCondicion validacionCondicion = null;            
            String validador = "";
            condicionOperacionRow = this.createRow();
            // Asignación de validacionCondicion
            //Si algun validador retorna a la tarea Cumplir Condiciones al EstadoValidacionCondicion se le
            //asigna el valor false. 
    //            if (esRetornoCumplirCondiciones) {
    //            } else {
            
            //Se implementa logica para descartar roles repetidos incidencia FNXII-6524
            listaRoles = new ArrayList<Long>();
            Integer numeroValidadores = 0;
            Long rolBpm = null;
            for(CategoriaCondicion categoriaCondicion : condicionType.getCondicion().getCategoriaCondicion()){
                logger.warning("numero Validadores " + categoriaCondicion.getValidadores().size());
                for (Catalogo catalogo : categoriaCondicion.getValidadores()) {
                    logger.warning(catalogo.getDescripcionCorta());
                    rolBpm = catalogo.getId();
                    Boolean existeRol = Boolean.FALSE;
                    for(Long rol : listaRoles){
                        if(rol.compareTo(rolBpm) == 0){
                            existeRol = Boolean.TRUE;
                        }
                    }
                    if(!existeRol){
                        listaRoles.add(rolBpm);
                    }
                }
            }
            
            numeroValidadores = listaRoles.size();
            logger.warning("Numero de validadores :" + numeroValidadores);
            condicionOperacionRow.setAttribute("NumeroValidador", numeroValidadores);
            
                if (condicionType.getValidacionCondicion() != null) {
                    
                    for (ValidacionCondicion vCondicion :
                         condicionType.getValidacionCondicion()) {
                        logger.log(ADFLogger.WARNING, "Valor estado :" + vCondicion.getLoginUsuario());
                        // Tomamos de la lista el nodo que corresponda al idRol y loginUsuario
                        if ((vCondicion.getLoginUsuario() != null) && (vCondicion.getRolBPM() != null) &&
                            (vCondicion.getRolBPM().getId() != null) && (idRol != null) &&
                            (vCondicion.getLoginUsuario().equalsIgnoreCase(loginUsuario)) &&
                            (vCondicion.getRolBPM().getId().compareTo(idRol) == 0)) {
                            logger.log(ADFLogger.WARNING,
                                       "Comparacion de roles :" + "ValidacionCondicionRol = " +
                                       vCondicion.getRolBPM().getId() + ". Rol Inicia Tarea = " + idRol);
                            validacionCondicion = vCondicion;
                            logger.log(ADFLogger.WARNING, "Valor estado :" + validacionCondicion.isEstado());
                            break;
                        }else{
                            logger.log(ADFLogger.WARNING, "No se encontro algun validador con rol =" + idRol);
                        }
                    }
                }

                // Encuentra el valor del estado en que se encuentra la condicion del Cumplidor
                if (null != condicion && null != condicion.getEstadoTCC() && null != condicion.getEstadoTCC().getId()) {
                    idEstadoTccAux = condicion.getEstadoTCC().getId();
                    idEstadoTcc = idEstadoTccAux.intValue();
                    if (idEstadoTcc.compareTo(FenixModelConstants.ESTADO_TCC_VALIDADA) == 0) {
                        condicionOperacionRow.setAttribute("EstadoValidacionCondicion", Boolean.TRUE);
                        logger.warning("La condicion ha sido validada por lo tanto no cambia el valor de EstadoValidacionCondicion");
                    } else {
                        if (validacionCondicion != null) {
                            logger.log(ADFLogger.WARNING, "EstadoValidacionCondicion" + validacionCondicion.isEstado());
                            logger.log(ADFLogger.WARNING,
                                       "EstadoValidacionCondicion" + validacionCondicion.getRolBPM().getId() + ":" +
                                       validacionCondicion.getNombreUsuario());
                            condicionOperacionRow.setAttribute("EstadoValidacionCondicion", validacionCondicion.isEstado());
                        } else {
                            condicionOperacionRow.setAttribute("EstadoValidacionCondicion", Boolean.FALSE);
                            logger.log(ADFLogger.WARNING,
                                       "EstadoValidacionCondicion es FALSE :" +
                                       condicionOperacionRow.getAttribute("EstadoValidacionCondicion"));
                        }
                    }
                } else {
                    logger.warning("El estado de la condicion es nula.");
                }
    //            }
            
            condicionOperacionRow.setAttribute("Id", id);
            condicionOperacionRow.setAttribute("IdCondicion", condicion.getIdCondicion());
            condicionOperacionRow.setAttribute("Nombre", condicion.getNombre());
            condicionOperacionRow.setAttribute("ControlCondicion", condicion.getControlCondicion().getId());
            logger.warning("id de la condicion :" + condicionOperacionRow.getAttribute("IdCondicion"));
            
            //Se asigna Fecha de Vigencia
            if (condicion.getFechaVigencia() != null) {
                condicionOperacionRow.setAttribute("FechaVigencia", new java.sql.Timestamp (condicion.getFechaVigencia().toGregorianCalendar().getTimeInMillis()));
                logger.warning("FechaVigencia: " + condicionOperacionRow.getAttribute("FechaVigencia"));    
            }
            
            // Asigna Id de Estado TCC, ShortDesc y Accion
            if((condicion.getEstadoTCC() != null) && (condicion.getEstadoTCC().getId() != null) 
               && (condicion.getEstadoTCC().getId().intValue() != 0)) {
                
                condicionOperacionRow.setAttribute("IdEstadoTcc", condicion.getEstadoTCC().getId());
                condicionOperacionRow.setAttribute("ShortDesc", condicion.getEstadoTCC().getDescripcion());
                condicionOperacionRow.setAttribute("Accion", (condicion.getEstadoTCC().getDescripcion() == null) ? "" : 
                                                   condicion.getEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
                logger.warning("Valor del estado :" + condicionOperacionRow.getAttribute("IdEstadoTcc"));
            }
            
            // Asigna Id de Sub Estado TCC. 
            // Reasigna ShortDesc y Accion por la lógica en pantalla de que sólo se muestra un ícono: 
            // el del sub-estado (si NO es null) o el del estado (cuando sub-estado es null).
            if((condicion.getSubEstadoTCC() != null) && (condicion.getSubEstadoTCC().getId() != null) 
               && (condicion.getSubEstadoTCC().getId().intValue() != 0)) {
                
                condicionOperacionRow.setAttribute("IdSubEstadoTcc", condicion.getSubEstadoTCC().getId());
                condicionOperacionRow.setAttribute("ShortDesc", condicion.getSubEstadoTCC().getDescripcion());
                condicionOperacionRow.setAttribute("Accion", (condicion.getSubEstadoTCC().getDescripcion() == null) ? "" : 
                                                   condicion.getSubEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
                logger.warning("Valor del subEstado :" + condicionOperacionRow.getAttribute("IdSubEstadoTcc"));
            }
            
            // Detalle Html dinámico (incluye Descripción, Categoría, Tipo de Control, Eventos, Fuente, Línea y Observaciones)
            String detalleGenerado =  generarHTMLDetalleCondicion(condicion.getConfigAtributo());
            
            condicionOperacionRow.setAttribute("Detalle",detalleGenerado);
            logger.warning("Detalle generado :\n" + detalleGenerado);
            // Validador(es) y roles.
            for(CategoriaCondicion categoriaCondicion : condicion.getCategoriaCondicion()) {
                for(Catalogo validadorCategoria : categoriaCondicion.getValidadores()) {
                    
                    // Mapeo de Validador. Verificamos que NO se repita
                    if((validadorCategoria.getDescripcion() != null) 
                       && (!validador.contains(validadorCategoria.getDescripcion()))) {
                        
                        validador += (validadorCategoria.getDescripcion()+ ". ");
                    }
                    logger.warning("valor de validadorCategoria: " + validadorCategoria.getDescripcionCorta());
                    String descRol = null;

                    // Mapeo de roles
                    if(validadorCategoria.getDescripcionCorta() != null) {
                        
                        descRol = validadorCategoria.getDescripcionCorta();
                        descRol = descRol.toUpperCase().trim();
                        
                        if(descRol.contains("ASJUR"))
                            condicionOperacionRow.setAttribute("RequiereAsjur", Boolean.TRUE);
                        else if(descRol.contains("SEPRI"))
                            condicionOperacionRow.setAttribute("RequiereSepri", Boolean.TRUE);
                        else if(descRol.contains("AED"))
                            condicionOperacionRow.setAttribute("RequiereAed", Boolean.TRUE);
                        else if(descRol.contains("PCT"))
                            condicionOperacionRow.setAttribute("RequierePct", Boolean.TRUE);
                        else if(descRol.contains("SUPERVISION"))
                            condicionOperacionRow.setAttribute("RequiereSupervision", Boolean.TRUE);
                        else if(descRol.contains("COFI"))
                            condicionOperacionRow.setAttribute("RequiereCofi", Boolean.TRUE);
                        
                        //Se agregan Rol de validadores por nuevas categorias de Fase 3. 
                        //Vease Fichas TCC Terminos v1.16
                        if(descRol.contains("EJECUTIVO_DAECI"))
                            condicionOperacionRow.setAttribute("RequiereAnalistaDaeci", Boolean.TRUE);
                        else if(descRol.contains("OFIC"))
                            condicionOperacionRow.setAttribute("RequiereAnalistaOfic", Boolean.TRUE);
                        else if(descRol.contains("ANALISTA_FINAM"))
                            condicionOperacionRow.setAttribute("RequiereAnalistaFinam", Boolean.TRUE);
                        else if(descRol.contains("ESPECIALISTA_AMBIENTAL"))
                            condicionOperacionRow.setAttribute("RequiereEspAmbiental", Boolean.TRUE);
                        else if(descRol.contains("EJECUTIVO_FINAM"))
                            condicionOperacionRow.setAttribute("RequiereEjecutivoFinam", Boolean.TRUE);
                        else if(descRol.contains("ANALISTA_USC"))
                            condicionOperacionRow.setAttribute("RequiereSegCred", Boolean.TRUE);
                        
                    }else{
                        logger.warning("La descripcion corta del validador es nula.");
                    }
                }
            }
            logger.log(ADFLogger.WARNING, "Validador :" + validador);
            condicionOperacionRow.setAttribute("Validador", validador);
            
            // Insertamos row
            this.insertRow(condicionOperacionRow);
            
            // Actualizamos valor de Id
            id++;
        }
    }
    
    private void mappingServicioPantalla(ConsultarCondicionValidacionByRolResponseType response, Long idRol, 
                                         String loginUsuario, Boolean esRetornoCumplirCondiciones) {
        logger.log(ADFLogger.WARNING, "Inside mappingServicioPantalla." + loginUsuario);
        Integer id = Integer.valueOf(1);
        Row condicionOperacionRow = null;
        Long idEstadoTccAux = null;
        Integer idEstadoTcc = null;
        List<Long> listaRoles = null;
        // Limpiamos VO
        this.clearCache();
        
        // Iteramos lista de Condiciones
        for(CondicionType condicionType : response.getCondicion()) {
            
            Condicion condicion = condicionType.getCondicion();
            ValidacionCondicion validacionCondicion = null;            
            String validador = "";
            condicionOperacionRow = this.createRow();
            // Asignación de validacionCondicion
            //Si algun validador retorna a la tarea Cumplir Condiciones al EstadoValidacionCondicion se le
            //asigna el valor false. 
//            if (esRetornoCumplirCondiciones) {
//            } else {
            
            //Se implementa logica para descartar roles repetidos incidencia FNXII-6524
            listaRoles = new ArrayList<Long>();
            Integer numeroValidadores = 0;
            Long rolBpm = null;
            for(CategoriaCondicion categoriaCondicion : condicionType.getCondicion().getCategoriaCondicion()){
                logger.warning("numero Validadores " + categoriaCondicion.getValidadores().size());
                for (Catalogo catalogo : categoriaCondicion.getValidadores()) {
                    logger.warning(catalogo.getDescripcionCorta());
                    rolBpm = catalogo.getId();
                    Boolean existeRol = Boolean.FALSE;
                    for(Long rol : listaRoles){
                        if(rol.compareTo(rolBpm) == 0){
                            existeRol = Boolean.TRUE;
                        }
                    }
                    if(!existeRol){
                        listaRoles.add(rolBpm);
                    }
                }
            }
            
            numeroValidadores = listaRoles.size();
            logger.warning("Numero de validadores :" + numeroValidadores);
            condicionOperacionRow.setAttribute("NumeroValidador", numeroValidadores);
            
                if (condicionType.getValidacionCondicion() != null) {
                    
                    for (ValidacionCondicion vCondicion :
                         condicionType.getValidacionCondicion()) {
                        logger.log(ADFLogger.WARNING, "Valor estado :" + vCondicion.getLoginUsuario());
                        // Tomamos de la lista el nodo que corresponda al idRol y loginUsuario
                        if ((vCondicion.getLoginUsuario() != null) && (vCondicion.getRolBPM() != null) &&
                            (vCondicion.getRolBPM().getId() != null) && (idRol != null) &&
                            (vCondicion.getLoginUsuario().equalsIgnoreCase(loginUsuario)) &&
                            (vCondicion.getRolBPM().getId().compareTo(idRol) == 0)) {
                            logger.log(ADFLogger.WARNING,
                                       "Comparacion de roles :" + "ValidacionCondicionRol = " +
                                       vCondicion.getRolBPM().getId() + ". Rol Inicia Tarea = " + idRol);
                            validacionCondicion = vCondicion;
                            logger.log(ADFLogger.WARNING, "Valor estado :" + validacionCondicion.isEstado());
                            break;
                        }else{
                            logger.log(ADFLogger.WARNING, "No se encontro algun validador con rol =" + idRol);
                        }
                    }
                }

                // Encuentra el valor del estado en que se encuentra la condicion del Cumplidor
                if (null != condicion.getEstadoTCC().getId()) {
                    idEstadoTccAux = condicion.getEstadoTCC().getId();
                    idEstadoTcc = idEstadoTccAux.intValue();
                    if (idEstadoTcc.compareTo(FenixModelConstants.ESTADO_TCC_VALIDADA) == 0) {
                        condicionOperacionRow.setAttribute("EstadoValidacionCondicion", Boolean.TRUE);
                        logger.warning("La condicion ha sido validada por lo tanto no cambia el valor de EstadoValidacionCondicion");
                    } else {
                        if (validacionCondicion != null) {
                            logger.log(ADFLogger.WARNING, "EstadoValidacionCondicion" + validacionCondicion.isEstado());
                            logger.log(ADFLogger.WARNING,
                                       "EstadoValidacionCondicion" + validacionCondicion.getRolBPM().getId() + ":" +
                                       validacionCondicion.getNombreUsuario());
                            condicionOperacionRow.setAttribute("EstadoValidacionCondicion", validacionCondicion.isEstado());
                        } else {
                            condicionOperacionRow.setAttribute("EstadoValidacionCondicion", Boolean.FALSE);
                            logger.log(ADFLogger.WARNING,
                                       "EstadoValidacionCondicion es FALSE :" +
                                       condicionOperacionRow.getAttribute("EstadoValidacionCondicion"));
                        }
                    }
                } else {
                    logger.warning("El estado de la condicion es nula.");
                }
//            }
            
            condicionOperacionRow.setAttribute("Id", id);
            condicionOperacionRow.setAttribute("IdCondicion", condicion.getIdCondicion());
            condicionOperacionRow.setAttribute("Nombre", condicion.getNombre());
            condicionOperacionRow.setAttribute("ControlCondicion", condicion.getControlCondicion().getId());
            logger.warning("id de la condicion :" + condicionOperacionRow.getAttribute("IdCondicion"));
            
            //Se asigna Fecha de Vigencia
            if (condicion.getFechaVigencia() != null) {
                condicionOperacionRow.setAttribute("FechaVigencia", new java.sql.Timestamp (condicion.getFechaVigencia().toGregorianCalendar().getTimeInMillis()));
                logger.warning("FechaVigencia: " + condicionOperacionRow.getAttribute("FechaVigencia"));    
            }
            
            // Asigna Id de Estado TCC, ShortDesc y Accion
            if((condicion.getEstadoTCC() != null) && (condicion.getEstadoTCC().getId() != null) 
               && (condicion.getEstadoTCC().getId().intValue() != 0)) {
                
                condicionOperacionRow.setAttribute("IdEstadoTcc", condicion.getEstadoTCC().getId());
                condicionOperacionRow.setAttribute("ShortDesc", condicion.getEstadoTCC().getDescripcion());
                condicionOperacionRow.setAttribute("Accion", (condicion.getEstadoTCC().getDescripcion() == null) ? "" : 
                                                   condicion.getEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
                logger.warning("Valor del estado :" + condicionOperacionRow.getAttribute("IdEstadoTcc"));
            }
            
            // Asigna Id de Sub Estado TCC. 
            // Reasigna ShortDesc y Accion por la lógica en pantalla de que sólo se muestra un ícono: 
            // el del sub-estado (si NO es null) o el del estado (cuando sub-estado es null).
            if((condicion.getSubEstadoTCC() != null) && (condicion.getSubEstadoTCC().getId() != null) 
               && (condicion.getSubEstadoTCC().getId().intValue() != 0)) {
                
                condicionOperacionRow.setAttribute("IdSubEstadoTcc", condicion.getSubEstadoTCC().getId());
                condicionOperacionRow.setAttribute("ShortDesc", condicion.getSubEstadoTCC().getDescripcion());
                condicionOperacionRow.setAttribute("Accion", (condicion.getSubEstadoTCC().getDescripcion() == null) ? "" : 
                                                   condicion.getSubEstadoTCC().getDescripcion().replaceAll(" ", "").toLowerCase());
                logger.warning("Valor del subEstado :" + condicionOperacionRow.getAttribute("IdSubEstadoTcc"));
            }
            
            // Detalle Html dinámico (incluye Descripción, Categoría, Tipo de Control, Eventos, Fuente, Línea y Observaciones)
            condicionOperacionRow.setAttribute("Detalle", generarHTMLDetalleCondicion(condicion.getConfigAtributo()));
            
            // Validador(es) y roles
            for(CategoriaCondicion categoriaCondicion : condicion.getCategoriaCondicion()) {
                for(Catalogo validadorCategoria : categoriaCondicion.getValidadores()) {
                    
                    // Mapeo de Validador. Verificamos que NO se repita
                    if((validadorCategoria.getDescripcion() != null) 
                       && (!validador.contains(validadorCategoria.getDescripcion()))) {
                        
                        validador += (validadorCategoria.getDescripcion()+ ". ");
                    }
                    logger.warning("valor de validadorCategoria: " + validadorCategoria.getDescripcionCorta());
                    String descRol = null;

                    // Mapeo de roles
                    if(validadorCategoria.getDescripcionCorta() != null) {
                        
                        descRol = validadorCategoria.getDescripcionCorta();
                        descRol = descRol.toUpperCase().trim();
                        
                        if(descRol.contains("ASJUR"))
                            condicionOperacionRow.setAttribute("RequiereAsjur", Boolean.TRUE);
                        else if(descRol.contains("SEPRI"))
                            condicionOperacionRow.setAttribute("RequiereSepri", Boolean.TRUE);
                        else if(descRol.contains("AED"))
                            condicionOperacionRow.setAttribute("RequiereAed", Boolean.TRUE);
                        else if(descRol.contains("PCT"))
                            condicionOperacionRow.setAttribute("RequierePct", Boolean.TRUE);
                        else if(descRol.contains("SUPERVISION"))
                            condicionOperacionRow.setAttribute("RequiereSupervision", Boolean.TRUE);
                        else if(descRol.contains("COFI"))
                            condicionOperacionRow.setAttribute("RequiereCofi", Boolean.TRUE);
                        
                        //Se agregan Rol de validadores por nuevas categorias de Fase 3. 
                        //Vease Fichas TCC Terminos v1.16
                        if(descRol.contains("EJECUTIVO_DAECI"))
                            condicionOperacionRow.setAttribute("RequiereAnalistaDaeci", Boolean.TRUE);
                        else if(descRol.contains("OFIC"))
                            condicionOperacionRow.setAttribute("RequiereAnalistaOfic", Boolean.TRUE);
                        else if(descRol.contains("ANALISTA_FINAM"))
                            condicionOperacionRow.setAttribute("RequiereAnalistaFinam", Boolean.TRUE);
                        else if(descRol.contains("ESPECIALISTA_AMBIENTAL"))
                            condicionOperacionRow.setAttribute("RequiereEspAmbiental", Boolean.TRUE);
                        else if(descRol.contains("EJECUTIVO_FINAM"))
                            condicionOperacionRow.setAttribute("RequiereEjecutivoFinam", Boolean.TRUE);
                        else if(descRol.contains("ANALISTA_USC"))
                            condicionOperacionRow.setAttribute("RequiereSegCred", Boolean.TRUE);
                        
                    }else{
                        logger.warning("La descripcion corta del validador es nula.");
                    }
                }
            }
            logger.log(ADFLogger.WARNING, "Validador :" + validador);
            condicionOperacionRow.setAttribute("Validador", validador);
            
            // Insertamos row
            this.insertRow(condicionOperacionRow);
            
            // Actualizamos valor de Id
            id++;
        }
    }
    
    public Boolean validarCondicion(Long plIdCondicion, String psUserId, String nombreUsuario, Boolean pbEsValidador, 
                                    String psObservacion, Boolean pbEstado, String idTarea, String idRol, Long idAgrupador)
    {
      logger.warning("Inside validarCondicion.");
      Boolean respuestaServicio = Boolean.FALSE;
      ValidarCondicionRequestType request = null;
      ValidarCondicionResponseType response = null;
      
      if(plIdCondicion != null) {
          try {
              FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
              String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION);
              
              Condicion12BndQSService condicion12BndQSService = IWsdlLocation.Service.getInstance(Condicion12BndQSService.class, wsdl);
              CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
              request = new ValidarCondicionRequestType();
              ValidacionCondicion validacionCondicionReq = new ValidacionCondicion();
              
              validacionCondicionReq.setIdCondicion(plIdCondicion);
              validacionCondicionReq.setLoginUsuario(psUserId);
              validacionCondicionReq.setNombreUsuario(nombreUsuario);
              validacionCondicionReq.setEsValidador(pbEsValidador);
              validacionCondicionReq.setEstado(pbEstado);
              
              if(null != idTarea && idTarea.length()>0)
              {
                ObservacionCondicion obs = new  ObservacionCondicion();
                Catalogo tareaBpm = new Catalogo();
                
                tareaBpm.setId(Long.parseLong(idTarea));
                obs.setTareaBPM(tareaBpm);
                
                if(null != psObservacion && psObservacion.length()>0)
                { 
                  obs.setObservacion(psObservacion);
                }
                validacionCondicionReq.setObservacion(obs);
              }
            
              if(null != idRol && idRol.length()>0)
              {
                Catalogo rolBpm = new Catalogo();
                
                rolBpm.setId(Long.parseLong(idRol));
                validacionCondicionReq.setRolBPM(rolBpm);
              }
              //Se agrega objeto validacionCondicionReq al request para pasar los valores de los parametros
              //del metodo
              request.setValidacionCondicion(validacionCondicionReq);
              request.setAgrupador(idAgrupador);
              Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_VALIDAR_CONDICION);
              response = condicionPT.validarCondicion(request);
              ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_VALIDAR_CONDICION, horaInicio);

              if (null != response.getResultado()) {
                    if (response.getResultado().getResult() != null &&
                        response.getResultado().getResult().toString().equalsIgnoreCase("OK")) {
                        respuestaServicio = Boolean.TRUE;
                    } else {
                        logger.warning("Error en el objeto R");
                        String errorMsg = "Error en la respuesta del Servicio: ";
                        
                        if(response.getResultado() != null &&
                           response.getResultado().getMessage() != null){
                            errorMsg += " " + response.getResultado().getMessage();
                            
                            if(response.getResultado().getError() != null &&
                               response.getResultado().getError().getErrorDescription() != null){
                                errorMsg += ". Descripcion: " + 
                                            response.getResultado().getError().getErrorDescription();
                            }
                        }
                        throw new Exception(errorMsg);
                    }
                } else {
                    logger.warning("Error en la respuesta del servicio");
                    StringBuilder sb = new StringBuilder();
                    if (response.getResultado() == null) {
                        logger.warning("Objeto resultado es NULL");
                    } else {
                        sb.append(response.getResultado().getResult()).append(":").append(response.getResultado().getMessage());
                    }

                    throw new Exception("Error: " + sb.toString());
                }
                 
             
          } catch (Exception e) {
              
              logger.warning("Error al procesar el consumo del servicio para validar la condicion", e);
              
              logger.warning("Mensaje de error.", e.getMessage());
      
              JboException ex = new JboException(e);
              ex.addToExceptions(new Exception("Error al validar la condicion." + plIdCondicion));
              throw ex;
          }
      }
      logger.warning("Finaliza validarCondicion.");
      return respuestaServicio;
    }
    
    /**
     * Metodo de prueba unitaria de la generacion html del detalle 
     * de la condicion seleccionada. Requiere retornar true en el metodo esAtributoVisible
     * @author Jonathan Ruiz
     */
    public static void main(String[] args) {
        List<Atributo> plAtributos = new ArrayList<>();
        
        Atributo atributo = new Atributo();
        atributo.setColumna("columna");
        atributo.setEsObligatorio(true);
        atributo.setEtiqueta("Tipo de Control");
        atributo.setId(1L);
        atributo.setOrdenamiento(1);
        atributo.setSoloLectura(true);
        atributo.setTipoValor(TipoValorType.VARCHAR);
        atributo.getValor().add("Evento");
        
        plAtributos.add(atributo);
        
        CondicionesOperacionVOImpl obj = new CondicionesOperacionVOImpl();
        String html = obj.generarHTMLDetalleCondicion(plAtributos);
        
        System.out.println("html: ".concat(html));
        
    }
    
    private String generarHTMLDetalleCondicion2( List<Atributo> plAtributos)
    {
        logger.warning("Entra en generarHTMLDetalleCondicion2.");
      try
      {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = dbf.newDocumentBuilder(); 
        Document doc = builder.newDocument(); 
        Element detalleElement = doc.createElement(ELEMENT_NODE_DIV);  //Questionare Root
        doc.appendChild(detalleElement); 
        
        
        if(null!= plAtributos && plAtributos.size()>0)
        {
          Element tableElement = doc.createElement(ELEMENT_NODE_TABLE);
          Map tipoControlFecha = obtenerTipoControlTipoFechaInicio(plAtributos);
          
          for(Atributo atr : plAtributos)
          {
            
            Element filaElement = doc.createElement(ELEMENT_NODE_TR);
            Element labelElement =  doc.createElement(ELEMENT_NODE_TD);
            Element valueElement = doc.createElement(ELEMENT_NODE_TD);
            
            // Se agregan clases de estilos acorde a las maquetas entregadas
            labelElement.setAttribute("class", "condicion-etiqueta");
            valueElement.setAttribute("class", "condicion-valor");
              
            TipoValorType tipoValor = atr.getTipoValor();
            String valor = "";
            
            // Para los tipos ONECHOICE y MULTICHOICE el servicio regresa una lista de catálogos, 
            // siempre y cuando el valor no sea vacío
            if((tipoValor == TipoValorType.ONECHOICE || tipoValor == TipoValorType.MULTICHOICE) 
               && (obtenerValorAtributo(atr.getValor()).trim().length() > 0)) {
                
                // Para el caso de MULTICHOICE puede tener más de un valor
                String[] valores = obtenerValorAtributo(atr.getValor()).split("\n");
                List<Long> listValores = new ArrayList<>();
                
                // Inicializamos lista de ids
                for(String idValor : valores){
                    listValores.add(Long.valueOf(idValor));
                }
                
                // Iteramos en la lista de catálogos para obtener el valor(es)
                for(Catalogo cat : atr.getCatalogo()){
                    
                    if(listValores.contains(cat.getId())) {
                        valor += (cat.getDescripcion() + "; "); 
                        
                        if(listValores.size() == 1)
                            break; // Para el caso de ONECHOICE la lista sólo tiene un valor
                    }
                }
            }
            else{
                // Para los demás tipos de valor: VARCHAR, NUMBER, etc.
                valor = obtenerValorAtributo(atr.getValor());
            }
              
            // Removemos el punto y coma del final del valor (agregado para los de tipo lista)
            if((valor.length() > 0) && (valor.contains(";"))) {
                
                StringBuilder sbAux = new StringBuilder(valor);
                sbAux.replace(valor.lastIndexOf(";"), valor.lastIndexOf(";") + 1, "");
                valor = sbAux.toString();
            }
            
            // Insertamos la etiqueta y valor al Html
            if(esAtributoVisible((String)tipoControlFecha.get("tipoControl"), 
                                 (String)tipoControlFecha.get("tipoFechaInicio"), atr.getEtiqueta().trim(), valor.trim())) {
                
                // Se agrega terminacion en dos puntos para la etiqueta
                labelElement.setTextContent(Normalizer.normalize(atr.getEtiqueta(), Normalizer.Form.NFC).concat(":"));
                valueElement.setTextContent(Normalizer.normalize(valor.trim(), Normalizer.Form.NFC) );
                filaElement.appendChild(labelElement);
                filaElement.appendChild(valueElement);
                
                tableElement.insertBefore(filaElement, tableElement.getFirstChild());
            }
          }
          
          detalleElement.appendChild(tableElement);
        }
        
        return getXMLString(detalleElement);
      }
      catch(Exception e)
      {
        logger.warning("Error en generarHTMLDetalleCondicion", e);
        
        return "";
      }
    }

    
    private String generarHTMLDetalleCondicion( List<Atributo> plAtributos)
    {
        logger.warning("Entra en generarHTMLDetalleCondicion.");
      try
      {
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder builder = dbf.newDocumentBuilder(); 
        Document doc = builder.newDocument(); 
        Element detalleElement = doc.createElement(ELEMENT_NODE_DIV);  //Questionare Root
        doc.appendChild(detalleElement); 
        
        
        if(null!= plAtributos && plAtributos.size()>0)
        {
          Element tableElement = doc.createElement(ELEMENT_NODE_TABLE);
          Map tipoControlFecha = obtenerTipoControlTipoFechaInicio(plAtributos);
          
          for(Atributo atr : plAtributos)
          {
            
            Element filaElement = doc.createElement(ELEMENT_NODE_TR);
            Element labelElement =  doc.createElement(ELEMENT_NODE_TD);
            Element valueElement = doc.createElement(ELEMENT_NODE_TD);
            
            // Se agregan clases de estilos acorde a las maquetas entregadas
            labelElement.setAttribute("class", "condicion-etiqueta");
            valueElement.setAttribute("class", "condicion-valor");
              
            TipoValorType tipoValor = atr.getTipoValor();
            String valor = "";
            
            // Para los tipos ONECHOICE y MULTICHOICE el servicio regresa una lista de catálogos, 
            // siempre y cuando el valor no sea vacío
            if((tipoValor == TipoValorType.ONECHOICE || tipoValor == TipoValorType.MULTICHOICE) 
               && (obtenerValorAtributo(atr.getValor()).trim().length() > 0)) {
                
                // Para el caso de MULTICHOICE puede tener más de un valor
                String[] valores = obtenerValorAtributo(atr.getValor()).split("\n");
                List<Long> listValores = new ArrayList<>();
                
                // Inicializamos lista de ids
                for(String idValor : valores){
                    listValores.add(Long.valueOf(idValor));
                }
                
                // Iteramos en la lista de catálogos para obtener el valor(es)
                for(Catalogo cat : atr.getCatalogo()){
                    
                    if(listValores.contains(cat.getId())) {
                        valor += (cat.getDescripcion() + "; "); 
                        
                        if(listValores.size() == 1)
                            break; // Para el caso de ONECHOICE la lista sólo tiene un valor
                    }
                }
            }
            else{
                // Para los demás tipos de valor: VARCHAR, NUMBER, etc.
                valor = obtenerValorAtributo(atr.getValor());
            }
              
            // Removemos el punto y coma del final del valor (agregado para los de tipo lista)
            if((valor.length() > 0) && (valor.contains(";"))) {
                
                StringBuilder sbAux = new StringBuilder(valor);
                sbAux.replace(valor.lastIndexOf(";"), valor.lastIndexOf(";") + 1, "");
                valor = sbAux.toString();
            }
            
            // Insertamos la etiqueta y valor al Html
            if(esAtributoVisible((String)tipoControlFecha.get("tipoControl"), 
                                 (String)tipoControlFecha.get("tipoFechaInicio"), atr.getEtiqueta().trim(), valor.trim())) {
                
                // Se agrega terminacion en dos puntos para la etiqueta
                labelElement.setTextContent(Normalizer.normalize(atr.getEtiqueta(), Normalizer.Form.NFC).concat(":"));
                valueElement.setTextContent(Normalizer.normalize(valor.trim(), Normalizer.Form.NFC) );
                filaElement.appendChild(labelElement);
                filaElement.appendChild(valueElement);
                
                tableElement.insertBefore(filaElement, tableElement.getFirstChild());
            }
          }
          
          detalleElement.appendChild(tableElement);
        }
        
        return getXMLString(detalleElement);
      }
      catch(Exception e)
      {
        logger.warning("Error en generarHTMLDetalleCondicion", e);
        
        return "";
      }
    }
    
    private Map obtenerTipoControlTipoFechaInicio(List<Atributo> plAtributos) {
        // Iteramos lista de configAtributo para obtener el Tipo de Control y el Tipo Fecha Inicio
        HashMap<String, String> tipoControlFecha = new HashMap<String, String>();
        String tipoControl = "";
        String tipoFechaInicio = "";
        
        for(Atributo atr : plAtributos){
            TipoValorType tipoValor = atr.getTipoValor();
          
            // Para los tipos ONECHOICE y MULTICHOICE el servicio regresa una lista de catálogos, 
            // siempre y cuando el valor no sea vacío. 
            // Iteramos sólo en los catálogos de Tipo de Control y Tipo Fecha Inicio
            if((tipoValor == TipoValorType.ONECHOICE || tipoValor == TipoValorType.MULTICHOICE) 
               && (obtenerValorAtributo(atr.getValor()).trim().length() > 0) 
               && (atr.getEtiqueta().trim().equalsIgnoreCase(TIPO_CONTROL_LABEL) 
                   || atr.getEtiqueta().trim().equalsIgnoreCase(TIPO_FECHA_INICIO_LABEL))) { 
                
                // Para el caso de MULTICHOICE puede tener más de un valor
                String[] valores = obtenerValorAtributo(atr.getValor()).split("\n");
                List<Long> listValores = new ArrayList<>();
              
                // Inicializamos lista de ids
                for(String idValor : valores){
                  listValores.add(Long.valueOf(idValor));
                }
              
                // Iteramos en la lista de catálogos para obtener el valor(es)
                for(Catalogo cat : atr.getCatalogo()){
                  
                  if(listValores.contains(cat.getId())) {
                      if(atr.getEtiqueta().trim().equalsIgnoreCase(TIPO_CONTROL_LABEL))
                          tipoControl = cat.getDescripcion();
                      else if(atr.getEtiqueta().trim().equalsIgnoreCase(TIPO_FECHA_INICIO_LABEL))
                          tipoFechaInicio = cat.getDescripcion();
                      
                      // Tipo de Control y Tipo Fecha Inicio son ONECHOICE, por lo tanto, la lista sólo tiene un valor
                      break; 
                  }
                }
            }
        }
        
        tipoControlFecha.put("tipoControl", tipoControl);
        tipoControlFecha.put("tipoFechaInicio", tipoFechaInicio);
        
        return tipoControlFecha;
    }
    
    private Boolean esAtributoVisible(String tipoControl, String tipoFechaInicio, String etiqueta, String valor){
        Boolean esVisible = Boolean.FALSE;
        Boolean esTipoEvento = Boolean.FALSE;
        Boolean esTipoCalendario = Boolean.FALSE;
        Boolean esFechaEspecifica = Boolean.FALSE;
        
        // Verificamos si el atributo es visible en base a las Notas de Implementación (NI) del Caso de Uso, 
        // las cuales son equivalentes entre las pantallas Cumplir y Validar condiciones (aunque tengan diferent número)        
        if(tipoControl.equalsIgnoreCase("Evento"))
            esTipoEvento = Boolean.TRUE;
        else if(tipoControl.equalsIgnoreCase("Calendario"))
            esTipoCalendario = Boolean.TRUE;
        
        if(tipoFechaInicio.equalsIgnoreCase("Fecha específica"))
            esFechaEspecifica = Boolean.TRUE;
        
        // NI07 Este atributo (Eventos) sólo es visible cuando el atributo "Tipo de Control" es "Evento".
        String[] atributosNI07 = {EVENTOS_LABEL};
        
        // NI08 Este atributo 
        // (Tipo Fecha Inicio, Fecha Inicio, Plazo, Tipo Plazo, Fecha Final)     
        // sólo es visible cuando el atributo "Tipo de Control" es "Calendario".
        String[] atributosNI08 = {TIPO_FECHA_INICIO_LABEL, FECHA_INICIO_LABEL, PLAZO_LABEL, TIPO_PLAZO_LABEL,
                                  FECHA_FINAL_LABEL};
        // NI09 Este atributo 
        // (Nombre de la comisión, Categoría, Descripción, Tipo de Control, Fuente, Línea, Observaciones)              
        // sólo es visible cuando el atributo "Tipo de Control" es "Calendario" o "Evento".
        String[] atributosNI09 = {NOMBRE_COMISION_LABEL, CATEGORIA_LABEL, DESCRIPCION_LABEL, TIPO_CONTROL_LABEL,
                                  FUENTE_LABEL, LINEA_LABEL, OBSERVACIONES_LABEL};
        
        // NI10 Este atributo 
        // (Fecha Inicio)
        // sólo es visible cuando el atributo "Tipo Fecha Inicio" es igual a "Fecha específica".
        String[] atributosNI10 = {TIPO_FECHA_INICIO_LABEL};
        
        if(Arrays.asList(atributosNI07).contains(etiqueta) && esTipoEvento)
            esVisible = Boolean.TRUE;
        
        if(Arrays.asList(atributosNI08).contains(etiqueta) && esTipoCalendario)
            esVisible = Boolean.TRUE;
        
        if(Arrays.asList(atributosNI09).contains(etiqueta) && (esTipoCalendario || esTipoEvento))
            esVisible = Boolean.TRUE;
        
        if(esVisible && Arrays.asList(atributosNI10).contains(etiqueta) && esFechaEspecifica)
            esVisible = Boolean.TRUE;
        
        // Incidencia FNXII-2957 - Si los campos de tipo lista Línea y Fuente están vacíos, no se muestran.
        if(esVisible && (etiqueta.equalsIgnoreCase(LINEA_LABEL) || etiqueta.equalsIgnoreCase(FUENTE_LABEL))) {
            
            if(valor.length() == 0)
                esVisible = Boolean.FALSE;
        }
        
        return esVisible;
        //return true; // Para pruebas unitarias
    }
    
    public Boolean validarCondicionesEvidenciaObservacion() {
        Boolean esDatosCorrectos = Boolean.TRUE;
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            Long idCondicion = (Long)row.getAttribute("IdCondicion");
                        
            // Verificamos que la Condición tenga al menos una evidencia
            // o se haya ingresado una observación de cumplimiento en sustitución de la evidencia
            if(!(esCondicionConEvidencia(fenixAM, idCondicion) || esCondicionConObservacion(fenixAM, idCondicion))) {
                
                esDatosCorrectos = Boolean.FALSE;
                break;
            }
        }
        iterator.closeRowSetIterator();   
          
        return esDatosCorrectos;
    }
            
    public Boolean validarCondicionesByEstado(String estado) {
        Boolean esDatosCorrectos = Boolean.TRUE;
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            String accion = (String)row.getAttribute("Accion");
            
            // Verificamos que el estado de cada condición sea el indicado en el parámetro "estado"
            if((accion == null) || !accion.equalsIgnoreCase(estado)) {
                
                esDatosCorrectos = Boolean.FALSE;
                break;
            }
        }
        iterator.closeRowSetIterator();   
          
        return esDatosCorrectos;
    }
    
    public Boolean existeCondicionConEstado(String estado) {
        Boolean esExisteCondicionConEstado = Boolean.FALSE;
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            String accion = (String)row.getAttribute("Accion");
            
            // Verificamos si existe al menos una condición cuyo estado sea el indicado en el parámetro "estado"
            if((accion != null) && accion.equalsIgnoreCase(estado)) {
                
                esExisteCondicionConEstado = Boolean.TRUE;
                break;
            }
        }
        iterator.closeRowSetIterator();   
          
        return esExisteCondicionConEstado;
    }
    
    public Boolean validarCondicionesEstadoValidacion() {
        Boolean esDatosCorrectos = Boolean.TRUE;
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        Long idEstadoTccAux = null;
        Integer idEstadoTcc = null;
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            if (null != row.getAttribute("IdEstadoTcc")) {
                idEstadoTccAux = (Long) row.getAttribute("IdEstadoTcc");
                idEstadoTcc = idEstadoTccAux.intValue();
                if (idEstadoTcc.compareTo(FenixModelConstants.ESTADO_TCC_VALIDADA) == 0) {
                    logger.warning("El estado de la condicion es validada.");
                } else {
                    Boolean estadoValidacionCondicion = (Boolean) row.getAttribute("EstadoValidacionCondicion");
                    // Verificamos que el Estado de Validación de cada condición sea true
                    if ((estadoValidacionCondicion == null) || !estadoValidacionCondicion) {

                        esDatosCorrectos = Boolean.FALSE;
                        break;
                    }
                }
            } else {
                logger.warning("El valor del estado tcc de la condcion es nula.");
            }
        }
        iterator.closeRowSetIterator();   
          
        return esDatosCorrectos;
    }
     
    public Boolean obtenerCondicionEstadoPorValidar(){
        logger.warning("Entra en obtenerCondicionValidaParcialmente");
         Boolean esPorValidar = Boolean.FALSE;
        RowSetIterator iterator = null;
         try{
             iterator = this.getViewObject().createRowSetIterator(null);
             iterator.reset();
             Long idSubEstadoTccAux = null;
             Integer idSubEstadoTcc = null;
             
             while (iterator.hasNext()) {
                 Row row = iterator.next();
                 if (null != row.getAttribute("IdSubEstadoTcc")) {
                     idSubEstadoTccAux = (Long) row.getAttribute("IdSubEstadoTcc");
                     idSubEstadoTcc = idSubEstadoTccAux.intValue();
                     if (idSubEstadoTcc.compareTo(FenixModelConstants.SUBESTADO_TCC_POR_VALIDAR) == 0) {
                         esPorValidar = Boolean.TRUE;
                         logger.warning("El estado de la condicion es Por validar.");
                         break;
                     } else {
                         logger.warning("La condicion es valida parcialmente.");
                     }
                 } else {
                     logger.warning("El valor del estado tcc de la condcion es nula.");
                 }
             }
             iterator.closeRowSetIterator();     
         }catch(Exception e){
             logger.warning("Error en obtenerCondicionValidaParcialmente.", e);
         }
        logger.warning("Existe condicion con estado Por validar." + esPorValidar);
         return esPorValidar;
    }
    public Boolean requiereRol(String nombreAtributoRol) {
        Boolean esRequiereRol = Boolean.FALSE;
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            Boolean rol = (Boolean)row.getAttribute(nombreAtributoRol);
            
            // Verificamos si alguna de las condiciones requiere el rol enviado
            if((rol != null) && rol) {
                
                esRequiereRol = Boolean.TRUE;
                break;
            }
        }
        iterator.closeRowSetIterator();   
        logger.warning("requiereRol ROL: " + nombreAtributoRol + " = " + esRequiereRol);
        return esRequiereRol;
    }
    
    public Boolean actualizarEstadoCondiciones(Integer estado, Integer subEstado, Boolean esRetorno, Long idAgrupador) {
        Boolean esEjecucionExitosa = Boolean.TRUE;
        Boolean esError = Boolean.FALSE;
        Boolean esValida = Boolean.FALSE;
        String mensajeError = null;
        Integer numeroValidadores = null;
        ActualizarEstadoTCCRequestType request = null;
        ActualizarEstadoTCCResponseType response = null;   
        ListaTCC listaTcc = new ListaTCC();
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            TCC condicion = new TCC();
            Long idCondicion = (Long)row.getAttribute("IdCondicion");
            Long idSubEstadoTcc = (Long)row.getAttribute("IdSubEstadoTcc");
            // Datos comunes de Condición
            condicion.setId(idCondicion.longValue());
            condicion.setTipo(Tipo.fromValue("CONDICION"));
            condicion.setEstado(estado);
            
            if(null != row.getAttribute("NumeroValidador")){
                logger.warning("Numero de validadores por condicion :" + idCondicion + " -->" + row.getAttribute("NumeroValidador"));
                numeroValidadores = (Integer)row.getAttribute("NumeroValidador");
            }else{
                logger.warning("El numero de validadores es nulo.");
            }
            
            if(subEstado != null)
                condicion.setSubEstado(subEstado);
            
            // Cuando es Finalizar, se insertan todas las Condiciones a la lista
            if((esRetorno == null) || (!esRetorno)){
                esValida = condicionValidada(idCondicion, idAgrupador, numeroValidadores);
            if(null != esValida && esValida){
                logger.log(ADFLogger.WARNING, "La condicion ha sido validada por todos los roles." + idCondicion);
                listaTcc.getTCC().add(condicion);
            }else{
                logger.log(ADFLogger.WARNING, "La condicion no ha sido validada por todos los roles." + idCondicion);
            }
            }else if((idSubEstadoTcc != null) 
                    && (idSubEstadoTcc.intValue() != FenixModelConstants.SUBESTADO_TCC_VALIDADA.intValue()) 
                    && (idSubEstadoTcc.intValue() != FenixModelConstants.SUBESTADO_TCC_VALIDA_PARCIALMENTE.intValue())){
                
                // Cuando es Retorno, se agregan aquellas que NO están en estado Validada o Valida Parcialmente
                logger.warning("Estado de la condicion :" + idSubEstadoTcc + " condicion :" + idCondicion);
                listaTcc.getTCC().add(condicion);
            }else{
                logger.warning("El estado de la condicion es validada o valida parcialmente, no se cambia estado de la condicion.");
            }
        }
        iterator.closeRowSetIterator(); 
        
        // Invocación a servicio
        try {
            FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.MATRIZ);

            MatrizTCC12BndQSService matrizTCC12BndQSService = IWsdlLocation.Service.getInstance(MatrizTCC12BndQSService.class, wsdl);
            MatrizTCCPT matrizTccPT = matrizTCC12BndQSService.getMatrizTCC12BndQSPort();
            
            request = new ActualizarEstadoTCCRequestType();
            request.setListaTCC(listaTcc);
            
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.ACTUALIZAR_ESTADO_TCC_CONDICIONES);
                response = matrizTccPT.actualizarEstadoTCC(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.ACTUALIZAR_ESTADO_TCC_CONDICIONES, horaInicio);
            
            if(response.getResultado().getResult().value()=="ERROR"){
                esEjecucionExitosa = Boolean.FALSE;
                esError = Boolean.TRUE;
                mensajeError = response.getResultado().getMessage();
                mensajeError = mensajeError.concat(response.getResultado().getError().getErrorDescription());
            }
        } catch(Exception e){
            logger.warning("Error al " + FenixModelConstants.ACTUALIZAR_ESTADO_TCC_CONDICIONES, e);
            esEjecucionExitosa = Boolean.FALSE;  
            esError = Boolean.TRUE;
        } finally {
            if (esError) {
                JboException exception = new JboException("Error: " + mensajeError);
                throw exception;
            }
        }
        
        return esEjecucionExitosa;
    }
    
    public Boolean actualizaEstadoCondicion(Integer estado, Integer subEstado, Boolean esRetorno, Long idAgrupador) {
        logger.warning("Entra en actualizaEstadoCondicion");
        
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        
        Boolean esEjecucionExitosa = Boolean.TRUE;
        Boolean esError = Boolean.FALSE;
        Boolean esValida = Boolean.FALSE;
        String mensajeError = null;
        ActualizarEstadoCondicionRequestType request = null;
        ActualizarEstadoCondicionResponseType response = null;
        Catalogo catalagoEstado = new Catalogo();
        Catalogo catalogoSubEstado = new Catalogo();
        Condicion condicion = new Condicion();
        Long idCondicion = null;
        Long idSubEstadoTcc = null;
        Long idEstadoTcc = null;
        Long idSubEstado = null;
        Integer numeroValidadores = null;
        List<Long> idCondicionesList = null;
        Boolean cambioEstadoCumplidor = Boolean.FALSE;
        
        Row row = null;
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        //Convertir estados a Long
            if(subEstado != null && null != estado){
                idEstadoTcc = new Long(estado);
                idSubEstado = new Long(subEstado);
                catalagoEstado.setId(idEstadoTcc);
                catalogoSubEstado.setId(idSubEstado);
            } else {
                logger.warning("El estado o subestado es nulo.");
            }
        while (iterator.hasNext()) {
            row = iterator.next();
            idCondicion = (Long)row.getAttribute("IdCondicion");
            idSubEstadoTcc = (Long)row.getAttribute("IdSubEstadoTcc");
            condicion.setIdCondicion(idCondicion);
            //Se obtiene elnumero de validadores obtenidos del servicio, Se descarta la tabla TRE_CATEGORIA_CONDICION
            //Se atiende FNXII-5482
            if(null != row.getAttribute("NumeroValidador")){
                logger.warning("Numero de validadores por condicion :" + idCondicion + " -->" + row.getAttribute("NumeroValidador"));
                numeroValidadores = (Integer)row.getAttribute("NumeroValidador");
            }else{
                logger.warning("El numero de validadores es nulo.");
            }
            
            if(idCondicionesList == null){
                logger.warning("Inicializa idCondicionesList");
                idCondicionesList = new ArrayList<Long>();
            }
            
            // Cuando es Finalizar, se insertan todas las Condiciones a la lista
            if((esRetorno == null) || (!esRetorno)){
                esValida = condicionValidada(idCondicion, idAgrupador, numeroValidadores);
            if(null != esValida && esValida){
                logger.log(ADFLogger.WARNING, "La condicion ha sido validada por todos los roles." + idCondicion);
                //listaTcc.getTCC().add(condicion);
                idCondicionesList.add(idCondicion);
            }else{
                logger.log(ADFLogger.WARNING, "La condicion no ha sido validada por todos los roles." + idCondicion);
            }
            }else if((idSubEstadoTcc != null) 
                    && (idSubEstadoTcc.intValue() != FenixModelConstants.SUBESTADO_TCC_VALIDADA.intValue())){
                //Se elimina validacion de estado SUBESTADO_TCC_VALIDA_PARCIALMENTE en acuerdo con QA para atender FNXII-7204
                //&& (idSubEstadoTcc.intValue() != FenixModelConstants.SUBESTADO_TCC_VALIDA_PARCIALMENTE.intValue())
                //Se cambia el estado de la tabla VALIDACION_CONDICION para el rol responsable de operavcion a cero
                cambioEstadoCumplidor =
                    fenixAMImpl.getValidaCondicionVO().actualizarFinalizoTarea(idCondicion, idAgrupador,
                                                                               FenixModelConstants.RESPONSABLE_OPERACION,
                                                                               null,
                                                                               FenixModelConstants.ESTADO_CUMPLIDOR,
                                                                               null);
                logger.warning("El estado del cumplidor cambio a cero :" + cambioEstadoCumplidor);
                esValida = Boolean.TRUE;
                // Cuando es Retorno, se agregan aquellas que NO están en estado Validada o Valida Parcialmente
                logger.warning("Estado de la condicion :" + idSubEstadoTcc + " condicion :" + idCondicion);
                idCondicionesList.add(idCondicion);
            }else{
                logger.warning("El estado de la condicion es validada o valida parcialmente, no se cambia estado de la condicion.");
            }
        }
        iterator.closeRowSetIterator(); 
        
        // Invocación a servicio
        try {
            FenixAMImpl fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION);
            request = new ActualizarEstadoCondicionRequestType();
            Condicion12BndQSService condicion12BndQSService =
                IWsdlLocation.Service.getInstance(Condicion12BndQSService.class, wsdl);
            CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
            //if (esValida) {
            if(idCondicionesList.size() > 0){
                if (idCondicionesList != null) {
                    request.getIdCondicion().addAll(idCondicionesList);
                } else {
                    logger.warning("La lista es nula.");
                }
                request.setAgrupador(idAgrupador);
                request.setEstadoTCC(catalagoEstado);
                request.setSubEstadoTCC(catalogoSubEstado);

                Date horaInicio =
                    ModelUtils.logStartWS(logger, request, FenixModelConstants.ACTUALIZAR_ESTADO_CONDICIONES);
                response = condicionPT.actualizarEstadoCondicion(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.ACTUALIZAR_ESTADO_CONDICIONES, horaInicio);

                if (response.getResultado().getResult().value() == "ERROR") {
                    esEjecucionExitosa = Boolean.FALSE;
                    esError = Boolean.TRUE;
                    mensajeError = response.getResultado().getMessage();
                    mensajeError = mensajeError.concat(response.getResultado().getError().getErrorDescription());
                }
            } else {
                logger.warning("No se ejecuta servicio ya que no hay condiciones validadas por todos los validadores.");
            }
        } catch (Exception e) {
            logger.warning("Error al " + FenixModelConstants.ACTUALIZAR_ESTADO_CONDICIONES, e);
            esEjecucionExitosa = Boolean.FALSE;
            esError = Boolean.TRUE;
        } finally {
            if (esError) {
                JboException exception = new JboException("Error: " + mensajeError);
                throw exception;
            }
        }
        
        return esEjecucionExitosa;
    }
    
    public Boolean actualizaEstadoCondicionPorCumplir(Integer estado, Integer subEstado, Long idAgrupador, Long idCondicion) {
        logger.warning("Entra en actualizaEstadoCondicionPorCumplir");
        
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        
        Boolean esEjecucionExitosa = Boolean.TRUE;
        Boolean esError = Boolean.FALSE;
        String mensajeError = null;
        ActualizarEstadoCondicionRequestType request = null;
        ActualizarEstadoCondicionResponseType response = null;
        Catalogo catalagoEstado = new Catalogo();
        Catalogo catalogoSubEstado = new Catalogo();
        Long idEstadoTcc = null;
        Long idSubEstado = null;
        
        
        // Invocación a servicio
        try {
            FenixAMImpl fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION);
            request = new ActualizarEstadoCondicionRequestType();
            Condicion12BndQSService condicion12BndQSService =
                IWsdlLocation.Service.getInstance(Condicion12BndQSService.class, wsdl);
            CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
            
            idEstadoTcc = new Long(estado);
            idSubEstado = new Long(subEstado);
            catalagoEstado.setId(idEstadoTcc);
            catalogoSubEstado.setId(idSubEstado);
            
                request.setAgrupador(idAgrupador);
                request.setEstadoTCC(catalagoEstado);
                request.setSubEstadoTCC(catalogoSubEstado);
                request.getIdCondicion().add(idCondicion);
                Date horaInicio =
                    ModelUtils.logStartWS(logger, request, FenixModelConstants.ACTUALIZAR_ESTADO_CONDICIONES);
                response = condicionPT.actualizarEstadoCondicion(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.ACTUALIZAR_ESTADO_CONDICIONES, horaInicio);

                if (response.getResultado().getResult().value() == "ERROR") {
                    esEjecucionExitosa = Boolean.FALSE;
                    esError = Boolean.TRUE;
                    mensajeError = response.getResultado().getMessage();
                    mensajeError = mensajeError.concat(response.getResultado().getError().getErrorDescription());
                }
        } catch (Exception e) {
            logger.warning("Error al " + FenixModelConstants.ACTUALIZAR_ESTADO_CONDICIONES, e);
            esEjecucionExitosa = Boolean.FALSE;
            esError = Boolean.TRUE;
        } finally {
            if (esError) {
                JboException exception = new JboException("Error: " + mensajeError);
                throw exception;
            }
        }
        
        return esEjecucionExitosa;
    }
    
    public Boolean condicionValidada(Long idCondicion, Long idAgrupador, Integer numValidadores) {
        logger.log(ADFLogger.WARNING, "Entra en condicionValidada " + idCondicion);
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        CondicionValidacionVOImpl condicionValidacionVOImpl = fenixAMImpl.getCondicionValidacionVO();

        Integer finalizoTarea = null;
        Long idCondicionValidacion = null;
        Integer esValidador = null;
        Integer i = 0;
        Boolean esValida = Boolean.FALSE;
        Long numeroValidadores = null;
        Long validadores = null;
        try {
            //numeroValidadores = numeroRegistrosTreCategoriaCondicion(idCondicion);
            condicionValidacionVOImpl.setpIdCondicion(idCondicion);
            condicionValidacionVOImpl.setpIdAgrupador(idAgrupador);
            condicionValidacionVOImpl.setpIdRol(null);
            condicionValidacionVOImpl.executeQuery();
            logger.warning("Se ejecuto Query correctamente.");
            RowSetIterator rowsCondicionValidacion = condicionValidacionVOImpl.createRowSetIterator(null);
            rowsCondicionValidacion.reset();
            if (condicionValidacionVOImpl.getEstimatedRowCount() > 0) {
                validadores = condicionValidacionVOImpl.getEstimatedRowCount();
            }

            logger.warning("Registros encontrado en consulta condicionValidacionVOImpl: " +
                           condicionValidacionVOImpl.getEstimatedRowCount());

            //Verifica que la consulta obtiene registros
            if (condicionValidacionVOImpl.getEstimatedRowCount() > 0) {
                if (null != numValidadores && null != validadores) {
                    numeroValidadores = new Long(numValidadores);
                    if (numeroValidadores.compareTo(validadores) == 0) {
                        while (rowsCondicionValidacion.hasNext()) {
                            CondicionValidacionVORowImpl condicionValidacionVORowImpl =
                                (CondicionValidacionVORowImpl) rowsCondicionValidacion.next();

                            finalizoTarea = condicionValidacionVORowImpl.getFinalizoTarea();
                            idCondicionValidacion = condicionValidacionVORowImpl.getIdCondicion();
                            esValidador = condicionValidacionVORowImpl.getEsValidador();
                            logger.log(ADFLogger.WARNING, "idCondicionValidacion :" + idCondicionValidacion);
                            logger.log(ADFLogger.WARNING, "finalizoTarea :" + finalizoTarea);
                            logger.log(ADFLogger.WARNING, "es validador :" + esValidador);
                            if (null != esValidador) {
                                if (esValidador.compareTo(ES_VALIDADOR) == 0) {
                                    if (null != finalizoTarea &&
                                        finalizoTarea.compareTo(FenixModelConstants.FINALIZO_TAREA) == 0) {
                                        logger.log(ADFLogger.WARNING,
                                                   "Se valido la condicion con el validador" + esValidador);
                                    } else {
                                        logger.log(ADFLogger.WARNING,
                                                   "La condicion no ha sido validada con el rol :" + esValidador);
                                        i++;
                                    }
                                    
                                } else {
                                    logger.warning("No es validador.");
                                }
                            } else {
                                logger.warning("No se encontro el valor del rol.");
                            }
                        }
                        rowsCondicionValidacion.closeRowSetIterator();
                        if (i > 0) {
                            logger.warning("Condicion invalida");
                            esValida = Boolean.FALSE;
                        } else {
                            logger.warning("Condicion valida");
                            esValida = Boolean.TRUE;
                        }
                    } else {
                        esValida = Boolean.FALSE;
                        logger.warning("No se ha encontrado el mismo numero de validadores. No se realiza cambio de estado de condiciones");
                    }
                } else {
                    esValida = Boolean.FALSE;
                    logger.warning("El numero de validadores es nulo. No se realiza cambio de estado de condiciones");
                }
            } else {
                //Si la consulta no obtiene registro se considera invalida la condicion
                logger.warning("Condicion invalida por no encontrar resultados en la consulta");
                esValida = Boolean.FALSE;
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error al obtener las condicionesvalidadas" + e);
        }
        logger.log(ADFLogger.WARNING, "La validacion de la condicion es :" + esValida);
        return esValida;
    }
    
    private Long numeroRegistrosTreCategoriaCondicion(Long idCondicion){
            logger.warning("Entra en numeroRegistrosTreCategoriaCondicion");
            
            FenixAMImpl fenixAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            CategoriaCondicionVOImpl categoriaCondicionVOImpl = null;
            Long numeroRegistros = null;
            
            try{
                categoriaCondicionVOImpl = fenixAMImpl.getCategoriaCondicionTreVO();
                categoriaCondicionVOImpl.setpIdCondicion(idCondicion);
                categoriaCondicionVOImpl.executeQuery();
                logger.warning("Numero de rows :" + categoriaCondicionVOImpl.getEstimatedRowCount());
                
                if(categoriaCondicionVOImpl.getEstimatedRowCount() > 0){
                    numeroRegistros = categoriaCondicionVOImpl.getEstimatedRowCount();
                }else{
                    logger.warning("No se encontraron registros.");
                }
                
            }catch(Exception e){
                logger.warning("Error al buscar registros.", e);    
            }
            logger.warning("Numero registros que retorna :" + numeroRegistros);
            return numeroRegistros;
        }
    private Boolean esCondicionConEvidencia(FenixAMImpl fenixAM, Long idCondicion) {
        // Obtenemos el número de evidencias de la Condición
        if(fenixAM.getEvidenciasCondicionesVO().obtenerEstimatedRowCount(idCondicion) > 0)
            return true;
        else
            return false;
    }
    
    private Boolean esCondicionConObservacion(FenixAMImpl fenixAM, Long idCondicion) {
        // Obtenemos el número de observaciones de la Condición
        if(fenixAM.getObservacionCondicionVO().obtenerEstimatedRowCount(idCondicion) > 0)
            return true;
        else
            return false;
    }
    
    private String obtenerValorAtributo(List<String> plValores)
    {
      StringBuilder sb = new StringBuilder();
      if(null != plValores && plValores.size()>0)
      {
        for(String valor : plValores)
        {
          sb.append(valor);
          sb.append("\n");
        }
      }
      
      return sb.toString();
    }
    
    private String getXMLString(Element cuestionarioElement) throws TransformerConfigurationException, TransformerException
    {
        DOMSource domSource = new DOMSource(cuestionarioElement);
        StringWriter writer = new StringWriter();
        StreamResult result = new StreamResult(writer);
        TransformerFactory tf = TransformerFactory.newInstance();
        Transformer transformer = tf.newTransformer();
        transformer.setOutputProperty("omit-xml-declaration", "yes");
        transformer.transform(domSource, result);
        
        return  writer.toString();
    }

  @SuppressWarnings("unchecked")
  public StringWriter writeXMLRequest(Object request, Class requestClass) throws JAXBException {
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(requestClass);       
        Marshaller m = context.createMarshaller();
        m.marshal(new JAXBElement(new QName(requestClass.getName()), requestClass, request), writer);        
        return writer;
    }
  
  public Row[] obtenerCondiciones(){
      logger.log(ADFLogger.WARNING, "INTO obtenerCondiciones.");
      Row[] condiciones = null;
      condiciones = this.getAllRowsInRange();
      for(Row row : condiciones){
          logger.log(ADFLogger.WARNING, "Id de la condicion." + row.getAttribute("IdCondicion"));
      }
      logger.log(ADFLogger.WARNING, "Numero de rows." + condiciones.length);
      return condiciones;
  }
  
  public void actualizarFechaVigenciaRows() {
      logger.warning("Inside actualizarFechaVigenciaRows.");
      
      FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
      Row[] condicionesOperacionRows = getAllRowsInRange();     
      CondicionVOImpl condicionVOImpl = fenixAM.getCondicionVO();
      
      logger.warning("Condiciones a actualizar: " + condicionesOperacionRows.length);
      
      for (Row rowCondicion : condicionesOperacionRows) {
          
          if (rowCondicion.getAttribute("IdCondicion") != null) {
              if (rowCondicion.getAttribute("FechaVigencia") != null) {
                  condicionVOImpl.actualizarFechaVigencia((Long) rowCondicion.getAttribute("IdCondicion"), (Timestamp) rowCondicion.getAttribute("FechaVigencia"));   
              } else {
                  condicionVOImpl.actualizarFechaVigencia((Long) rowCondicion.getAttribute("IdCondicion"), null);
              }
          }
      }
  }
  
    public void actualizarFechaVigencia(Long idCondicion, Timestamp fechaVigencia) {
        logger.warning("Entrando en actualizarFechaVigencia.");
        logger.warning("idCondicion: " + idCondicion);
        logger.warning("fechaVigencia: " + fechaVigencia);

        FenixAMImpl fenixAM = (FenixAMImpl) this.getRootApplicationModule();
        CondicionVOImpl condicionVOImpl = fenixAM.getCondicionVO();

        if (null != idCondicion) {
            condicionVOImpl.actualizarFechaVigencia(idCondicion, fechaVigencia);
        } else {
            logger.warning("El idCondicion es nulo.");
        }
    }

}
