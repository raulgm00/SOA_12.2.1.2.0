package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.ConsultaTransferenciasBanByDesembolso;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 17 15:48:41 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultaTransferenciasBanByDesembolsoImpl extends ViewObjectImpl implements ConsultaTransferenciasBanByDesembolso {
    
    private static ADFLogger logger = null;
    
    
    public ConsultaTransferenciasBanByDesembolsoImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }



    public Row recuperarDatos(Long idContrato){
      logger.warning("*Inf, inicia metodo recuperarDatos");  
     
      Row primerTransferenciaRow = null;
      
      
      if(idContrato == null){
          logger.warning("*Error metodo recuperarDatos ->idContrato null");
          JboException ex = new JboException("Error al cargar la tabla de transferencias idContrato resuelto a null");
          throw ex;
      }      
      
      setpIdDesembolso(idContrato);
      executeQuery();   
      
      logger.warning("*Inf, numero de registros encontrados para la solicitud: "+getEstimatedRowCount());  
          
      if(getEstimatedRowCount() > 0){
           setCurrentRow(first());
           primerTransferenciaRow = first();
           crearRowRTransferenciasForm(primerTransferenciaRow);
      }
            
      logger.warning("*Inf, termina metodo recuperarDatos");    
      return primerTransferenciaRow;
    }


    public void crearRowRTransferenciasForm(Row transferenciaRow){
      logger.warning("*Inf, Inicia metodo crearRowRTransferenciasForm");     
        
        FenixAMImpl fenixAMImpl = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
        gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        gestorDesembolsosAMImpl.getTransferenciasBancariasFormVO().crearRowFormTransferenciaExistente(transferenciaRow);
        
      logger.warning("*Inf, termina metodo crearRowRTransferenciasForm");    
    }


    public void selectAndInsertRowRTransferenciasForm(Long idTransferencia){
      logger.warning("*Inf, Inicia metodo selectAndInsertRowRTransferenciasForm");
      logger.warning("*Inf, IdTransferencia :"+idTransferencia);
        
      if(idTransferencia != null){
        
        Row transferenciaRow =  recuperarTransferenciaById(idTransferencia);
        
        if(transferenciaRow != null){        
            FenixAMImpl fenixAMImpl = null;
            FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
            gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
            gestorDesembolsosAMImpl.getTransferenciasBancariasFormVO().crearRowFormTransferenciaExistente(transferenciaRow);            
        }
      }else{
          logger.warning("*Error, Parametro idTransferencia es resuelto a null");
          JboException ex = new JboException("Error identificador de transferencia invalido");
          throw ex;
      }  
      
      logger.warning("*Inf, termina metodo selectAndInsertRowRTransferenciasForm");    
    }

    
    public Row recuperarTransferenciaById(Long idTransferencia){
      logger.warning("*Inf, Inicia el metodo recuperarTransferenciaById :"+idTransferencia) ;  
        Row fila = null;
        ViewCriteria criteria = null;

        try {
            criteria = getViewCriteriaManager().getViewCriteria("getTransferenciaById");
            criteria.ensureVariableManager().setVariableValue("pIdTransferencia", idTransferencia);
            applyViewCriteria(criteria);
            executeQuery();

            if (getEstimatedRowCount() > 0) {                
                fila = first();
                logger.warning("Row recuperado para la transferencia ->" + fila.getAttribute("IdTransferencia"));
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");                
            }

        } catch (Exception e) {
            logger.warning("*** Error al buscar id transferencia: idTransferencia  ->",e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("getTransferenciaById");    
            executeQuery();
        }

        logger.warning("*Inf, Termina el metodo recuperarTransferenciaById") ;  
        return fila;     
    }


    public BigDecimal recuperarMontoTotalDeTransferencias() {
         logger.warning("*Inf, Inicia metodo recuperarMontoTotalTransferencias");
         BigDecimal montoTotalTransferencias = BigDecimal.ZERO;
         BigDecimal montoTransferencia = null;
         
         if (getEstimatedRowCount() > 0) {
             
             setRangeSize(-1);
             
             for(Row fila :getAllRowsInRange()){
                
                 montoTransferencia = (null == fila.getAttribute("MontoTransferencia")) ? BigDecimal.ZERO
                                    :  (BigDecimal)fila.getAttribute("MontoTransferencia") ;
                
                logger.warning("*Inf, montoTransferencia: "+montoTransferencia);
                
              montoTotalTransferencias =  montoTotalTransferencias.add(montoTransferencia);
            }
                                                 
             logger.warning("*Inf, MontoTotalTransferencias recuperado ->" + montoTotalTransferencias);
         } else {
             logger.warning("*** Error no hay un transferencias en trasnsferenciasBancariasTabla");
         }
        
         logger.warning("*Inf, Termina metodo recuperarMontoTotalTransferencias ");
         return montoTotalTransferencias;
     }




    /**
     * Returns the bind variable value for pIdDesembolso.
     * @return bind variable value for pIdDesembolso
     */
    public Long getpIdDesembolso() {
        return (Long) getNamedWhereClauseParam("pIdDesembolso");
    }

    /**
     * Sets <code>value</code> for bind variable pIdDesembolso.
     * @param value value to bind as pIdDesembolso
     */
    public void setpIdDesembolso(Long value) {
        setNamedWhereClauseParam("pIdDesembolso", value);
    }

    /**
     * Returns the variable value for pIdTransferencia.
     * @return variable value for pIdTransferencia
     */
    public Long getpIdTransferencia() {
        return (Long) ensureVariableManager().getVariableValue("pIdTransferencia");
    }

    /**
     * Sets <code>value</code> for variable pIdTransferencia.
     * @param value value to bind as pIdTransferencia
     */
    public void setpIdTransferencia(Long value) {
        ensureVariableManager().setVariableValue("pIdTransferencia", value);
    }
}

