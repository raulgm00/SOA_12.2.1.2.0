package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ConsultaJustificacionExcepcionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 15 17:53:45 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultaJustificacionExcepcionVOImpl extends ViewObjectImpl implements ConsultaJustificacionExcepcionVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultaJustificacionExcepcionVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
        
    }

    /**
     * Returns the bind variable value for pIdSolicitud.
     * @return bind variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) getNamedWhereClauseParam("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for bind variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {   
        
        logger.warning("Entra pIdSolicitud: " + value);
        if (value != null) {
            setNamedWhereClauseParam("pIdSolicitud", value);   
        }
        logger.warning("Numero de rows obtenidos :" + this.getRowCount());
    }


    public void setValores(Long idSolicitud) {
        
        logger.warning("Entra idSolicitud: " + idSolicitud);
        
        setpIdSolicitud(idSolicitud);
        
        //this.executeQuery();
        //logger.warning("Numero de rows obtenidos :" + this.getRowCount());
    }
    
    public Boolean obtenerJustificacionesByIdSolicitud(Long idSolicitud) {

        logger.log(ADFLogger.WARNING, "INTO  obtenerJustificacionesByIdSolicitud : ");
        Integer contador = 0;
        Boolean validaJustificaciones = Boolean.FALSE;

        try {
            if (idSolicitud == null) {
                validaJustificaciones = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("ConsultaJustificacionExcepcionVOCriteriaByIdSolicitud");
                criteria.ensureVariableManager().setVariableValue("varIdSolicitud", idSolicitud);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsJustificacionSolicitudVo = createRowSetIterator(null);
                rowsJustificacionSolicitudVo.reset();
                while (rowsJustificacionSolicitudVo.hasNext()) {
                    ConsultaJustificacionExcepcionVORowImpl rowL = (ConsultaJustificacionExcepcionVORowImpl) rowsJustificacionSolicitudVo.next();
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);

                try {
                    if (contador > 0)
                        validaJustificaciones = Boolean.TRUE;
                    else
                        validaJustificaciones = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsJustificacionSolicitudVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerJustificacionesByIdSolicitud... ", ex);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultaJustificacionExcepcionVOCriteriaByIdSolicitud");
        }
        
        logger.warning("valor a retornar validaJustificaciones: " + validaJustificaciones);
        logger.log(ADFLogger.WARNING, "Finaliza  obtenerJustificacionesByIdSolicitud : ");
        return validaJustificaciones;
    }

    /**
     * Returns the variable value for varIdSolicitud.
     * @return variable value for varIdSolicitud
     */
    public Long getvarIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("varIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable varIdSolicitud.
     * @param value value to bind as varIdSolicitud
     */
    public void setvarIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("varIdSolicitud", value);
    }
}

