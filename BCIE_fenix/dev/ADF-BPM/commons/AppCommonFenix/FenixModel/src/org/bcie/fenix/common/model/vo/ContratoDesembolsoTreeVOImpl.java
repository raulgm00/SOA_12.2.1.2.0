package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.ContratoDesembolsoTreeVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 22 17:51:06 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratoDesembolsoTreeVOImpl extends ViewObjectImpl implements ContratoDesembolsoTreeVO {

    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContratoDesembolsoTreeVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    public void inicializarDatos(Long idSolicitud){
         logger.warning("Inicia metodo inicializarDatos idSolicitud: "+idSolicitud);          
            logger.warning("Query ejecutado contratos encontrados: "+getEstimatedRowCount());
         if(getEstimatedRowCount() > 0){
                logger.warning("Numero de contratos asociados a la solicitud"+getEstimatedRowCount());
         }else{
                 logger.warning("No hay contratos asociados a la solicitud");                            
             } 
            
        logger.warning("Termina metodo inicializarDatos");
        }
    
    
    
    public Integer obtenerTipoMonedaMontoFormalizado(Long idOperacion) {
        logger.warning("Inicia metodo obtenerTipoMonedaMontoFormalizado");
        Integer idTipoMoneda = null;

        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();

        if (null != fenixAMImpl) {
            idTipoMoneda = fenixAMImpl.getTccTerminoVO().obtenerTipoMonedaMontoFormalizado(idOperacion);

            if (null == idTipoMoneda) {
                logger.warning("El idTipoMoneda es NULL");
            } else {
                logger.warning("El idTipoMoneda es: " + idTipoMoneda);
            }
        } else {
            logger.warning("La instancia de FenixAMImpl es NULL");
        }

        logger.warning("Termina metodo obtenerTipoMonedaMontoFormalizado");
        return idTipoMoneda;
    }

    /**
     * Para un contrato de desembolso que no cuente con ningun proceso iniciado o terminado se realiza una eliminacion 
     * fisica de lo contratio si ceunta con almenos un proceso iniciado el estado del contrato desembolso cambia a 
     * "Desestimado" y se guarda como historico 
     * 
     * @param idContrato
     * @return TRUE = fallo durante el desestimado 
     * @since 14/09/2016
     */
    public boolean desestimarContratoDesembolso(Long idContrato){
        logger.log(ADFLogger.WARNING, "Inside desestimarContratoDesembolso" + idContrato);
        
        boolean error = Boolean.TRUE;
        Row row = null;
        ViewCriteria criteria = null;
        Integer idTcaEstado = null;
        Long idContratoOnTreSolicitud = null;
        Row rowTreSolicitud = null;
        Boolean killTreSolicitud = Boolean.FALSE;
        Row[] rowReglasDesembolso = null;
        Boolean killReglasDesembolso = Boolean.FALSE;
        Row[] rowTbiReglaDesembolso = null;
        Boolean killTbiReglaDesembolso = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        
        //Si el idContrato viene null retornamos false y no se elimana nada.
        if(null == idContrato){
            logger.log(ADFLogger.WARNING, "El IdContrato NULL");
            return true;
        }
        try{
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
            rowTreSolicitud = gestorDesembolsoAMImpl.getTreSolicitudLineaCreditoVO().getTreSolicitudLineaCredito(idContrato);
            
            if(rowTreSolicitud != null && rowTreSolicitud != null){
                killTreSolicitud = Boolean.TRUE;
                idContratoOnTreSolicitud = (Long) rowTreSolicitud.getAttribute("IdContratoDesembolso");                
            }
            rowReglasDesembolso = gestorDesembolsoAMImpl.getTreReglasDesembolsoVO().getReglasDesembolso(idContrato);
            if(rowReglasDesembolso != null && rowReglasDesembolso.length > 0){
                killReglasDesembolso = Boolean.TRUE;
            }
            rowTbiReglaDesembolso = gestorDesembolsoAMImpl.getTbiReglaDesembolsoVO().getTBIReglasDesembolso(idContrato);
            if(rowTbiReglaDesembolso != null && rowTbiReglaDesembolso.length > 0){
                killTbiReglaDesembolso = Boolean.TRUE;
            }
            
            criteria = this.getViewCriteriaManager().getViewCriteria("ContratoDesembolsoVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdContrato", idContrato);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            
            //Desestimando contrato
            if(this.getEstimatedRangePageCount() > 0){
                this.setCurrentRow(first());
                row = this.getCurrentRow();
                logger.log(ADFLogger.WARNING, "Contrato seleccionado con id: " + idContrato);
                idTcaEstado = (Integer) row.getAttribute("IdTcaEstado");
                //Vamos y consultamos el TcaEstado si esta en Creado se Elimina el registro en otro caso se actualisa
                logger.log(ADFLogger.WARNING, "<* ID contrato a Desestimado " + idContrato + " *>");
                row.setAttribute("IdTcaEstado", FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO);
                row.setAttribute("BanEstatus", 0);
               
                try{
                     this.getDBTransaction().commit();
                     error = Boolean.FALSE; 
                 }catch(Exception ea){
                     logger.log(ADFLogger.WARNING, "Error al realizar el commit "+ea);
                     logger.log(ADFLogger.WARNING, "Reintentando commit");
                     try{
                         this.getDBTransaction().commit();
                          error = Boolean.FALSE; 
                      }catch(Exception ex){
                          logger.log(ADFLogger.WARNING, "Error al reañizar el commit" + ex);
                      }
                 }
                
                
                //TODO Verificar si una eliminacion logica es necesaria, mientras tanto solo se cambiara el 
                //BanEstatus, para eliminado ficisco hay dependencias en:
                //TRE_SOLICITUD_LINEA_CREDITDO, TRE_REGLA_DESEMBOLSO, TBI_REGLA_DESEMBOLSO
                
                 /* if(idTcaEstado.equals(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO) || 
                    idTcaEstado.equals(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO)){
                    logger.log(ADFLogger.WARNING, "<* ID contrato a Eliminar " + idContrato + " *>");
                    
                    if(killTbiReglaDesembolso){
                        for(int i = 0; i < rowTbiReglaDesembolso.length; i++){
                            rowTbiReglaDesembolso[i].remove();
                        }
                    }
                    if(killReglasDesembolso){
                        for(int i = 0; i < rowReglasDesembolso.length; i++){
                            rowReglasDesembolso[i].remove();
                        }
                    }
                    if(killTreSolicitud){
                        rowTreSolicitud.remove();                        
                    }
                    row.remove();
                    this.getDBTransaction().commit();
                    error = Boolean.FALSE;
                }else{
                    logger.log(ADFLogger.WARNING, "<* ID contrato a Desestimado " + idContrato + " *>");
                    row.setAttribute("IdTcaEstado", FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO);  
                    this.getDBTransaction().commit();
                    error = Boolean.FALSE;
                }  */
            }else{
                logger.log(ADFLogger.WARNING, "Contrato Null en DesestimarContrato");   
            }            
        }catch(Exception ex){
            logger.log(ADFLogger.WARNING, "Problemas al recuperar el Contrato para eliminar" + ex);
        }
        
        //Eliminamos el ViewCriteria y retornamos el valor: true si la operacion fue exitosa de lo contrario false.
        this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratoDesembolsoVOCriteria");
        return error;
    }
    
    /**
     * Vamos por los contratos en ESTADO 'Creado' y los desestimamos haciendo un upDate en el campo TcaEstado a 
     * desestimado siempre y cuando cumplan la condicion de IdTcaEstado = 10.
     * 
     * @return TRUE si la operacion desestimo contratos / False si se presento algun error.
     * @since 15/09/2016
     */
    public Boolean desestimarContratosEnCascada(){
        logger.log(ADFLogger.WARNING, "Inside desestimarContratosEnCascada");
        boolean esDesestimado = Boolean.FALSE;
        Row[] rowContratos = null;
        Integer tcaEstado = null;
        Long idContrato = null;
        Integer idTcaEstado = (Integer) FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO;
        int numContratosActualizados = 0;
        try{
            rowContratos = this.getAllRowsInRange();
            if(rowContratos.length > 0){
                for(int i=0; i < rowContratos.length; i++){
                    tcaEstado = (Integer) rowContratos[i].getAttribute("IdTcaEstado");
                    idContrato = (Long) rowContratos[i].getAttribute("Id");
                    //Comprobamos si el TcaEstato es creado, de no ser asi retornamos false
                    if(tcaEstado.equals(idTcaEstado)){
                        rowContratos[i].setAttribute("IdTcaEstado", 
                                                     FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO); 
                        rowContratos[i].setAttribute("BanEstatus", 0);
                        esDesestimado = Boolean.TRUE;
                        numContratosActualizados = numContratosActualizados +1;
                    }else{
                        logger.log(ADFLogger.WARNING, "El ESTADO del Contrato con ID: " + idContrato + 
                                                      " es diferente a Creado, Estado: "+ tcaEstado);
                        esDesestimado = Boolean.FALSE;
                        this.getDBTransaction().rollback();
                        return esDesestimado;
                    }                   
                }
                logger.log(ADFLogger.WARNING, "Fin del FOR para desestimar contratos esDesestimado ");
                logger.log(ADFLogger.WARNING, "Numero de contratos desestimados : "+numContratosActualizados);
            }            
        }catch(Exception e){
            logger.warning("Ocurrio un error *Desestimando* los contratos de desembolso" + e);
        }
        //TRUE si desestimo todos los contratos del Array de RowContratos
        return esDesestimado;
    }
    
    
    
    /**
     * Vamos y recorremos el array de Rows para comprobar que todos los contratos
     * esten en estado Creado deno ser asi retornamos False
     * 
     * @since 13/09/2016
     * @return Boolean
     */
    public Boolean verTcaEstadoContratosDesembnolso(){
        logger.log(ADFLogger.WARNING, "*INTO* verTccEstadoContratosDesembnolso");
        Boolean esValido = Boolean.FALSE;
        Integer constanTcaEstadoCreado = FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO;
        Integer tcaEstado = null;
        Row[] rowContratos = null;
        //Se consulta los contratos para revisar que esten en un estado Creado
        try{
            rowContratos = getAllRowsInRange();
            if(rowContratos != null){
                for(Row rowContrato:rowContratos){
                    tcaEstado = (Integer) rowContrato.getAttribute("IdTcaEstado");
                    if(tcaEstado.equals(constanTcaEstadoCreado)){
                        esValido = true;
                        logger.log(ADFLogger.WARNING, "*idTcaEstadoContratoDesembolso: "+tcaEstado + " Es: " + esValido);
                    }else{
                        return false;
                    }               
                }
            }else{
                logger.log(ADFLogger.WARNING, "Row[] de Contratos NUll");
            }
        }catch(Exception ex){
            logger.warning("Error al consultar TcaEstado del contrato", ex);
        }
        return esValido;
    }
    
    /**
     * Vamos y recorremos el array de Rows para comprobar que por lo menos un contrato
     * este en estado Registrado o Desembolsado deno ser asi retornamos False
     * 
     * @since 10/10/2016
     * @return Boolean
     * Ernesto Garcia
     */
    
    public Boolean verTcaEstadoContratosRegDesem(){
        logger.log(ADFLogger.WARNING, "*INTO* verTccEstadoContratosRegDesem");
        Boolean esValido = Boolean.FALSE;
        Integer constanTcaEstadoRegistrado = FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_REGISTRADO;
        Integer constanTcaEstadoDesembolsado = FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESEMBOLSADO;
        Integer tcaEstado = null;
        Row[] rowContratos = null;
        //Se consulta los contratos para revisar que esten en un estado Registrado o Desembolsado
        try{
            rowContratos = getAllRowsInRange();
            if(rowContratos != null){
                for(Row rowContrato:rowContratos){
                    tcaEstado = (Integer) rowContrato.getAttribute("IdTcaEstado");
                    if(tcaEstado.equals(constanTcaEstadoRegistrado) || tcaEstado.equals(constanTcaEstadoDesembolsado)){
                        esValido = true;
                        logger.log(ADFLogger.WARNING, "*idTcaEstadoContratoDesembolso: "+tcaEstado + " Es: " + esValido);
                    }else{
                        return false;
                    }               
                }
                logger.log(ADFLogger.WARNING, "*idTcaEstadoContratoDesembolso: <<Se termino de recorrer todo el Row>>");
                if(esValido.equals(Boolean.FALSE))
                    logger.log(ADFLogger.WARNING, "*idTcaEstadoContratoDesembolso: No se encontro ningun contrato en estado registrado o desembolsado");
            }else{
                logger.log(ADFLogger.WARNING, "Row[] de Contratos NUll");
            }
        }catch(Exception ex){
            logger.warning("Error al consultar TcaEstado del contrato", ex);
        }
        return esValido;
    }
    
    public Row getContratoSeleccionado(){
    Row row = null;
        if(getCurrentRow() != null){
            logger.warning("<|>>>> ---SeleccionandoRow en el modelo id->"+getCurrentRow().getAttribute("Id"));
            row = getCurrentRow(); 
         }   
        return row;
    }
    
    public Long getContratoDefault(){
        Long idContrato = null;
        if(this.getCurrentRow() != null){
            try{
                idContrato = (Long) this.getCurrentRow().getAttribute("Id");
            }catch(Exception e){
                logger.log(ADFLogger.ERROR, "ERROR al consultar el contratoDefault: "+ e);
            }
        }
        return idContrato;
    }
    
    public void getContratoPorSolicitud(Long idSolicitud){
        logger.log(ADFLogger.WARNING, " -<*>- Where I am getContratoPorSolicitud idSolicitud:" + idSolicitud );
        Integer banEstatus = 1;
        ViewCriteria criteria = null;
        
        if(idSolicitud != null){
            try{
                criteria = this.getViewCriteriaManager().getViewCriteria("ContratoPorSolicitutCriteria");
                criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
                criteria.ensureVariableManager().setVariableValue("pBanEstatus", banEstatus);
                this.applyViewCriteria(criteria);
                this.executeQuery();
               if(null != this && this.getEstimatedRowCount() > 0){
                   //logger.log(ADFLogger.WARNING, "Se cargan Rows de Linea: " + idLineaCredito);
                   //TODO implementacion 
               }else{
                   logger.log(ADFLogger.WARNING, "<>*<>*<>*<> La Solicitud No cuenta con Contratos");
               }
            }catch(Exception e){
                logger.log(ADFLogger.WARNING, "Error en getLineaCreditoDesembolso " + e.getClass() +
                            ":" + e.getMessage());
            }
            finally{
                this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratoPorSolicitutCriteria");
            }  
        } else {
            logger.warning("El Id de la lista es NULL");
        }
    }
    
    public void filtraContratoByIdSolicitud(Long idSolicitud){
        logger.log(ADFLogger.WARNING, "Inicia metodo  filtraContratoByIdSolicitud idSolicitud: " + idSolicitud);
        ViewCriteria criteria = null;
       
        if(null == idSolicitud){
            logger.log(ADFLogger.WARNING, "ERROR! IdSolicitud NULL");
        }else{
            
            try{
                logger.log(ADFLogger.WARNING, "Aplicando Criteria...");
                criteria = this.getViewCriteriaManager().getViewCriteria("VerSolicitudVOCriteria");
                criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
                applyViewCriteria(criteria);
                executeQuery();
                setCurrentRow(first());
                logger.log(ADFLogger.WARNING, "Ok Criteria aplicado num. de contratos encontrados: "+getEstimatedRowCount());
            }catch(Exception e){
                logger.log(ADFLogger.WARNING, "Error en BuscarSolicitudOperacion " + e.getClass() + ":" + e.getMessage());
            }finally{
                //this.getViewCriteriaManager().removeApplyViewCriteriaName("VerSolicitudVOCriteria");
            }            
        }
    }
    
    
    
    public void  filtrarContratosParaTree(Long idSolicitud){
        logger.warning("*** Inicia metodo filtrarContratosParaTree: num contratos antes del filtro: " 
                                                                                    +getEstimatedRowCount());                            
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        if(idSolicitud == null){
            logger.warning("***Error,  El parametro idSolicitud es requerido para el filtro");            
          
        }else{            
        try{      
            
            criteria = getViewCriteriaManager().getViewCriteria("FiltrarContratosParaTreeVL");
            criteria.ensureVariableManager().setVariableValue("pIdSolicitudDesembolso", idSolicitud);
            applyViewCriteria(criteria);
            executeQuery();
            
                logger.warning("Query ejecutado valores recuperados: "+getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0){               
                setCurrentRow(first());                            
            }else{
                 logger.warning("No hay coincidencias en la busqueda"); 
                 getViewCriteriaManager().removeApplyViewCriteriaName("FiltrarContratosParaTreeVL");          
                 executeQuery();
                }
            
            }catch(Exception e){
                logger.log(ADFLogger.WARNING, "*** Error al filtrarContratosParaTree  ->" + e.getClass() + ":" + e.getMessage());     
            }finally{
               getViewCriteriaManager().removeApplyViewCriteriaName("FiltrarContratosParaTreeVL");                      
            }
        }  
        logger.warning("*** Termina metodo filtrarContratosParaTree"); 
        
        }
    
    
    
    public static void setLogger(ADFLogger logger) {
        ContratoDesembolsoTreeVOImpl.logger = logger;
    }

    public static ADFLogger getLogger() {
        return logger;
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for pIdContrato.
     * @return variable value for pIdContrato
     */
    public Number getpIdContrato() {
        return (Number) ensureVariableManager().getVariableValue("pIdContrato");
    }

    /**
     * Sets <code>value</code> for variable pIdContrato.
     * @param value value to bind as pIdContrato
     */
    public void setpIdContrato(Number value) {
        ensureVariableManager().setVariableValue("pIdContrato", value);
    }


    /**
     * Returns the variable value for pBanEstatus.
     * @return variable value for pBanEstatus
     */
    public Integer getpBanEstatus() {
        return (Integer) ensureVariableManager().getVariableValue("pBanEstatus");
    }

    /**
     * Sets <code>value</code> for variable pBanEstatus.
     * @param value value to bind as pBanEstatus
     */
    public void setpBanEstatus(Integer value) {
        ensureVariableManager().setVariableValue("pBanEstatus", value);
    }

    /**
     * Returns the variable value for pIdSolicitud.
     * @return variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("pIdSolicitud", value);
    }

    /**
     * Returns the variable value for pIdSolicitudDesembolso.
     * @return variable value for pIdSolicitudDesembolso
     */
    public Long getpIdSolicitudDesembolso() {
        return (Long) ensureVariableManager().getVariableValue("pIdSolicitudDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitudDesembolso.
     * @param value value to bind as pIdSolicitudDesembolso
     */
    public void setpIdSolicitudDesembolso(Long value) {
        ensureVariableManager().setVariableValue("pIdSolicitudDesembolso", value);
    }
}

