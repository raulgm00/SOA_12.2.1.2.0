package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.EvidenciasCondicionesVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 20 14:05:37 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EvidenciasCondicionesVOImpl extends ViewObjectImpl implements EvidenciasCondicionesVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    public EvidenciasCondicionesVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varIdCondicion.
     * @return bind variable value for varIdCondicion
     */
    public Long getvarIdCondicion() {
        return (Long) getNamedWhereClauseParam("varIdCondicion");
    }

    /**
     * Sets <code>value</code> for bind variable varIdCondicion.
     * @param value value to bind as varIdCondicion
     */
    public void setvarIdCondicion(Long value) {
        setNamedWhereClauseParam("varIdCondicion", value);
    }
    
    public Long obtenerEstimatedRowCount(Long idCondicion) {
        Long varIdCondicionActual = null;
        Long estimatedRowCount = null;
        
        // Obtenemos el valor del varIdCondicion actual
        varIdCondicionActual = this.getvarIdCondicion();
        
        // Filtramos query con el idCondicion requerido
        setvarIdCondicion(idCondicion);
        this.executeQuery();
        estimatedRowCount = this.getEstimatedRowCount();
        
        // Regresamos el query a su valor anterior
        setvarIdCondicion(varIdCondicionActual);
        this.executeQuery();
        
        return estimatedRowCount;
    }
    
    public Long obtenerEvidenciasCondicionPorIdAgrupador(Long idCondicion, Long idAgrupador) {
        logger.warning("Entra en obtenerEvidenciasCondicionPorIdAgrupador");
        logger.warning("*Inf, idCondicion: "+idCondicion);
        logger.warning("*Inf, idAgrupador: "+idAgrupador);
        Long numeroEvidencia = null;
        try {
            setvarIdCondicion(idCondicion);
            this.executeQuery();
            logger.warning("numero de evidencias encontradas :" + this.getEstimatedRowCount());
            ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("EvidenciasCondicionesVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varIdAgrupador", idAgrupador);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            numeroEvidencia = this.getEstimatedRowCount();
            logger.warning("numero de evidencias con el agrupador recuperadas :" + numeroEvidencia);
        } catch (Exception e) {
            logger.warning("Error al obtener el numero de evidencias.", e);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("EvidenciasCondicionesVOCriteria");
//            setvarIdCondicion(idCondicion);
//            this.executeQuery();;
        }
        return numeroEvidencia;
    }

    /**
     * Returns the variable value for varIdAgrupador.
     * @return variable value for varIdAgrupador
     */
    public Long getvarIdAgrupador() {
        return (Long) ensureVariableManager().getVariableValue("varIdAgrupador");
    }

    /**
     * Sets <code>value</code> for variable varIdAgrupador.
     * @param value value to bind as varIdAgrupador
     */
    public void setvarIdAgrupador(Long value) {
        ensureVariableManager().setVariableValue("varIdAgrupador", value);
    }
}

