package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.MathContext;

import java.math.RoundingMode;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;
import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.logging.Logger;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.jdbc.OracleCallableStatement;
import oracle.jdbc.OracleTypes;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;


import oracle.jbo.RowSetIterator;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixPrepagoAMImpl;
import org.bcie.fenix.common.model.vo.common.ContratoDesembolsoPrepagoVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 02 14:05:08 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratoDesembolsoPrepagoVOImpl extends ViewObjectImpl implements ContratoDesembolsoPrepagoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    
    public ContratoDesembolsoPrepagoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    /**  llenarContratoDesembolsoPrepago"
    *   @param  idOperacion
    *   @since 05/09/2016
    *   @by Gabriel Niño Rosales
    **/
    public void llenarContratoDesembolsoPrepago(
        Long idOperacion,
        Integer idTcaTipoResolucion,
        Integer idTcaTipoMoneda,
        Long idPrepago, 
        Timestamp fechaRenovacion, 
        Timestamp fechaPrepago
        //, 
        //String busquedaSinTrePrepagoContrato
    ) 
    {
                            this.llenarContratoDesembolsoPrepago(
                                        idOperacion,
                                        idTcaTipoResolucion,
                                        idTcaTipoMoneda,
                                        idPrepago, 
                                        fechaRenovacion, 
                                        fechaPrepago, 
                                        "STPC"
                                    );
        /*
        long startTime = System.currentTimeMillis();
        ResultSet rs = null;
        BigDecimal sqlCodeValue = null;
        String sqlResultValue = null;
        String sp = null;
        BigDecimal plazo = null;
        int id = 1;
        
        this.executeQuery();
        
        logger.log(ADFLogger.WARNING,"Into llenarContratoDesembolsoPrepago.");
        logger.log(ADFLogger.WARNING,"Parameter value idOperacion : " + idOperacion);
        logger.log(ADFLogger.WARNING,"Parameter value idTcaTipoResolucion : " + idTcaTipoResolucion);
        logger.log(ADFLogger.WARNING,"Parameter value idTcaTipoMoneda : " + idTcaTipoMoneda);
        logger.log(ADFLogger.WARNING,"Parameter value idPrepago : " + idPrepago);
        logger.log(ADFLogger.WARNING,"Parameter value fechaRenovacion : " + fechaRenovacion);
        logger.log(ADFLogger.WARNING,"Parameter value fechaPrepago : " + fechaPrepago);
        //logger.log(ADFLogger.WARNING,"Parameter value busquedaSinTrePrepagoContrato : " + busquedaSinTrePrepagoContrato);
        
        try {
            String storeProcedure = "{call SP_CONTRATO_DESEMBOLSO(?,?,?,?,?,?,?,?,?)}";
            CallableStatement callableStatement = null;
            callableStatement = this.getDBTransaction().createCallableStatement(storeProcedure,0);
            callableStatement.setObject(FenixModelConstants.P_ID_OPERACION, idOperacion);
            //cambia a setObject para permitir valores 'null' para "idTcaTipoResolucion" y "idTcaTipoMoneda"
            callableStatement.setObject(FenixModelConstants.P_ID_RESOLUCION, idTcaTipoResolucion);
            callableStatement.setObject(FenixModelConstants.P_ID_MONEDA, idTcaTipoMoneda);
            callableStatement.setObject(FenixModelConstants.P_ID_PREPAGO,idPrepago);
            callableStatement.setObject(FenixModelConstants.P_FECHA_RENOVACION, fechaRenovacion);
            callableStatement.setObject(FenixModelConstants.P_FECHA_PREPAGO,fechaPrepago);
            //callableStatement.setObject(FenixModelConstants.P_SIN_TRE_PREPAGO_CONTRATO,busquedaSinTrePrepagoContrato);
            callableStatement.registerOutParameter(FenixModelConstants.P_CODIGO_RES, OracleTypes.NUMBER);
            callableStatement.registerOutParameter(FenixModelConstants.P_MENSAJE, OracleTypes.VARCHAR);
            callableStatement.registerOutParameter(FenixModelConstants.RECORDSET, OracleTypes.CURSOR);
            callableStatement.executeUpdate();
            //recuperar el resultado de la ejecuccion del stored procedure
            sqlCodeValue = (BigDecimal) callableStatement.getObject(FenixModelConstants.P_CODIGO_RES);
            sqlResultValue = (String) callableStatement.getObject(FenixModelConstants.P_MENSAJE);
            rs = (ResultSet) callableStatement.getObject(FenixModelConstants.RECORDSET);
            if (null != rs) {
                
                while (rs.next()) {
                    Row row = this.createRow();
                    //agrega un id incremental para poder indentificar los registros en la vista
                    row.setAttribute("Id", Integer.valueOf(id));
                    //Campos requeridos para realizar insert en la tabla 'TRE_PREPAGO_CONTRATO'.
                    row.setAttribute("CapitalNoVencido",
                                     (null != rs.getString("CAPITAL_NV_FECHA_PREPA")) ?
                                     rs.getString("CAPITAL_NV_FECHA_PREPA") : null);

                    row.setAttribute("EsPagoTotal",
                                     (null != rs.getObject("ES_PAGO_TOTAL")) ? rs.getInt("ES_PAGO_TOTAL") :
                                     new Integer(0));

                    row.setAttribute("FechaProximoPago",
                                     (null != rs.getString("PROXIMO_PAGO")) ? rs.getString("PROXIMO_PAGO") : null);

                    row.setAttribute("IdContratoDesembolsoFenix",
                                     (null != rs.getString("ID_CONTRATO_DESEMBOLSO")) ?
                                     rs.getString("ID_CONTRATO_DESEMBOLSO") : null);

                    row.setAttribute("IdTcaTipoMoneda",
                                     (null != rs.getString("ID_MONEDA")) ? rs.getString("ID_MONEDA") : null);

                    row.setAttribute("MontoPrepago",
                                     (null != rs.getString("MONTO_PREPAGO")) ? rs.getString("MONTO_PREPAGO") : null);

                    row.setAttribute("ContratoDesembolsoFlexcube",
                                     (null != rs.getString("CONTRATO_DESEMBOLSO")) ?
                                     rs.getString("CONTRATO_DESEMBOLSO") : null);

                    //Campos requeridos para la vista, tabla 'Contratos de desembolsos'
                    row.setAttribute("LineaCreditoFlexcube",
                                     (null != rs.getString("ID_FLEXCUBE")) ? rs.getString("ID_FLEXCUBE") : null);

                    row.setAttribute("LineaCredito",
                                     (null != rs.getString("NUMERO_LINEA_CREDITO")) ?
                                     rs.getString("NUMERO_LINEA_CREDITO") : null);

                    row.setAttribute("IdContratoFenix",
                                     (null != rs.getString("ID_CONTRATO")) ? rs.getString("ID_CONTRATO") : null);

                    row.setAttribute("Resolucion",
                                     (null != rs.getString("RESOLUCION")) ? rs.getString("RESOLUCION") : null);

                    row.setAttribute("IdTcaTipoResolucion",
                                     (null != rs.getString("ID_RESOLUCION")) ? rs.getString("ID_RESOLUCION") : null);

                    row.setAttribute("FechaEfectiva",
                                     (null != rs.getString("FECHA_EFECTIVA")) ? rs.getString("FECHA_EFECTIVA") : null);

                    row.setAttribute("FechaVencimiento",
                                     (null != rs.getString("VENCIMIENTO")) ? rs.getString("VENCIMIENTO") : null);

                    row.setAttribute("TipoMoneda", (null != rs.getString("MONEDA")) ? rs.getString("MONEDA") : null);

                    row.setAttribute("IdLineaCredito",
                                     (null != rs.getString("ID_LINEA_CREDITO")) ? rs.getString("ID_LINEA_CREDITO") :
                                     null);

                    row.setAttribute("FechaEscrituracion",
                                     (null != rs.getString("ESCRITURACION")) ? rs.getString("ESCRITURACION") : null);

                    row.setAttribute("FondoContable",
                                     (null != rs.getString("FONDO_CONTABLE")) ? rs.getString("FONDO_CONTABLE") : null);
                    
                    row.setAttribute("UserRef",
                                     (null != rs.getString("USER_REF_NO")) ? rs.getString("USER_REF_NO") : null);
                    
                    plazo = obtenerPlazo((Timestamp) row.getAttribute("FechaEfectiva"), (Timestamp) row.getAttribute("FechaVencimiento"));
                    
                    row.setAttribute("Plazo", plazo);
                    
                    //Se agrega llave compuesta para identificar a los registros hijos,registros padres siempre van a 
                    //tener un idHijo en 0 
                    row.setAttribute("IdHijo", new Integer("0"));
                    
                    //Expandible por default true
                    row.setAttribute("Expandible", Boolean.TRUE);
                    
                    // Datos de prueba
//                    StringBuilder sb = new StringBuilder("");
//                    Random random = new Random();
//                    sb.append(random.nextInt(100000 - 1 + 1) + 1);
//                    sb.append(".");
//                    sb.append(random.nextInt((99 - 1) + 1) + 1);
//                    BigDecimal capitalNoVencidoRandom = new BigDecimal(sb.toString());
//                    row.setAttribute("CapitalNoVencido", capitalNoVencidoRandom); 
                    
                    //incrementamos el id
                    id++;
                    this.insertRow(row);
                    logger.log(ADFLogger.WARNING, "Valor de contrato desembolso" + row.getAttribute("ContratoDesembolsoFlexcube"));
                    logger.log(ADFLogger.WARNING, "Valor de monto prepago" + row.getAttribute("MontoPrepago"));
                }
            } else {
                logger.log(ADFLogger.WARNING, "No se obtuvieron valores del SP.");
            }
        
        }catch(SQLException sqlerr){
            logger.log(ADFLogger.WARNING,"Exception into llenarContratoDesembolsoPrepago : ", sqlerr);
            logger.log(ADFLogger.WARNING,"SQLCODE Value : " +sqlCodeValue);
            logger.log(ADFLogger.WARNING,"SQLMSG Value : " +sqlResultValue);
            throw new JboException(sqlerr);
        }catch(Exception e) {
            logger.log(ADFLogger.WARNING,"Error al recuperar contratos: ", e);
            throw new JboException(e.getMessage());
        }
        
        logger.log(ADFLogger.WARNING,"SQLCODE value : " +sqlCodeValue);
        logger.log(ADFLogger.WARNING,"SQLMSG value : " +sqlResultValue);
        logger.log(ADFLogger.WARNING,"successful method llenarContratoDesembolsoPrepago.");
        long endTime = System.currentTimeMillis();
        
        logger.warning("Tiempo en ejecutar metodo llenarContratoDesembolsoPrepago :  "
                            + (endTime - startTime)/1000 + " segundos");
        */
    }


    public void llenarContratoDesembolsoPrepago(
        Long idOperacion,
        Integer idTcaTipoResolucion,
        Integer idTcaTipoMoneda,
        Long idPrepago, 
        Timestamp fechaRenovacion, 
        Timestamp fechaPrepago, 
        String busquedaSinTrePrepagoContrato
    ){
        int id = 1;
        this.executeQuery();
        logger.log(ADFLogger.WARNING,"Into llenarContratoDesembolsoPrepago.");
        logger.log(ADFLogger.WARNING,"Parameter value idOperacion : " + idOperacion);
        logger.log(ADFLogger.WARNING,"Parameter value idTcaTipoResolucion : " + idTcaTipoResolucion);
        logger.log(ADFLogger.WARNING,"Parameter value idTcaTipoMoneda : " + idTcaTipoMoneda);
        logger.log(ADFLogger.WARNING,"Parameter value idPrepago : " + idPrepago);
        logger.log(ADFLogger.WARNING,"Parameter value fechaRenovacion : " + fechaRenovacion);
        logger.log(ADFLogger.WARNING,"Parameter value fechaPrepago : " + fechaPrepago);
        logger.log(ADFLogger.WARNING,"Parameter value busquedaSinTrePrepagoContrato : " + busquedaSinTrePrepagoContrato);
        try 
        {  
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixPrepagoAMImpl fenixPrepagoAMImpl =(FenixPrepagoAMImpl) fenixAMImpl.getFenixPrepagoAM();
            
            BigDecimal VIdPrepago = new BigDecimal(idPrepago.toString());
            List<Map<String, Object>> listaDesembolsos = fenixPrepagoAMImpl.ObtenerDetalleDesembolsosPrepago(
                idOperacion, 
                idTcaTipoResolucion, 
                idTcaTipoMoneda, 
                idPrepago, 
                fechaRenovacion, 
                fechaPrepago, 
                busquedaSinTrePrepagoContrato
            );
            
            for(Map<String, Object>  item : listaDesembolsos)
            {   
                BigDecimal Vidlineacredito = item.get("IDLINEACREDITO") != null ?  (BigDecimal)item.get("IDLINEACREDITO") : null;  
                BigDecimal Vidcontrato = item.get("IDCONTRATO") != null ?  (BigDecimal)item.get("IDCONTRATO") : null;  
                String Vnumerolineacredito = item.get("NUMEROLINEACREDITO") != null ?  (String)item.get("NUMEROLINEACREDITO") : null;  
                String Vdescripcionlinea = item.get("DESCRIPCIONLINEA") != null ?  (String)item.get("DESCRIPCIONLINEA") : null;  
                String Vidflexcube = item.get("IDFLEXCUBE") != null ?  (String)item.get("IDFLEXCUBE") : null;  
                BigDecimal Vmontolinea = item.get("MONTOLINEA") != null ?  (BigDecimal)item.get("MONTOLINEA") : null;  
                BigDecimal Vidcontratodesembolso = item.get("IDCONTRATODESEMBOLSO") != null ?  (BigDecimal)item.get("IDCONTRATODESEMBOLSO") : null;  
                String Vcontratodesembolso = item.get("CONTRATODESEMBOLSO") != null ?  (String)item.get("CONTRATODESEMBOLSO") : null;  
                BigDecimal Vidresolucion = item.get("IDRESOLUCION") != null ?  (BigDecimal)item.get("IDRESOLUCION") : null;  
                String Vresolucion = item.get("RESOLUCION") != null ?  (String)item.get("RESOLUCION") : null;  
                XMLGregorianCalendar Vfechaefectiva = item.get("FECHAEFECTIVA") != null ?  (XMLGregorianCalendar)item.get("FECHAEFECTIVA") : null;  
                XMLGregorianCalendar Vvencimiento = item.get("VENCIMIENTO") != null ?  (XMLGregorianCalendar)item.get("VENCIMIENTO") : null;  
                XMLGregorianCalendar Vproximopago = item.get("PROXIMOPAGO") != null ?  (XMLGregorianCalendar)item.get("PROXIMOPAGO") : null;  
                String Vmoneda = item.get("MONEDA") != null ?  (String)item.get("MONEDA") : null;  
                BigDecimal Vmontoprepago = item.get("MONTOPREPAGO") != null ?  (BigDecimal)item.get("MONTOPREPAGO") : null;  
                BigDecimal Vespagototal = item.get("ESPAGOTOTAL") != null ?  (BigDecimal)item.get("ESPAGOTOTAL") : null;  
                String Vfondocontable = item.get("FONDOCONTABLE") != null ?  (String)item.get("FONDOCONTABLE") : null;  
                XMLGregorianCalendar Vescrituracion = item.get("ESCRITURACION") != null ?  (XMLGregorianCalendar)item.get("ESCRITURACION") : null;  
                BigDecimal Vcapitalnvfechaprepa = item.get("CAPITALNVFECHAPREPA") != null ?  (BigDecimal)item.get("CAPITALNVFECHAPREPA") : null;  
                String Vuserrefno = item.get("USERREFNO") != null ?  (String)item.get("USERREFNO") : null;  
                BigDecimal plazo = BigDecimal.ZERO;
                
                
                Timestamp VTfechaefectiva = new Timestamp(Vfechaefectiva.toGregorianCalendar().getTimeInMillis());
                Timestamp VTvencimiento = new Timestamp(Vvencimiento.toGregorianCalendar().getTimeInMillis());
                Timestamp VTproximopago = new Timestamp(Vproximopago.toGregorianCalendar().getTimeInMillis());
                Timestamp VTescrituracion = new Timestamp(Vescrituracion.toGregorianCalendar().getTimeInMillis());
            
                Row row = this.createRow();
                
                row.setAttribute("Id", Integer.valueOf(id));
                //Campos requeridos para realizar insert en la tabla 'TRE_PREPAGO_CONTRATO'.
                row.setAttribute("CapitalNoVencido",Vcapitalnvfechaprepa);
                row.setAttribute("EsPagoTotal",Vespagototal);
                row.setAttribute("FechaProximoPago",VTproximopago);
                row.setAttribute("IdContratoDesembolsoFenix",Vidcontratodesembolso);
                row.setAttribute("IdTcaTipoMoneda",idTcaTipoMoneda);
                row.setAttribute("MontoPrepago",Vmontoprepago);
                row.setAttribute("ContratoDesembolsoFlexcube",Vcontratodesembolso);
                row.setAttribute("LineaCreditoFlexcube",Vidflexcube);
                row.setAttribute("LineaCredito",Vnumerolineacredito);
                row.setAttribute("IdContratoFenix",Vidcontrato);
                row.setAttribute("Resolucion",Vresolucion);
                row.setAttribute("IdTcaTipoResolucion",Vidresolucion);
                row.setAttribute("FechaEfectiva",VTfechaefectiva);
                row.setAttribute("FechaVencimiento",VTvencimiento);
                row.setAttribute("TipoMoneda",Vmoneda);
                row.setAttribute("IdLineaCredito",Vidlineacredito);
                row.setAttribute("FechaEscrituracion",VTescrituracion);
                row.setAttribute("FondoContable",Vfondocontable);
                row.setAttribute("UserRef",Vuserrefno);
                plazo = obtenerPlazo((Timestamp) row.getAttribute("FechaEfectiva"), (Timestamp) row.getAttribute("FechaVencimiento"));
                row.setAttribute("Plazo", plazo);
                
                //Se agrega llave compuesta para identificar a los registros hijos,registros padres siempre van a 
                //tener un idHijo en 0 
                row.setAttribute("IdHijo", new Integer("0"));
                
                //Expandible por default true
                row.setAttribute("Expandible", Boolean.TRUE);
                
                id++;
                this.insertRow(row); 
    
            }
               
        }catch(Exception error){
            logger.log(ADFLogger.ERROR,"Exception al llenar llenarContratoDesembolsoPrepago nuevo: " + error.getMessage());
            throw new JboException(error);
        }  
        
        logger.log(ADFLogger.WARNING,"successful method llenarContratoDesembolsoPrepago.");
    }
    
    public void esPagoTotalById(Integer id, Boolean esPagoTotal) {
        logger.log(ADFLogger.WARNING,
                   "Into esPagoTotalById, input parameters id : " + id + " esPagoTotal : " + esPagoTotal);
        Row contratoDesembolsoPrepagoVORow = null;
        BigDecimal capitalNoVencido = null;
        //buscamos el row por su id
        if (null != id) {
            contratoDesembolsoPrepagoVORow = this.getRow(new Key(new Object[] { id,new Integer("0") }));
        } else {
            logger.log(ADFLogger.WARNING, "El id del Contrato es nulo ." + id);
        }
        if (null != contratoDesembolsoPrepagoVORow) {
            if (null != esPagoTotal) {
                if (esPagoTotal) {
                    contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", esPagoTotal);
                    if (null != contratoDesembolsoPrepagoVORow.getAttribute("CapitalNoVencido")) {
                        capitalNoVencido = (BigDecimal) contratoDesembolsoPrepagoVORow.getAttribute("CapitalNoVencido");
                        contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago", capitalNoVencido);
                    } else {
                        logger.log(ADFLogger.WARNING, "El valor de CapitalNoVencido es nulo.");
                    }
                } else {
                    contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", esPagoTotal);
                    contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago", null);
                }
            } else {
                logger.log(ADFLogger.WARNING, "El valor del parametro esPagoTotal es nulo.");
            }
        }else{
            logger.log(ADFLogger.WARNING, "No se encontro algun registro.");
        }

        //Actualizamos el monto total
        this.actualizarMontoTotalPrepago();
    }
    
    public void esPagoTotalAllRows(Boolean esPagoTotal){
        logger.log(ADFLogger.WARNING, "Into esPagoTotalAllRows, input parameters  esPagoTotal : "+esPagoTotal);
        BigDecimal capitalNoVencido = null;
        try{
        if(esPagoTotal){
            logger.log(ADFLogger.WARNING, "Numero de rows seleccionados." + this.getEstimatedRowCount());
            logger.log(ADFLogger.WARNING, "Numero de rows seleccionados." + this.getAllRowsInRange().length);
            this.setRangeSize(-1);
            logger.log(ADFLogger.WARNING, "Numero de rows seleccionados." + this.getAllRowsInRange().length);
            for(Row contratoDesembolsoPrepagoVORow : this.getAllRowsInRange()){
                if(new Integer("0").equals(contratoDesembolsoPrepagoVORow.getAttribute("IdHijo"))){
                    logger.warning("row : "+contratoDesembolsoPrepagoVORow);
                    contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", esPagoTotal);
                    capitalNoVencido=(BigDecimal)contratoDesembolsoPrepagoVORow.getAttribute("CapitalNoVencido");
                    contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago", capitalNoVencido);
                }
            }
        }else{
            for(Row contratoDesembolsoPrepagoVORow : this.getAllRowsInRange()){
                if(new Integer("0").equals(contratoDesembolsoPrepagoVORow.getAttribute("IdHijo"))){
                    logger.warning("row : "+contratoDesembolsoPrepagoVORow);
                    contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", esPagoTotal);
                    contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago", null);
                }
            } 
        }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error en esPagoTotalAllRows." + e.getClass() + "." + e);
        }
        //Actualizamos el monto total
        this.actualizarMontoTotalPrepago();
    }
    
    
    public void tipoCapturaManual(){
        logger.log(ADFLogger.WARNING, "Into tipoCapturaManual.");
        this.setRangeSize(-1);
        for(Row contratoDesembolsoPrepagoVORow : this.getAllRowsInRange()){
            if(new Integer("0").equals(contratoDesembolsoPrepagoVORow.getAttribute("IdHijo"))){
                logger.warning("row : "+contratoDesembolsoPrepagoVORow);
                contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago", null);
                contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", Boolean.FALSE);
            }
        }
        logger.warning("Se setean los valores en null.");
        
    }

    public void tipoCapturaProrrateo(BigDecimal montoPrepagar) {
        logger.warning("Dentro tipoCapturaProrrateo :" + montoPrepagar);
        try {
            //RN_06   Al seleccionar el tipo de captura "Por Prorrateo" el sistema debe actualizar el saldo de la
            //columna "monto prepago" de cada contrato de desembolso de acuerdo a lo siguiente:
            //Monto prepago por contrato= (Capital no vencido a la fecha de prepago del contrato de desembolso/sumatoria
            //del capital no vencido a la fecha de prepago de todos los contratos a prepagar) * Monto total a prepagar.
            BigDecimal capitalNoVencido = null;
            BigDecimal capitalNovencidoTotalPrepago = null;
            Double montoPrepagoCalculadoDl = null;
            BigDecimal montoPrepagoCalculado = null;
            BigDecimal montoSumaProrrateo = BigDecimal.ZERO;
            
            Boolean prorrateoPracial = Boolean.FALSE;
            
            this.setRangeSize(-1);
            for (Row contratoDesembolsoPrepagoVORow : this.getAllRowsInRange()) {
                
                if(new Integer("0").equals(contratoDesembolsoPrepagoVORow.getAttribute("IdHijo"))){
                    
                    logger.warning("row : "+contratoDesembolsoPrepagoVORow);

                    capitalNovencidoTotalPrepago =
                        (BigDecimal) contratoDesembolsoPrepagoVORow.getAttribute("CapitalNovencidoTotalPrepago");
                    logger.log(ADFLogger.WARNING, "capitalNovencidoTotalPrepago  : " + capitalNovencidoTotalPrepago);
                    try{
                        if(null != montoPrepagar && null != capitalNovencidoTotalPrepago){
                            if (montoPrepagar.compareTo(capitalNovencidoTotalPrepago) == 0) {
                                capitalNoVencido = (BigDecimal) contratoDesembolsoPrepagoVORow.getAttribute("CapitalNoVencido");
                                logger.log(ADFLogger.WARNING, "capitalNoVencido : " + capitalNoVencido);
                                montoSumaProrrateo = montoSumaProrrateo.add(capitalNoVencido);
                                contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago",
                                                                        capitalNoVencido /*.setScale(2,RoundingMode.FLOOR)*/);
                                //La columna EsPagoTotal toma el valor de FALSE
                                contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", Boolean.FALSE);
                            } else {
                                prorrateoPracial = Boolean.TRUE;
                                capitalNoVencido = (BigDecimal) contratoDesembolsoPrepagoVORow.getAttribute("CapitalNoVencido");
                                logger.log(ADFLogger.WARNING, "capitalNoVencido : " + capitalNoVencido);

                                montoPrepagoCalculadoDl =
                                    capitalNoVencido.doubleValue() / capitalNovencidoTotalPrepago.doubleValue();
                                montoPrepagoCalculado = BigDecimal.valueOf(montoPrepagoCalculadoDl);
                                logger.log(ADFLogger.WARNING,
                                         "capitalNoVencido / capitalNovencidoTotalPrepago = " + montoPrepagoCalculado);

                                montoPrepagoCalculado = BigDecimal.valueOf((montoPrepagoCalculadoDl * montoPrepagar.doubleValue()));
                                logger.log(ADFLogger.WARNING,
                                       "montoPrepagoCalculado = (capitalNoVencido / capitalNovencidoTotalPrepago) * (montoPrepagar) = " +
                                            montoPrepagoCalculado);
                                //montoPrepagoCalculado = montoPrepagoCalculado.setScale(2, RoundingMode.HALF_EVEN);
                                montoSumaProrrateo = montoSumaProrrateo.add(montoPrepagoCalculado.setScale(2, RoundingMode.FLOOR));
                                contratoDesembolsoPrepagoVORow.setAttribute("MontoPrepago",
                                                                        montoPrepagoCalculado.setScale(2,RoundingMode.FLOOR));
                                //La columna EsPagoTotal toma el valor de FALSE
                                contratoDesembolsoPrepagoVORow.setAttribute("EsPagoTotal", Boolean.FALSE);
                            }  
                        }else{
                            logger.warning("No se ha recibido un monto de Capital no vencido");
                            String msg = "El valor del capital no vencido es nulo, no se puede realizar el prorrateo.";
                            throw new Exception("Error. " + msg);
                        }
                    }catch(Exception e){
                        logger.warning("Error al realizar el prorrateo.");
                        JboException ex = new JboException(e.getMessage());
                        ex.addToExceptions(new Exception());
                        throw ex;
                    }
                
                }
                
            }
            //Se evita la diferencia de centavos
            if(prorrateoPracial){
                logger.warning("Entra en ajuste de prorrateo.");
                calculoDiferenciaCentavos(montoPrepagar, montoSumaProrrateo); 
            }else{
                logger.warning("Es pago total,los montos totales son iguales.");
            }
            //Actualizamos el monto total
            //this.actualizarMontoTotalPrepago();
        } catch (java.lang.ArithmeticException exc) {
            logger.severe("Error en tipoCapturaProrrateo : ", exc);
            logger.warning("Error en tipoCapturaProrrateo : ", exc);
            throw exc;
        }
    }
    
    public void calculoDiferenciaCentavos(BigDecimal montoPrepagar, BigDecimal montoSumaProrrateo) {
        logger.warning("Entra en calculoDiferenciaCentavos");
        
        logger.warning("Valor monto a prepagar" + montoPrepagar);
        logger.warning("Valor suma prorrateo parcial" + montoSumaProrrateo);
        
        BigDecimal diferenciaCentavos = BigDecimal.ZERO;
        BigDecimal montoPrepagoContrato = null;
        BigDecimal sumaCentavos = null;
        
        if(null != montoPrepagar && null != montoSumaProrrateo){
            if(montoPrepagar.compareTo(montoSumaProrrateo) == 1){
                diferenciaCentavos = montoPrepagar.subtract(montoSumaProrrateo);
                logger.warning("Diferencia de montos = " + diferenciaCentavos);
                
                RowSetIterator iterator = this.createRowSetIterator(null);
                iterator.reset();
                
                while (iterator.hasNext()) {
                    ContratoDesembolsoPrepagoVORowImpl row =
                        (ContratoDesembolsoPrepagoVORowImpl) iterator.next();
                    if(new Integer("0").equals(row.getAttribute("IdHijo"))){
                        logger.warning("row : "+row);
                        if(null != row.getAttribute("MontoPrepago")){
                            montoPrepagoContrato = (BigDecimal)row.getAttribute("MontoPrepago");
                            logger.warning("Monto SIN centavos." + montoPrepagoContrato);
                            sumaCentavos = montoPrepagoContrato.add(diferenciaCentavos);
                            row.setAttribute("MontoPrepago", sumaCentavos);
                            logger.warning("Monto CON centavos." + sumaCentavos);
                            break;
                        }
                    }
                }
                
                iterator.closeRowSetIterator();             
                
            }else{
                logger.warning("Los montos son iguales.");
            }
        }else{
            logger.warning("Los montos son nulos.");
        }
    }
    
    public void actualizarMontoTotalPrepago() {
        logger.log(ADFLogger.WARNING, "Entra en actualizarMontoTotalPrepago.");
        BigDecimal montoTotalPrepago = new BigDecimal(0);
        BigDecimal montoPrepago = new BigDecimal(0);
        this.setRangeSize(-1);
        logger.log(ADFLogger.WARNING, "Numero de rows encontrados :" + this.getAllRowsInRange().length);
        try {
            if (this.getAllRowsInRange().length > 0) {
                for (Row row : this.getAllRowsInRange()) {
                    if(new Integer("0").equals(row.getAttribute("IdHijo"))){
                        logger.warning("row :"+row);
                        if (null != row.getAttribute("MontoPrepago")) {
                            montoPrepago = (BigDecimal) row.getAttribute("MontoPrepago");
                            logger.log(ADFLogger.WARNING, "Monto del prepago." + montoPrepago);
                        } else {
                            logger.log(ADFLogger.WARNING, "El monto del prepago es nulo.");
                        }   
                        if (montoPrepago != null) {
                            montoTotalPrepago = montoTotalPrepago.add(montoPrepago);
                        } else {
                            logger.log(ADFLogger.WARNING, "El monto del prepago es nulo.");
                        }
                    }
                }
                this.setRangeSize(-1);
                //montoTotalPrepago = montoTotalPrepago.setScale(2, RoundingMode.HALF_EVEN);
                logger.log(ADFLogger.WARNING, "Monto total del prepago." + montoTotalPrepago);
                for (Row row : this.getAllRowsInRange()) {
                    if(new Integer("0").equals(row.getAttribute("IdHijo"))){
                        logger.warning("row :"+row);
                        row.setAttribute("MontoTotalPrepago", montoTotalPrepago);
                    }
                }
            } else {
                logger.log(ADFLogger.WARNING, "El numero de rows recuperados es nulo.");
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error en actualizarMontoTotalPrepago.", e);
        }
        logger.log(ADFLogger.WARNING, "Metodo para actualizar el total del prepago termino correctamente.");
    }
    
    public BigDecimal obtenerMontoTotalPrepago() {
        logger.log(ADFLogger.WARNING, "Entra en obtenerMontoTotalPrepago.");
        BigDecimal montoTotalPrepago = new BigDecimal(0);
        BigDecimal montoPrepago = new BigDecimal(0);
        this.setRangeSize(-1);
        logger.log(ADFLogger.WARNING, "Numero de rows encontrados :" + this.getAllRowsInRange().length);
        try {
            if (this.getAllRowsInRange().length > 0) {
                for (Row row : this.getAllRowsInRange()) {
                    if(new Integer("0").equals(row.getAttribute("IdHijo"))){
                        logger.warning("row :"+row);
                        if (null != row.getAttribute("MontoPrepago")) {
                            montoPrepago = (BigDecimal) row.getAttribute("MontoPrepago");
                            logger.log(ADFLogger.WARNING, "Monto del prepago." + montoPrepago);
                        } else {
                            logger.log(ADFLogger.WARNING, "El monto del prepago es nulo.");
                        }
                        if (montoPrepago != null) {
                            montoTotalPrepago = montoTotalPrepago.add(montoPrepago);
                        } else {
                            logger.log(ADFLogger.WARNING, "El monto del prepago es nulo.");
                        }
                    }
                }
                this.setRangeSize(-1);
                montoTotalPrepago = montoTotalPrepago.setScale(2, RoundingMode.HALF_EVEN);
                logger.log(ADFLogger.WARNING, "Monto total del prepago." + montoTotalPrepago);
            } else {
                logger.log(ADFLogger.WARNING, "El numero de rows recuperados es nulo.");
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error en actualizarMontoTotalPrepago." + e.getClass() + "." + e);
        }
        logger.log(ADFLogger.WARNING, "Metodo para actualizar el total del prepago termino correctamente.");
        
        return montoTotalPrepago;
    }
    
    
    /**  obtenerAtributosContratosDesembolsos"
    *   @param  idOperacion,idTcaTipoResolucion,idTcaTipoMoneda
    *   @since 04/10/2016
    *   @by Gabriel Niño Rosales
    **/
    public Map obtenerAtributosContratosDesembolsos() {
        logger.warning("Dentro obtenerAtributosContratosDesembolsos.");
        Map<String,Object> atributosContratosDesembolsosMap = new HashMap<String,Object>();
        List<String> listaContratoDesembolso = new ArrayList<String>();
        List<Long> listaIdLineaCredito = new ArrayList<Long>();
        this.setRangeSize(-1);   
        logger.warning("Cantidad de contratos de desembolso recuperados : "+this.getRowCount());
        for(Row row:this.getAllRowsInRange()){
            if(new Integer("0").equals(row.getAttribute("IdHijo"))){
                logger.warning("row :"+row);
                if(null != row.getAttribute("ContratoDesembolsoFlexcube")){
                    listaContratoDesembolso.add((String)row.getAttribute("ContratoDesembolsoFlexcube"));
                }else{
                    logger.warning("ContratoDesembolsoFlexcube es nulo");
                }
            
                if(null != row.getAttribute("IdLineaCredito")){
                    listaIdLineaCredito.add((Long)row.getAttribute("IdLineaCredito"));
                }else{
                    logger.warning("IdLineaCredito es nulo");
                }
            }
        }
       
        atributosContratosDesembolsosMap.put("listaContratoDesembolso", listaContratoDesembolso);
        atributosContratosDesembolsosMap.put("listaIdLineaCredito", listaIdLineaCredito);

        logger.warning("Termina obtenerAtributosContratosDesembolsos result :"+atributosContratosDesembolsosMap);
        
        return atributosContratosDesembolsosMap;
    }    
    
    public void removerContratoDesembolsoHijo(Integer idPadre){
        logger.warning("Into removerContratoDesembolsoHijo");
        int cantidadRowRemove = 0;
        this.setRangeSize(-1);
        for(Row row : this.getAllRowsInRange()){
            if(idPadre.equals(row.getAttribute("Id")) 
                    && !new Integer("0").equals(row.getAttribute("IdHijo"))){
                logger.warning("IdPadre :"+row.getAttribute("Id"));
                logger.warning("IdHijo ;"+row.getAttribute("IdHijo"));
                logger.warning("remove row :"+row);
                row.remove();
                cantidadRowRemove++;
            }
        }
        logger.warning("Row count remove :"+cantidadRowRemove);

        //actualizar el valor de Expandible
        actualizarExpandiblePorIdPadre(idPadre, Boolean.TRUE);
        
        logger.warning("Leave removerContratoDesembolsoHijo");
    }
    
    public void insertarContratoDesembolsoHijo(Long idOperacion,String contratoDesembolso,
                                                                Timestamp fechaSolicitud, Timestamp fechaPrepago,
                                                                    Integer idTcaTipoMoneda,Integer idPadre) {
        long startTime = System.currentTimeMillis();
        ResultSet rs = null;
        BigDecimal sqlCodeValue = null;
        String sqlResultValue = null;
        
        String storeProcedure = null;
        CallableStatement callableStatement = null;
        Integer posicionPadre = null;
        

        logger.log(ADFLogger.WARNING,"Into insertarContratoDesembolsoHijo");
        logger.log(ADFLogger.WARNING,"idOperacion : " + idOperacion);
        logger.log(ADFLogger.WARNING,"contratoDesembolso : " + contratoDesembolso);
        logger.log(ADFLogger.WARNING,"fechaSolicitud : " + fechaSolicitud);
        logger.log(ADFLogger.WARNING,"fechaPrepago : " + fechaPrepago);
        logger.log(ADFLogger.WARNING,"idTcaTipoMoneda : " + idTcaTipoMoneda);
        logger.log(ADFLogger.WARNING,"idPadre : " + idPadre);
        
        //actualizar el valor de Expandible
        actualizarExpandiblePorIdPadre(idPadre, Boolean.FALSE);
        
        //obtener posicion del padre para insertar despues de el los registros
        posicionPadre = obtenerPosicionPorIdPadre(idPadre);
        logger.warning("posicionPadre :"+posicionPadre);
        
        try {
            storeProcedure = "{call SP_CONTRATO_DESEM_PROX_PAGO(?,?,?,?,?,?,?,?)}";
            callableStatement = this.getDBTransaction().createCallableStatement(storeProcedure,0);
            //parametros de entrada
            
            
            callableStatement.setObject(FenixModelConstants.P_ID_MONEDA_SP_CONTRATO_DESEM_PROX_PAGO,idTcaTipoMoneda);
            callableStatement.setObject(FenixModelConstants.P_ID_OPERACION_SP_CONTRATO_DESEM_PROX_PAGO, idOperacion);
            callableStatement.setObject(FenixModelConstants.P_CONTRATO_DESEMBOLSO_SP_CONTRATO_DESEM_PROX_PAGO,
                                            contratoDesembolso);
            callableStatement.setObject(FenixModelConstants.P_FECHA_SOLICITUD_SP_CONTRATO_DESEM_PROX_PAGO, 
                                            fechaSolicitud);
            callableStatement.setObject(FenixModelConstants.P_FECHA_PREPAGO_SP_CONTRATO_DESEM_PROX_PAGO ,fechaPrepago);
            
            //parametros de salida
            callableStatement.registerOutParameter(FenixModelConstants.P_CODIGO_RES_SP_CONTRATO_DESEM_PROX_PAGO, 
                                                    OracleTypes.NUMBER);
            callableStatement.registerOutParameter(FenixModelConstants.P_MENSAJE_SP_CONTRATO_DESEM_PROX_PAGO, 
                                                    OracleTypes.VARCHAR);
            callableStatement.registerOutParameter(FenixModelConstants.RECORDSET_SP_CONTRATO_DESEM_PROX_PAGO, 
                                                    OracleTypes.CURSOR);
            callableStatement.executeUpdate();
            //recuperar el resultado de la ejecuccion del stored procedure
            sqlCodeValue = (BigDecimal) callableStatement.getObject(6);
            sqlResultValue = (String) callableStatement.getObject(7);
            rs = (ResultSet) callableStatement.getObject(8);
            if (null != rs) {
                
                while (rs.next()) {
                    //crear registro
                    Row row = this.createRow();
                    //Id
                    row.setAttribute("Id",idPadre); 
                    
                    row.setAttribute("IdHijo",(null != rs.getObject("ID")) ? rs.getInt("ID"):new Integer(0)); 
                    //NumeroLineaCredito
                    row.setAttribute("LineaCredito",
                                        (null != rs.getString("NUMERO_LINEA_CREDITO")) ?
                                            rs.getString("NUMERO_LINEA_CREDITO") : null);
                    //ContratoDesembolso
                    row.setAttribute("ContratoDesembolsoFlexcube",
                                        (null != rs.getObject("CONTRATO_DESEMBOLSO")) ? 
                                            rs.getString("CONTRATO_DESEMBOLSO"): null); 
                    //FechaEfectiva
                    row.setAttribute("FechaEfectiva",
                                        (null != rs.getObject("FECHA_EFECTIVA")) ? 
                                            rs.getString("FECHA_EFECTIVA"): null); 
                    //Vencimiento
                    row.setAttribute("FechaVencimiento",
                                        (null != rs.getObject("VENCIMIENTO")) ? 
                                            rs.getString("VENCIMIENTO"): null); 
                    //ProximoPago
                    row.setAttribute("FechaProximoPago",
                                        (null != rs.getObject("PROXIMO_PAGO")) ? 
                                            rs.getString("PROXIMO_PAGO"): null); 
                    //Escrituracion
                    row.setAttribute("FechaEscrituracion",
                                        (null != rs.getObject("ESCRITURACION")) ? 
                                            rs.getString("ESCRITURACION"): null); 
                    //FondoContable
                    row.setAttribute("FondoContable",
                                        (null != rs.getObject("FONDO_CONTABLE")) ? 
                                            rs.getString("FONDO_CONTABLE"): null); 
                    //UserRefNo
                    row.setAttribute("UserRef",
                                        (null != rs.getObject("USER_REF_NO")) ? 
                                            rs.getString("USER_REF_NO"): null); 

                    //Moneda
                    row.setAttribute("IdTcaTipoMoneda",
                                     (null != rs.getString("MONEDA")) ? rs.getString("MONEDA") : null);

                    //CapitalNoVencido
                    row.setAttribute("CapitalNoVencido",
                                     (null != rs.getString("CAPITAL_NO_VENCIDO")) ?
                                     rs.getString("CAPITAL_NO_VENCIDO") : null);

                    //EsPagoTotal
                    row.setAttribute("EsPagoTotal",
                                     (null != rs.getObject("PAGO_TOTAL")) ? rs.getInt("PAGO_TOTAL") :
                                     new Integer(0));

                    //MontoPrepago
                    row.setAttribute("MontoPrepago",
                                     (null != rs.getString("MONTO_PREPAGO")) ? rs.getString("MONTO_PREPAGO") : null);

                    //Expandible por default true
                    row.setAttribute("Expandible", Boolean.FALSE);
                   
                    // Datos de prueba
    //                    StringBuilder sb = new StringBuilder("");
    //                    Random random = new Random();
    //                    sb.append(random.nextInt(100000 - 1 + 1) + 1);
    //                    sb.append("1");
    //                    sb.append(random.nextInt((99 - 1) + 1) + 1);
    //                    BigDecimal capitalNoVencidoRandom = new BigDecimal(sb.toString());
    //                    row.setAttribute("CapitalNoVencido", capitalNoVencidoRandom);

                    //insertar registro
                    this.insertRowAtRangeIndex(posicionPadre, row); 
        
                }
            } else {
                logger.log(ADFLogger.WARNING, "No se obtuvieron valores de SP_CONTRATO_DESEM_PROX_PAGO");
            }
        
        }catch(SQLException sqlerr){
            logger.log(ADFLogger.WARNING,"SQLException in insertarContratoDesembolsoHijo : ", sqlerr);
            logger.log(ADFLogger.WARNING,"SQLCODE Value : " +sqlCodeValue);
            logger.log(ADFLogger.WARNING,"SQLMSG Value : " +sqlResultValue);
            throw new JboException(sqlerr);
        }catch(Exception e) {
            logger.log(ADFLogger.WARNING,"Exception in insertarContratoDesembolsoHijo : ", e);
            throw new JboException(e.getMessage());
        }
        
        logger.log(ADFLogger.WARNING,"SQLCODE value : " +sqlCodeValue);
        logger.log(ADFLogger.WARNING,"SQLMSG value : " +sqlResultValue);
        logger.log(ADFLogger.WARNING,"successful method insertarContratoDesembolsoHijo.");
        long endTime = System.currentTimeMillis();
        
        logger.warning("Tiempo en ejecutar metodo insertarContratoDesembolsoHijo :  "
                            + (endTime - startTime)/1000 + " segundos");
        
        logger.log(ADFLogger.WARNING,"Leave insertarContratoDesembolsoHijo");
    }
    
    
    public int obtenerPosicionPorIdPadre(Integer idPadre) {
        logger.warning("Into obtenerPosicionPorIdPadre");
        this.setRangeSize(-1);
        RowSetIterator rowSetIterator = createRowSetIterator(null);
        rowSetIterator.reset();
        int posicion = 0;

        while(rowSetIterator.hasNext()) {
            Row row = rowSetIterator.next();
            posicion ++;
            if (null != row && null != row.getAttribute("Id")) {
                if (idPadre.equals(row.getAttribute("Id"))) {
                    break;
                }
            }
        }

        rowSetIterator.closeRowSetIterator();
        logger.warning("Leave obtenerPosicionPorIdPadre,return:"+posicion);
        return posicion;
    }
    
    public void actualizarExpandiblePorIdPadre(Integer idPadre,Boolean expandible){
        logger.warning("Into actualizarExpandiblePorIdPadre");
        
        Row row = null;
        
        if (null != idPadre) {
            row = this.getRow(new Key(new Object[] { idPadre,new Integer("0") }));
            if (null != row) {
                logger.warning("Expandible set value "+expandible);
                row.setAttribute("Expandible", expandible);
            }else{
                logger.warning("row is null with key :"+idPadre);
            }
        } else {
            logger.warning("idPadre is null");
        }
        
        logger.warning("Leave actualizarExpandiblePorIdPadre");
    }
    
    public BigDecimal obtenerPlazo(Timestamp fechaEfectiva, Timestamp fechaVencimiento) {
        logger.warning("Into obtenerPlazo");
        logger.warning("fechaEfectiva: " + fechaEfectiva);
        logger.warning("fechaVencimiento: " + fechaVencimiento);

        BigDecimal plazoOp = null;
        
        if (fechaEfectiva != null && fechaVencimiento != null) {

            //RN_07 El plazo trascurrido es igual a la fecha fin menos fecha inicio entre 365.
            plazoOp = new BigDecimal(fechaVencimiento.getTime() - fechaEfectiva.getTime());
            plazoOp = plazoOp.divide(new BigDecimal(24 * 60 * 60 * 1000), 2, RoundingMode.CEILING); 
            plazoOp = plazoOp.divide(new BigDecimal(365), 2, RoundingMode.CEILING);
                            
            logger.log(ADFLogger.WARNING, "Valor de calculo plazo :" + plazoOp);
        } 
        
        return plazoOp;
    }
    
    public List<BigDecimal> obtenerListaPlazoContrato(){
        logger.warning("Dentro obtenerListaPlazoContrato");
        List<BigDecimal> listaPlazo = new ArrayList<BigDecimal>();
        BigDecimal plazo;
        this.setRangeSize(-1);
        for(Row row : this.getAllRowsInRange()){
            plazo = null;
            
            try{
                plazo = (BigDecimal) row.getAttribute("Plazo");
            }catch(Exception e){
                logger.severe("Error al recuperar Plazo en ContratoDesembolsoPrepagoVO :",e);
            }
            
            if(null != plazo){
                logger.warning("plazo : " + plazo);
                listaPlazo.add(plazo);
            }
        }
        logger.warning("Fuera obtenerListaPlazo return : " + listaPlazo);
        return listaPlazo;
    }
}