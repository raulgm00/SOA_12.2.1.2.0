package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.List;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.EnvioDatosReuAproVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 25 19:35:04 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EnvioDatosReuAproVOImpl extends ViewObjectImpl implements EnvioDatosReuAproVO {
    
    /**
     * Lista de registros de la VO programatica
     */
    private List<EnvioDatosReuAproVORowImpl> rows = new ArrayList<EnvioDatosReuAproVORowImpl>();

    /**
     * This is the default constructor (do not remove).
     */
    public EnvioDatosReuAproVOImpl() {
    }
    
    /**
     * create - overridden for custom java data source support.
     */
    @Override
    protected void create() {
        super.create();
        getViewDef().setQuery(null);
        getViewDef().setSelectClause(null);
        setQuery(null);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        
        if(rows.size() > 0){
            setFetchPosition(qc, 0);
        }
        super.executeQueryForCollection(qc, params, noUserParams); 
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        //boolean bRet = super.hasNextForCollection(qc);
        
        boolean bRet = false;
        if(rows.size() > 0){
            bRet = getFetchPosition(qc) < rows.size();
        }else{
            bRet = super.hasNextForCollection(qc);
        }
        
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        //ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        
        ViewRowImpl value = null;
        EnvioDatosReuAproVORowImpl row = null;
        
        if(rows.size() > 0){
            
            //Obtiene la posicion actual del current Row
            int fetchPosition = getFetchPosition(qc);
            System.out.println("Fetch Position is : " + fetchPosition);
            
            //Crea un nuevo registro de VO
            value = createNewRowForCollection(qc);

            //Obtiene elemento de la colleccion de datos externa
            row = rows.get(fetchPosition);
            
            //Asigna el registro externo al registro de la VO
            value = row;
            
            //Actualiza la posicion del current Row
            setFetchPosition(qc, fetchPosition + 1);
        }else{
            value = super.createRowFromResultSet(qc, resultSet);
        }
        
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = 0;
        if(rows.size() > 0 ){
            value = rows.size();
        }else{
            value = super.getQueryHitCount(viewRowSet);    
        }
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    /**
     * Method to set the new fetch position
     * @param rowset
     * @param position
     * To set the position on the nextRecord to fetch i.e. next record of arrayList
     */
    private void setFetchPosition(Object rowset, int position) {
        
        if(rows.size() > 0){
            if (position == rows.size() - 1) {
                setFetchCompleteForCollection(rowset, true);
            }
            setUserDataForCollection(rowset, new Integer(position));
        }
    }

    /**
     * Method to get the current fetch position
     * @param rowset
     * @return
     *
     * This method gets the fetchPosition to fetch the row from the arrayList to retrieve the data
     */
    private int getFetchPosition(Object rowset) {
        int value = 0;
        try{
            value = ((Integer)getUserDataForCollection(rowset)).intValue();    
        }catch(Exception e){
            e.printStackTrace();
        }
        return value;
    }
    
    public void setRows(List<EnvioDatosReuAproVORowImpl> rows) {
        this.rows.clear();
        this.rows.addAll(rows);
        for(EnvioDatosReuAproVORowImpl row : this.rows){
            insertRow(row);
        }
    }

    public List<EnvioDatosReuAproVORowImpl> getRows() {
        return rows;
    }
}

