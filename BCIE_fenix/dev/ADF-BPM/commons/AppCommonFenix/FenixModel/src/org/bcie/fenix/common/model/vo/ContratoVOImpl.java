package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.ContratoVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 26 17:36:36 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratoVOImpl extends ViewObjectImpl implements ContratoVO {
    
    private static ADFLogger logger = null;
    
    public static final String BUSCAR_POR_OPER_VC = "ContratoVOByOperacionCriteria";
    public static final Integer ES_CONTRATO_POR_LOTE = 1;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContratoVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Long getIdContratoByOperacionInstanciaProceso(Long idOperacion, String instanciaProceso) {
        logger.log(ADFLogger.TRACE, "Inside getIdContratoByOperacionInstanciaProceso.");
        Row contratoRow = null;
        
        // 1) Filtramos el VO por idOperacion e instanciaProceso para saber si ya existe un id asociado
        contratoRow = getContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);
        
        // 2) Si no existe un row bajo ese criterio, creamos un nuevo contrato
        if(contratoRow == null) {
            
            contratoRow = crearContrato(idOperacion, instanciaProceso);
            
            // Re-ejecutamos el query debido a que se insertó un nuevo contrato
            this.executeQuery();
        }
        
        // 3) Asignamos valor de retorno
        return (contratoRow != null ? (Long)contratoRow.getAttribute("Id") : null);
    }
    
    public ContratoVORowImpl getContratoByOperacionInstanciaProceso(Long idOperacion, String instanciaProceso) {
        logger.log(ADFLogger.TRACE, "Inside getContratoByOperacionInstanciaProceso.");
        ContratoVORowImpl contratoRow = null;
        ViewCriteria criteriaByOperacionInstanciaProceso = null;
        
        // Los atributos idOperacion e instanciaProceso son requeridos por el ViewCriteria
        if((idOperacion != null) && (instanciaProceso != null)) {
            // 1) Filtramos el VO por idOperacion e instanciaProceso
            criteriaByOperacionInstanciaProceso = 
                this.getViewCriteriaManager().getViewCriteria("ContratoVOCriteriaByOperacionInstanciaProceso");
            criteriaByOperacionInstanciaProceso.ensureVariableManager().setVariableValue("varIdOperacion", idOperacion);
            criteriaByOperacionInstanciaProceso.ensureVariableManager().setVariableValue("varInstanciaProceso", instanciaProceso);
            
            this.applyViewCriteria(criteriaByOperacionInstanciaProceso);
            this.executeQuery();
            
            // 2) Asignamos valor de retorno
            if(this.getEstimatedRowCount() > 0) {
                contratoRow = (ContratoVORowImpl)this.getRowAtRangeIndex(0);
                
                // Removemos criteria del VO
                this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratoVOCriteriaByOperacionInstanciaProceso");
                
                // Re-ejecutamos el query 
                this.executeQuery();
            }
        }
        
        return contratoRow;
    }
    
    public Long getIdMontoEscrituradoByIdContrato(Long idContrato) {
        logger.log(ADFLogger.WARNING, "INTO  getIdMontoEscrituradoByIdContrato : ");
        Integer contador = 0;
        Long idMontoEscriturado = Long.valueOf(0);
        
        logger.warning("IdContrato recibido: " + idContrato);
        try {
            if(idContrato == null)
            {
                return null;
            }
            else{
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("ContratoVOCriteriaByIdContrato");
                criteria.ensureVariableManager().setVariableValue("varId", idContrato);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsContratoVo = createRowSetIterator(null);
                rowsContratoVo.reset();
                    while (rowsContratoVo.hasNext()) {
                        ContratoVORowImpl rowL = (ContratoVORowImpl) rowsContratoVo.next();
                        idMontoEscriturado = rowL.getIdMontoEscriturado();
                        contador++;
                    }
                logger.warning("Numero de rows: " + contador);
                logger.warning("Valor IdMontoEscriturado obtenido: " + idMontoEscriturado);
                rowsContratoVo.closeRowSetIterator();
            } 
        }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en getIdMontoEscrituradoByIdContrato " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratoVOCriteriaByIdContrato");
        }
        
        logger.warning("Valor IdMontoEscriturado devuelto: " + idMontoEscriturado);
        return idMontoEscriturado;
    }
    
    private Row crearContrato(Long idOperacion, String instanciaProceso) {
        logger.log(ADFLogger.TRACE, "Inside crearContrato.");
        
        // Creamos un nuevo contrato asignado a un IdOperacion e InstanciaProceso si no existe
        Row contratoRow = null;
        oracle.jbo.domain.Number idContrato = null;
        NameValuePairs nvpContrato = null;
        SequenceImpl seqContrato = null;

        seqContrato = new SequenceImpl("CONTRATO_SEQ", getDBTransaction());
        idContrato = seqContrato.getSequenceNumber();
        
        nvpContrato = new NameValuePairs();
        nvpContrato.setAttribute("Id", idContrato);
        nvpContrato.setAttribute("IdOperacion", idOperacion);
        nvpContrato.setAttribute("InstanciaProceso", instanciaProceso);
        
        contratoRow = this.createAndInitRow(nvpContrato);
                
        getDBTransaction().commit();
        return contratoRow;
    }
    public void actualizarDatosEscrituracion(Long idContrato, Integer idTcaTipoMonto, java.sql.Timestamp fechaEscrituracion){
        logger.log(ADFLogger.WARNING, "Entra en actualizarDatosEscrituracion.");
        logger.log(ADFLogger.WARNING, "idContrato:" + idContrato);
        logger.log(ADFLogger.WARNING, "idTcaTipoMonto:" + idTcaTipoMonto);
        logger.log(ADFLogger.WARNING, "fechaEscrituracion:" + fechaEscrituracion);
        Row contratoImplementacionRow = null;
        contratoImplementacionRow = this.getRow(new Key(new Object[] {idContrato}));    
        
        try{
            if(contratoImplementacionRow != null) {
                logger.log(ADFLogger.WARNING, "Inside actualizar datos.");
                    contratoImplementacionRow.setAttribute("FechaFirma", fechaEscrituracion);
                    contratoImplementacionRow.setAttribute("IdMontoEscriturado", idTcaTipoMonto);
            }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error alactualizar datos de escritracion." + e);
        }
        
    }
    public Integer crearContratoPorLote(Long idOperacion, String instanciaProceso) {
        logger.log(ADFLogger.TRACE, "Entra en crearContratoPorLote.");
        
        // Creamos un nuevo contrato asignado a un IdOperacion e InstanciaProceso si no existe
        Row contratoRow = null;
        oracle.jbo.domain.Number idContrato = null;
        NameValuePairs nvpContrato = null;
        SequenceImpl seqContrato = null;
        Integer idContratoLote = null;

        seqContrato = new SequenceImpl("CONTRATO_SEQ", getDBTransaction());
        idContrato = seqContrato.getSequenceNumber();
        try {
            nvpContrato = new NameValuePairs();
            nvpContrato.setAttribute("Id", idContrato);
            nvpContrato.setAttribute("IdOperacion", idOperacion);
            nvpContrato.setAttribute("InstanciaProceso", instanciaProceso);
            nvpContrato.setAttribute("EsContratoPorLote", ES_CONTRATO_POR_LOTE);

            contratoRow = this.createAndInitRow(nvpContrato);

            getDBTransaction().commit();
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error al crear el nuevo contrato." + e);
            getDBTransaction().rollback();
        }
        logger.log(ADFLogger.WARNING, "Valor contrato nuevo :" + Integer.valueOf(idContrato.intValue()));
        return idContratoLote = Integer.valueOf(idContrato.intValue());
    }
    
    public void actualizarNumeroCustodia(Long id,String numeroCustodia) {
        logger.log(ADFLogger.TRACE, "Inside actualizarNumeroCustodia.");
        this.executeQuery();
        if((id != null) && (this.getRow(new Key(new Object[] {id})) != null)) {
            //Actualizar el campo "NUMERO_CUSTODIA" en la tabla "CONTRATO"
            this.getRow(new Key(new Object[] {id})).setAttribute("NumeroCustodia",numeroCustodia);
            getDBTransaction().commit();
        }
    }
    
    public void actualizarContratoFirmado(Long idOperacion, String instanciaProceso, oracle.jbo.domain.Number montoEscriturado,
                                          java.sql.Timestamp fechaFirma, oracle.jbo.domain.Date fechaVigencia, Integer idTcaTipoMoneda) {
        logger.log(ADFLogger.TRACE, "Inside actualizarContratoFirmado.");
        
        actualizarFechas(idOperacion, instanciaProceso, fechaFirma, fechaVigencia);
        crearMontoEscriturado(idOperacion, instanciaProceso, montoEscriturado, idTcaTipoMoneda);
    }
    
    public void actualizarFechas(Long idOperacion, String instanciaProceso, java.sql.Timestamp fechaFirma, 
                                 oracle.jbo.domain.Date fechaVigencia) {
        logger.log(ADFLogger.WARNING, "Inside actualizarFechas."); 
        Long idContrato = null;
        Row contratoRow = null;
        
        // Obtenemos row de contrato a actualizar
        idContrato = this.getIdContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);
        contratoRow = this.getRow(new Key(new Object[] {idContrato}));
                
        // Actualizamos datos
        if(contratoRow != null) {
            logger.log(ADFLogger.WARNING, "Inside actualizarFechas. idOperacion: " + idOperacion + ". instanciaProceso: " 
                                          + instanciaProceso + ". fechaFirma: " + fechaFirma + ". fechaVigencia: " + fechaVigencia);
            
            if(fechaFirma != null)
                contratoRow.setAttribute("FechaFirma", fechaFirma);

            if(fechaVigencia != null)
                contratoRow.setAttribute("FechaVigencia", new java.sql.Timestamp(fechaVigencia.dateValue().getTime()));
            
            getDBTransaction().commit();
        }
    }
    
    private void crearMontoEscriturado(Long idOperacion, String instanciaProceso, oracle.jbo.domain.Number montoEscriturado, Integer idTcaTipoMoneda) {
        logger.log(ADFLogger.TRACE, "Inside crearMontoEscriturado.");
        FenixAMImpl fenixAM = null;
        Long idContrato = null;
        Row contratoRow = null;
        Row montoRow = null;
        
        // Obtenemos row de contrato
        idContrato = this.getIdContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);
        contratoRow = this.getRow(new Key(new Object[] {idContrato}));
        
        // Creamos un monto nuevo y se lo asignamos al contrato
        if(contratoRow != null) {
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            montoRow = fenixAM.getMontoOperacionVO().crearMonto(idOperacion, FenixModelConstants.TIPO_MONTO_ESCRITURADO, 
                                                                montoEscriturado.getBigDecimalValue(), idTcaTipoMoneda);
            
            if(montoRow != null) {
                logger.log(ADFLogger.WARNING, "Inside setAttribute IdMontoEscriturado. montoRow.getAttribute(\"Id\"): " 
                                              + montoRow.getAttribute("Id"));
                
                contratoRow.setAttribute("IdMontoEscriturado", Long.valueOf(montoRow.getAttribute("Id").toString()));
                getDBTransaction().commit();
            }
        }
    }
    
    public void buscarContratoPorIdOperacion(Long idOperacion){
        logger.warning("Entra a metodo buscarContratoPorIdOperacion");
        
        setvarIdOperacion(idOperacion);
        
        ViewCriteria vc = getViewCriteria(BUSCAR_POR_OPER_VC);
        applyViewCriteria(vc);
        executeQuery();
        
        setCurrentRow(last());
        
        logger.warning("Termina metodo buscarContratoPorIdOperacion");
    }
    
    public Boolean actualizarFechaMontoEscriturado(Long idContrato, Timestamp fechaEscrituracion, Long idMontoEscriturado){
        logger.warning("Se ingresa al metodo actualizarFechaMontoEscriturado...");
        Boolean resultado=Boolean.TRUE;
        Row filaRecuperada = null;
        ViewCriteria criteria = null;
        
        logger.warning("IdContrato recibido: "+ idContrato);
        
        if(idContrato == null){
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try{
            criteria = this.getViewCriteriaManager().getViewCriteria("ContratoVOCriteriaByIdContrato");
            criteria.ensureVariableManager().setVariableValue("varId", idContrato);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            
            if(getEstimatedRowCount() > 0){
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("IdContrato: ");
                logger.warning("Valor anterior FechaFirma: " + filaRecuperada.getAttribute("FechaFirma"));
                logger.warning("Valor anterior IdMontoEscriturado: " + filaRecuperada.getAttribute("IdMontoEscriturado"));
                if(idMontoEscriturado != null && fechaEscrituracion != null){
                    filaRecuperada.setAttribute("FechaFirma", fechaEscrituracion);
                    filaRecuperada.setAttribute("IdMontoEscriturado", idMontoEscriturado);
                    try{
                        getDBTransaction().commit();
                        resultado = Boolean.TRUE;
                        logger.warning("se hace commit a la DB");
                    }
                    catch(Exception e){
                        logger.log(ADFLogger.ERROR, "Error al intentar actualizar la FechaFirma o el IdMontoEscriturado en el metodo actualizarFechaMontoEscriturado");
                        getDBTransaction().rollback();
                        resultado = Boolean.FALSE;
                    }
                }
                else{
                    logger.warning("se reciben valores como null");
                    resultado = Boolean.FALSE;
                }
            }
            else{
                logger.warning("El row recuperado es null, no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("ContratoVOCriteriaByIdContrato");
                resultado = Boolean.FALSE;
                executeQuery();
            }
        }
        catch(Exception e)
        {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());   
        }
        finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("ContratoVOCriteriaByIdContrato");
        }
        
        logger.warning("*** Termina metodo actualizarFechaMontoEscriturado");
        
        return resultado;
    }
    
    /**
     * Returns the variable value for varIdOperacion.
     * @return variable value for varIdOperacion
     */
    public Long getvarIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("varIdOperacion", value);
    }

    /**
     * Returns the variable value for varInstanciaProceso.
     * @return variable value for varInstanciaProceso
     */
    public String getvarInstanciaProceso() {
        return (String) ensureVariableManager().getVariableValue("varInstanciaProceso");
    }

    /**
     * Sets <code>value</code> for variable varInstanciaProceso.
     * @param value value to bind as varInstanciaProceso
     */
    public void setvarInstanciaProceso(String value) {
        ensureVariableManager().setVariableValue("varInstanciaProceso", value);
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }

    /**
     *[KB:14513]
     * Actualiza la info de un contrato con los valores pasados por param y hace commit al final.
     * Si no se encuentra el contrato no ocurren cambios ni se hace commit.
     * 
     * @param idContrato Idntificador del contrato a afectar.
     * @param idTcaTipoMonto Identificador del monto de la operación.
     * @param fechaEscrituracion Fecha de escrituración del contrato.
     * @param fechaVigencia Vigencia del contrato.
     * @param cuentaCliente Cuenta del cliente.
     */
    public void actualizarDatosContrato(Long idContrato, Long idTcaTipoMonto, java.sql.Timestamp fechaEscrituracion,
                                        java.sql.Timestamp fechaVigencia, String cuentaCliente) {
        logger.info("Entra en actualizarDatosContrato.");
        
        logger.info("idContrato: {0}", idContrato);
        logger.info("idTcaTipoMonto: {0}", idTcaTipoMonto);
        logger.info("fechaEscrituracion: {0}", fechaEscrituracion);
        logger.info("fechaVigencia: {0}", fechaVigencia);
        logger.info("cuentaCliente: {0}", cuentaCliente);

        ContratoVORowImpl contratoImplementacionRow = null;
        contratoImplementacionRow = (ContratoVORowImpl) this.getRow(new Key(new Object[] { idContrato }));

        if (contratoImplementacionRow != null) {
            logger.info("actualizando datos contrato.");

            contratoImplementacionRow.setFechaFirma(fechaEscrituracion);
            contratoImplementacionRow.setFechaVigencia(fechaVigencia);
            contratoImplementacionRow.setIdMontoEscriturado(idTcaTipoMonto);
            contratoImplementacionRow.setCuentaCliente(cuentaCliente);

            this.getDBTransaction().commit();
        }
    }

    /**
     * [KB:14513]
     * Obtiene la fechaValor del contrato de la operacion en el proceso.
     */
    public Timestamp getFechaValorContratoByOperacionInstanciaProceso(Long idOperacion, String instanciaProceso) {
        logger.info("Inicia getFechaValorContratoByOperacionInstanciaProceso.");
        Row contratoRow = null;

        // 1) Filtramos el VO por idOperacion e instanciaProceso para saber si ya existe un id asociado
        contratoRow = getContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);

        if (contratoRow == null) {
            logger.warning("No se encuentra un contrato para la operacion: {0} en el proceso: {1}", new Object[] {
                           idOperacion, instanciaProceso
            });
        }

        return (contratoRow != null ? (Timestamp) contratoRow.getAttribute("FechaValor") : null);
    }
    
    public void actualizarFechaValorContrato(Long idContrato, Long idOperacion, String instanciaProceso, java.sql.Timestamp fechaValorContrato) {
        logger.log(ADFLogger.WARNING, "Inicia actualizarFechaValorContrato."); 
        
        Row contratoRow = null;
        
        // Obtenemos row de contrato a actualizar
        try{
            if(idContrato == null || idContrato == 0 ) {
                idContrato = this.getIdContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);
                contratoRow = this.getRow(new Key(new Object[] {idContrato}));
            }else contratoRow = this.getContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);
            
            // Actualizamos datos
            if(contratoRow != null) {
                logger.log(ADFLogger.WARNING, "Inside actualizarFechaValorContrato. idOperacion: " + idOperacion + ". instanciaProceso: " 
                                              + instanciaProceso + ". idContrato" + idContrato + ". fechaValorContrato: " + fechaValorContrato );
                
                if(fechaValorContrato != null)
                    contratoRow.setAttribute("FechaValor", fechaValorContrato);
                
                getDBTransaction().commit();
                
            }else{ logger.severe("No se encontró contrato con idOperacion: " + idOperacion + " e instanciaProceso: " + instanciaProceso ); }
        }catch(Exception e){ logger.severe("Error en actualización actualizarFechaValorContrato: " + e.getClass() + " -  " + e.getMessage()); }
        
    }
    
}
