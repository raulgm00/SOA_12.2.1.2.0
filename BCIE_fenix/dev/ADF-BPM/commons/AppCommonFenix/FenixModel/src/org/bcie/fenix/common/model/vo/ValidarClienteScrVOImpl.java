package org.bcie.fenix.common.model.vo;

import java.util.HashMap;
import java.util.Map;

import oracle.jbo.server.ViewObjectImpl;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;

import org.bcie.fenix.common.model.vo.common.ValidarClienteScrVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Jul 29 15:26:14 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ValidarClienteScrVOImpl extends ViewObjectImpl implements ValidarClienteScrVO {
    
    private static ADFLogger logger = null;
     
    public ValidarClienteScrVOImpl() {
        if (logger == null) {
               logger = ADFLogger.createADFLogger(this.getClass());
           }  
    }
    
    
    public Map validarScr5(Long idOperacion){
      logger.warning("*Inf, Inicia metodo validarScr5");
         final Integer  SECTOR_PUBLICO = new Integer(1);
         final Integer GARANTIA_SOBERANA = new Integer(2);
         Map mapaDatos = new HashMap<>();
         Boolean reglaValidada = Boolean.FALSE;
         Boolean ocurrioError = Boolean.FALSE;
         Row fila = null;
         
           this.setpIdOperacion(idOperacion);
           executeQuery();
         
           logger.warning("*Inf, numero de registros encontrados de scr en la tabla de clientes: "+getEstimatedRowCount());
         
           if(getEstimatedRowCount() > 0 ){               
                                       
                          fila = first();                                      
                  
                       Integer IdTcaScr = (null == fila.getAttribute("IdTcaScr"))? null
                                        : (Integer)fila.getAttribute("IdTcaScr");                   
                        
                         Integer sector = (null == fila.getAttribute("Sector"))? null
                                        : (Integer)fila.getAttribute("Sector");                    
                       
                   Integer tipoGarantia = (null == fila.getAttribute("TipoGarantia"))? null
                                        : (Integer)fila.getAttribute("TipoGarantia");                    
             
             
              if(sector == null || (sector.compareTo(SECTOR_PUBLICO) == 0 && tipoGarantia == null )){
                    logger.warning("*Inf, Error parametros sector y tipo garantia son requeridos para evaluar la regla SCR");
                    mapaDatos.put("reglaValidada", reglaValidada);
                    mapaDatos.put("ocurrioError", Boolean.TRUE);
                    mapaDatos.put("mensajeError","Error parametros sector y tipo garantia son requeridos para evaluar la regla SCR");
                    return mapaDatos;
                }
             
             
               if(sector.compareTo(SECTOR_PUBLICO) == 0 && tipoGarantia.compareTo(GARANTIA_SOBERANA) == 0){
                                    
                    logger.warning("*Inf, la regla del scr no evaluara ya que es sector publico con garantia soberana");
                    reglaValidada = Boolean.FALSE;
                    mapaDatos.put("reglaValidada", reglaValidada);
                    mapaDatos.put("ocurrioError", ocurrioError);
                    mapaDatos.put("mensajeError","");
               }else{
                                                   
                      if(IdTcaScr != null){
                          
                           if(IdTcaScr == 5){                         
                                logger.warning("*Inf,ok la regla SCR 5 se cumplio IdTcaScr" +IdTcaScr);
                                reglaValidada = Boolean.TRUE;
                                mapaDatos.put("reglaValidada", reglaValidada);
                                mapaDatos.put("ocurrioError", ocurrioError);
                                mapaDatos.put("mensajeError","");
                                
                           }else{
                               mapaDatos.put("reglaValidada", reglaValidada);
                               mapaDatos.put("ocurrioError", ocurrioError);
                               mapaDatos.put("mensajeError","");
                               logger.warning("*Inf, la regla no se cumplio IdTcaScr: "+IdTcaScr);
                           }  
                          
                      }else{
                                            
                          mapaDatos.put("reglaValidada", reglaValidada);
                          mapaDatos.put("ocurrioError", Boolean.TRUE);
                          mapaDatos.put("mensajeError","Error no se pudo evaluar IdTcaScr IdTcaEstadoScr");
                          logger.warning("*Inf, Error no se pudo evaluar IdTcaScr IdTcaEstadoScr del registro de seg. crediticio: "
                                                                                             +fila.getAttribute("IdCliente"));                   
                      }
             }           
             
           }else{
               mapaDatos.put("reglaValidada", reglaValidada);
               mapaDatos.put("ocurrioError", Boolean.TRUE);
               mapaDatos.put("mensajeError","Error no se encontraron registros del cliente para evaluar la regla SCR");
               logger.warning("*Inf, Importante no se encontraron registros no se puede evaluar la regla");
           }  
           
         logger.warning("*Inf, termina metodo validarScr5");
         return mapaDatos;
       }
    

    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        setNamedWhereClauseParam("pIdOperacion", value);
    }
}

