<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Sat Dec 12 15:54:38 CST 2015
  Author:  Perla Osorio
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="ActualizarTCCAprobacion"
         targetNamespace="http://www.bcie.org/Utilidades/ActualizarTCCAprobacion/ActualizarTCCAprobacion"
         xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:client="http://www.bcie.org/Utilidades/ActualizarTCCAprobacion/ActualizarTCCAprobacion"
         xmlns:ora="http://schemas.oracle.com/xpath/extension" xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
         xmlns:ns1="http://www.bcie.org/ActualizarTCCAprobacionService"
         xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ui="http://xmlns.oracle.com/soa/designer"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns3="http://www.bcie.org/TerminoBO" xmlns:ns2="http://www.bcie.org/ContratoMO"
         xmlns:ns4="http://www.bcie.org/OperacionBO" xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions"
         xmlns:ns9="http://www.bcie.org/CatalogoTerminoBO" xmlns:ns10="http://www.bcie.org/CondicionBO"
         xmlns:ns7="http://www.bcie.org/ProductoBO"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:ns8="http://www.bcie.org/DeclaracionJuradaBO"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ess="http://xmlns.oracle.com/scheduler"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns6="http://www.bcie.org/CatalogoBO" xmlns:ns5="http://www.bcie.org/ClienteBO"
         xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap" xmlns:ns11="http://www.bcie.org/TerminoService"
         xmlns:ns12="http://www.bcie.org/CondicionService" xmlns:ns13="http://www.bcie.org/CondicionMO"
         xmlns:ns14="http://www.bcie.org/ResultBO" xmlns:ns16="http://www.bcie.org/TerminoMO"
         xmlns:ns15="http://www.bcie.org/ErrorBO" xmlns:ns17="http://www.bcie.org/CrearTreCategoriaCondicionSAD"
         xmlns:ns19="http://www.bcie.org/DocumentoBO" xmlns:ns18="http://www.bcie.org/AtributoBO"
         xmlns:ns20="http://www.bcie.org/CrearTreEventoCondicion"
         xmlns:ns21="http://www.bcie.org/CrearObservacionCondicionSAD"
         xmlns:ns22="http://www.bcie.org/EliminarCategoriaCondicionByIdCondicion"
         xmlns:ns23="http://www.bcie.org/EliminarEventoCondicionByIdCondicionSAD"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema">
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <import namespace="http://www.bcie.org/ActualizarTCCAprobacionService"
          location="../WSDLs/ActualizarTCCAprobacionSORWrapper.wsdl" importType="http://schemas.xmlsoap.org/wsdl/"
          ui:processWSDL="true"/>
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="actualizartccaprobacion_client" partnerLinkType="ns1:ActualizarTCCAprobacion_ptt_PLT"
                 myRole="ActualizarTCCAprobacion_ptt_Role"/>
    <partnerLink name="CrearTermino_SB" partnerLinkType="ns11:CrearTermino_SB" partnerRole="TerminoPT"/>
    <partnerLink name="ActualizarTermino_SB" partnerLinkType="ns11:ActualizarTerminoPT_PLT"
                 partnerRole="ActualizarTerminoPT_Role"/>
    <partnerLink name="ActualizarCondicion_SB" partnerLinkType="ns12:ActualizarCondicionPT_PLT"
                 partnerRole="ActualizarCondicionPT_Role"/>
    <partnerLink name="CrearCondicion_SB" partnerLinkType="ns12:CrearCondicion_SB" partnerRole="CondicionPT"/>
    <partnerLink name="CrearTreCategoriaCondicion_SB" partnerLinkType="ns17:CrearTreCategoriaCondicion"
                 partnerRole="CrearTreCategoriaCondicion_PT"/>
    <partnerLink name="CrearTreEventoCondicion_SB" partnerLinkType="ns20:CrearTreEventoCondicion_SB"
                 partnerRole="CrearTreEventoCondicion_PT"/>
    <partnerLink name="CrearObservacionCondicion_SB" partnerLinkType="ns21:CrearObservacionCondicion_SB"
                 partnerRole="CrearObservacionCondicion_PT"/>
    <partnerLink name="EliminarCategoriaCondicionByIdCondicion_SB"
                 partnerLinkType="ns22:EliminarCategoriaCondicionByIdCondicion_SB"
                 partnerRole="EliminarCategoriaCondicionByIdCondicion_PT"/>
    <partnerLink name="EliminarEventoCondicionByIdCondicion_SB"
                 partnerLinkType="ns23:EliminarEventoCondicionByIdCondicion_SB"
                 partnerRole="EliminarEventoCondicionByIdCondicion_PT"/>
  </partnerLinks>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="ns1:requestActualizarTCCAprobacionMessage"/>
    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="ns1:responseActualizarTCCAprobacionMessage"/>
    <variable name="inCrearTermino_SB" messageType="ns11:CrearTerminoRequestMessage"/>
    <variable name="outCrearTermino_SB" messageType="ns11:CrearTerminoResponseMessage"/>
    <variable name="inActualizarTermino_SB" messageType="ns11:ActualizarTerminoRequestMessage"/>
    <variable name="outActualizarTermino_SB" messageType="ns11:ActualizarTerminoResponseMessage"/>
    <variable name="inActualizarCondicion_SB" messageType="ns12:ActualizarCondicionRequestMessage"/>
    <variable name="outActualizarCondicion_SB" messageType="ns12:ActualizarCondicionResponseMessage"/>
    <variable name="inCrearCondicion_SB" messageType="ns12:CrearCondicionRequestMessage"/>
    <variable name="outCrearCondicion_SB" messageType="ns12:CrearCondicionResponseMessage"/>
    <variable name="inCrearTreCategoriaCondicion_SB" messageType="ns17:CrearTreCategoriaCondicionRequestMessage"/>
    <variable name="outCrearTreCategoriaCondicion_SB" messageType="ns17:CrearTreCategoriaCondicionResponseMessage"/>
    <variable name="inCrearTreEventoCondicion" messageType="ns20:CrearTreEventoCondicionRequestMessage"/>
    <variable name="outCrearTreEventoCondicion" messageType="ns20:CrearTreEventoCondicionResponseMessage"/>
    <variable name="inCrearObservacionCondicion_SB" messageType="ns21:CrearObservacionCondicionRequestMessage"/>
    <variable name="outCrearObservacionCondicion_SB" messageType="ns21:CrearObservacionCondicionResponseMessage"/>
    <variable name="inEliminarCategoriaCondicionByIdCondicion"
              messageType="ns22:EliminarCategoriaCondicionByIdCondicionRequestMessage"/>
    <variable name="outEliminarCategoriaCondicionByIdCondicion"
              messageType="ns22:EliminarCategoriaCondicionByIdCondicionResponseMessage"/>
    <variable name="inEliminarEventoCondicionByIdCondicion_SB"
              messageType="ns23:EliminarEventoCondicionByIdCondicionRequestMessage"/>
    <variable name="outEliminarEventoCondicionByIdCondicion_SB"
              messageType="ns23:EliminarEventoCondicionByIdCondicionResponseMessage"/>
    <variable name="fechaVencimiento" type="xsd:date"/>
    <variable name="setTitleVar" type="xsd:string"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <sequence name="ResponseAllError">
        <assign name="CatchAll">
          <copy>
            <from>'ERROR'</from>
            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
          </copy>
          <copy>
            <from>ora:getFaultAsString()</from>
            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
          </copy>
        </assign>
        <reply name="ReplyCatchAll" variable="outputVariable" partnerLink="actualizartccaprobacion_client"
               portType="ns1:ActualizarTCCAprobacion_ptt" operation="actualizarTCCAprobacion"/>
      </sequence>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">
    <!-- Receive input from requestor. (Note: This maps to operation defined in ActualizarTCCAprobacion.wsdl) -->
    <receive name="receiveInput" partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
             operation="actualizarTCCAprobacion" variable="inputVariable" createInstance="yes"/>
    <if name="IfValidaIdOperacion">
      <documentation>
        <![CDATA[IdOperacionNull]]>
      </documentation>
      <condition>string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion) = '' or string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion) = '0'</condition>
      <sequence name="ValidaIdOperacion">
        <assign name="ErrorIdOperacionNull">
          <copy>
            <from>'ERROR'</from>
            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
          </copy>
          <copy>
            <from>"El idOperacion es requerido"</from>
            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
          </copy>
        </assign>
        <reply name="ReplyError" variable="outputVariable" partnerLink="actualizartccaprobacion_client"
               portType="ns1:ActualizarTCCAprobacion_ptt" operation="actualizarTCCAprobacion"/>
        <exit name="ExitError"/>
      </sequence>
      <else>
        <documentation>
          <![CDATA[IdOperacionOk]]>
        </documentation>
        <sequence name="IdOperacionOkSeq">
          <empty name="OkIdOperacion"/>
        </sequence>
      </else>
    </if>
    <assign name="setTitleVar">
      <copy>
        <from>oraext:setFlowInstanceTitle(concat("idOperacion: ",string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion)))</from>
        <to>$setTitleVar</to>
      </copy>
    </assign>
    <scope name="ActualizarTerminoScope">
      <faultHandlers>
        <catch bpelx:name="MissingVar" faultName="bpel:selectionFailure">
          <sequence name="ResponseErrorActualizar">
            <assign name="CatchError">
              <copy>
                <from>'ERROR'</from>
                <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
              </copy>
              <copy>
                <from>'Faltan campos requeridos en Termino'</from>
                <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
              </copy>
            </assign>
            <reply name="ReplyCatchError" variable="outputVariable" partnerLink="actualizartccaprobacion_client"
                   portType="ns1:ActualizarTCCAprobacion_ptt" operation="actualizarTCCAprobacion"/>
            <exit name="ExitError"/>
          </sequence>
        </catch>
      </faultHandlers>
      <if name="IfValidarTermino">
        <documentation>
          <![CDATA[ExisteTermino]]>
        </documentation>
        <condition>not(string-length(string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:idTermino)) = 0 or string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:idTermino) = '0')</condition>
        <sequence name="ActualizarTermino">
          <assign name="ActualizarTerminoRequest">
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:operacion</to>
            </copy>
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:idTermino</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:idTermino</to>
            </copy>
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:tipoFechaInicio/ns6:Id</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:tipoFechaInicio/ns6:Id</to>
            </copy>
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:plazo</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:plazo</to>
            </copy>
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:fechaInicio</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:fechaInicio</to>
            </copy>
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:frecuenciaPlazo/ns6:Id</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:frecuenciaPlazo/ns6:Id</to>
            </copy>
            <copy>
              <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:estado</from>
              <to>$inActualizarTermino_SB.request/ns16:Termino/ns3:estado</to>
            </copy>
          </assign>
          <invoke name="InvokeActualizarTermino_SB" bpelx:invokeAsDetail="no" partnerLink="ActualizarTermino_SB"
                  portType="ns11:ActualizarTerminoPT" operation="actualizarTermino"
                  inputVariable="inActualizarTermino_SB" outputVariable="outActualizarTermino_SB"/>
          <if name="IfValidaActualizarTerminoError">
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <condition>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorCode != ''</condition>
            <sequence name="ValidaActualizarTerminoErrorSeq">
              <assign name="ErrorActualizaTermino">
                <copy>
                  <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:result</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                </copy>
                <copy>
                  <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:message</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                </copy>
                <copy>
                  <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorCode</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                </copy>
                <copy>
                  <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorDescription</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                </copy>
                <copy>
                  <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorType</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                </copy>
              </assign>
              <reply name="ReplyErrorActualizaTermino" variable="outputVariable"
                     partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                     operation="actualizarTCCAprobacion"/>
              <exit name="ExitError"/>
            </sequence>
          </if>
        </sequence>
        <else>
          <documentation>
            <![CDATA[CrearTermino]]>
          </documentation>
          <sequence name="CrearTermino">
            <if name="IfValidaFrecuenciaPlazo">
              <documentation>
                <![CDATA[Dias]]>
              </documentation>
              <condition>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:frecuenciaPlazo/ns6:Id = 1</condition>
              <assign name="CalculaFVDias">
                <copy>
                  <from>xp20:add-dayTimeDuration-to-dateTime(substring(string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:fechaInicio),1,10),concat('P',string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:plazo),'D'))</from>
                  <to>$fechaVencimiento</to>
                </copy>
              </assign>
              <elseif>
                <documentation>
                  <![CDATA[Meses]]>
                </documentation>
                <condition>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:frecuenciaPlazo/ns6:Id = 2</condition><assign name="CalculaFVMeses"
                                                                                                                                              xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      
      
   <copy>
                    <from>xp20:add-dayTimeDuration-to-dateTime(substring(string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:fechaInicio),1,10),concat('P',string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:plazo),'M'))</from>
                    <to>$fechaVencimiento</to>
                  </copy></assign></elseif>
              <elseif>
                <documentation>
                  <![CDATA[Años]]>
                </documentation>
                <condition>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:frecuenciaPlazo/ns6:Id = 3</condition><assign name="CalculaFVAños"
                                                                                                                                              xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      
      
   <copy>
                    <from>xp20:add-dayTimeDuration-to-dateTime(substring(string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:fechaInicio),1,10),concat('P',string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:plazo),'Y'))</from>
                    <to>$fechaVencimiento</to>
                  </copy></assign></elseif>
              <else>
                <empty name="sinFechaVencimiento"/>
              </else>
            </if>
            <assign name="CrearTerminoRequest">
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:operacion</to>
              </copy>
              <copy>
                <from>1</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:tipoTermino/ns3:idCatTermino</to>
              </copy>
              <copy>
                <from>2</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:tipoFechaInicio/ns6:Id</to>
              </copy>
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:fechaInicio</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:fechaInicio</to>
              </copy>
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:plazo</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:plazo</to>
              </copy>
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Termino/ns3:frecuenciaPlazo/ns6:Id</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:frecuenciaPlazo/ns6:Id</to>
              </copy>
              <copy>
                <from>$fechaVencimiento</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:fechaVencimiento</to>
              </copy>
              <copy bpelx:insertMissingToData="yes">
                <from>14</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:estadoTCC/ns18:id</to>
              </copy>
              <copy>
                <from>true()</from>
                <to>$inCrearTermino_SB.request/ns16:Termino/ns3:estado</to>
              </copy>
              <copy>
                <from>true()</from>
                <to>$inCrearTermino_SB.request/ns16:esUnico</to>
              </copy>
            </assign>
            <invoke name="InvokeCrearTermino_SB" bpelx:invokeAsDetail="no" partnerLink="CrearTermino_SB"
                    portType="ns11:TerminoPT" operation="crearTermino" inputVariable="inCrearTermino_SB"
                    outputVariable="outCrearTermino_SB"/>
            <if name="IfValidaCrearTerminoError">
              <documentation>
                <![CDATA[ERROR]]>
              </documentation>
              <condition>$outCrearTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorCode != ''</condition>
              <sequence name="ValidaCrearTerminoErrorSeq">
                <assign name="ErrorCrearTermino">
                  <copy>
                    <from>$outCrearTermino_SB.response/ns16:Resultado/ns14:result</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                  </copy>
                  <copy>
                    <from>$outCrearTermino_SB.response/ns16:Resultado/ns14:message</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                  </copy>
                  <copy>
                    <from>$outCrearTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorCode</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                  </copy>
                  <copy>
                    <from>$outCrearTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorDescription</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                  </copy>
                  <copy>
                    <from>$outCrearTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorType</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                  </copy>
                </assign>
                <reply name="ReplyErrorCreaTermino" variable="outputVariable"
                       partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                       operation="actualizarTCCAprobacion"/>
                <exit name="ExitError"/>
              </sequence>
            </if>
          </sequence>
        </else>
      </if>
    </scope>
    <forEach parallel="no" counterName="contador" name="ForEachListaCondicion">
      <startCounterValue>1</startCounterValue>
      <finalCounterValue>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion)</finalCounterValue>
      <scope name="ActualizaCondicionScope">
        <faultHandlers>
          <catch bpelx:name="MissingVar" faultName="bpel:selectionFailure">
            <sequence name="ResponseErrorActualizar">
              <assign name="CatchError">
                <copy>
                  <from>'ERROR'</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                </copy>
                <copy>
                  <from>'Faltan campos requeridos para Condicion'</from>
                  <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                </copy>
              </assign>
              <reply name="ReplyCatchError" variable="outputVariable" partnerLink="actualizartccaprobacion_client"
                     portType="ns1:ActualizarTCCAprobacion_ptt" operation="actualizarTCCAprobacion"/>
              <exit name="ExitError"/>
            </sequence>
          </catch>
        </faultHandlers>
        <if name="ValidaCondicion">
          <documentation>
            <![CDATA[ExisteCondicion]]>
          </documentation>
          <condition>not(string-length(string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion)) = 0 or string($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion) = '0')</condition>
          <sequence name="ActualizaCondicionSeq"><assign name="ActualizarCondicionSBRequest">
              <copy ignoreMissingFromData="no">
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion</from>
                <to>$inActualizarCondicion_SB.request/ns13:Condicion/ns10:idCondicion</to>
              </copy>
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion</from>
                <to>$inActualizarCondicion_SB.request/ns13:Condicion/ns10:operacion</to>
              </copy>
              <copy ignoreMissingFromData="yes">
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:descripcion</from>
                <to>$inActualizarCondicion_SB.request/ns13:Condicion/ns10:descripcion</to>
              </copy>
              <copy ignoreMissingFromData="yes">
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:controlCondicion/ns6:Id</from>
                <to>$inActualizarCondicion_SB.request/ns13:Condicion/ns10:controlCondicion/ns6:Id</to>
              </copy>
              <copy ignoreMissingFromData="yes">
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:estado</from>
                <to>$inActualizarCondicion_SB.request/ns13:Condicion/ns10:estado</to>
              </copy>
            </assign>
            <invoke name="InvokeActualizarCondicion_SB" partnerLink="ActualizarCondicion_SB"
                    portType="ns12:ActualizarCondicionPT" operation="actualizarCondicion"
                    inputVariable="inActualizarCondicion_SB" outputVariable="outActualizarCondicion_SB"
                    bpelx:invokeAsDetail="no"/>
            <if name="IfValidarActualizarCondicionError">
              <documentation>
                <![CDATA[ERROR]]>
              </documentation>
              <condition>$outActualizarCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode != ''</condition>
              <sequence name="ErrorActualizarCondicionSeq">
                <assign name="ErrorActualizarCondicion">
                  <copy>
                    <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:result</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                  </copy>
                  <copy>
                    <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:message</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                  </copy>
                  <copy>
                    <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorCode</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                  </copy>
                  <copy>
                    <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorDescription</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                  </copy>
                  <copy>
                    <from>$outActualizarTermino_SB.response/ns16:Resultado/ns14:error/ns15:errorType</from>
                    <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                  </copy>
                </assign>
                <reply name="ReplyErrorActualizarCondicion" variable="outputVariable"
                       partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                       operation="actualizarTCCAprobacion"/>
                <exit name="ExitError"/>
              </sequence>
            </if><assign name="AssignIdCondicion"
                    xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion</from>
                <to>$inCrearTreCategoriaCondicion_SB.request/ns13:TreCategoriaCondicion/ns10:idCondicion</to>
              </copy>
              <copy>
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion</from>
                <to>$inCrearTreEventoCondicion.request/ns13:TreEventoCondicion/ns10:idCondicion</to>
              </copy>
              <copy bpelx:insertMissingToData="yes">
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion</from>
                <to>$inEliminarCategoriaCondicionByIdCondicion.request/ns13:idCondicion</to>
              </copy>
            </assign>
            <invoke name="InvokeEliminarCategoriaCondicionByIdCondicion"
                    partnerLink="EliminarCategoriaCondicionByIdCondicion_SB"
                    portType="ns22:EliminarCategoriaCondicionByIdCondicion_PT"
                    operation="EliminarCategoriaCondicionByIdCondicion"
                    inputVariable="inEliminarCategoriaCondicionByIdCondicion" bpelx:invokeAsDetail="no"
                    outputVariable="outEliminarCategoriaCondicionByIdCondicion"/>
            <if name="IfValidaListaCategorias">
              <documentation>
                <![CDATA[TieneCategorias]]>
              </documentation>
              <condition>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:categoriaCondicion) &gt; 0</condition>
              <forEach parallel="no" counterName="index" name="ForEachCategoria"
                       xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:categoriaCondicion)</finalCounterValue>
                <scope name="ForEachActualizarCategoriaCondicion">
                  <sequence name="CategoriaCondicion">
                    <assign name="AssignCategoriaCondicion">
                      <copy>
                        <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:categoriaCondicion[$index]/ns10:id</from>
                        <to>$inCrearTreCategoriaCondicion_SB.request/ns13:TreCategoriaCondicion/ns10:categoriaCondicion/ns10:id</to>
                      </copy>
                    </assign>
                    <invoke name="InvokeCrearTreCategoriaCondicion_SB" partnerLink="CrearTreCategoriaCondicion_SB"
                            portType="ns17:CrearTreCategoriaCondicion_PT" operation="CrearTreCategoriaCondicion"
                            inputVariable="inCrearTreCategoriaCondicion_SB"
                            outputVariable="outCrearTreCategoriaCondicion_SB" bpelx:invokeAsDetail="no"
                            xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
                    <if name="IfValidaErrorCrearTreCategoriaCondicion"
                        xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                      <documentation>
                        <![CDATA[ERROR]]>
                      </documentation>
                      <condition>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode != ''</condition>
                      <sequence name="ValidaErrorCrearTreCategoriaCondicion">
                        <assign name="ErrorCrearTreCategoriaCondicion">
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:result</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:message</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorDescription</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorType</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                          </copy>
                        </assign>
                        <reply name="ReplyErrorTreCategoriaCondicion" variable="outputVariable"
                               partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                               operation="actualizarTCCAprobacion"/>
                        <exit name="ExitErrorCrearTreCategoriaCondicion"/>
                      </sequence>
                    </if>
                  </sequence>
                </scope>
              </forEach>
              <else>
                <empty name="Empty"/>
              </else>
            </if>
            <assign name="EliminarEventoCondicionByIdCondicionReq">
              <copy bpelx:insertMissingToData="yes">
                <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion</from>
                <to>$inEliminarEventoCondicionByIdCondicion_SB.request/ns13:idCondicion</to>
              </copy>
            </assign>
            <invoke name="InvokeEliminarEventoCondicionByIdCondicion_SB" bpelx:invokeAsDetail="no"
                    partnerLink="EliminarEventoCondicionByIdCondicion_SB"
                    portType="ns23:EliminarEventoCondicionByIdCondicion_PT"
                    operation="EliminarEventoCondicionByIdCondicion"
                    inputVariable="inEliminarEventoCondicionByIdCondicion_SB"
                    outputVariable="outEliminarEventoCondicionByIdCondicion_SB"/>
            <if name="IfValidaEvento">
              <documentation>
                <![CDATA[TieneEventos]]>
              </documentation>
              <condition>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion/ns10:eventoCondicion) &gt; 0</condition>
              <forEach parallel="no" counterName="contadorEvento" name="ForEachCrearEvento">
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:eventoCondicion)</finalCounterValue>
                <scope name="ActualizarEvento">
                  <sequence name="ForEachCrearTreEventoCondicion">
                    <assign name="CrearTreEventoCondicionReq">
                      <copy>
                        <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:eventoCondicion[$contadorEvento]/ns6:Id</from>
                        <to>$inCrearTreEventoCondicion.request/ns13:TreEventoCondicion/ns10:eventoCondicion/ns6:Id</to>
                      </copy>
                    </assign>
                    <invoke name="InvokeCrearTreEventoCondicion" bpelx:invokeAsDetail="no"
                            partnerLink="CrearTreEventoCondicion_SB" portType="ns20:CrearTreEventoCondicion_PT"
                            operation="CrearTreEventoCondicion" inputVariable="inCrearTreEventoCondicion"
                            outputVariable="outCrearTreEventoCondicion"/>
                    <if name="IfValidaErrorCrearTreEvento">
                      <documentation>
                        <![CDATA[ERROR]]>
                      </documentation>
                      <condition>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorCode != ''</condition>
                      <sequence name="ValidaErrorCrearTreEventoCondicion">
                        <assign name="ErrorCrearTreEvento">
                          <copy>
                            <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:result</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:message</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorCode</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorDescription</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorType</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                          </copy>
                        </assign>
                        <reply name="ReplyErrorTreEvento" variable="outputVariable"
                               partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                               operation="actualizarTCCAprobacion"/>
                        <exit name="ExitErrorTreEvento"/>
                      </sequence>
                    </if>
                  </sequence>
                </scope>
              </forEach>
              <else>
                <empty name="Empty"/>
              </else>
            </if>
            <scope name="ActualizarObservacionCondicion">
              <variables>
                <variable name="tamanoCadena" type="xsd:int"/>
              </variables>
              <if name="IfValidaObservacionCondicion">
                <documentation>
                  <![CDATA[TieneObservaciones]]>
                </documentation>
                <condition>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones) &gt; 0</condition><sequence xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
                  <assign name="ActualizarObservacionCondicion_Req">
                    <copy bpelx:insertMissingToData="yes">
                      <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:idCondicion</from>
                      <to>$inCrearObservacionCondicion_SB.request/ns13:idCondicion</to>
                    </copy>
                    <copy bpelx:insertMissingToData="yes">
                      <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:id</from>
                      <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:id</to>
                    </copy>
                    <copy bpelx:insertMissingToData="yes">
                      <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:loginUsuario</from>
                      <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:loginUsuario</to>
                    </copy>
                    <copy bpelx:insertMissingToData="yes">
                      <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:nombreUsuario</from>
                      <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:nombreUsuario</to>
                    </copy>
                    <copy bpelx:insertMissingToData="yes">
                      <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:tareaBPM/ns6:Id</from>
                      <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:tareaBPM/ns6:Id</to>
                    </copy>
                    <copy>
                      <from>string-length($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion/ns10:observaciones/ns10:observacion)</from>
                      <to>$tamanoCadena</to>
                    </copy>
                  </assign>
                  <if name="IfValidaActualizacionObservacion">
                    <documentation>
                      <![CDATA[ObservacionNula]]>
                    </documentation>
                    <condition>string-length($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:observacion)  =  0</condition>
                    <assign name="SinObservacion">
                      <copy>
                        <from>' '</from>
                        <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:observacion</to>
                      </copy>
                    </assign>
                    <else>
                      <assign name="ConObservacion">
                        <copy>
                          <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:observacion</from>
                          <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:observacion</to>
                        </copy>
                      </assign>
                    </else>
                  </if>
      <invoke name="InvokeCrearObservacionCondicion_SB" bpelx:invokeAsDetail="no"
              partnerLink="CrearObservacionCondicion_SB" portType="ns21:CrearObservacionCondicion_PT"
              operation="CrearObservacionCondicion" inputVariable="inCrearObservacionCondicion_SB"
              outputVariable="outCrearObservacionCondicion_SB" xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
   </sequence><else>
                  <empty name="Empty"/>
                </else>
              </if>
            </scope>
          </sequence>
          <else>
            <documentation>
              <![CDATA[CrearCondicion]]>
            </documentation>
            <sequence name="CrearCondicionSeq">
              <assign name="CrearCondicionSBRequest">
                <copy bpelx:insertMissingToData="yes">
                  <from>3</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:tipoCondicion/ns10:idCatCondicion</to>
                </copy>
                <copy>
                  <from>'Condición PF'</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:nombre</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>14</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:estadoTCC/ns18:id</to>
                </copy>
                <copy>
                  <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:idOperacion</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:operacion</to>
                </copy>
                <copy>
                  <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:descripcion</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:descripcion</to>
                </copy>
                <copy>
                  <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:controlCondicion/ns6:Id</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:controlCondicion/ns6:Id</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>true()</from>
                  <to>$inCrearCondicion_SB.request/ns13:Condicion/ns10:estado</to>
                </copy>
              </assign>
              <invoke name="InvokeCrearCondicion_SB" bpelx:invokeAsDetail="no" partnerLink="CrearCondicion_SB"
                      portType="ns12:CondicionPT" operation="crearCondicion" inputVariable="inCrearCondicion_SB"
                      outputVariable="outCrearCondicion_SB"/>
              <if name="IfValidaCrearCondicionError">
                <documentation>
                  <![CDATA[ERROR]]>
                </documentation>
                <condition>$outCrearCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode != ''</condition>
                <sequence name="ErrorCrearCondicionSeq">
                  <assign name="ErrorCreaCondicion">
                    <copy>
                      <from>$outCrearCondicion_SB.response/ns13:Resultado/ns14:result</from>
                      <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                    </copy>
                    <copy>
                      <from>$outCrearCondicion_SB.response/ns13:Resultado/ns14:message</from>
                      <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                    </copy>
                    <copy>
                      <from>$outCrearCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode</from>
                      <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                    </copy>
                    <copy>
                      <from>$outCrearCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorDescription</from>
                      <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                    </copy>
                    <copy>
                      <from>$outCrearCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorType</from>
                      <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                    </copy>
                  </assign>
                  <reply name="ReplyErrorCrearCondicion" variable="outputVariable"
                         partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                         operation="actualizarTCCAprobacion"/>
                  <exit name="ExitError"/>
                </sequence>
              </if>
              <assign name="AssignIdCondicion">
                <copy>
                  <from>$outCrearCondicion_SB.response/ns13:codigoContrato</from>
                  <to>$inCrearTreCategoriaCondicion_SB.request/ns13:TreCategoriaCondicion/ns10:idCondicion</to>
                </copy>
                <copy>
                  <from>$outCrearCondicion_SB.response/ns13:codigoContrato</from>
                  <to>$inCrearTreEventoCondicion.request/ns13:TreEventoCondicion/ns10:idCondicion</to>
                </copy>
              </assign>
              <forEach parallel="no" counterName="index" name="ForEachCategoria">
                <startCounterValue>1</startCounterValue>
                <finalCounterValue>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:categoriaCondicion)</finalCounterValue>
                <scope name="ForEachCategoriaCondicion">
                  <sequence name="CategoriaCondicion">
                    <assign name="AssignCategoriaCondicion">
                      <copy>
                        <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:categoriaCondicion[$index]/ns10:id</from>
                        <to>$inCrearTreCategoriaCondicion_SB.request/ns13:TreCategoriaCondicion/ns10:categoriaCondicion/ns10:id</to>
                      </copy>
                    </assign>
                    <invoke name="InvokeCrearTreCategoriaCondicion_SB" partnerLink="CrearTreCategoriaCondicion_SB"
                            portType="ns17:CrearTreCategoriaCondicion_PT" operation="CrearTreCategoriaCondicion"
                            inputVariable="inCrearTreCategoriaCondicion_SB"
                            outputVariable="outCrearTreCategoriaCondicion_SB" bpelx:invokeAsDetail="no"/>
                    <if name="IfValidaErrorCrearTreCategoriaCondicion">
                      <documentation>
                        <![CDATA[ERROR]]>
                      </documentation>
                      <condition>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode != ''</condition>
                      <sequence name="ValidaErrorCrearTreCategoriaCondicion">
                        <assign name="ErrorCrearTreCategoriaCondicion">
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:result</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:message</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorCode</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorDescription</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                          </copy>
                          <copy>
                            <from>$outCrearTreCategoriaCondicion_SB.response/ns13:Resultado/ns14:error/ns15:errorType</from>
                            <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                          </copy>
                        </assign>
                        <reply name="ReplyErrorTreCategoriaCondicion" variable="outputVariable"
                               partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                               operation="actualizarTCCAprobacion"/>
                        <exit name="ExitErrorCrearTreCategoriaCondicion"/>
                      </sequence>
                    </if>
                  </sequence>
                </scope>
              </forEach><forEach parallel="no" counterName="contadorEvento"
                                                       name="ForEachCrearEvento"
                                                       xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      <startCounterValue>1</startCounterValue>
      <finalCounterValue>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:eventoCondicion)</finalCounterValue>
      <scope name="CrearEvento">
         <sequence name="ForEachCrearTreEventoCondicion">
            <assign name="CrearTreEventoCondicionReq">
               <copy>
                  <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:eventoCondicion[$contadorEvento]/ns6:Id</from>
                  <to>$inCrearTreEventoCondicion.request/ns13:TreEventoCondicion/ns10:eventoCondicion/ns6:Id</to>
               </copy>
            </assign>
            <invoke name="InvokeCrearTreEventoCondicion" bpelx:invokeAsDetail="no"
                    partnerLink="CrearTreEventoCondicion_SB" portType="ns20:CrearTreEventoCondicion_PT"
                    operation="CrearTreEventoCondicion" inputVariable="inCrearTreEventoCondicion"
                    outputVariable="outCrearTreEventoCondicion" xmlns:bpelx="http://schemas.oracle.com/bpel/extension"/>
            <if name="IfValidaErrorCrearTreEvento">
               <documentation>
                  <![CDATA[ERROR]]>
               </documentation>
               <condition>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorCode != ''</condition>
               <sequence name="ValidaErrorCrearTreEventoCondicion">
                  <assign name="ErrorCrearTreEvento">
                     <copy>
                        <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:result</from>
                        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                     </copy>
                     <copy>
                        <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:message</from>
                        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                     </copy>
                     <copy>
                        <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorCode</from>
                        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorCode</to>
                     </copy>
                     <copy>
                        <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorDescription</from>
                        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorDescription</to>
                     </copy>
                     <copy>
                        <from>$outCrearTreEventoCondicion.response/ns13:Resultado/ns14:error/ns15:errorType</from>
                        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:error/ns15:errorType</to>
                     </copy>
                  </assign>
                  <reply name="ReplyErrorTreEvento" variable="outputVariable"
                         partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
                         operation="actualizarTCCAprobacion"/>
                  <exit name="ExitErrorTreEvento"/>
               </sequence>
            </if>
         </sequence>
      </scope>
   </forEach>
              <scope name="CrearObservacionesCondicion">
                <variables>
                  <variable name="outCrearObservacionCondicion_SB"
                            messageType="ns21:CrearObservacionCondicionResponseMessage"/>
                  <variable name="inCrearObservacionCondicion_SB"
                            messageType="ns21:CrearObservacionCondicionRequestMessage"/>
                </variables>
                <faultHandlers>
                  <catch faultName="bpel:selectionFailure">
                    <sequence name="Sequence1">
                      <assign name="CatchError">
                        <copy>
                          <from>'ERROR'</from>
                          <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
                        </copy>
                        <copy>
                          <from>'Faltan campos requeridos para Observacion Condicion'</from>
                          <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
                        </copy>
                      </assign>
                      <reply name="ReplyError" variable="outputVariable" partnerLink="actualizartccaprobacion_client"
                             portType="ns1:ActualizarTCCAprobacion_ptt" operation="actualizarTCCAprobacion"/>
                    </sequence>
                  </catch>
                </faultHandlers>
                <sequence name="CrearObservacionCondicion">
                  <if name="IfValidaObservacionCondicion">
                    <documentation>
                      <![CDATA[TieneObservaciones]]>
                    </documentation>
                    <condition>count($inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones) &gt; 0</condition>
                    <sequence>
                      <assign name="CrearObservacionCondicion_Req">
                        <copy>
                          <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:observacion</from>
                          <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:observacion</to>
                        </copy>
                        <copy>
                          <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:loginUsuario</from>
                          <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:loginUsuario</to>
                        </copy>
                        <copy>
                          <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:nombreUsuario</from>
                          <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:nombreUsuario</to>
                        </copy>
                        <copy>
                          <from>$inputVariable.requestActualizarTCCAprobacionMessage/ns2:Condicion[$contador]/ns10:observaciones[1]/ns10:tareaBPM/ns6:Id</from>
                          <to>$inCrearObservacionCondicion_SB.request/ns13:ObservacionCondicion/ns10:tareaBPM/ns6:Id</to>
                        </copy>
                        <copy bpelx:insertMissingToData="yes">
                          <from>$outCrearCondicion_SB.response/ns13:codigoContrato</from>
                          <to>$inCrearObservacionCondicion_SB.request/ns13:idCondicion</to>
                        </copy>
                      </assign>
                      <invoke name="InvokeCrearObservacionCondicion_SB"
                              partnerLink="CrearObservacionCondicion_SB" portType="ns21:CrearObservacionCondicion_PT"
                              operation="CrearObservacionCondicion" inputVariable="inCrearObservacionCondicion_SB"
                              outputVariable="outCrearObservacionCondicion_SB" bpelx:invokeAsDetail="no"/>
                    </sequence>
                    <else>
                      <empty name="Empty"/>
                    </else>
                  </if>
                </sequence>
              </scope>
            </sequence>
          </else>
        </if>
      </scope>
    </forEach>
    <assign name="AssignResponse">
      <copy>
        <from>"OK"</from>
        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:result</to>
      </copy>
      <copy>
        <from>"Operacion Exitosa"</from>
        <to>$outputVariable.responseActualizarTCCAprobacionMessage/ns2:Resultado/ns14:message</to>
      </copy>
    </assign>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="actualizartccaprobacion_client" portType="ns1:ActualizarTCCAprobacion_ptt"
           operation="actualizarTCCAprobacion" variable="outputVariable"/>
  </sequence>
</process>