<?xml version = "1.0" encoding = "UTF-8" ?>
<!--
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  Oracle JDeveloper BPEL Designer 
  
  Created: Thu Dec 17 23:02:58 CST 2015
  Author:  dalia-reyes
  Purpose: Synchronous BPEL Process
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-->
<process name="CrearAprobacionBPEL1"
               targetNamespace="http://xmlns.oracle.com/DominioOperacion/CrearAprobacion/CrearAprobacionBPEL1"
               xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
               xmlns:client="http://xmlns.oracle.com/DominioOperacion/CrearAprobacion/CrearAprobacionBPEL1"
               xmlns:ora="http://schemas.oracle.com/xpath/extension"
               xmlns:bpelx="http://schemas.oracle.com/bpel/extension"
               xmlns:ns1="urn:CrearAprobacionSOR"
               xmlns:bpel="http://docs.oasis-open.org/wsbpel/2.0/process/executable"
         xmlns:ui="http://xmlns.oracle.com/soa/designer" xmlns:ns2="http://xmlns.bcie.com/OperacionService"
         xmlns:bpws="http://schemas.xmlsoap.org/ws/2003/03/business-process/"
         xmlns:xp20="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.Xpath20"
         xmlns:ns3="http://www.bcie.org/AprobacionMO" xmlns:ns8="http://www.bcie.org/TerminoBO"
         xmlns:bpm="http://xmlns.oracle.com/bpmn20/extensions" xmlns:ns4="http://www.bcie.org/AprobacionBO"
         xmlns:ns6="http://www.bcie.org/LineaCreditoBO" xmlns:ns7="http://www.bcie.org/CondicionBO"
         xmlns:oraext="http://www.oracle.com/XSL/Transform/java/oracle.tip.pc.services.functions.ExtFunc"
         xmlns:dvm="http://www.oracle.com/XSL/Transform/java/oracle.tip.dvm.LookupValue"
         xmlns:hwf="http://xmlns.oracle.com/bpel/workflow/xpath" xmlns:ns9="http://www.bcie.org/ComisionBO"
         xmlns:ids="http://xmlns.oracle.com/bpel/services/IdentityService/xpath"
         xmlns:ess="http://xmlns.oracle.com/scheduler"
         xmlns:xdk="http://schemas.oracle.com/bpel/extension/xpath/function/xdk"
         xmlns:xref="http://www.oracle.com/XSL/Transform/java/oracle.tip.xref.xpath.XRefXPathFunctions"
         xmlns:ns5="http://www.bcie.org/CatalogoBO" xmlns:ldap="http://schemas.oracle.com/xpath/extension/ldap"
         xmlns:ns11="http://www.bcie.org/OperacionBO" xmlns:ns12="http://www.bcie.org/ResultBO"
         xmlns:ns10="http://www.bcie.org/OperacionMO" xmlns:ns13="http://www.bcie.org/ErrorBO"
         xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:ns14="http://xmlns.bcie.com/AprobacionService"
         xmlns:ns15="urn:CrearContratoSAD" xmlns:ns16="http://www.bcie.org/ContratoMO"
         xmlns:ns17="http://www.bcie.org/ContratoBO" xmlns:ns18="urn:CrearLineaCreditoSAD"
         xmlns:ns19="http://www.bcie.org/LineaCreditoMO" xmlns:ns20="urn:CrearTreLineaCreditoAprobacion"
         xmlns:ns21="urn:EliminarAprobacion" xmlns:ns22="urn:EliminarContratoSAD"
         xmlns:ns23="urn:EliminarMontoOperacionSAD" xmlns:ns24="urn:EliminarLineaCreditoByIdContrato"
         xmlns:ns25="urn:EliminarTreLineaCreditoAprobacionByIdLineaCreditoIdAprobacion"
         xmlns:ns27="http://www.bcie.org/DocumentoBO" xmlns:ns26="http://www.bcie.org/AtributoBO"
         xmlns:ns28="http://www.bcie.org/TerminoService" xmlns:ns29="http://www.bcie.org/TerminoMO"
         xmlns:ns30="http://www.bcie.org/EliminarTerminoService" xmlns:ns33="http://www.bcie.org/ReglaBO"
         xmlns:ns34="http://www.bcie.org/ProductoBO" xmlns:ns35="http://www.bcie.org/HerramientaCEBO"
         xmlns:ns32="http://www.bcie.org/DesembolsoBO" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns:ns31="http://www.bcie.org/CommonBO" xmlns:ns36="http://www.bcie.org/MatrizTCCBO">

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      PARTNERLINKS                                                      
      List of services participating in this BPEL process               
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <import namespace="http://www.bcie.org/AprobacionMO"
          location="oramds:/apps/Resources/ComponentesComunes/DominioOperacion/Aprobacion/V1/Schema/AprobacionMO.xsd"
          importType="http://www.w3.org/2001/XMLSchema"/>
  <import namespace="http://schemas.oracle.com/bpel/extension" location="../WSDLs/RuntimeFault.wsdl"
          importType="http://schemas.xmlsoap.org/wsdl/"/>
  <import namespace="urn:CrearAprobacionSOR" location="../WSDLs/CrearAprobacionSORWrapper1.wsdl"
          importType="http://schemas.xmlsoap.org/wsdl/" ui:processWSDL="true"/>
  <partnerLinks>
    <!-- 
      The 'client' role represents the requester of this service. It is 
      used for callback. The location and correlation information associated
      with the client role are automatically set using WS-Addressing.
    -->
    <partnerLink name="crearaprobacionbpel1_client" partnerLinkType="ns1:CrearAprobacionBPEL1" myRole="CrearAprobacionPT"/>
    <partnerLink name="ConsultarMontoOperacion" partnerLinkType="ns2:ConsultarMontoOperacion"
                 partnerRole="ConsultarMontoOperacionPT"/>
    <partnerLink name="ActualizarMontoOperacion" partnerLinkType="ns2:ActualizarMontoOperacion"
                 partnerRole="ActualizarMontoOperacionTP"/>
    <partnerLink name="CrearMontoOperacion" partnerLinkType="ns2:CrearMontoOperacion"
                 partnerRole="CrearMontoOperacionPT"/>
    <partnerLink name="CrearAprobacionService" partnerLinkType="ns14:CrearAprobacionService"
                 partnerRole="CrearAprobacionPT"/>
    <partnerLink name="CrearContrato" partnerLinkType="ns15:CrearContrato" partnerRole="CrearContratoPT"/>
    <partnerLink name="CrearLineasCredito" partnerLinkType="ns18:CrearLineasCredito" partnerRole="CrearLineaCreditoPT"/>
    <partnerLink name="CrearTreLineaCreditoAprobacion" partnerLinkType="ns20:CrearTreLineaCreditoAprobacion"
                 partnerRole="CrearTreLineaCreditoAprobacionPT"/>
    <partnerLink name="EliminarMontoOperacion" partnerLinkType="ns23:EliminarMontoOperacion"
                 partnerRole="EliminarMontoOperacionPT"/>
    <partnerLink name="EliminarAprobacion" partnerLinkType="ns21:EliminarAprobacion"
                 partnerRole="EliminarAprobacionPT"/>
    <partnerLink name="EliminarContrato" partnerLinkType="ns22:EliminarContrato" partnerRole="EliminarContratoPT"/>
    <partnerLink name="EliminarLineasCredito" partnerLinkType="ns24:EliminarLineasCredito"
                 partnerRole="EliminarLineaCreditoByIdContratoPT"/>
    <partnerLink name="CrearTermino" partnerLinkType="ns28:CrearTermino" partnerRole="TerminoPT"/>
    <partnerLink name="EliminarTermino" partnerLinkType="ns30:EliminarTermino" partnerRole="EliminarTerminoPT"/>
    <partnerLink name="CalcularFechaVencimiento_SP" partnerLinkType="ns28:CalcularFechaVencimiento_SP"
                 partnerRole="CalcularFechaVencimientoPT"/>
  </partnerLinks>

  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
      VARIABLES                                                        
      List of messages and XML documents used within this BPEL process 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <variables>
    <!-- Reference to the message passed as input during initiation -->
    <variable name="inputVariable" messageType="ns1:CrearAprobacionRequestMessage"/>

    <!-- Reference to the message that will be returned to the requester-->
    <variable name="outputVariable" messageType="ns1:CrearAprobacionResponseMessage"/>
    <variable name="faultVariable" messageType="bpelx:RuntimeFaultMessage"/>
    <variable name="MontoExistente" element="ns10:CrearMontoOperacionResponse"/>
    <variable name="setTitleVar" type="xsd:string"/>
    <variable name="Termino" type="xsd:string"/>
    <variable name="TerminoFecha" type="xsd:string"/>
  </variables>
  <faultHandlers>
    <catchAll>
      <sequence name="SequenceCatchAllGeneral">
        <assign name="AssignFault">
          <copy bpelx:insertMissingToData="yes">
            <from>'ERROR'</from>
            <to>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:result</to>
          </copy>
          <copy bpelx:insertMissingToData="yes">
            <from>$faultVariable.summary</from>
            <to>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:message</to>
          </copy>
          <copy bpelx:insertMissingToData="yes">
            <from>$faultVariable.detail</from>
            <to>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:error/ns13:errorDescription</to>
          </copy>
          <copy bpelx:insertMissingToData="yes">
            <from>$faultVariable.code</from>
            <to>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:error/ns13:errorCode</to>
          </copy>
        </assign>
        <compensate name="Compensate"/>
        <reply name="Reply" variable="outputVariable" partnerLink="crearaprobacionbpel1_client"
               portType="ns1:CrearAprobacionPT" operation="crearAprobacion"/>
      </sequence>
    </catchAll>
  </faultHandlers>
  <!-- 
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
     ORCHESTRATION LOGIC                                               
     Set of activities coordinating the flow of messages across the    
     services integrated within this business process                  
    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
  -->
  <sequence name="main">

    <!-- Receive input from requestor. (Note: This maps to operation defined in CrearAprobacionBPEL1.wsdl) -->
    <receive name="receiveInput" partnerLink="crearaprobacionbpel1_client" portType="ns1:CrearAprobacionPT" operation="crearAprobacion" variable="inputVariable" createInstance="yes"/>
    <assign name="AssignSetTitle">
      <copy>
        <from>oraext:setFlowInstanceTitle(concat('idOperacion ',$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion))</from>
        <to>$setTitleVar</to>
      </copy>
    </assign>
    <scope name="ValidarValorMonto">
      <variables>
        <variable name="inInvokeConsultarMontoOperacion" messageType="ns2:requestConsultarMontoOperacionMessage"/>
        <variable name="outInvokeConsultarMontoOperacion" messageType="ns2:responseConsultarMontoOperacionMessage"/>
      </variables>
      <faultHandlers>
        <catchAll>
          <sequence name="SequenceCatchAll">
            <assign name="AssignFault">
              <copy>
                <from>'-1'</from>
                <to>$faultVariable.code</to>
              </copy>
              <copy>
                <from>ora:getFaultAsString()</from>
                <to>$faultVariable.detail</to>
              </copy>
              <copy>
                <from>'Error general al consultar el monto operación'</from>
                <to>$faultVariable.summary</to>
              </copy>
            </assign>
            <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <sequence name="SequenceValidarMontoOperacion">
        <if name="IfValidarValorMonto">
          <documentation>
            <![CDATA[Sin_valor]]>
          </documentation>
          <condition>string ($inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:MontoAprobacion) = ''</condition>
          <assign name="AssignMontoOperacion">
            <copy bpelx:insertMissingToData="yes">
              <from>0</from>
              <to>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:MontoAprobacion</to>
            </copy>
          </assign>
          <else>
            <documentation>
              <![CDATA[Con_Valor]]>
            </documentation>
            <empty name="Monto_Con_Valor"/>
          </else>
        </if>
        <assign name="AssigConsultarMonto">
          <copy>
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion</from>
            <to>$inInvokeConsultarMontoOperacion.request/ns10:idOperacion</to>
          </copy>
          <copy>
            <from>3</from>
            <to>$inInvokeConsultarMontoOperacion.request/ns10:IdTcaTipoMonto</to>
          </copy>
        </assign>
        <invoke name="InvokeConsultarMontoOperacion" bpelx:invokeAsDetail="no" partnerLink="ConsultarMontoOperacion"
                portType="ns2:ConsultarMontoOperacionPT" operation="consultarMontoOperacion"
                inputVariable="inInvokeConsultarMontoOperacion" outputVariable="outInvokeConsultarMontoOperacion"/>
        <if name="IfResultadoConsultarMonto">
          <documentation>
            <![CDATA[OK]]>
          </documentation>
          <condition>$outInvokeConsultarMontoOperacion.response/ns10:Resultado/ns12:result = 'Ok'</condition>
          <if name="IfValidarExistenciaMonto">
            <documentation>
              <![CDATA[Existente]]>
            </documentation>
            <condition>string-length($outInvokeConsultarMontoOperacion.response/ns10:MontoOperacion/ns11:montoOperacion[1]/ns11:id) &gt; 0</condition>
            <assign name="AssignMontoExistente">
              <copy>
                <from>$outInvokeConsultarMontoOperacion.response/ns10:MontoOperacion/ns11:montoOperacion[1]/ns11:id</from>
                <to>$MontoExistente/ns10:MontoOperacion/ns11:id</to>
              </copy>
              <copy ignoreMissingFromData="yes" >
                <from>$outInvokeConsultarMontoOperacion.response/ns10:MontoOperacion/ns11:montoOperacion[1]/ns11:idTcaTipoMonedaMontoOperacion</from>
                <to>$MontoExistente/ns10:MontoOperacion/ns11:IdTcaTipoMonto</to>
              </copy>
              <copy>
                <from>$outInvokeConsultarMontoOperacion.response/ns10:MontoOperacion/ns11:montoOperacion[1]/ns11:monto</from>
                <to>$MontoExistente/ns10:MontoOperacion/ns11:monto</to>
              </copy>
              <copy>
                <from>$outInvokeConsultarMontoOperacion.response/ns10:MontoOperacion/ns11:montoOperacion[1]/ns11:idOperacion</from>
                <to>$MontoExistente/ns10:MontoOperacion/ns11:idOperacion</to>
              </copy>
              <copy>
                <from>'Existente'</from>
                <to>$MontoExistente/ns10:MontoOperacion/ns11:Descripcion</to>
              </copy>
            </assign>
            <else>
              <documentation>
                <![CDATA[Nuevo]]>
              </documentation>
              <assign name="AssignMontoNuevo">
                <copy>
                  <from>'Nuevo'</from>
                  <to>$MontoExistente/ns10:MontoOperacion/ns11:Descripcion</to>
                </copy>
              </assign>
            </else>
          </if>
          <else>
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <sequence name="SequenceErrorConsultar">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>$outInvokeConsultarMontoOperacion.response/ns10:Resultado/ns12:message</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error al consultar el monto operación'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </else>
        </if>
      </sequence>
    </scope>
    <if name="IfMonto_Existe">
      <documentation>
        <![CDATA[Actualizar]]>
      </documentation>
      <condition>$MontoExistente/ns10:MontoOperacion[1]/ns11:Descripcion = 'Existente'</condition>
      <scope name="ScopeActualizarMonto">
        <variables>
          <variable name="inInvokeActualizarMonto" messageType="ns2:requestActualizarMontoOperacionMessages"/>
          <variable name="outInvokeActualizarMonto" messageType="ns2:responseActualizarOperacionMessages"/>
          <variable name="inInvokeErrorActualizarMonto" messageType="ns2:requestActualizarMontoOperacionMessages"/>
          <variable name="outInvokeErrorActualizarMonto" messageType="ns2:responseActualizarOperacionMessages"/>
        </variables>
        <faultHandlers>
          <catch faultName="bpelx:remoteFault" faultVariable="faultVariable"
                 faultMessageType="bpelx:RuntimeFaultMessage">
            <rethrow name="RethrowActualizarMonto"/>
          </catch>
          <catchAll>
            <sequence name="SequenceCatchAll">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy>
                  <from>ora:getFaultAsString()</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error general al actualizar el monto operación'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </catchAll>
        </faultHandlers>
        <compensationHandler bpelx:name="CompensateActualizarMonto">
          <sequence name="SequenceErrorActualizarMonto">
            <assign name="AssignActualizarMonto">
              <copy>
                <from>$MontoExistente/ns10:MontoOperacion/ns11:idOperacion</from>
                <to>$inInvokeErrorActualizarMonto.request/ns10:MontoOperacion/ns11:idOperacion</to>
              </copy>
              <copy>
                <from>3</from>
                <to>$inInvokeErrorActualizarMonto.request/ns10:MontoOperacion/ns11:IdTcaTipoMonto</to>
              </copy>
              <copy>
                <from>$MontoExistente/ns10:MontoOperacion/ns11:monto</from>
                <to>$inInvokeErrorActualizarMonto.request/ns10:MontoOperacion/ns11:monto</to>
              </copy>
            </assign>
            <invoke name="InvokeActualizarMont" partnerLink="ActualizarMontoOperacion"
                    portType="ns2:ActualizarMontoOperacionTP" operation="ActualizarMontoOperacion"
                    inputVariable="inInvokeErrorActualizarMonto" outputVariable="outInvokeErrorActualizarMonto"
                    bpelx:invokeAsDetail="no"/>
          </sequence>
        </compensationHandler>
        <sequence name="SequenceActualizarMonto">
          <assign name="AssignActualizarMonto">
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:MontoAprobacion</from>
              <to>$inInvokeActualizarMonto.request/ns10:MontoOperacion/ns11:monto</to>
            </copy>
            <copy>
              <from>$MontoExistente/ns10:MontoOperacion/ns11:idOperacion</from>
              <to>$inInvokeActualizarMonto.request/ns10:MontoOperacion/ns11:idOperacion</to>
            </copy>
            <copy>
              <from>3</from>
              <to>$inInvokeActualizarMonto.request/ns10:MontoOperacion/ns11:IdTcaTipoMonto</to>
            </copy>
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:MontoAprobacion</from>
              <to>$inInvokeActualizarMonto.request/ns10:MontoOperacion/ns11:monto</to>
            </copy>
            <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idTipoMonedaMontoAprobacion</from>
              <to>$inInvokeActualizarMonto.request/ns10:MontoOperacion/ns11:idTcaTipoMonedaMontoOperacion</to>
            </copy>
          </assign>
          <invoke name="InvokeActualizarMonto" bpelx:invokeAsDetail="no" partnerLink="ActualizarMontoOperacion"
                  portType="ns2:ActualizarMontoOperacionTP" operation="ActualizarMontoOperacion"
                  inputVariable="inInvokeActualizarMonto" outputVariable="outInvokeActualizarMonto"/>
          <if name="IfResultadoActualizar">
            <documentation>
              <![CDATA[OK]]>
            </documentation>
            <condition>$outInvokeActualizarMonto.response/ns10:Resultado/ns12:result = 'Ok'</condition>
            <empty name="OK"/>
            <else>
              <documentation>
                <![CDATA[ERROR]]>
              </documentation>
              <sequence name="SequenceError">
                <assign name="AssignFault">
                  <copy>
                    <from>'-1'</from>
                    <to>$faultVariable.code</to>
                  </copy>
                  <copy bpelx:insertMissingToData="yes">
                    <from>$outInvokeActualizarMonto.response/ns10:Resultado/ns12:message</from>
                    <to>$faultVariable.detail</to>
                  </copy>
                  <copy>
                    <from>'Error al actualizar el monto operación'</from>
                    <to>$faultVariable.summary</to>
                  </copy>
                </assign>
                <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
              </sequence>
            </else>
          </if>
        </sequence>
      </scope>
      <else>
        <documentation>
          <![CDATA[Crear]]>
        </documentation>
        <scope name="ScopeCrearMonto">
          <variables>
            <variable name="inInvokeCrearMonto" messageType="ns2:requestCrearMontoOperacionMessages"/>
            <variable name="outInvokeCrearMonto" messageType="ns2:responseCrearMontoOperacionMessages"/>
            <variable name="inInvokeEliminarMonto" messageType="ns23:EliminarMontoOperacionRequestMessage"/>
            <variable name="outInvokeEliminarMonto" messageType="ns23:EliminarMontoOperacionResponseMessage"/>
          </variables>
          <faultHandlers>
            <catch faultName="bpelx:remoteFault" faultVariable="faultVariable"
                   faultMessageType="bpelx:RuntimeFaultMessage">
              <rethrow name="RethrowCrearMonto"/>
            </catch>
            <catchAll>
              <sequence name="SequenceCatchAll">
                <assign name="AssignFault">
                  <copy>
                    <from>'-1'</from>
                    <to>$faultVariable.code</to>
                  </copy>
                  <copy>
                    <from>ora:getFaultAsString()</from>
                    <to>$faultVariable.detail</to>
                  </copy>
                  <copy>
                    <from>'Error general al crear el monto operación'</from>
                    <to>$faultVariable.summary</to>
                  </copy>
                </assign>
                <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
              </sequence>
            </catchAll>
          </faultHandlers>
          <compensationHandler bpelx:name="CompesateEliminarMontoOperacion">
            <sequence name="SequenceErrorEliminarMonto">
              <assign name="AssignEliminarMonto">
                <copy>
                  <from>$MontoExistente/ns10:MontoOperacion/ns11:id</from>
                  <to>$inInvokeEliminarMonto.EliminarMontoOperacionRequest/ns10:idMontoOperacion</to>
                </copy>
              </assign>
              <invoke name="InvokeEliminarMonto" partnerLink="EliminarMontoOperacion"
                      portType="ns23:EliminarMontoOperacionPT" operation="eliminarMontoOperacion"
                      inputVariable="inInvokeEliminarMonto" outputVariable="outInvokeEliminarMonto"
                      bpelx:invokeAsDetail="no"/>
            </sequence>
          </compensationHandler>
          <sequence name="SequenceCrearMonto">
            <assign name="AssignCrearMonto">
              <copy>
                <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion</from>
                <to>$inInvokeCrearMonto.request/ns10:MontoOperacion/ns11:idOperacion</to>
              </copy>
              <copy>
                <from>3</from>
                <to>$inInvokeCrearMonto.request/ns10:MontoOperacion/ns11:IdTcaTipoMonto</to>
              </copy>
              <copy>
                <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:MontoAprobacion</from>
                <to>$inInvokeCrearMonto.request/ns10:MontoOperacion/ns11:monto</to>
              </copy>
              <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
                <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idTipoMonedaMontoAprobacion</from>
                <to>$inInvokeCrearMonto.request/ns10:MontoOperacion/ns11:idTcaTipoMonedaMontoOperacion</to>
              </copy>
            </assign>
            <invoke name="InvokeCrearMonto" bpelx:invokeAsDetail="no" partnerLink="CrearMontoOperacion"
                    portType="ns2:CrearMontoOperacionPT" operation="CrearMontoOperacion"
                    inputVariable="inInvokeCrearMonto" outputVariable="outInvokeCrearMonto"/>
            <if name="IfResultadoCrear">
              <documentation>
                <![CDATA[OK]]>
              </documentation>
              <condition>$outInvokeCrearMonto.response/ns10:Resultado/ns12:result = 'Ok'</condition>
              <assign name="AssignDatosNuevoMonto">
                <copy>
                  <from>$outInvokeCrearMonto.response/ns10:MontoOperacion/ns11:id</from>
                  <to>$MontoExistente/ns10:MontoOperacion/ns11:id</to>
                </copy>
                <copy>
                  <from>$outInvokeCrearMonto.response/ns10:MontoOperacion/ns11:idOperacion</from>
                  <to>$MontoExistente/ns10:MontoOperacion/ns11:idOperacion</to>
                </copy>
                <copy>
                  <from>$outInvokeCrearMonto.response/ns10:MontoOperacion/ns11:monto</from>
                  <to>$MontoExistente/ns10:MontoOperacion/ns11:monto</to>
                </copy>
              </assign>
              <else>
                <documentation>
                  <![CDATA[ERROR]]>
                </documentation>
                <sequence name="SequenceError">
                  <assign name="AssignFault">
                    <copy>
                      <from>'-1'</from>
                      <to>$faultVariable.code</to>
                    </copy>
                    <copy bpelx:insertMissingToData="yes">
                      <from>$outInvokeCrearMonto.response/ns10:Resultado/ns12:message</from>
                      <to>$faultVariable.detail</to>
                    </copy>
                    <copy>
                      <from>'Error al crear el monto operación'</from>
                      <to>$faultVariable.summary</to>
                    </copy>
                  </assign>
                  <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
                </sequence>
              </else>
            </if>
          </sequence>
        </scope>
      </else>
    </if>
    <scope name="ScopeCrearTermiinoMonto">
      <variables>
        <variable name="inInvokeCrearTermino" messageType="ns28:CrearTerminoRequestMessage"/>
        <variable name="outputInvokeCrearTermino" messageType="ns28:CrearTerminoResponseMessage"/>
        <variable name="inInvokeEliminarTermino" messageType="ns30:EliminarTerminoRequestMesage"/>
        <variable name="outInvokeEliminarTermino" messageType="ns30:EliminarTerminoResponseMessage"/>
      </variables>
      <faultHandlers>
        <catch faultName="bpelx:remoteFault" faultVariable="faultVariable" faultMessageType="bpelx:RuntimeFaultMessage">
          <rethrow name="RethrowCrearTerminoMonto"/>
        </catch>
        <catchAll>
          <sequence name="SequenceErrorCrearTermino">
            <assign name="AssignFault">
              <copy>
                <from>'-1'</from>
                <to>$faultVariable.code</to>
              </copy>
              <copy>
                <from>ora:getFaultAsString()</from>
                <to>$faultVariable.detail</to>
              </copy>
              <copy>
                <from>'Error al crear el termino monto'</from>
                <to>$faultVariable.summary</to>
              </copy>
            </assign>
            <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <compensationHandler>
        <sequence name="SequenceEliminarTerminoMonto">
          <assign name="AssignEliminarTerminoMonto">
            <copy>
              <from>$outputInvokeCrearTermino.response/ns29:Resultado/ns12:message</from>
              <to>$inInvokeEliminarTermino.request/ns29:idTermino</to>
            </copy>
            <copy>
              <from>'false'</from>
              <to>$inInvokeEliminarTermino.request/ns29:borradoLogico</to>
            </copy>
          </assign>
          <invoke name="InvokeEliminarTermino" bpelx:invokeAsDetail="no" partnerLink="EliminarTermino"
                  portType="ns30:EliminarTerminoPT" operation="eliminarTermino"
                  inputVariable="inInvokeEliminarTermino" outputVariable="outInvokeEliminarTermino"/>
        </sequence>
      </compensationHandler>
      <sequence name="SequenceCrearTerminoMonto">
        <assign name="AssignCrearTerminoMonto">
          <copy>
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:operacion</to>
          </copy>
          <copy>
            <from>'Monto-Aprobado'</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:nombre</to>
          </copy>
          <copy>
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:MontoAprobacion</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:monto</to>
          </copy>
          <copy>
            <from>'true'</from>
            <to>$inInvokeCrearTermino.request/ns29:esUnico</to>
          </copy>
          <copy>
            <from>11</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:tipoTermino/ns8:idCatTermino</to>
          </copy>
          <copy>
            <from>'true'</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:tipoTermino/ns8:estado</to>
          </copy>
          <copy ignoreMissingFromData="yes" bpelx:insertMissingToData="yes">
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idTipoMonedaMontoAprobacion</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:moneda/ns5:Id</to>
          </copy>
          <copy>
            <from>xp20:current-date()</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:fechaRegistro</to>
          </copy>
          <copy>
            <from>14</from>
            <to>$inInvokeCrearTermino.request/ns29:Termino/ns8:estadoTCC/ns26:id</to>
          </copy>
        </assign>
        <invoke name="InvokeCrearTerminoMonto" partnerLink="CrearTermino"
                portType="ns28:TerminoPT" operation="crearTermino" inputVariable="inInvokeCrearTermino"
                outputVariable="outputInvokeCrearTermino" bpelx:invokeAsDetail="no"/>
        <if name="IfResultadoTerminoMonto">
          <documentation>
            <![CDATA[OK]]>
          </documentation>
          <condition>$outputInvokeCrearTermino.response/ns29:Resultado/ns12:result = 'OK'</condition>
          <assign name="AssignOK">
            <copy>
              <from>$outputInvokeCrearTermino.response/ns29:Resultado/ns12:message</from>
              <to>$Termino</to>
            </copy>
          </assign>
          <else>
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <sequence name="SequenceError">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy>
                  <from>$outputInvokeCrearTermino.response/ns29:Resultado/ns12:message</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error al crear el termino monto'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </else>
        </if>
      </sequence>
    </scope>
    <if name="IfValidarFechaAprobacion">
      <documentation>
        <![CDATA[VALOR]]>
      </documentation>
      <condition>string($inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:fechaAprobacion) !=''</condition>
      <scope name="ScopeCrearTerminoFecha">
        <variables>
          <variable name="inInvokCrearTerminoFecha" messageType="ns28:CrearTerminoRequestMessage"/>
          <variable name="outInvokCrearTerminoFecha" messageType="ns28:CrearTerminoResponseMessage"/>
          <variable name="inInvokeEliminarTerminoFecha" messageType="ns30:EliminarTerminoRequestMesage"/>
          <variable name="outInvokeEliminarTerminoFecha" messageType="ns30:EliminarTerminoResponseMessage"/>
          <variable name="inInvokeCalcularFechaVencimiento" messageType="ns28:CalcularFechaVencimientoRequestMessage"/>
          <variable name="outInvokeCalcularFechaVencimiento"
                    messageType="ns28:CalcularFechaVencimientoResponseMessage"/>
        </variables>
        <faultHandlers>
          <catch faultName="bpelx:remoteFault" faultVariable="faultVariable"
                 faultMessageType="bpelx:RuntimeFaultMessage">
            <rethrow name="RethrowCrearTerminoFecha"/>
          </catch>
          <catchAll>
            <sequence name="SequenceCatchAll">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy>
                  <from>'Error al crear termino fecha'</from>
                  <to>$faultVariable.summary</to>
                </copy>
                <copy>
                  <from>ora:getFaultAsString()</from>
                  <to>$faultVariable.detail</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </catchAll>
        </faultHandlers>
        <compensationHandler>
          <sequence name="SequenceEliminarTerminoFecha">
            <assign name="AssignEliminarTerminoFecha">
              <copy>
                <from>$outInvokCrearTerminoFecha.response/ns29:Resultado/ns12:message</from>
                <to>$inInvokeEliminarTerminoFecha.request/ns29:idTermino</to>
              </copy>
              <copy>
                <from>'false'</from>
                <to>$inInvokeEliminarTerminoFecha.request/ns29:borradoLogico</to>
              </copy>
            </assign>
            <invoke name="InvokeEliminarTerminoFecha" bpelx:invokeAsDetail="no" partnerLink="EliminarTermino"
                    portType="ns30:EliminarTerminoPT" operation="eliminarTermino"
                    inputVariable="inInvokeEliminarTerminoFecha" outputVariable="outInvokeEliminarTerminoFecha"/>
          </sequence>
        </compensationHandler>
        <sequence name="SequenceCrearTerminoFecha">
          <assign name="AssignCrearTerminoFecha">
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:Termino/ns8:operacion</to>
            </copy>
            <copy>
              <from>29</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:Termino/ns8:tipoTermino/ns8:idCatTermino</to>
            </copy>
            <copy>
              <from>xp20:current-date()</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:Termino/ns8:fechaRegistro</to>
            </copy>
            <copy>
              <from>'true'</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:esUnico</to>
            </copy>
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:fechaAprobacion</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:Termino/ns8:fecha</to>
            </copy>
            <copy>
              <from>14</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:Termino/ns8:estadoTCC/ns26:id</to>
            </copy>
            <copy>
              <from>'Fecha-Aprobación'</from>
              <to>$inInvokCrearTerminoFecha.request/ns29:Termino/ns8:nombre</to>
            </copy>
          </assign>
          <invoke name="InvokCrearTerminoFecha" bpelx:invokeAsDetail="no" partnerLink="CrearTermino"
                  portType="ns28:TerminoPT" operation="crearTermino" inputVariable="inInvokCrearTerminoFecha"
                  outputVariable="outInvokCrearTerminoFecha"/>
          <if name="IfResultadorCrearTermino">
            <documentation>
              <![CDATA[OK]]>
            </documentation>
            <condition>$outInvokCrearTerminoFecha.response/ns29:Resultado/ns12:result ='OK'</condition>
            <sequence name="SequenceOK">
              <assign name="AssignOK">
                <copy>
                  <from>$outInvokCrearTerminoFecha.response/ns29:Resultado/ns12:message</from>
                  <to>$TerminoFecha</to>
                </copy>
              </assign>
              <assign name="AssignCalcularFechaVenciemiento">
                <copy>
                  <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion</from>
                  <to>$inInvokeCalcularFechaVencimiento.request/ns29:idOperacion</to>
                </copy>
                <copy>
                  <from>29</from>
                  <to>$inInvokeCalcularFechaVencimiento.request/ns29:idTcaTermino</to>
                </copy>
                <copy>
                  <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:fechaAprobacion</from>
                  <to>$inInvokeCalcularFechaVencimiento.request/ns29:FechaInicio</to>
                </copy>
              </assign>
              <invoke name="InvokeCalcularFechaVencimiento" bpelx:invokeAsDetail="no"
                      partnerLink="CalcularFechaVencimiento_SP" portType="ns28:CalcularFechaVencimientoPT"
                      operation="calcularFechaVencimiento" inputVariable="inInvokeCalcularFechaVencimiento"
                      outputVariable="outInvokeCalcularFechaVencimiento"/>
              <if name="IfResultadoCarlcularFecha">
                <documentation>
                  <![CDATA[OK]]>
                </documentation>
                <condition>$outInvokeCalcularFechaVencimiento.response/ns29:Resultado/ns12:result = 'OK'</condition>
                <empty name="EmptyOK"/>
                <else>
                  <documentation>
                    <![CDATA[ERROR]]>
                  </documentation>
                  <sequence name="SequenceError">
                    <assign name="AssignFault" xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable">
      <copy>
         <from>'-1'</from>
         <to>$faultVariable.code</to>
      </copy>
      <copy>
         <from>$outInvokCrearTerminoFecha.response/ns29:Resultado/ns12:message</from>
         <to>$faultVariable.detail</to>
      </copy>
      <copy>
         <from>'Error al crear el termino fecha'</from>
         <to>$faultVariable.summary</to>
      </copy>
   </assign>
                    <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"
                           xmlns="http://docs.oasis-open.org/wsbpel/2.0/process/executable"/>
                  </sequence>
                </else>
              </if>
            </sequence>
            <else>
              <documentation>
                <![CDATA[ERROR]]>
              </documentation>
              <sequence name="SequenceError">
                <assign name="AssignFault">
                  <copy>
                    <from>'-1'</from>
                    <to>$faultVariable.code</to>
                  </copy>
                  <copy>
                    <from>$outInvokCrearTerminoFecha.response/ns29:Resultado/ns12:message</from>
                    <to>$faultVariable.detail</to>
                  </copy>
                  <copy>
                    <from>'Error al crear el termino fecha'</from>
                    <to>$faultVariable.summary</to>
                  </copy>
                </assign>
                <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
              </sequence>
            </else>
          </if>
        </sequence>
      </scope>
      <else>
        <documentation>
          <![CDATA[SIN_VALOR]]>
        </documentation>
        <empty name="EmptySinValor"/>
      </else>
    </if>
    <scope name="ScopeCrearAprobacion">
      <variables>
        <variable name="inInvokeCrearAprobacion" messageType="ns14:CrearAprobacionRequestMessage"/>
        <variable name="outInvokeCrearAprobacion" messageType="ns14:CrearAprobacionResponseMessage"/>
        <variable name="inInvokeEliminarAprobacion" messageType="ns21:EliminarAprobacionRequestMessage"/>
        <variable name="outInvokeEliminarAprobacion" messageType="ns21:EliminarAprobacionResponseMessage"/>
      </variables>
      <faultHandlers>
        <catch faultName="bpelx:remoteFault">
          <rethrow name="RethrowAprobacion"/>
        </catch>
        <catchAll>
          <sequence name="SequenceCatchAll">
            <assign name="AssignFault">
              <copy>
                <from>'-1'</from>
                <to>$faultVariable.code</to>
              </copy>
              <copy>
                <from>'Error general al crear la aprobación'</from>
                <to>$faultVariable.summary</to>
              </copy>
              <copy>
                <from>ora:getFaultAsString()</from>
                <to>$faultVariable.detail</to>
              </copy>
            </assign>
            <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <compensationHandler bpelx:name="CompensacionMontoOperacion">
        <sequence name="SequenceErrorEliminarAprobacion">
          <assign name="AssignEliminarAprobacion">
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idAprobacion</from>
              <to>$inInvokeEliminarAprobacion.EliminarAprobacionRequest/ns3:idAprobacion</to>
            </copy>
          </assign>
          <invoke name="InvokeEliminarAprobacion" partnerLink="EliminarAprobacion"
                  portType="ns21:EliminarAprobacionPT" operation="eliminarAprobacion"
                  inputVariable="inInvokeEliminarAprobacion" outputVariable="outInvokeEliminarAprobacion"
                  bpelx:invokeAsDetail="no"/>
        </sequence>
      </compensationHandler>
      <sequence name="SequenceCrearAprobacion">
        <assign name="AssignCrearAprobacion">
          <copy>
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idReunionAprobacion</from>
            <to>$inInvokeCrearAprobacion.request/ns3:Aprobacion/ns4:idReunionAprobacion</to>
          </copy>
          <copy>
            <from>'hguzman'</from>
            <to>$inInvokeCrearAprobacion.request/ns3:Aprobacion/ns4:loginUsuario/ns4:usuario</to>
          </copy>
          <copy ignoreMissingFromData="yes">
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:fechaAprobacion</from>
            <to>$inInvokeCrearAprobacion.request/ns3:Aprobacion/ns4:fechaAprobacion</to>
          </copy>
          <copy ignoreMissingFromData="yes">
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:numeroResolucion</from>
            <to>$inInvokeCrearAprobacion.request/ns3:Aprobacion/ns4:numeroResolucion</to>
          </copy>
          <copy ignoreMissingFromData="yes">
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:resumen</from>
            <to>$inInvokeCrearAprobacion.request/ns3:Aprobacion/ns4:resumen</to>
          </copy>
          <copy>
            <from>$MontoExistente/ns10:MontoOperacion/ns11:id</from>
            <to>$inInvokeCrearAprobacion.request/ns3:Aprobacion/ns4:idMontoAprobacion</to>
          </copy>
        </assign>
        <invoke name="InvokeCrearAprobacion" partnerLink="CrearAprobacionService"
                portType="ns14:CrearAprobacionPT" operation="crearAprobacion" inputVariable="inInvokeCrearAprobacion"
                outputVariable="outInvokeCrearAprobacion" bpelx:invokeAsDetail="no"/>
        <if name="IfResultadoAprobacion">
          <documentation>
            <![CDATA[OK]]>
          </documentation>
          <condition>string($outInvokeCrearAprobacion.response/ns3:Resultado/ns12:result) != 'ERROR'</condition>
          <sequence name="OK">
            <assign name="AssignIdAprobacion">
              <copy bpelx:insertMissingToData="yes">
                <from>$outInvokeCrearAprobacion.response/ns3:Aprobacion/ns4:idAprobacion</from>
                <to>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idAprobacion</to>
              </copy>
            </assign>
          </sequence>
          <else>
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <sequence name="SequenceError">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>$outInvokeCrearAprobacion.response/ns3:Resultado/ns12:message</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error al crear la aprobación'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </else>
        </if>
      </sequence>
    </scope>
    <scope name="ScopeCrearContrato">
      <variables>
        <variable name="inInvokeCrearContrato" messageType="ns15:CrearContratoRequestMessage"/>
        <variable name="outInvokeCrearContrato" messageType="ns15:CrearContratoResponseMessage"/>
        <variable name="inInvokeEliminarContrato" messageType="ns22:EliminarContratoRequestMessage"/>
        <variable name="outInvokeEliminarContrato" messageType="ns22:EliminarContratoResponseMessage"/>
      </variables>
      <faultHandlers>
        <catch faultName="bpelx:remoteFault" faultVariable="faultVariable" faultMessageType="bpelx:RuntimeFaultMessage">
          <rethrow name="RethrowContrato"/>
        </catch>
        <catchAll>
          <sequence name="SequenceCatchAll">
            <assign name="AssignFault">
              <copy>
                <from>'-1'</from>
                <to>$faultVariable.code</to>
              </copy>
              <copy>
                <from>'Error general al crear el contrato'</from>
                <to>$faultVariable.summary</to>
              </copy>
              <copy>
                <from>ora:getFaultAsString()</from>
                <to>$faultVariable.detail</to>
              </copy>
            </assign>
            <throw name="faultVariable" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <compensationHandler bpelx:name="CompensacionContrato">
        <sequence name="SequenceEliminarContrato">
          <assign name="AssigEliminarContrato">
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idContrato</from>
              <to>$inInvokeEliminarContrato.EliminarContratoRequest/ns16:idContrato</to>
            </copy>
          </assign>
          <invoke name="InvokeEliminarContrato" bpelx:invokeAsDetail="no" partnerLink="EliminarContrato"
                  portType="ns22:EliminarContratoPT" operation="eliminarContrato"
                  inputVariable="inInvokeEliminarContrato" outputVariable="outInvokeEliminarContrato"/>
        </sequence>
      </compensationHandler>
      <sequence name="SequenceCrearContrato">
        <assign name="AssignCrearContrato">
          <copy>
            <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idOperacion</from>
            <to>$inInvokeCrearContrato.CrearContratoRequest/ns16:Contrato/ns17:idOperacion</to>
          </copy>
        </assign>
        <invoke name="InvokeCrearContrato" bpelx:invokeAsDetail="no" partnerLink="CrearContrato"
                portType="ns15:CrearContratoPT" operation="crearContrato" inputVariable="inInvokeCrearContrato"
                outputVariable="outInvokeCrearContrato"/>
        <if name="IfResultadoContrato">
          <documentation>
            <![CDATA[OK]]>
          </documentation>
          <condition>string($outInvokeCrearContrato.CrearContratoResponse/ns16:Resultado/ns12:result) != 'ERROR'</condition>
          <assign name="AssignIdContrato">
            <copy bpelx:insertMissingToData="yes">
              <from>$outInvokeCrearContrato.CrearContratoResponse/ns16:Contrato/ns17:idContrato</from>
              <to>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idContrato</to>
            </copy>
          </assign>
          <else>
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <sequence name="SequenceError">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>$outInvokeCrearContrato.CrearContratoResponse/ns16:Resultado/ns12:message</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error al crear el contrato'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </else>
        </if>
      </sequence>
    </scope>
    <scope name="ScopeCrearLineasCredito">
      <variables>
        <variable name="inInvokeCrearLineasCredito" messageType="ns18:CrearLineaCreditoRequestMessage"/>
        <variable name="outInvokeCrearLineasCredito" messageType="ns18:CrearLineaCreditoResponseMessage"/>
        <variable name="inInvokeEliminarLineasCredito"
                  messageType="ns24:EliminarLineaCreditoByIdContratoRequestMessage"/>
        <variable name="outInvokeEliminarLineasCredito"
                  messageType="ns24:EliminarLineaCreditoByIdContratoResponseMessage"/>
      </variables>
      <faultHandlers>
        <catch faultName="bpelx:remoteFault" faultVariable="faultVariable" faultMessageType="bpelx:RuntimeFaultMessage">
          <rethrow name="RethrowLineasCredito"/>
        </catch>
        <catchAll>
          <sequence name="SequenceCatchAll">
            <assign name="AssignFault">
              <copy>
                <from>'-1'</from>
                <to>$faultVariable.code</to>
              </copy>
              <copy>
                <from>ora:getFaultAsString()</from>
                <to>$faultVariable.detail</to>
              </copy>
              <copy>
                <from>'Error al general las líneas de crédito'</from>
                <to>$faultVariable.summary</to>
              </copy>
            </assign>
            <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <compensationHandler bpelx:name="CompensacionLineasCredito">
        <sequence name="SequenceEliminarLineasCredito">
          <assign name="AssignEliminarLineasCredito">
            <copy>
              <from>$inputVariable.CrearAprobacionRequest/ns3:Aprobacion/ns4:idContrato</from>
              <to>$inInvokeEliminarLineasCredito.EliminarLineaContratoByIdContratoRequest/ns19:idContrato</to>
            </copy>
          </assign>
          <invoke name="InvokeEliminarLineasCredito" partnerLink="EliminarLineasCredito"
                  portType="ns24:EliminarLineaCreditoByIdContratoPT"
                  operation="eliminarLineaCreditoByIdContratoResponse" bpelx:invokeAsDetail="no"
                  inputVariable="inInvokeEliminarLineasCredito" outputVariable="outInvokeEliminarLineasCredito"/>
        </sequence>
      </compensationHandler>
      <sequence name="SequenceCrearLineasCredito">
        <assign name="CrearLineasCredito">
          <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:xquery"></bpelx:pattern>
          </bpelx:annotation>
          <copy>
            <from>ora:processXQuery10('../Transformations/CrearLineasCreeditoRequest.xqy', 'inputVariable.CrearAprobacionRequest', $inputVariable.CrearAprobacionRequest)</from>
            <to variable="inInvokeCrearLineasCredito" part="CrearLineaCreditoRequest"/>
          </copy>
        </assign>
        <invoke name="InvokeCrearLineasCredito" bpelx:invokeAsDetail="no" partnerLink="CrearLineasCredito"
                portType="ns18:CrearLineaCreditoPT" operation="crearLineaCredito"
                inputVariable="inInvokeCrearLineasCredito" outputVariable="outInvokeCrearLineasCredito"/>
        <if name="IfResultadoCrearLineas">
          <documentation>
            <![CDATA[OK]]>
          </documentation>
          <condition>string($outInvokeCrearLineasCredito.CrearLineaCreditoResponse/ns19:Resultado/ns12:result) != 'ERROR'</condition>
          <sequence name="OK">
            <assign name="LineasCreditoCreadas">
              <bpelx:annotation>
                <bpelx:pattern patternName="bpelx:xquery"></bpelx:pattern>
              </bpelx:annotation>
              <copy>
                <from>ora:processXQuery10('../Transformations/CrearLineasCreditoResponse.xqy', 'inputVariable.CrearAprobacionRequest', $inputVariable.CrearAprobacionRequest, 'outInvokeCrearLineasCredito.CrearLineaCreditoResponse', $outInvokeCrearLineasCredito.CrearLineaCreditoResponse)</from>
                <to variable="inputVariable" part="CrearAprobacionRequest"/>
              </copy>
            </assign>
          </sequence>
          <else>
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <sequence name="SequenceError">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>$outInvokeCrearLineasCredito.CrearLineaCreditoResponse/ns19:Resultado/ns12:message</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error al crear las líneas de crédito'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </else>
        </if>
      </sequence>
    </scope>
    <scope name="ScopeCreaTreLineas">
      <variables>
        <variable name="inInvokeCrearTreLineas" messageType="ns20:CrearTreLineaCreditoAprobacionRequestMessage"/>
        <variable name="outInvokeCrearTreLineas" messageType="ns20:CrearTreLineaCreditoAprobacionResponseMessage"/>
      </variables>
      <faultHandlers>
        <catch faultName="bpelx:remoteFault" faultVariable="faultVariable" faultMessageType="bpelx:RuntimeFaultMessage">
          <rethrow name="RethrowCrearTreLineas"/>
        </catch>
        <catchAll>
          <sequence name="SequenceCatchAll">
            <assign name="AssignFault">
              <copy>
                <from>'-1'</from>
                <to>$faultVariable.code</to>
              </copy>
              <copy>
                <from>ora:getFaultAsString()</from>
                <to>$faultVariable.detail</to>
              </copy>
              <copy>
                <from>'Error general al crear la relación entre aprobación y líneas de crédito'</from>
                <to>$faultVariable.summary</to>
              </copy>
            </assign>
            <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
          </sequence>
        </catchAll>
      </faultHandlers>
      <sequence name="SequenceCrearTreLineas">
        <assign name="CrearTreLineasCreditoAprobacion">
          <bpelx:annotation>
            <bpelx:pattern patternName="bpelx:xquery"></bpelx:pattern>
          </bpelx:annotation>
          <copy>
            <from>ora:processXQuery10('../Transformations/CrearTreLineasCreditoAprobacionRequest.xqy', 'inputVariable.CrearAprobacionRequest', $inputVariable.CrearAprobacionRequest)</from>
            <to variable="inInvokeCrearTreLineas" part="CrearTreLineaCreditoAprobacionRequest"/>
          </copy>
        </assign>
        <invoke name="InvokeCrearTreLineas" bpelx:invokeAsDetail="no" partnerLink="CrearTreLineaCreditoAprobacion"
                portType="ns20:CrearTreLineaCreditoAprobacionPT" operation="crearTreLineaCreditoAprobacion"
                inputVariable="inInvokeCrearTreLineas" outputVariable="outInvokeCrearTreLineas"/>
        <if name="IfResultadoCrearTreLineas">
          <documentation>
            <![CDATA[OK]]>
          </documentation>
          <condition>string($outInvokeCrearTreLineas.CrearTreLineaCreditoAprobacionResponseMessage/ns19:Resultado/ns12:result) != 'ERROR'</condition>
          <assign name="AssignResult">
            <copy bpelx:insertMissingToData="yes">
              <from>'OK'</from>
              <to>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:result</to>
            </copy>
            <copy bpelx:insertMissingToData="yes">
              <from>'La creación se hizo correctamente'</from>
              <to>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:message</to>
            </copy>
            <extensionAssignOperation>
              <bpelx:remove>
                <bpelx:target>$outputVariable.CrearAprobacionResponse/ns3:Resultado/ns12:error</bpelx:target>
              </bpelx:remove>
            </extensionAssignOperation>
          </assign>
          <else>
            <documentation>
              <![CDATA[ERROR]]>
            </documentation>
            <sequence name="SequenceCatchAll">
              <assign name="AssignFault">
                <copy>
                  <from>'-1'</from>
                  <to>$faultVariable.code</to>
                </copy>
                <copy bpelx:insertMissingToData="yes">
                  <from>$outInvokeCrearTreLineas.CrearTreLineaCreditoAprobacionResponseMessage/ns19:Resultado/ns12:message</from>
                  <to>$faultVariable.detail</to>
                </copy>
                <copy>
                  <from>'Error al crear la relación entre aprobación y líneas de crédito'</from>
                  <to>$faultVariable.summary</to>
                </copy>
              </assign>
              <throw name="ThrowFault" faultName="bpelx:remoteFault" faultVariable="faultVariable"/>
            </sequence>
          </else>
        </if>
      </sequence>
    </scope>
    <!-- Generate reply to synchronous request -->
    <reply name="replyOutput" partnerLink="crearaprobacionbpel1_client" portType="ns1:CrearAprobacionPT" operation="crearAprobacion" variable="outputVariable"/>
  </sequence>
</process>