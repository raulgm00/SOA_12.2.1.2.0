package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.model.BindingContext;
import oracle.adf.model.binding.DCDataControl;
import oracle.adf.share.ADFContext;

import oracle.adf.share.logging.ADFLogger;

import oracle.binding.AttributeBinding;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.clientebo.ClienteBasicType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.GestionarAvisoDeCobroVO;
import org.bcie.gestioncobro.RecuperacionPT;
import org.bcie.gestioncobro.RecuperacionPTSOAP12BndQSService;
import org.bcie.gestioncobrobo.AvisoOperacionType;
import org.bcie.gestioncobrobo.ParametrosAvisoCobroType;
import org.bcie.gestioncobrobo.ParametrosAvisoCobroV2Type;
import org.bcie.gestioncobromo.GenerarAvisoCobroDemandaRequestType;
import org.bcie.gestioncobromo.GenerarAvisoCobroDemandaResponseType;
import org.bcie.gestioncobromo.GenerarAvisoCobroDemandaV2RequestType;
import org.bcie.gestioncobromo.GenerarAvisoCobroDemandaV2ResponseType;
import org.bcie.lineacreditobo.LineaCreditoBasicType;
import org.bcie.operacionbo.OperacionBasicType;
import org.bcie.resultbo.Resultado;
import org.bcie.resultbo.SuccessType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 09 15:58:13 VET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GestionarAvisoDeCobroVOImpl extends ViewObjectImpl implements GestionarAvisoDeCobroVO {
    
    
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(GestionarAvisoDeCobroVOImpl.class);
    public static final int SERVICE_PARAM_KEY_IDCLIENTE = 1;
    public static final int SERVICE_PARAM_KEY_SEGREGAROPERACION = 2;
    public static final int SERVICE_PARAM_KEY_FECHAINICIAL = 3;
    public static final int SERVICE_PARAM_KEY_FECHAFINAL = 4;
    public static final int SERVICE_PARAM_KEY_PERIODICIDAD = 5;
    public static final int SERVICE_PARAM_KEY_TIPOGENERACION = 6;
    public static final int SERVICE_PARAM_KEY_TIPOSALDOS = 7;
    public static final int SERVICE_PARAM_KEY_OPERACIONES = 8;
    public static final int SERVICE_PARAM_KEY_LINEASDECREDITO = 9;
    public static final int SERVICE_PARAM_KEY_FONDOS = 10;
    public static final int SERVICE_PARAM_KEY_LOGINUSUARIO = 11;
    public static final int SERVICE_PARAM_KEY_IDFLUJO = 12;
    ////Se agrega parametro por incidencia FNXII-7340
    public static final int SERVICE_PARAM_KEY_NIVELDETALLE = 13;
    
    /**
     * This is the default constructor (do not remove).
     */
    public GestionarAvisoDeCobroVOImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }


    /**Genera avisos de cobro al cliente.
     * @param serviceParams
     * @return
     */

    public void generarAvisoCobro(Map serviceParams) {
        String mensaje=null;
        LOGGER.warning("generarAvisoService starts");
        GenerarAvisoCobroDemandaV2RequestType request = null;
        GenerarAvisoCobroDemandaV2ResponseType response = null;
        FenixAMImpl fenixAM = null;
        
        try{
            Resultado result = null;
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
            //Service declaration
            String wsdl = fenixAM.getWsdl(IWsdlLocation.RECUPERACION);
            RecuperacionPTSOAP12BndQSService recuperacionPTSOAP12BndQSService =
                IWsdlLocation.Service.getInstance(RecuperacionPTSOAP12BndQSService.class, wsdl);
            RecuperacionPT recuperacionPT = recuperacionPTSOAP12BndQSService.getRecuperacionPTSOAP12BndQSPort();
          
            //Request declaration
            request = new GenerarAvisoCobroDemandaV2RequestType();
            ParametrosAvisoCobroV2Type parametrosAvisoCobroType = new ParametrosAvisoCobroV2Type();
            ClienteBasicType xMLCliente = new ClienteBasicType();
            List<Long> operaciones;
            List<String> lineasDeCredito;
            List<String> fondos;
            
            //Request implementation
            xMLCliente.setIdCliente((Long) serviceParams.get(SERVICE_PARAM_KEY_IDCLIENTE));           
            parametrosAvisoCobroType.setCliente(xMLCliente);
            if(null!=(Boolean) serviceParams.get(SERVICE_PARAM_KEY_SEGREGAROPERACION)){
                parametrosAvisoCobroType.setSegregarOperacion((Boolean) serviceParams.get(SERVICE_PARAM_KEY_SEGREGAROPERACION));

                }
            else{
                parametrosAvisoCobroType.setSegregarOperacion(false);

                }
            parametrosAvisoCobroType.setFechaInicial((XMLGregorianCalendar) serviceParams.get(SERVICE_PARAM_KEY_FECHAINICIAL));
            parametrosAvisoCobroType.setFechaFinal((XMLGregorianCalendar) serviceParams.get(SERVICE_PARAM_KEY_FECHAFINAL));
            parametrosAvisoCobroType.setPeriodicidad((String) serviceParams.get(SERVICE_PARAM_KEY_PERIODICIDAD));
            parametrosAvisoCobroType.setTipoGeneracion((String) serviceParams.get(SERVICE_PARAM_KEY_TIPOGENERACION));
            parametrosAvisoCobroType.setTipoSaldos((String) serviceParams.get(SERVICE_PARAM_KEY_TIPOSALDOS));          
            operaciones = (List<Long>) serviceParams.get(SERVICE_PARAM_KEY_OPERACIONES);
            for (Long idOperacion : operaciones) {
                OperacionBasicType xMLOperacion = new AvisoOperacionType();
                xMLOperacion.setIdOperacion(idOperacion);
                parametrosAvisoCobroType.getOperacion().add(xMLOperacion);
            }
            lineasDeCredito = (List<String>) serviceParams.get(SERVICE_PARAM_KEY_LINEASDECREDITO);
            for (String idLineaDeCredito : lineasDeCredito) {
                LineaCreditoBasicType xMLLineaDeCredito = new LineaCreditoBasicType();
                xMLLineaDeCredito.setNumeroLineaCredito(idLineaDeCredito);
                parametrosAvisoCobroType.getLineaCredito().add(xMLLineaDeCredito);
            }
            fondos =  (List<String>) serviceParams.get(SERVICE_PARAM_KEY_FONDOS);
            for (String idFondo : fondos) {
                Catalogo xMLFondo = new Catalogo();
                xMLFondo.setId(Long.parseLong(idFondo));
                parametrosAvisoCobroType.getFondo().add(xMLFondo);
            }
            
            Long idFlujo = null;
            try{
                idFlujo = (Long) serviceParams.get(SERVICE_PARAM_KEY_IDFLUJO);
                if(idFlujo == null){
                    LOGGER.warning("El Id de Flujo es NULL");
                }else{
                    request.setIdFlujoNegocio(idFlujo);        
                }
            }catch(Exception e){
                LOGGER.warning("No se pudo obtener el Id de Flujo");
            }
            
            parametrosAvisoCobroType.setLoginUsuario((String) serviceParams.get(SERVICE_PARAM_KEY_LOGINUSUARIO));
            request.setParametrosAvisoCobro(parametrosAvisoCobroType);
            
            LOGGER.warning("Datos request gestion de cobro service:");
            LOGGER.warning("SERVICE_PARAM_KEY_IDCLIENTE: "+request.getParametrosAvisoCobro().getCliente().getIdCliente());
            LOGGER.warning("SERVICE_PARAM_KEY_SEGREGAROPERACION: "+request.getParametrosAvisoCobro().isSegregarOperacion());
            LOGGER.warning("SERVICE_PARAM_KEY_FECHAINICIALL: "+request.getParametrosAvisoCobro().getFechaInicial());
            LOGGER.warning("SERVICE_PARAM_KEY_FECHAFINALL: "+request.getParametrosAvisoCobro().getFechaFinal());
            LOGGER.warning("SERVICE_PARAM_KEY_PERIODICIDAD: "+request.getParametrosAvisoCobro().getPeriodicidad());
            LOGGER.warning("SERVICE_PARAM_KEY_TIPOGENERACION: "+request.getParametrosAvisoCobro().getTipoGeneracion());
            LOGGER.warning("SERVICE_PARAM_KEY_TIPOSALDOS: "+request.getParametrosAvisoCobro().getTipoSaldos());
            LOGGER.warning("SERVICE_PARAM_KEY_OPERACIONES size: "+request.getParametrosAvisoCobro().getOperacion().size());
            LOGGER.warning("SERVICE_PARAM_KEY_LINEASDECREDITO size: "+request.getParametrosAvisoCobro().getLineaCredito().size());
            LOGGER.warning("SERVICE_PARAM_KEY_FONDOS size: "+request.getParametrosAvisoCobro().getFondo().size());
            LOGGER.warning("SERVICE_PARAM_KEY_LOGINUSUARIO: "+request.getParametrosAvisoCobro().getLoginUsuario());
            
            //Service execution             
            Date horaInicioService =
                ModelUtils.logStartWS(LOGGER, request, FenixModelConstants.WSC_GENERAR_AVISO_COBRO_CLIENTE_V2);
            response = recuperacionPT.gestionCobroClienteV2(request);
            ModelUtils.logEndWS(LOGGER, response, FenixModelConstants.WSC_GENERAR_AVISO_COBRO_CLIENTE_V2, horaInicioService);
            result = response.getResultado();
            
            if(result.getResult()!=null && result.getResult().value()=="ERROR"){
                LOGGER.log(ADFLogger.WARNING, "Error al generar aviso de cobro");
                throw new Exception(result.getMessage());
            }
        }catch(Exception e) {
             LOGGER.log(ADFLogger.WARNING, "Excepcion al generar aviso de cobro");
             JboException ex = new JboException(e);
             throw ex;
         }  
    }


    public String generaAvisoCobroMensaje(Map serviceParams) {
        String mensaje=null;
        LOGGER.warning("generarAvisoService starts");
        //GenerarAvisoCobroDemandaRequestType request = null;
        //GenerarAvisoCobroDemandaResponseType response = null;
        GenerarAvisoCobroDemandaV2RequestType request = null;
        GenerarAvisoCobroDemandaV2ResponseType response = null;
        FenixAMImpl fenixAM = null;
        
        try{
            Resultado result = null;
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            
            //Service declaration
            String wsdl = fenixAM.getWsdl(IWsdlLocation.RECUPERACION);
            RecuperacionPTSOAP12BndQSService recuperacionPTSOAP12BndQSService =
                IWsdlLocation.Service.getInstance(RecuperacionPTSOAP12BndQSService.class, wsdl);
            RecuperacionPT recuperacionPT = recuperacionPTSOAP12BndQSService.getRecuperacionPTSOAP12BndQSPort();
          
            //Request declaration
            //request = new GenerarAvisoCobroDemandaRequestType();
            //ParametrosAvisoCobroType parametrosAvisoCobroType = new ParametrosAvisoCobroType();
            request = new GenerarAvisoCobroDemandaV2RequestType();
            ParametrosAvisoCobroV2Type parametrosAvisoCobroType = new ParametrosAvisoCobroV2Type();
            ClienteBasicType xMLCliente = new ClienteBasicType();
            List<Long> operaciones;
            List<String> lineasDeCredito;
            List<String> fondos;
            
            //Request implementation
            xMLCliente.setIdCliente((Long) serviceParams.get(SERVICE_PARAM_KEY_IDCLIENTE));           
            parametrosAvisoCobroType.setCliente(xMLCliente);
            parametrosAvisoCobroType.setSegregarOperacion((Boolean) serviceParams.get(SERVICE_PARAM_KEY_SEGREGAROPERACION));
            parametrosAvisoCobroType.setFechaInicial((XMLGregorianCalendar) serviceParams.get(SERVICE_PARAM_KEY_FECHAINICIAL));
            parametrosAvisoCobroType.setFechaFinal((XMLGregorianCalendar) serviceParams.get(SERVICE_PARAM_KEY_FECHAFINAL));
            parametrosAvisoCobroType.setPeriodicidad((String) serviceParams.get(SERVICE_PARAM_KEY_PERIODICIDAD));
            parametrosAvisoCobroType.setTipoGeneracion((String) serviceParams.get(SERVICE_PARAM_KEY_TIPOGENERACION));
            parametrosAvisoCobroType.setTipoSaldos((String) serviceParams.get(SERVICE_PARAM_KEY_TIPOSALDOS));          
            operaciones = (List<Long>) serviceParams.get(SERVICE_PARAM_KEY_OPERACIONES);
            for (Long idOperacion : operaciones) {
                OperacionBasicType xMLOperacion = new AvisoOperacionType();
                xMLOperacion.setIdOperacion(idOperacion);
                parametrosAvisoCobroType.getOperacion().add(xMLOperacion);
            }
            lineasDeCredito = (List<String>) serviceParams.get(SERVICE_PARAM_KEY_LINEASDECREDITO);
            for (String idLineaDeCredito : lineasDeCredito) {
                LineaCreditoBasicType xMLLineaDeCredito = new LineaCreditoBasicType();
                xMLLineaDeCredito.setNumeroLineaCredito(idLineaDeCredito);
                parametrosAvisoCobroType.getLineaCredito().add(xMLLineaDeCredito);
            }
            fondos =  (List<String>) serviceParams.get(SERVICE_PARAM_KEY_FONDOS);
            for (String idFondo : fondos) {
                Catalogo xMLFondo = new Catalogo();
                xMLFondo.setId(Long.parseLong(idFondo));
                parametrosAvisoCobroType.getFondo().add(xMLFondo);
            }
            
            Long idFlujo = null;
            try{
                idFlujo = (Long) serviceParams.get(SERVICE_PARAM_KEY_IDFLUJO);
                if(idFlujo == null){
                    LOGGER.warning("El Id de Flujo es NULL");
                }else{
                    request.setIdFlujoNegocio(idFlujo);        
                }
            }catch(Exception e){
                LOGGER.warning("No se pudo obtener el Id de Flujo");
            }
            
            parametrosAvisoCobroType.setLoginUsuario((String) serviceParams.get(SERVICE_PARAM_KEY_LOGINUSUARIO));
            request.setParametrosAvisoCobro(parametrosAvisoCobroType);
            
            request.setEsPublico((String) serviceParams.get(SERVICE_PARAM_KEY_NIVELDETALLE));
            
            LOGGER.warning("Datos request gestion de cobro service:");
            LOGGER.warning("SERVICE_PARAM_KEY_IDCLIENTE: "+request.getParametrosAvisoCobro().getCliente().getIdCliente());
            LOGGER.warning("SERVICE_PARAM_KEY_SEGREGAROPERACION: "+request.getParametrosAvisoCobro().isSegregarOperacion());
            LOGGER.warning("SERVICE_PARAM_KEY_FECHAINICIALL: "+request.getParametrosAvisoCobro().getFechaInicial());
            LOGGER.warning("SERVICE_PARAM_KEY_FECHAFINALL: "+request.getParametrosAvisoCobro().getFechaFinal());
            LOGGER.warning("SERVICE_PARAM_KEY_PERIODICIDAD: "+request.getParametrosAvisoCobro().getPeriodicidad());
            LOGGER.warning("SERVICE_PARAM_KEY_TIPOGENERACION: "+request.getParametrosAvisoCobro().getTipoGeneracion());
            LOGGER.warning("SERVICE_PARAM_KEY_TIPOSALDOS: "+request.getParametrosAvisoCobro().getTipoSaldos());
            LOGGER.warning("SERVICE_PARAM_KEY_OPERACIONES size: "+request.getParametrosAvisoCobro().getOperacion().size());
            LOGGER.warning("SERVICE_PARAM_KEY_LINEASDECREDITO size: "+request.getParametrosAvisoCobro().getLineaCredito().size());
            LOGGER.warning("SERVICE_PARAM_KEY_FONDOS size: "+request.getParametrosAvisoCobro().getFondo().size());
            LOGGER.warning("SERVICE_PARAM_KEY_LOGINUSUARIO: "+request.getParametrosAvisoCobro().getLoginUsuario());
            
            //Service execution             
            Date horaInicioService =
                ModelUtils.logStartWS(LOGGER, request, FenixModelConstants.WSC_GENERAR_AVISO_COBRO_CLIENTE_V2);
            response = recuperacionPT.gestionCobroClienteV2(request);
            ModelUtils.logEndWS(LOGGER, response, FenixModelConstants.WSC_GENERAR_AVISO_COBRO_CLIENTE_V2, horaInicioService);
            result = response.getResultado();
            
            if(result.getResult()!=null && result.getResult().value()=="ERROR"){
                LOGGER.log(ADFLogger.WARNING, "Error al generar aviso de cobro");
                if(null!= result.getMessage()){
                        throw new Exception("Error del servicio de generar aviso de cobro V2. Mensaje: " + result.getMessage());
                    }
            }
            if(null!=response.getResultado().getMessage()){
                    mensaje=response.getResultado().getMessage();
                }
        }catch(Exception e) {
             LOGGER.log(ADFLogger.WARNING, "Excepcion al generar aviso de cobro");
             JboException ex = new JboException(e);
             throw ex;
         }  
        
        LOGGER.warning("Mensaje metodo: " +mensaje);
        return mensaje;
    }

}

