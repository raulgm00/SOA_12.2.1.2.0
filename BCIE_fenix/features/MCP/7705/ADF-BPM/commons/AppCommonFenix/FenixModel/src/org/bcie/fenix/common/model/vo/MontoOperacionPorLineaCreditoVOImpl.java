package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.MontoOperacionPorLineaCreditoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 04 23:24:07 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MontoOperacionPorLineaCreditoVOImpl extends ViewObjectImpl implements MontoOperacionPorLineaCreditoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public MontoOperacionPorLineaCreditoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for idLineaCreditoMonto.
     * @return variable value for idLineaCreditoMonto
     */
    public Long getidLineaCreditoMonto() {
        return (Long) ensureVariableManager().getVariableValue("idLineaCreditoMonto");
    }

    /**
     * Sets <code>value</code> for variable idLineaCreditoMonto.
     * @param value value to bind as idLineaCreditoMonto
     */
    public void setidLineaCreditoMonto(Long value) {
        ensureVariableManager().setVariableValue("idLineaCreditoMonto", value);
    }

    /**
     * Returns the variable value for idTipoMonto.
     * @return variable value for idTipoMonto
     */
    public Integer getidTipoMonto() {
        return (Integer) ensureVariableManager().getVariableValue("idTipoMonto");
    }

    /**
     * Sets <code>value</code> for variable idTipoMonto.
     * @param value value to bind as idTipoMonto
     */
    public void setidTipoMonto(Integer value) {
        ensureVariableManager().setVariableValue("idTipoMonto", value);
    }

    /**
     * M&eacute;todo para recuperar el monto de operaci&oacute;n por tipo
     * @author Jonathan Ruiz
     * @param idLineaCreditoMonto id de la l&iacute;nea de cr&eacute;dito
     * @param idTipoMonto id del tipo de monto
     * @param montoIngresado monto ingresado por el usuario
     * @return true cuando el monto es v&aacute;lido
     * @exception <JboException> cuando uno o m&acute;s par&aacute;metros 
     * vienen nulos o cuando ocurre un error al recuperar el monto
     */
    public boolean montoOperacionValidoPorTipo(Long idLineaCreditoMonto, Integer idTipoMonto, BigDecimal montoIngresado) {
        logger.log(ADFLogger.NOTIFICATION, "Dentro de montoOperacionValidoPorTipo con el parametro idLineaCreditoMonto : " + idLineaCreditoMonto+", idTipoMonto: " + idTipoMonto + ", montoIngresado: " + montoIngresado);
        BigDecimal montoOperacion = null;
        boolean valido = false;
        
        if (idLineaCreditoMonto == null || idTipoMonto == null || montoIngresado == null) {
            logger.log(ADFLogger.WARNING, "Parametros nulos (idLineaCreditoMonto, idTipoMonto, montoIngresado) (" + idLineaCreditoMonto + ", " + idTipoMonto + ", " + montoIngresado + ")");
            
            JboException ex = new JboException(new Exception("Par\u00E1metros nulos (idLineaCreditoMonto, idTipoMonto, montoIngresado) (" + idLineaCreditoMonto + ", " + idTipoMonto + ", " + montoIngresado + ")"));
            throw ex;
        }
        
        try {
            //Obtener monto de la operacion
            ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ObtenerMontoOperacionPorTipoVOCriteria");
            setidLineaCreditoMonto(idLineaCreditoMonto);
            setidTipoMonto(idTipoMonto);
            applyViewCriteria(criteria);
            executeQuery();
            
            Row row = null;
            if (getEstimatedRowCount() > 0) {
                row = getRowAtRangeIndex(0);
            }
            
            if (row != null) {
                //Validacion de monto menor o igual al monto del tipo de operacion
                montoOperacion = (BigDecimal)row.getAttribute("Monto");
                valido = montoIngresado.compareTo(montoOperacion) < 1;
                logger.log(ADFLogger.NOTIFICATION, "Monto Ingresado = " + montoIngresado + ", Monto Operacion = " + montoOperacion);
            } else {
                logger.log(ADFLogger.NOTIFICATION, "No hay un monto para idLineaCreditoMonto = " + idLineaCreditoMonto + ", idTipoMonto = " + idTipoMonto);
            }
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error en montoOperacionValidoPorTipo " + e.getClass() + ":" + e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al consultar el monto, favor de intentar m\u00E1s tarde."));
            throw ex;
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ObtenerMontoOperacionPorTipoVOCriteria");
        }
        logger.log(ADFLogger.NOTIFICATION, "montoOperacionValidoPorTipo retorna : " + valido);
        return valido;
    }
}

