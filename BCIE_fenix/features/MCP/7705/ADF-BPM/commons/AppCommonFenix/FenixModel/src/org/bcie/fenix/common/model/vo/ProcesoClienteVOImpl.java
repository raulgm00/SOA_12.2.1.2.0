package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ProcesoClienteVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 31 16:52:25 CST 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProcesoClienteVOImpl extends ViewObjectImpl implements ProcesoClienteVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ProcesoClienteVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    /**
     * @param idCliente     - indentificador unico de cliente
     * @param idProceso     - indentificador unico de proceso BPM
     * @return
     * Compara la cantidad de tareas iniciadas de un proceso por cliente contra la cantidad de tareas finalizadas , si este valor es
     * el mismo indica que el proceso se finalizo 
     */
    public Boolean esProcesoClienteFinalizado(Long idCliente,Integer idProceso) {
        logger.warning("Dentro esProcesoClienteFinalizado");
        logger.warning("idCliente :"+idCliente);
        logger.warning("idProceso :"+idProceso);
        
        Boolean esProcesoClienteFinalizado =  Boolean.FALSE;
        Long cantidadProcesosIniciados = new Long(0);
        Long cantidadProcesosFinalizados = new Long(0);
        
        
        try{
            //obtener los procesos iniciados de BPM con las columnas banEsFinActividad = 0 , banEsProceso = 1,
            cantidadProcesosIniciados = obtenerCantidadProcesos(idCliente,idProceso,new Integer(0),new Integer(1));
            //obtener los procesos iniciados de BPM con las columnas banEsFinActividad = 1 y banEsProceso = 1
            cantidadProcesosFinalizados = obtenerCantidadProcesos(idCliente,idProceso,new Integer(1),new Integer(1));
            
            logger.warning("cantidadProcesosIniciados :"+cantidadProcesosIniciados);
            logger.warning("cantidadProcesosFinalizados :"+cantidadProcesosFinalizados);
            
            //comparar la cantidad y si estas cantidades son iguales se finalizo proceso,regresar true
            if(cantidadProcesosIniciados == 0 && cantidadProcesosFinalizados == 0){
                if(cantidadProcesosIniciados == 0){
                    logger.warning("No existe inicio de proceso");
                }
                
                if(cantidadProcesosFinalizados == 0){
                    logger.warning("No existe final de proceso");
                }
            }else if(cantidadProcesosIniciados == cantidadProcesosFinalizados){
                logger.warning("Existe la misma cantidad de inicios de proceso que de finalizados, regresar true");
                esProcesoClienteFinalizado = Boolean.TRUE;
            }else{
                logger.warning("Cantidad de procesos iniciados y finalizados no es la misma");
            }
        
        } catch (Exception ex) {
            logger.severe("Error en existeProcesoIniciado : ",ex);
        } 
        
        logger.warning("Fuera esProcesoClienteFinalizado,return :"+esProcesoClienteFinalizado);
        
        return esProcesoClienteFinalizado;
    }
    
    public Long obtenerCantidadProcesos(Long idCliente,Integer idProceso,Integer banEsFinActividad,Integer banEsProceso ){
        logger.warning("Dentro de obtenerCantidadProcesos");
        logger.warning("idCliente :"+idCliente);
        logger.warning("idProceso :"+idProceso);
        logger.warning("banEsFinActividad :"+banEsFinActividad);
        logger.warning("banEsProceso :"+banEsProceso);
        
        Long cantidadRegistros = new Long(0);
        
        ViewCriteria viewCriteria = null;
        
        try{
            viewCriteria = this.getViewCriteriaManager().getViewCriteria("cantidadProcesosCriteria");
            viewCriteria.ensureVariableManager().setVariableValue("pIdCliente", idCliente);
            viewCriteria.ensureVariableManager().setVariableValue("pIdProceso", idProceso);
            viewCriteria.ensureVariableManager().setVariableValue("pBanEsFinActividad", banEsFinActividad);
            viewCriteria.ensureVariableManager().setVariableValue("pBanEsProceso", banEsProceso);
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            logger.warning("cantidad de registros :"+this.getEstimatedRowCount());

            // 2) Validar que existan registros
            if(this.getEstimatedRowCount() > 0) {
                logger.warning("Existen registros");
                cantidadRegistros = this.getEstimatedRowCount();
            }else{
                logger.warning("No existen registros");
            }
            
        } catch (Exception ex) {
            logger.severe("Error en obtenerCantidadProcesos : ",ex);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("cantidadProcesosCriteria");
        }
        
        logger.warning("Fuera de obtenerCantidadProcesos,return :"+cantidadRegistros);
        return cantidadRegistros;
    }

    /**
     * Returns the variable value for pIdCliente.
     * @return variable value for pIdCliente
     */
    public Long getpIdCliente() {
        return (Long) ensureVariableManager().getVariableValue("pIdCliente");
    }

    /**
     * Sets <code>value</code> for variable pIdCliente.
     * @param value value to bind as pIdCliente
     */
    public void setpIdCliente(Long value) {
        ensureVariableManager().setVariableValue("pIdCliente", value);
    }

    /**
     * Returns the variable value for pIdProceso.
     * @return variable value for pIdProceso
     */
    public Integer getpIdProceso() {
        return (Integer) ensureVariableManager().getVariableValue("pIdProceso");
    }

    /**
     * Sets <code>value</code> for variable pIdProceso.
     * @param value value to bind as pIdProceso
     */
    public void setpIdProceso(Integer value) {
        ensureVariableManager().setVariableValue("pIdProceso", value);
    }

    /**
     * Returns the variable value for pBanEsProceso.
     * @return variable value for pBanEsProceso
     */
    public Integer getpBanEsProceso() {
        return (Integer) ensureVariableManager().getVariableValue("pBanEsProceso");
    }

    /**
     * Sets <code>value</code> for variable pBanEsProceso.
     * @param value value to bind as pBanEsProceso
     */
    public void setpBanEsProceso(Integer value) {
        ensureVariableManager().setVariableValue("pBanEsProceso", value);
    }

    /**
     * Returns the variable value for pBanEsFinActividad.
     * @return variable value for pBanEsFinActividad
     */
    public Integer getpBanEsFinActividad() {
        return (Integer) ensureVariableManager().getVariableValue("pBanEsFinActividad");
    }

    /**
     * Sets <code>value</code> for variable pBanEsFinActividad.
     * @param value value to bind as pBanEsFinActividad
     */
    public void setpBanEsFinActividad(Integer value) {
        ensureVariableManager().setVariableValue("pBanEsFinActividad", value);
    }
}

