package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jbo.domain.Number;

import org.bcie.fenix.common.model.vo.common.ValidaDocOperTareaLOV;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 18 20:58:02 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ValidaDocOperTareaLOVImpl extends ViewObjectImpl implements ValidaDocOperTareaLOV {
    
    /**
     * Define Log de la aplicacion
     */
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(ValidaDocOperTareaLOVImpl.class);
    
    /**
     * Define nombre de view criteria para realizar la busqueda de documentos por Id de Operacion, Id Tarea BPM y 
     * Id de Tipo Documento
     */
    public static final String BUSCAR_POR_ID_OPER_TAREA_VC = "BuscarPorIdOperTareaVC";
    
    /**
     * This is the default constructor (do not remove).
     */
    public ValidaDocOperTareaLOVImpl() {
    }

    /**
     * Returns the variable value for pIdOperacion.
     * @return variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }

    /**
     * Returns the variable value for pIdTareaBpm.
     * @return variable value for pIdTareaBpm
     */
    public Integer getpIdTareaBpm() {
        return (Integer) ensureVariableManager().getVariableValue("pIdTareaBpm");
    }

    /**
     * Sets <code>value</code> for variable pIdTareaBpm.
     * @param value value to bind as pIdTareaBpm
     */
    public void setpIdTareaBpm(Integer value) {
        ensureVariableManager().setVariableValue("pIdTareaBpm", value);
    }

    /**
     * Returns the variable value for pIdTipoDocumento.
     * @return variable value for pIdTipoDocumento
     */
    public Integer getpIdTipoDocumento() {
        return (Integer) ensureVariableManager().getVariableValue("pIdTipoDocumento");
    }

    /**
     * Sets <code>value</code> for variable pIdTipoDocumento.
     * @param value value to bind as pIdTipoDocumento
     */
    public void setpIdTipoDocumento(Integer value) {
        ensureVariableManager().setVariableValue("pIdTipoDocumento", value);
    }
    
    /**
     * Realiza la validacion de documento
     * @param idOperacion contiene el id de Operacion
     * @param idTareaBpm contiene el id de tarea BPM
     * @param idTipoDocumento contiene id del tipo de documento
     * @param esAdjunto define si requiere validar el content en el registro de Adjunto
     * @return devuelve valor booleano, true si el documento existe o false en caso contrario
     */
    public boolean validaDocumentoPorIdOperacionTarea(Number idOperacion,
                                                      Number idTareaBpm,
                                                      Integer idTipoDocumento,
                                                      boolean esAdjunto){
            
        boolean esValido = false;
        
        LOGGER.warning("Id de Operacion: " + idOperacion);
        LOGGER.warning("Id de Tarea BPM: " + idTareaBpm);
        LOGGER.warning("Id Tipo Documento: " + idTipoDocumento);
        
        if(idOperacion != null &&
           idTareaBpm != null &&
           idTipoDocumento != null){
           
            setpIdOperacion(idOperacion.longValue());
            setpIdTareaBpm(idTareaBpm.intValue());
            setpIdTipoDocumento(idTipoDocumento.intValue());
                   
            ViewCriteria vc = null;
            try{
                vc = getViewCriteria(BUSCAR_POR_ID_OPER_TAREA_VC);
                LOGGER.warning("Aplica view criteria: " + BUSCAR_POR_ID_OPER_TAREA_VC);
                appendViewCriteria(vc);
                executeQuery();
                
                setCurrentRow(first());
            }catch(Exception e){
                LOGGER.severe("Error al ejecutar View Criteria: " + BUSCAR_POR_ID_OPER_TAREA_VC);
            }
            
            LOGGER.warning("Verifica la cantidad de registros encontrados: " + 
                           getEstimatedRowCount());
            if(getEstimatedRowCount() > 0){
                if(esAdjunto){
                    
                    ValidaDocOperTareaLOVRowImpl row = null;
                    
                    RowSetIterator iter = createRowSetIterator(null);
                    if(iter != null){
                        iter.reset();
                        while(iter.hasNext()){
                            row = (ValidaDocOperTareaLOVRowImpl) iter.next();
                            if(row.getAdjContent() != null){
                                esValido = true;
                                break;
                            }
                        }
                        iter.closeRowSetIterator();
                    }
                }else{
                    esValido = true;
                }
            }   
        }else{
            LOGGER.severe("Campos requeridos no recibidos");
        }
        
        return esValido;
    }
}

