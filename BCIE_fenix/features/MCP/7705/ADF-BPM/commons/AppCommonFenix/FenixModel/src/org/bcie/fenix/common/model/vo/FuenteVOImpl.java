package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.FuenteVO;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_FALSE;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 27 16:51:06 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FuenteVOImpl extends ViewObjectImpl implements FuenteVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public FuenteVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void agregarFuente(Long idOperacion, String instanciaProceso, String codigo, String nombre, 
                              BigDecimal porcentaje) {
        logger.log(ADFLogger.WARNING, "Inside agregarFuente. idOperacion: " + idOperacion + " instanciaProceso: " + 
                                      instanciaProceso + " codigo: " + codigo + " nombre: " + nombre + " porcentaje: " + 
                                      porcentaje);
        Long idContrato = null;
        FenixAMImpl fenixAM = null;
        Row fuenteRow = null;
        oracle.jbo.domain.Number idFuente = null;
        NameValuePairs nvpFuente = null;
        SequenceImpl seqFuente = null;
        Integer longitudNombre = Integer.valueOf(0);
        String nombreFormat = null;
        Integer longitudCodigo = Integer.valueOf(0);
        String codigoFormat = null;
        
        longitudNombre = nombre.length();
        if(longitudNombre > 256)
            nombreFormat = nombre.substring(0, 256);
        else
            nombreFormat = nombre;
        
        longitudCodigo = codigo.length();
        if(longitudCodigo > 32)
            codigoFormat = codigo.substring(0, 32);
        else
            codigoFormat = codigo;
        
        // Obtenemos el id de contrato
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        idContrato = fenixAM.getContratoVO().getIdContratoByOperacionInstanciaProceso(idOperacion, instanciaProceso);
        
        // Asignación para Fuente
        seqFuente = new SequenceImpl("FUENTE_SEQ", getDBTransaction());
        idFuente = seqFuente.getSequenceNumber();
        
        nvpFuente = new NameValuePairs();
        nvpFuente.setAttribute("Id", idFuente);
        nvpFuente.setAttribute("IdContrato", idContrato);
        nvpFuente.setAttribute("IdLineaPasiva", codigo);
        nvpFuente.setAttribute("Descripcion", nombreFormat);
        nvpFuente.setAttribute("Porcentaje", porcentaje);
        nvpFuente.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
        nvpFuente.setAttribute("BanEstatus", BANESTATUS_TRUE);
        
        fuenteRow = this.createAndInitRow(nvpFuente);
                
        getDBTransaction().commit();
    }
    
    public void eliminarFuente(Long id) {
        logger.warning("Dentro eliminarFuente : " +id);
        //se refresca la VO
        this.executeQuery();
        
        if((id != null) && (this.getRow(new Key(new Object[] {id})) != null)) {
            try{
                this.getRow(new Key(new Object[] {id})).setAttribute("BanEstatus", BANESTATUS_FALSE); // Borrado lógico
                getDBTransaction().commit();
            }catch(Exception e){
                logger.severe("Error al eliminar row : "+e);
            }
        }else{
            logger.warning("Registro no encontrado con el id : "+id);
        }
        logger.warning("Fuera eliminarFuente");
    }
    
    public void eliminarFuentes(List<Long> idsFuente) {
        logger.log(ADFLogger.TRACE, "Inside eliminarFuentes.");
        
        for(Long id : idsFuente){
            if((id != null) && (this.getRow(new Key(new Object[] {id})) != null)) {
                this.getRow(new Key(new Object[] {id})).setAttribute("BanEstatus", BANESTATUS_FALSE); // Borrado lógico
            }
        }
        
        getDBTransaction().commit();
    }
    
    public void agregarFuentePorLineaCredito(Long idLineaCredito, String idLineaPasiva, String nombre, Timestamp fechaObtenido,
                                             BigDecimal montoAsignado, String comentario) {
        logger.log(ADFLogger.WARNING, "Inside agregarFuentePorLineaCredito. idLineaCredito: " + idLineaCredito + " idLineaPasiva: " + 
                                      idLineaPasiva + " nombre: " + nombre + " fechaObtenido: " + fechaObtenido + " montoAsignado: " + 
                                      montoAsignado + " comentario: " + comentario);
        Row fuenteRow = null;
        oracle.jbo.domain.Number idFuente = null;
        NameValuePairs nvpFuente = null;
        SequenceImpl seqFuente = null;
        
        // Asignación para Fuente
        seqFuente = new SequenceImpl("FUENTE_SEQ", getDBTransaction());
        idFuente = seqFuente.getSequenceNumber();
        
        nvpFuente = new NameValuePairs();
        nvpFuente.setAttribute("Id", idFuente);
        nvpFuente.setAttribute("IdLineaCredito", idLineaCredito);
        nvpFuente.setAttribute("IdLineaPasiva", idLineaPasiva);
        nvpFuente.setAttribute("Descripcion", nombre);
        nvpFuente.setAttribute("FechaObtenido", fechaObtenido);
        nvpFuente.setAttribute("MontoAsignado", montoAsignado);
        nvpFuente.setAttribute("Comentario", comentario);
        nvpFuente.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
        nvpFuente.setAttribute("BanEstatus", BANESTATUS_TRUE);
        
        fuenteRow = this.createAndInitRow(nvpFuente);
                
        getDBTransaction().commit();
    }
    
    public void modificarFuente(Long idFuente, String idLineaPasiva, String nombre, Timestamp fechaObtenido,
                                BigDecimal montoAsignado, String comentario) {
        logger.log(ADFLogger.WARNING, "Inside modificarFuente. idFuente: " + idFuente + " idLineaPasiva: " + idLineaPasiva + 
                                      " nombre: " + nombre + " fechaObtenido: " + fechaObtenido + " montoAsignado: " + 
                                      montoAsignado + " comentario: " + comentario);
        Row fuenteRow = this.getRow(new Key(new Object[] {idFuente}));
        
        if(fuenteRow != null) {
            
            fuenteRow.setAttribute("IdLineaPasiva", idLineaPasiva);
            fuenteRow.setAttribute("Descripcion", nombre);
            fuenteRow.setAttribute("FechaObtenido", fechaObtenido);
            fuenteRow.setAttribute("MontoAsignado", montoAsignado);
            fuenteRow.setAttribute("Comentario", comentario);
            getDBTransaction().commit();
        }   
    }
    
    /**
     * Realiza la validacion de  los datos de una nueva Fuente a Asignar con el conjunto de Fuentes que ya fueron 
     * asignadas a la linea de credito
     * @param idLineaPasiva contiene Identificador de Linea Pasiva
     * @param nombreFuente contiene nombre o descripcion de la Fuente.
     * @return devuelve valor booleano, TRUE si los datos de la Fuente son validos o FALSE en caso contrario
     */
    public Boolean validarFuenteExistente(String idLineaPasiva,
                                          String nombreFuente){
        
        Boolean esValida = Boolean.TRUE;
        
        logger.warning("Id de Linea pasiva a validar: " + idLineaPasiva);
        logger.warning("Nombre de la Fuente a validar: " + nombreFuente);
        
        if(idLineaPasiva != null &&
           nombreFuente != null){
            
            RowSetIterator iter = createRowSetIterator(null);
            if(iter != null){
                
                FuenteVORowImpl row = null;
                
                iter.reset();
                while(iter.hasNext()){
                    row = (FuenteVORowImpl) iter.next();
                    
                    logger.warning("Registro Id: " + row.getId() + 
                                   ". Id de Linea Pasiva: " + row.getIdLineaPasiva() + 
                                   ". Descripcion Fuente: " + row.getDescripcion());
                    
                    if(row != null &&
                       row.getIdLineaPasiva() != null &&
                       row.getDescripcion() != null){
                        
                        if(row.getIdLineaPasiva().equals(idLineaPasiva) &&
                           row.getDescripcion().equals(nombreFuente)){
                            
                            logger.warning("Los datos de la fuente ya existen y fueron asignados a la linea de credito");
                            esValida = Boolean.FALSE;
                            break;
                        }
                    }
                }
                iter.closeRowSetIterator();
            }
        }
        
        logger.warning("Resultado de la validacion: " + esValida);
        
        return esValida;
    }
}

