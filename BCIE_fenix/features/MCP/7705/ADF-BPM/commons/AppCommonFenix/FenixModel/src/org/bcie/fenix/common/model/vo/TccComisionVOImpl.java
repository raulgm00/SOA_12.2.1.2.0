package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.RoundingMode;

import oracle.jbo.domain.Timestamp;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;

import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;

import javax.xml.datatype.DatatypeConfigurationException;
import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.atributobo.Accion;
import org.bcie.catalogobo.Catalogo;
import org.bcie.comisionbo.CatalogoComision;
import org.bcie.comisionbo.Comision;
import org.bcie.comisionbo.MontoBase;
import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_FALSE;
import static org.bcie.fenix.common.model.FenixModelConstants.ES_COMISION_COMPARTIDA;
import static org.bcie.fenix.common.model.FenixModelConstants.NO_ES_COMISION_COMPARTIDA;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.TccComisionVO;
import org.bcie.matriztccbo.Tipo;
import org.bcie.matriztccmo.ActualizarTCCRequestType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 10 16:17:27 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TccComisionVOImpl extends ViewObjectImpl implements TccComisionVO {
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(TccCondicionVOImpl.class);
    
    /**
     * Define nombre de view criteria para realizar busqueda por Id de Comision
     */
    public static final String BUSCAR_POR_ID_VC = "ComisionByIdVC";
    
    private static final Integer ES_CREADO_EN_REG_COMISION= 1;
    /**
     * This is the default constructor (do not remove).
     */
    public TccComisionVOImpl() {
    }

    /**
     * Returns the variable value for pId.
     * @return variable value for pId
     */
    public Long getpId() {
        return (Long) ensureVariableManager().getVariableValue("pId");
    }

    /**
     * Sets <code>value</code> for variable pId.
     * @param value value to bind as pId
     */
    public void setpId(Long value) {
        ensureVariableManager().setVariableValue("pId", value);
    }
    
    /**
     * Ejecuta la busqueda de Comision por Id
     * @param id contiene clave primaria del registro
     */
    
    public void crearRowComision(Long idOperacion){
        logger.log(ADFLogger.WARNING, "INTO crearRowComision");
        this.clearCache(); // Limpiamos VO
        oracle.jbo.domain.Number idComision = null;
        SequenceImpl seqComision = null;
        Row rowNuevo = null;
                
        // Asignación de variables      
        seqComision = new SequenceImpl("COMISION_SEQ", getDBTransaction());
        idComision = seqComision.getSequenceNumber();
        
        Row row = this.createRow();
        row.setAttribute("IdTcaComision", FenixModelConstants.ID_TCA_COMISION);
        row.setAttribute("Id", idComision.longValue());
        row.setAttribute("IdOperacion", idOperacion);
        row.setAttribute("Descripcion", FenixModelConstants.DESCRIPCION_COMISION);
        this.insertRowAtRangeIndex(0, row); // Insertamos row en VO
        this.setCurrentRow(row); 
        logger.log(ADFLogger.WARNING, "Valor :::" + row.getAttribute("Id"));
    }
    
    public Map agregarComisionPrepago() {
        logger.log(ADFLogger.WARNING, "INTO agregarComisionPrepago.");
        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl) getApplicationModule(); 
        
        TccComisionVORowImpl row = null;
        row = (TccComisionVORowImpl) getCurrentRow();
        Timestamp fechaValor = null;
        Timestamp fechaInicioCapital = null;

        Map<String, Object> atributosComisionMap = new HashMap<String, Object>();
        oracle.jbo.domain.Number idComision = new oracle.jbo.domain.Number();
        Boolean isInformacionRequerida = Boolean.FALSE;
        Boolean isValidaFechas = Boolean.TRUE;

        // Asignación de variables
        //        seqComision = new SequenceImpl("COMISION_SEQ", getDBTransaction());
        //        idComision = seqComision.getSequenceNumber();
        logger.log(ADFLogger.WARNING, "Valor id tca Comision :" + row.getId());
        try {
            idComision = new oracle.jbo.domain.Number(row.getId());
            if (row != null) {
            logger.warning("Comision compartida: "+ row.getComisionCompartida());
            logger.warning("Momento de cobro: "+ row.getIdTcaMomentoCobro());
            logger.warning("TcaTipo tasa: "+ row.getIdTcaTipoTasa());
            logger.warning("Tipo moneda: "+ row.getIdTcaMoneda());
            logger.warning("Monto comision: "+ row.getMontoComision());
            logger.warning("Base calculo: "+ row.getIdTcaBaseCalculo());
            logger.warning("Frecuencia pago : "+ row.getFrecuenciaPago());
            logger.warning("Tipo Frecuencia Pago: "+ row.getIdTcaTipoFrecuencia());
            logger.warning("Fondo que aplica: "+ row.getFondoAplicaVO());
            logger.warning("Fecha de vencimiento: "+ row.getFechaVencimiento());
            logger.warning("Fecha vigencia de prestamo: "+ row.getFechaValor());
            logger.warning("Fecha inicio capital: "+ row.getFechaInicioCapital());
                
            
                if (null != row.getComisionCompartida() && null != row.getIdTcaMomentoCobro() &&
                    null != row.getIdTcaTipoTasa() && null != row.getMontoComision() && null != row.getIdTcaMoneda() &&
                    null != row.getIdTcaBaseCalculo() && null != row.getFrecuenciaPago() &&
                    null != row.getIdTcaTipoFrecuencia() && null != row.getFondoAplicaVO() &&
                    null != row.getFechaVencimiento()) {

                    //Se agrega la fecha de FLEXCUBE cuando la Fecha valor es nula.
                    logger.log(ADFLogger.WARNING, "Validar si las fechas Son nulas.");
                    if (null == row.getFechaValor()) {
                        if(null != fenixAM.obtenerFechaFlexcube()){
                        fechaValor = fenixAM.obtenerFechaFlexcube();
                        if(fechaValor.compareTo(row.getFechaVencimiento()) == -1){
                        row.setAttribute("FechaValor", fechaValor);
                        }else{
                            logger.log(ADFLogger.WARNING, "La fecha de vigencia debe ser menor a la fecha de vencimiento");
                        }
                        logger.log(ADFLogger.WARNING, "Fecha obtenida de FLEXCUBE" + fechaValor);
                        }else{
                            logger.log(ADFLogger.WARNING, "El valor de la fecha FLEXCUBE es nula.");
                        }
                    }

                    //Si la fecha Inicio de capital es nula se le asigna la fecha valor mas un plazo
                    if (null == row.getFechaInicioCapital() && null != row.getFechaValor()) {
                        fechaInicioCapital = new oracle.jbo.domain.Timestamp (row.getFechaValor());

                        Calendar c1 = GregorianCalendar.getInstance();
                        c1.setTimeInMillis(fechaInicioCapital.getTime());
                        //Se asigna el plazo a la fecha inicio de capital de acuerdo tipo de la frecuencia
                        switch (row.getIdTcaTipoFrecuencia()) {
                        case 1:
                            c1.add(Calendar.DATE, row.getFrecuenciaPago());
                            fechaInicioCapital = new Timestamp(c1.getTimeInMillis());
                            break;
                        case 2:
                            c1.add(Calendar.MONTH, row.getFrecuenciaPago());
                            fechaInicioCapital = new Timestamp(c1.getTimeInMillis());
                            break;
                        case 3:
                            c1.add(Calendar.YEAR, row.getFrecuenciaPago());
                            fechaInicioCapital = new Timestamp(c1.getTimeInMillis());
                            break;
                        default:
                            logger.log(ADFLogger.WARNING,
                                       "No hay frecuencia que agregar a la fecha inicio de capital.");
                            break;
                        }
                        if((fechaInicioCapital.compareTo(row.getFechaVencimiento()) == -1) ||
                           (fechaInicioCapital.compareTo(row.getFechaVencimiento()) == 0)){
                               row.setAttribute("FechaInicioCapital", fechaInicioCapital);
                        }else{
                            logger.log(ADFLogger.WARNING, "La fecah Inicio de capital debe ser menor o igual que la fecha de vencimiento");
                        }
                        
                    }else{
                        logger.log(ADFLogger.WARNING, "El valor de la fechaValor es nula");
                    }
                    logger.log(ADFLogger.WARNING, "La fecha Valor es :" + row.getFechaValor());
                    logger.log(ADFLogger.WARNING, "La fecha inicio de Capital es :" + row.getFechaInicioCapital());
                    logger.log(ADFLogger.WARNING, "La fecha de vencimiento es :" + row.getFechaVencimiento());
                    logger.log(ADFLogger.WARNING, "Valor id tca Comision :" + row.getIdTcaComision());
                    //row.setAttribute("Id", idComision);
                    if (null == row.getFechaValor() || null == row.getFechaInicioCapital()) {
                        logger.log(ADFLogger.WARNING, "La fechaValor o la fechaInicioCapital son nulas.");
                        isValidaFechas = Boolean.FALSE;
                    } else {
                        row.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
                        row.setAttribute("BanEstatus", FenixModelConstants.BANESTATUS_TRUE);
                        row.setAttribute("BanSugerida", FenixModelConstants.BANSUGERIDA_DEFAULT);
                        row.setAttribute("IdTcaEstadoTcc", FenixModelConstants.ID_TCA_ESTADO_TCC);
                        isInformacionRequerida = Boolean.TRUE;
                        getDBTransaction().commit();
                        // Re-ejecutamos el query debido a que se creó un nuevo registro
                        //this.executeQuery();
                    }
                } else {
                    logger.log(ADFLogger.WARNING, "Se requiere llenar los valores requeridos");
                    isInformacionRequerida = Boolean.FALSE;
                }
            } else {
                logger.log(ADFLogger.WARNING, "No existe registro de comision de prepago.");
            }
            atributosComisionMap.put("idComision", idComision.longValue());
            atributosComisionMap.put("isInformacionRequerida", isInformacionRequerida);
            atributosComisionMap.put("isValidaFechas", isValidaFechas);
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error en agregarComisionPrepago." + e.getClass() + "." + e.getMessage());
            isInformacionRequerida = Boolean.FALSE;
            e.printStackTrace();
            try {
                getDBTransaction().rollback();
            } catch (Exception ex) {
                logger.severe("Error al realizar Rollback al fallar Commit", ex);
            }
        }
        return atributosComisionMap;
    }
    
    public Boolean actualizarComisionPrepago(Long idComision){
        logger.log(ADFLogger.WARNING, "Into actualizarComisionPrepago.");
        
        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl) getApplicationModule();
        TccComisionVORowImpl row = null;
        
        Timestamp fechaValor = null;
        Timestamp fechaInicioCapital = null;
        Boolean isInformacionRequerida = Boolean.FALSE;
        
        row = (TccComisionVORowImpl)this.getRow(new Key(new Object[] {idComision}));
        logger.log(ADFLogger.WARNING, "Valor ID de comision prepago." + row.getId());
        try{
        if(row != null){
            logger.warning("Comision compartida: "+ row.getComisionCompartida());
            logger.warning("Momento de cobro: "+ row.getIdTcaMomentoCobro());
            logger.warning("TcaTipo tasa: "+ row.getIdTcaTipoTasa());
            logger.warning("Tipo moneda: "+ row.getIdTcaMoneda());
            logger.warning("Monto comision: "+ row.getMontoComision());
            logger.warning("Base calculo: "+ row.getIdTcaBaseCalculo());
            logger.warning("Frecuencia pago : "+ row.getFrecuenciaPago());
            logger.warning("Tipo Frecuencia Pago: "+ row.getIdTcaTipoFrecuencia());
            logger.warning("Fondo que aplica: "+ row.getFondoAplicaVO());
            logger.warning("Fecha de vencimiento: "+ row.getFechaVencimiento());
            logger.warning("Fecha vigencia de prestamo: "+ row.getFechaValor());
            logger.warning("Fecha inicio capital: "+ row.getFechaInicioCapital());
            
            if (null != row.getComisionCompartida() && null != row.getIdTcaMomentoCobro() &&
                null != row.getIdTcaTipoTasa() && null != row.getMontoComision() && null != row.getIdTcaMoneda() &&
                null != row.getIdTcaBaseCalculo() && null != row.getFrecuenciaPago() &&
                null != row.getIdTcaTipoFrecuencia() && null != row.getFondoAplicaVO() &&
                null != row.getFechaVencimiento()) {

                //Se agrega la fecha de FLEXCUBE cuando la Fecha valor es nula.
                logger.log(ADFLogger.WARNING, "Validar si las fechas Son nulas.");
                if (null == row.getFechaValor()) {
                    if(null != fenixAM.obtenerFechaFlexcube()){
                    fechaValor = fenixAM.obtenerFechaFlexcube();
                    row.setAttribute("FechaValor", fechaValor);
                    logger.log(ADFLogger.WARNING, "Fecha obtenida de FLEXCUBE" + fechaValor);
                    }else{
                        logger.log(ADFLogger.WARNING, "El valor de la fecha FLEXCUBE es nula.");
                    }
                }

                //Si la fecha Inicio de capital es nula se le asigna la fecha valor mas un plazo
                if (null == row.getFechaInicioCapital()) {
                    fechaInicioCapital = new oracle.jbo.domain.Timestamp (row.getFechaValor());

                    Calendar c1 = GregorianCalendar.getInstance();
                    c1.setTimeInMillis(fechaInicioCapital.getTime());
                    //Se asigna el plazo a la fecha inicio de capital de acuerdo tipo de la frecuencia
                    switch (row.getIdTcaTipoFrecuencia()) {
                    case 1:
                        c1.add(Calendar.DATE, row.getFrecuenciaPago());
                        fechaInicioCapital = new Timestamp(c1.getTimeInMillis());
                        break;
                    case 2:
                        c1.add(Calendar.MONTH, row.getFrecuenciaPago());
                        fechaInicioCapital = new Timestamp(c1.getTimeInMillis());
                        break;
                    case 3:
                        c1.add(Calendar.YEAR, row.getFrecuenciaPago());
                        fechaInicioCapital = new Timestamp(c1.getTimeInMillis());
                        break;
                    default:
                        logger.log(ADFLogger.WARNING,
                                   "No hay frecuencia que agregar a la fecha inicio de capital.");
                        break;
                    }
                    row.setAttribute("FechaInicioCapital", fechaInicioCapital);
                }
                logger.log(ADFLogger.WARNING, "La fecha Valor es :" + row.getFechaValor());
                logger.log(ADFLogger.WARNING, "La fecha inicio de Capital es :" + row.getFechaInicioCapital());
                logger.log(ADFLogger.WARNING, "La fecha de vencimiento es :" + row.getFechaVencimiento());
                logger.log(ADFLogger.WARNING, "Valor id tca Comision :" + row.getIdTcaComision());
                isInformacionRequerida = Boolean.TRUE;
                getDBTransaction().commit();
                logger.log(ADFLogger.WARNING, "Actualizacion de datos correcta..");
                // Re-ejecutamos el query debido a que se creó un nuevo registro
                //this.executeQuery();
            } else {
                logger.log(ADFLogger.WARNING, "Se requiere llenar los valores requeridos");
                isInformacionRequerida = Boolean.FALSE;
            }
        }else{
            logger.log(ADFLogger.WARNING, "Row no encontrado.");
        }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error en agregarComisionPrepago." + e.getClass() + "." + e.getMessage());
            isInformacionRequerida = Boolean.FALSE;
            e.printStackTrace();
            try {
                getDBTransaction().rollback();
            } catch (Exception ex) {
                logger.severe("Error al realizar Rollback al fallar Commit", ex);
            }
        }
        return isInformacionRequerida;
        
    }
    
    public void buscarComisionPorId(Number id){
        logger.entering(TccComisionVOImpl.class.getName(), "buscarComisionPorId", id);
        logger.warning("Entra en buscarComisionPorId");
        logger.warning("id :"+id);
        ViewCriteria viewCriteria = null;
        Row row = null;
        try{
            //Refresca VO
            executeQuery();
            if(id != null) {
                    logger.warning("ejecutar criterio de busqueda por id");
                    viewCriteria = this.getViewCriteriaManager().getViewCriteria(BUSCAR_POR_ID_VC);
                    this.ensureVariableManager().setVariableValue("pId", id.longValue());
                    this.applyViewCriteria(viewCriteria);
                    this.executeQuery();
                    
                    this.setCurrentRow(this.first());
                    row = this.getCurrentRow();
                
                if(row != null){
                    logger.warning("Asigna Current Row");
                    logger.warning("Valor Tca Comision" + row.getAttribute("IdTcaComision"));
                    logger.warning("Valor id Comision" + row.getAttribute("Id"));
                    //setCurrentRow(row);    
                }else{
                    logger.warning("No se recupero ningun registro con el id:" + id);
                }
                
            }else{
                logger.warning("El id de la comision es nula.");
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar buscarComisionPorId :", e);
        }
        
        logger.exiting(TccComisionVOImpl.class.getName(), "buscarComisionPorId");
        logger.warning("Fuera de buscarComisionPorId");
    }
    
    public Boolean buscarComisionPrepagoPorId(Long id){
        logger.entering(TccComisionVOImpl.class.getName(), "buscarComisionPrepagoPorId", id);
        
        Boolean isComision = Boolean.FALSE;
        //Refresca VO
        executeQuery();

        if(id != null) {
            Row row = this.getRow(new Key(new Object[]{id.longValue()}));
            if(row != null){
                logger.warning("Asigna Current Row");
                setCurrentRow(row);
                isComision = Boolean.TRUE;
            }else{
                logger.log(ADFLogger.WARNING, "No se encontro registros.");
                isComision = Boolean.FALSE;
            }
        }else{
            logger.log(ADFLogger.WARNING, "id de la comision es nulo.");
            isComision = Boolean.FALSE;
        }
                
        logger.exiting(TccComisionVOImpl.class.getName(), "buscarComisionPrepagoPorId");
        logger.log(ADFLogger.WARNING, "Valor boolean comision" + isComision);
        return isComision;
    }
    /**
     * Asigna a configuracion del catalogo tipo comision al registro actual de comision
     */
    public void asignarConfigTipoComision(){
        
        TccComisionVORowImpl row = null;
        row = (TccComisionVORowImpl) getCurrentRow();
        if(row != null){
            logger.log(ADFLogger.WARNING, "Id de TccComisionVORow:" + row.getId());
            FenixAMImpl fenixAM = null;
            fenixAM = (FenixAMImpl) getApplicationModule();
            
            if(fenixAM != null){
                
                Boolean esEditableForm = null;
                Boolean esDispensaEnm = null;
                
                if(fenixAM.getTccTcaTerminoVO() != null){
                                        
                    if(row.getIdTcaComision() != null){
                        logger.log(ADFLogger.WARNING, "Valor id tca Comision..." + row.getIdTcaComision());
                        fenixAM.getTcaComisionLOV().buscarTcaComisionPorId(row.getIdTcaComision());    
                        if(fenixAM.getTcaComisionLOV().getCurrentRow() != null){
                            
                            TcaComisionLOVRowImpl tcaRow = null;
                            tcaRow = (TcaComisionLOVRowImpl) fenixAM.getTcaComisionLOV().getCurrentRow();
                            
                            if(tcaRow != null){
                                
                                if(tcaRow.getEsEditableEnFormalizacion() != null){
                                    if(tcaRow.getEsEditableEnFormalizacion().equals(new Integer(0))){
                                        logger.warning("El valor bandera de campo Es Editable en Formalizacion es negativo = 0");
                                        esEditableForm = false;
                                    }else{
                                        if(tcaRow.getEsEditableEnFormalizacion().equals(new Integer(1))){
                                            logger.warning("El valor bandera de campo Es Editable en Formalizacion es positivo = 1");
                                            esEditableForm = true;
                                        }else{
                                            logger.warning("Valor de campo Es Editable en Formalizacion no es valido");
                                        }
                                    }
                                }else{
                                    logger.warning("El valor del campo Es Editable en Formalizacion es NULL");
                                }
                                
                                
                                if(tcaRow.getSePuedeDispensar() != null){
                                    if(tcaRow.getSePuedeDispensar().equals(new Integer(0))){
                                        esDispensaEnm = false;
                                    }else{
                                        if(tcaRow.getSePuedeDispensar().equals(new Integer(1))){
                                            esDispensaEnm = true;
                                        }else{
                                            logger.warning("Valor de campo Se Puede Dispensar no es valido");
                                        }
                                    }
                                }else{
                                    logger.warning("El valor del campo Se Puede Dispensar en Enmiendas es NULL");
                                }
                            }
                        }else{
                            logger.warning("No se encontro registro de catalogo Comision");
                        }
                    }
                }
                
                if(esEditableForm != null){
                    logger.warning("Asigna configuracion de campo Es Editable en Formalizacion: " + esEditableForm);
                    row.setEditableFormalizacion(esEditableForm);    
                }
                if(esDispensaEnm != null){
                    logger.warning("Asigna configuracion de campo Es Dispensa en Enmienda: " + esDispensaEnm);
                    row.setDispensaEnmienda(esDispensaEnm);
                }
            }else{
                logger.warning("No se pudo obtener instancia de Application Module");    
            }
        }else{
            logger.warning("No hay registro actual que asignar configuracion de catalogo tcc");
        }
    }
    
    /**
     * Ejecuta la busqueda de Comision por Id
     * @param id contiene clave primaria del registro
     */
    public Boolean actualizarMonto(Long id, BigDecimal montoObtenido, Integer tipoMonto){
        logger.log(ADFLogger.WARNING,"IDOPERACION" + id+" montoObtenido"+ montoObtenido+ "TipoMonto"+tipoMonto);
        //logger.entering(TccComisionVOImpl.class.getName(), "actualizarMonto", id,montoObtenido,tipoMonto);
        Boolean retorna=Boolean.TRUE;
        BigDecimal porcentaje100 = new BigDecimal("100");
        Integer tipoMontoBase=0;
        BigDecimal montoBase=BigDecimal.ZERO;
        BigDecimal montoComision=BigDecimal.ZERO;
        BigDecimal porcentajeValor=BigDecimal.ZERO;
        //Refresca VO
        executeQuery();

        if(id != null) {
            Row row = this.getRow(new Key(new Object[]{id}));
            if(row != null){
                try{
                    porcentajeValor = (BigDecimal) row.getAttribute("PorcentajeSobreMontoBase");
                    tipoMontoBase = (Integer) row.getAttribute("IdTcaMontoBase");
                    montoBase = (BigDecimal) row.getAttribute("MontoBase");
                    if (null != tipoMontoBase && tipoMontoBase.compareTo(tipoMonto) == 0) {
                        if (null == montoBase || (null != montoBase && BigDecimal.ZERO.compareTo(montoBase) == 0)) {
                            row.setAttribute("MontoBase", montoObtenido);
                            montoBase = montoObtenido.multiply(porcentajeValor);
                            montoComision = montoBase.divide(porcentaje100);
                           BigDecimal resultado= montoComision.setScale(2, RoundingMode.CEILING);
                            logger.log(ADFLogger.WARNING,"Resultado monto" + resultado);
                            row.setAttribute("MontoComision", resultado);
                            getDBTransaction().commit();
                        }
                    }
                    logger.warning("Asigna Current Row");
                } catch (Exception e) {
                    logger.severe("Error al realizar Rollback al fallar Commit", e);
                    e.printStackTrace();
                    retorna = Boolean.FALSE;
                    try{
                        getDBTransaction().rollback();
                    }catch(Exception ex){
                        retorna = Boolean.FALSE;
                        logger.severe("Error al realizar Rollback al fallar Commit", ex);
                    }
                }
            }
        }
        logger.log(ADFLogger.WARNING,"Resultado de actualizar monto" + retorna);
        logger.exiting(TccComisionVOImpl.class.getName(), "actualizarMonto");
        return retorna;
    }
    
    public Long crearComisionEnmendada(Number idTcc, Integer idTcaEstadoTcc, Integer idTcaSubEstadoTcc) {
        logger.log(ADFLogger.TRACE, "Inside crearComisionEnmendada.");

        // Creamos una nueva Comisión Enmendada en base al idTcc enviado (debe ser un clon de él)
        oracle.jbo.domain.Number idComision = null;
        NameValuePairs nvpComision = null;
        SequenceImpl seqComision = null;
        Row rowPadre = null;
        Row rowEnmendado = null;
        
        // Obtenemos row padre
        rowPadre = this.getRow(new Key(new Object[]{idTcc.longValue()}));
        
        // Asignamos todos los atributos del row padre al row enmendado 
        // (excepto BanEstatus, FechaRegistro, Id, IdTcaEstadoTcc, IdTcaSubEstadoTcc y IdComisionEnmendada)
        if(rowPadre != null) {
            
            seqComision = new SequenceImpl("COMISION_SEQ", getDBTransaction());
            idComision = seqComision.getSequenceNumber();
            nvpComision = new NameValuePairs();
            
            for(String nombreAtributo : rowPadre.getAttributeNames()) {
                // Clonamos row
                nvpComision.setAttribute(nombreAtributo, rowPadre.getAttribute(nombreAtributo));
            }
            
            // Sobreescribimos atributos diferentes, específicos al enmendado
            nvpComision.setAttribute("BanEstatus", BANESTATUS_FALSE);
            nvpComision.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            nvpComision.setAttribute("Id", idComision);
            
            if(idTcaEstadoTcc != null) // Si el estado es null, le dejamos el mismo que el del padre
                nvpComision.setAttribute("IdTcaEstadoTcc", idTcaEstadoTcc);
            
            nvpComision.setAttribute("IdTcaSubEstadoTcc", idTcaSubEstadoTcc);
            nvpComision.setAttribute("IdComisionEnmendada", idTcc);
            
            rowEnmendado = this.createAndInitRow(nvpComision);        
            getDBTransaction().commit();        
            
            // Re-ejecutamos el query debido a que se creó un nuevo registro
            this.executeQuery();
        }
        
        // Regresamos el id de la Comisión Enmendada
        if(rowEnmendado != null)
            return (Long)rowEnmendado.getAttribute("Id");
        else
            return null;
    }
    
    public Long crearComision(Long idOperacion, String nombreComision, Integer idTcaComision, Integer idTcaEstadoTcc, 
                               Integer idTcaSubEstadoTcc, Integer banEstatus) {
        logger.log(ADFLogger.TRACE, "Inside crearComision.");
        oracle.jbo.domain.Number idComision = null;
        NameValuePairs nvpComision = null;
        SequenceImpl seqComision = null;
        Row rowNuevo = null;
                
        // Asignación de variables      
        seqComision = new SequenceImpl("COMISION_SEQ", getDBTransaction());
        idComision = seqComision.getSequenceNumber();
        nvpComision = new NameValuePairs();
                
        // Creamos un nuevo Termino en base a los parámetros enviados
        nvpComision.setAttribute("BanEstatus", banEstatus);
        nvpComision.setAttribute("BanSugerida", BANESTATUS_FALSE);
        nvpComision.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
        nvpComision.setAttribute("Id", idComision);
        nvpComision.setAttribute("IdOperacion", idOperacion);
        nvpComision.setAttribute("IdTcaEstadoTcc", idTcaEstadoTcc);
        nvpComision.setAttribute("IdTcaSubEstadoTcc", idTcaSubEstadoTcc);
        nvpComision.setAttribute("IdTcaComision", idTcaComision);
        nvpComision.setAttribute("Nombre", nombreComision);

        rowNuevo = this.createAndInitRow(nvpComision);        
        getDBTransaction().commit();        
        
        // Re-ejecutamos el query debido a que se creó un nuevo registro
        this.executeQuery();
        
        // Regresamos el id del nuevo Término
        if(rowNuevo != null)
            return Long.valueOf(rowNuevo.getAttribute("Id").toString());
        else
            return null;
    }
    
    public Long crearNuevaComisionEnRegistro(Long idOperacion, String nombreComision, Integer idTcaComision, Integer idTcaEstadoTcc, 
                               Integer idTcaSubEstadoTcc, Integer banEstatus) {
        logger.log(ADFLogger.TRACE, "Inside crearNuevaComisionEnRegistro.");
        oracle.jbo.domain.Number idComision = null;
        NameValuePairs nvpComision = null;
        SequenceImpl seqComision = null;
        Row rowNuevo = null;
        try{
            seqComision = new SequenceImpl("COMISION_SEQ", getDBTransaction());
            idComision = seqComision.getSequenceNumber();
            nvpComision = new NameValuePairs();
                    
            nvpComision.setAttribute("BanEstatus", banEstatus);
            nvpComision.setAttribute("BanSugerida", BANESTATUS_FALSE);
            nvpComision.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            nvpComision.setAttribute("Id", idComision);
            nvpComision.setAttribute("IdOperacion", idOperacion);
            nvpComision.setAttribute("IdTcaEstadoTcc", idTcaEstadoTcc);
            nvpComision.setAttribute("IdTcaSubEstadoTcc", idTcaSubEstadoTcc);
            nvpComision.setAttribute("IdTcaComision", idTcaComision);
            nvpComision.setAttribute("Nombre", nombreComision);
            nvpComision.setAttribute("EsCreadoEnRegComision", ES_CREADO_EN_REG_COMISION);

            rowNuevo = this.createAndInitRow(nvpComision);        
            getDBTransaction().commit();        
            
            // Re-ejecutamos el query debido a que se creó un nuevo registro
            this.executeQuery();
            
        }catch(Exception e){
            getDBTransaction().rollback();
            logger.warning("Error en crearNuevaComisionEnRegistro.", e);
        }
        
        if(rowNuevo != null)
            return Long.valueOf(rowNuevo.getAttribute("Id").toString());
        else
            return null;
    }
    
    public void mappearComisionRequestType(ActualizarTCCRequestType request, Accion accion){
        logger.warning("Entra a metodo mappearComisionRequestType"); 
        TccComisionVORowImpl row = (TccComisionVORowImpl) getCurrentRow();
        Comision comision = new Comision();
        
        request.setTipo(Tipo.COMISION);
        
        if(null != accion)
            comision.setAccion(accion);        
        
        if(null != row){
            try{
            logger.warning("Mapeando atributos del Row a atributos del objeto Comision");
            if(null != row.getId())
                comision.setIdComision(row.getId());
            
            if(null != row.getIdOperacion())
                comision.setIdOperacion(row.getIdOperacion());
            
            if(null != row.getNombre() && !row.getNombre().equals(""))
                comision.setNombre(row.getNombre());
            
            if(null != row.getDescripcion() && !row.getDescripcion().equals(""))
                comision.setDescripcion(row.getDescripcion());
            
            if(null != row.getMontoComision())
                comision.setMontoComision(row.getMontoComision());
            
            if(null != row.getFrecuenciaPago())
                comision.setFrecuenciaPago(row.getFrecuenciaPago());
            
            if(null != row.getIdTcaFondo())
                comision.setFondo(row.getIdTcaFondo().toString());
            
            if(null != row.getCodigoDesembolso())
                comision.setCodigoDesembolso(row.getCodigoDesembolso());
            
            if(null != row.getNumeroTesoreria() && !row.getNumeroTesoreria().equals(""))
                comision.setNumeroTesoreria(row.getNumeroTesoreria());
            
            if(null != row.getCodigoContrato() && !row.getCodigoContrato().equals(""))
                comision.setCodigoContrato(row.getCodigoContrato());
            
            if(null != row.getResponsableComision() && !row.getResponsableComision().equals(""))
                comision.setResponsableComision(row.getResponsableComision());
            
            if(null != row.getIdTcaComision()){            
                CatalogoComision catalogoComision = new CatalogoComision();
                catalogoComision.setIdCatComision(row.getIdTcaComision().longValue());
                comision.setTipoComision(catalogoComision);
            }
            
            if(null != row.getIdTcaMoneda())
                comision.setMoneda(cargarIdCatalogo(row.getIdTcaMoneda().longValue()));
            
            MontoBase montoBase = new MontoBase();
            if(null != row.getIdTcaMontoBase())                
                montoBase.setIdMontoBase(row.getIdTcaMontoBase());
            if(null != row.getMontoBase())
                montoBase.setValorMontoBase(row.getMontoBase().intValue());
            if(null != row.getPorcentajeSobreMontoBase())
                montoBase.setPorcentajeMontoBase(row.getPorcentajeSobreMontoBase());
            comision.setMontoBase(montoBase);
            
            if(null != row.getIdTcaTipoFrecuencia())
                comision.setTipoFrecuencia(cargarIdCatalogo(row.getIdTcaTipoFrecuencia().longValue()));
            
            if(null != row.getFechaValor()){
                logger.warning("Fecha valor : " + row.getFechaValor());
                comision.setFechaValor(obtenerFormatoFecha(row.getFechaValor().getTime()));
            }
            
            if(null != row.getFechaVencimiento())
                comision.setFechaVencimiento(obtenerFormatoFecha(row.getFechaVencimiento().getTime()));
            
            if(null != row.getFechaInicioCapital())
                comision.setFechaInicioCapital(obtenerFormatoFecha(row.getFechaInicioCapital().getTime()));
            
            if(null != row.getFechaInicioComision())
                comision.setFechaInicioComision(obtenerFormatoFecha(row.getFechaInicioComision().getTime()));
            
            if(null != row.getFechaRegistro())
                comision.setFechaRegistro(obtenerFormatoFecha(row.getFechaRegistro().getTime()));
            
            if(null != row.getComisionCompartida()){
                if(row.getComisionCompartida() == ES_COMISION_COMPARTIDA){
                    comision.setComisionCompartida(Boolean.TRUE);
                }else if(row.getComisionCompartida() == NO_ES_COMISION_COMPARTIDA){
                    comision.setComisionCompartida(Boolean.FALSE);
                }
            }
            
            if(null != row.getIdTcaMomentoCobro())
                comision.setMomentoCobro(cargarIdCatalogo(row.getIdTcaMomentoCobro().longValue()));
            
            if(null != row.getIdTcaTipoTasa())
                comision.setTipoTasa(cargarIdCatalogo(row.getIdTcaTipoTasa().longValue()));
            
            if(null != row.getIdTcaBaseCalculo())
                comision.setBaseCalculo(cargarIdCatalogo(row.getIdTcaBaseCalculo().longValue()));
            
          if(null != row.getBanEstatus())
            comision.setEstado(row.getBanEstatus().intValue()==1?Boolean.TRUE:Boolean.FALSE);
          
          logger.warning("Valor del subestado seteado : " + row.getIdTcaSubEstadoTcc());
          logger.warning("Termina de pasar los valores al objeto comision");
            //Mapeo de Estados TCC
            /*
            if(row.getIdTcaEstadoTcc() != null){
                EstadoTCC estado = new EstadoTCC();
                estado.setId(new Long(row.getIdTcaEstadoTcc().toString()));
                comision.setEstadoTCC(estado);
            }
            
            if(row.getIdTcaSubEstadoTcc() != null){
                EstadoTCC estado = new EstadoTCC();
                estado.setId(new Long(row.getIdTcaSubEstadoTcc().toString()));
                comision.setSubEstadoTCC(estado);
            }
            */
            } catch (DatatypeConfigurationException e) {
                logger.warning("Error en el mapeo de los atributos de Comisión");
            }
        }else{
            logger.warning("El row de la comision para mapear la comisiom es nulo.");
        }
        request.getComision().add(comision);
        logger.warning("Finaliza metodo mappearComisionRequestType");
    }
    
    private Catalogo cargarIdCatalogo(Long id){
        logger.warning("Entra a metodo cargarIdCatalogo");
        Catalogo catalogo = new Catalogo();
        catalogo.setId(id);
        logger.warning("Termina metodo cargarIdCatalogo");
        return catalogo;
    }
    
    private XMLGregorianCalendar obtenerFormatoFecha(Long fecha) throws DatatypeConfigurationException {
        Date date = new Date(fecha);
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd");
        String stringDate = simpleDateFormat.format(date);
        logger.warning("La fecha con formato es: " + stringDate);
        return DatatypeFactory.newInstance().newXMLGregorianCalendar(stringDate);
    }
    
    /**
     * Método genérico para eliminar el current row de la VO.
     * Si falla la eliminación, hace rollback y regresa el current row al elemento que no pudo ser eliminado.
     * 
     * @author Francisco Cuevas Pineda 
     * @since 23/junio/2016
     */
    public void eliminarComisionActual() {
        logger.log(ADFLogger.WARNING, "Inside eliminarComisionActual.");
        boolean esError = false;
        Long idCurrentRow = null;
        Row currentRow = null;
        
        try {
            currentRow = this.getCurrentRow();
            if(currentRow != null) {
                idCurrentRow = (Long)currentRow.getAttribute("Id");
                currentRow.remove();
                this.getDBTransaction().commit();
            }
        }
        catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error al eliminar la Comisión actual: " + ex.getMessage());
            this.getDBTransaction().rollback();
            esError = true;
            
            throw new JboException(ex); // Mandamos excepción a pantalla
        }
        finally{
            if(esError) {
                // Regresa el current row al elemento que no pudo ser eliminado
                setCurrentRow(getRow(new Key(new Object[]{idCurrentRow}))); 
            }
        }
    }
    /**
     * Metodo que actualiza el subestado de la comision.
     * @param idComision
     * @param idTcaSubEstadoTcc
     * @return
     */
    public Boolean actualizarSubEstadoComision(Long idComision, Integer idTcaSubEstadoTcc){
        logger.warning("Entra en actualizarSubEstadoComision.");
        TccComisionVORowImpl row = null;
        ViewCriteria viewCriteria = null;
        Boolean esActualizada = Boolean.FALSE;
        try{
            viewCriteria = this.getViewCriteriaManager().getViewCriteria(BUSCAR_POR_ID_VC);
            this.ensureVariableManager().setVariableValue("pId", idComision);
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            
            this.setCurrentRow(this.first());

            row = (TccComisionVORowImpl)this.getCurrentRow();
            if(null != row){
                logger.warning("Id de la comision : " + row.getId());
                logger.warning("Subestado TCC : " + idTcaSubEstadoTcc);
                row.setAttribute("IdTcaSubEstadoTcc", idTcaSubEstadoTcc);
                this.getDBTransaction().commit();
                esActualizada = Boolean.TRUE;
            }else{
                logger.warning("No se encontro registro con el id de comision.");
            }
        }catch(Exception e){
            this.getDBTransaction().rollback();
            logger.warning("Error en actualizarSubEstadoComision.", e);
        }
        logger.warning("Actulizacion de la comision : " + esActualizada);
        return esActualizada;
    }
    /**
     * Metodo que actualiza el Estado de la comision y cambia el Ban estatus a uno.
     * @param idComision
     * @param idTcaSubEstadoTcc
     * @return
     */
    public Boolean actualizarEstadoComision(Long idComision, Integer idTcaEstadoTcc){
        logger.warning("Entra en actualizarEstadoComision.");
        TccComisionVORowImpl row = null;
        ViewCriteria viewCriteria = null;
        Boolean esActualizada = Boolean.FALSE;
        try{
            
            viewCriteria = this.getViewCriteriaManager().getViewCriteria(BUSCAR_POR_ID_VC);
            this.ensureVariableManager().setVariableValue("pId", idComision);
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();

            this.setCurrentRow(this.first());

            row = (TccComisionVORowImpl) this.getCurrentRow();
            if(null != row){
                logger.warning("Id de la comision : " + row.getId());
                logger.warning("idTcaEstadoTcc : " + idTcaEstadoTcc);
                row.setAttribute("IdTcaEstadoTcc", idTcaEstadoTcc);
                row.setAttribute("BanEstatus", FenixModelConstants.BANESTATUS_TRUE);
                this.getDBTransaction().commit();
                esActualizada = Boolean.TRUE;
            }else{
                logger.warning("No se encontro registro con el id de comision.");
            }
        }catch(Exception e){
            this.getDBTransaction().rollback();
            logger.warning("Error en actualizarEstadoComision.", e);
        }
        logger.warning("Actulizacion de la comision : " + esActualizada);
        return esActualizada;
    }
    /**
     * Metod que elimina las comisiones con estado Nueva al 
     * cancelar el proceso de registrar comision.
     */
    public void eliminarComisionEstadoNueva(Long idComision) {
        logger.warning("Entra en eliminarComisionEstadoNueva.");
        boolean esError = false;
        Long idCurrentRow = null;
        Row currentRow = null;
        ViewCriteria viewCriteria = null;
        
        try {
            viewCriteria = this.getViewCriteriaManager().getViewCriteria(BUSCAR_POR_ID_VC);
            this.ensureVariableManager().setVariableValue("pId", idComision);
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            
            this.setCurrentRow(this.first());

            currentRow = this.getCurrentRow();
            if(currentRow != null) {
                idCurrentRow = (Long)currentRow.getAttribute("Id");
                logger.warning("idCurrentRow : " + idCurrentRow);
                currentRow.remove();
                this.getDBTransaction().commit();
            }else{
                logger.warning("No se recupero el row de la comision.");
            }
        }catch(Exception ex){
            logger.warning("Error al eliminar la Comisión : " + ex);
            this.getDBTransaction().rollback();
            esError = true;
            
            throw new JboException(ex.getMessage()); // Mandamos excepción a pantalla
        }finally{
            if(esError){
                // Regresa el current row al elemento que no pudo ser eliminado
                setCurrentRow(getRow(new Key(new Object[]{idCurrentRow}))); 
            }
            this.removeApplyViewCriteriaName(BUSCAR_POR_ID_VC);
        }
    }
}

