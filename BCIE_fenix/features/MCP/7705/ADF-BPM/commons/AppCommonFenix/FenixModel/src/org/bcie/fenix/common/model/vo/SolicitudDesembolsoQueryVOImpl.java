package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.SolicitudDesembolsoQueryVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Aug 18 19:19:02 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SolicitudDesembolsoQueryVOImpl extends ViewObjectImpl implements SolicitudDesembolsoQueryVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public SolicitudDesembolsoQueryVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean consultarVerificarAsignacionRecursos(Long idSolicitud){
        logger.warning("Inicia metodo consultarVerificarAsignacionRecursos en SolicitudDesembolsoQueryVO");
        Boolean respuesta = Boolean.FALSE;
        Row filaRecuperada = null;
        
        logger.warning("Valor idSolicitud recibido: " + idSolicitud);
        try {
            if (idSolicitud == null) {
                respuesta = Boolean.FALSE;
            } else {
                ViewCriteria criteria =
                    this.getViewCriteriaManager().getViewCriteria("SolicitudDesembolsoQueryVOCriteriaByIdSolicitud");
                criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                logger.warning("Registros de Solicitud encontrados: " + getEstimatedRowCount());

                if (getEstimatedRowCount() > 0) {
                    setCurrentRow(first());
                    filaRecuperada = this.getCurrentRow();
                    logger.warning("Valor idSolicitud obtenido del viewCriteria: " +
                                   filaRecuperada.getAttribute("Id"));
                    logger.warning("Valor RequiereValidacionRecExt obtenido del viewCriteria: " +
                                   filaRecuperada.getAttribute("RequiereValidacionRecExt"));
                    if (filaRecuperada.getAttribute("RequiereValidacionRecExt") != null) {
                        Integer requiereValidacionRecExt =
                            Integer.valueOf(filaRecuperada.getAttribute("RequiereValidacionRecExt").toString());
                        if (requiereValidacionRecExt.compareTo(Integer.valueOf(1)) == 0)
                            respuesta = Boolean.TRUE;
                    }
                }
            }
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error en consultarVerificarAsignacionRecursos ", e);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("SolicitudDesembolsoQueryVOCriteriaByIdSolicitud");
        }
        
        logger.warning("Valor de respuesta del metodo: " + respuesta);
        logger.warning("Finaliza metodo consultarVerificarAsignacionRecursos en SolicitudDesembolsoQueryVO");
        return respuesta;
    }


    /**
     * Returns the variable value for pIdSolicitud.
     * @return variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("pIdSolicitud", value);
    }
    
    public Timestamp fechaSolicitud(Long idSolicitud){
        Timestamp respuesta= null;
        Row row= null;
            Row filaRecuperada = null;
            
            logger.warning("Valor idSolicitud recibido: " + idSolicitud);
            try {
                if (null!=idSolicitud) {
                    ViewCriteria criteria =
                        this.getViewCriteriaManager().getViewCriteria("SolicitudDesembolsoQueryVOCriteriaByIdSolicitud");
                    criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
                    this.applyViewCriteria(criteria);
                    this.executeQuery();

                    logger.warning("Registros de Solicitud encontrados: " + getEstimatedRowCount());

                    if (getEstimatedRowCount() > 0) {
                        setCurrentRow(first());
                        row  = this.getCurrentRow();
                        logger.warning("Valor idSolicitud obtenido del viewCriteria: " +
                                       row.getAttribute("Id"));
                        logger.warning("Valor FechaSolicitud obtenido del viewCriteria: " +
                                       row.getAttribute("FechaSolicitud"));
                        if (row.getAttribute("FechaSolicitud") != null) {
                        respuesta=(Timestamp)row.getAttribute("FechaSolicitud");   
                    }
                    }
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "Error en consultarVerificarAsignacionRecursos ", e);
            } finally {
                //This takes care of removing the applied VC.
                this.getViewCriteriaManager().removeApplyViewCriteriaName("SolicitudDesembolsoQueryVOCriteriaByIdSolicitud");
            }
        return respuesta;
        } 
}

