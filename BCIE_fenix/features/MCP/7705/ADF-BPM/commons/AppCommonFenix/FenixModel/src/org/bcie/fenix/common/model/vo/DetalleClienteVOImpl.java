package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.clienteservice.Cliente12BndQSService;
import com.bcie.xmlns.clienteservice.ClientePT;

import java.math.BigDecimal;

import java.util.Date;

import java.util.GregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.clientebo.Cliente;
import org.bcie.clientemo.ActualizarClienteRequestType;
import org.bcie.clientemo.ActualizarClienteResponseType;
import org.bcie.clientemo.ConsultarClienteResponseType;
import org.bcie.clientemo.ConsultarClientesByIdClienteRequestType;
import org.bcie.clientemo.CrearClienteDefinitivoRequestType;
import org.bcie.clientemo.CrearClienteDefinitivoResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DetalleClienteVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 26 14:36:12 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DetalleClienteVOImpl
  extends ViewObjectImpl implements DetalleClienteVO
{
  private static ADFLogger logger = null;
  private static String ACTUALIZAR_CLIENTE_WS = "Actualizar Cliente";
  private static String CREAR_CLIENTE_DEFINITIVO_WS = "Crear Cliente Definitivo";

  private FenixAMImpl fenixAM;
  
  /**
   * This is the default constructor (do not remove).
   */
  public DetalleClienteVOImpl()
  {
    if (logger == null) {
        logger = ADFLogger.createADFLogger(this.getClass());
    }
  }
  
  public void actualizarCliente()
  {
    try
    {
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

        Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
        ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
        
        ActualizarClienteRequestType requestActClie = new ActualizarClienteRequestType();
        
        DetalleClienteVORowImpl rowCliente = (DetalleClienteVORowImpl)this.getRowAtRangeIndex(0);
        Number idCliente = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.ID);
        String sRazonSocial = (String)rowCliente.getAttribute(DetalleClienteVORowImpl.RAZONSOCIAL);
        Number nTipoPersona = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.TIPOPERSONA);
        Number nSector = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.SECTOR);
        Number nPais = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.PAIS);
        Number nDiaPago = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.DIAPAGO);
        Number nOficina = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.OFICINA);
        String sAbreviatura = (String)rowCliente.getAttribute(DetalleClienteVORowImpl.ABREVIATURA);
        Number nTipoCliente = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.TIPOCLIENTE);
        Number nTipoInstitucion = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.TIPOINSTITUCION);
        Number nGrupoEconomico = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.GRUPOECONOMICO);
        String sNumeroIdentificacion = (String)rowCliente.getAttribute(DetalleClienteVORowImpl.NUMEROIDENTIFICACION);   
        Boolean nReqEnvioAvisoCobroAut = (Boolean)rowCliente.getAttribute(DetalleClienteVORowImpl.REQENVIOAVISOCOBROAUT);
        String sBicCode = (String)rowCliente.getAttribute(DetalleClienteVORowImpl.BICCODE);
        String sDireccion = (String)rowCliente.getAttribute(DetalleClienteVORowImpl.DIRECCION);
        Cliente clienteReq  = new  Cliente();        
      
        clienteReq.setIdCliente(idCliente==null?null:idCliente.longValue());
        clienteReq.setAbreviatura(sAbreviatura);
        clienteReq.setRazonSocial(sRazonSocial);
        clienteReq.setNumeroIdentificacion(sNumeroIdentificacion);
        clienteReq.setTipoPersona(getCatalogoFromNumber(nTipoPersona));
        clienteReq.setSector(getCatalogoFromNumber(nSector));
        clienteReq.setPais(getCatalogoFromNumber(nPais));
        clienteReq.setDiaPago(nDiaPago==null?null:nDiaPago.intValue());
        clienteReq.setOficina(getCatalogoFromNumber(nOficina));
        Catalogo catalogo = new Catalogo();
        catalogo.setId(nTipoCliente != null ? nTipoCliente.longValue() : null);
        clienteReq.setTipoCliente(catalogo);
        clienteReq.setTipoInstitucion(getCatalogoFromNumber(nTipoInstitucion));
        clienteReq.setGrupoEconomico(getCatalogoFromNumber(nGrupoEconomico));
          
        if (nReqEnvioAvisoCobroAut != null) {
            clienteReq.setRequiereEnvioAutomatico(nReqEnvioAvisoCobroAut ? BigDecimal.ONE : BigDecimal.ZERO);
        } else {
            clienteReq.setRequiereEnvioAutomatico(BigDecimal.ZERO);
        }
        clienteReq.setBicCode(sBicCode);
        clienteReq.setDireccion(sDireccion);
          
        requestActClie.setCliente(clienteReq);
      
        Date horaInicio = ModelUtils.logStartWS(logger, requestActClie, ACTUALIZAR_CLIENTE_WS);
          ActualizarClienteResponseType  responseActClie= clientePT.actualizarCliente(requestActClie);
        ModelUtils.logEndWS(logger, responseActClie, ACTUALIZAR_CLIENTE_WS, horaInicio);
        
        if(null != responseActClie.getResultado().getResult() && responseActClie.getResultado().getResult().toString().equalsIgnoreCase("ERROR"))
        {
          throw new Exception(responseActClie.getResultado().getMessage());
        }
    }
    catch(Exception e)
    {
      JboException ex = new JboException(e);
      //ex.addToExceptions(new Exception("Error al consultar Condiciones, favor de intentar más tarde."));
      throw ex;
    }
  }
  
  public void crearClienteDefinitivo()
  {
    try
    {
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
      String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);

      Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
      ClientePT clientePT = cliente12BndQSService.getCliente12BndQSPort();
      
      CrearClienteDefinitivoRequestType requestCliDefinitivo = new CrearClienteDefinitivoRequestType();
      DetalleClienteVORowImpl rowCliente = (DetalleClienteVORowImpl)this.getRowAtRangeIndex(0);
      Number idCliente = (Number)rowCliente.getAttribute(DetalleClienteVORowImpl.ID);
      requestCliDefinitivo.setIdCliente(idCliente.longValue());
  
      Date horaInicio = ModelUtils.logStartWS(logger, requestCliDefinitivo, CREAR_CLIENTE_DEFINITIVO_WS);
          CrearClienteDefinitivoResponseType responseCliDefinitivo = clientePT.crearClienteDefinitivo(requestCliDefinitivo);
      ModelUtils.logEndWS(logger, responseCliDefinitivo, CREAR_CLIENTE_DEFINITIVO_WS, horaInicio);
      
      if(null != responseCliDefinitivo.getResultado().getResult() && responseCliDefinitivo.getResultado().getResult().toString().equalsIgnoreCase("ERROR"))
      {
        throw new Exception(responseCliDefinitivo.getResultado().getMessage());
      }
    }
    catch(Exception e)
    {
      JboException ex = new JboException(e);
      //ex.addToExceptions(new Exception("Error al consultar Condiciones, favor de intentar más tarde."));
      throw ex;
    }
  }
  
  private Catalogo getCatalogoFromNumber(Number pnValue)
  {
    Catalogo catalogo  = new Catalogo();
    catalogo.setId(pnValue==null? null:pnValue.longValue());
    return catalogo;
  }
  
    /**
     * Consulta de cliente por id_cliente para componente detalle de cliente
     * @param idCliente
     * @param infoMora
     * @param infoDeterioro
     * @since 04/07/2016
     * @by Gabriel Niño Rosales
     */
  
    public void consultarClienteByIdCliente(long idCliente,boolean infoMora, boolean infoDeterioro){
        try{
            logger.log(ADFLogger.WARNING,"Into consultarClienteByIdCliente");
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);
            Cliente12BndQSService cliente12BndQSService = IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            ConsultarClientesByIdClienteRequestType request = new ConsultarClientesByIdClienteRequestType();
            request.setIdCliente(idCliente);
            request.setInfoDeterioro(infoMora);
            request.setInfoMora(infoDeterioro);
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_CLIENTE);
            ConsultarClienteResponseType response = cliente12BndQSService.getCliente12BndQSPort().consultarByIdCliente(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_CLIENTE, horaInicio);
            if(0 < response.getCliente().size() && null != response.getCliente()){
            this.mappingConsultarClienteByIdCliente(response.getCliente().get(0));
            fenixAM.getOperacionesClienteVO().mappingConsultarOperacionesRelaccionadasByIdCliente(response.getOperaciones());
            }else{
                logger.log(ADFLogger.WARNING,"ConsultarClienteResponseType Cliente is  null, no mapping information.");
            }
        }catch(Exception e){
            JboException ex = new JboException(e);
            throw ex;
        } 
    }
    
    /**
     * Mapear valores del response a DetalleClienteVO
     * @param Cliente
     * @since 04/07/2016
     * @by Gabriel Niño Rosales
     */
    public void mappingConsultarClienteByIdCliente(Cliente cliente){
        logger.log(ADFLogger.WARNING,"Into mappingConsultarClienteByIdCliente");
        Row rowDetalleClienteVO = createRow();
        //Razon social
        if(null != cliente.getRazonSocial()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.RAZONSOCIAL, cliente.getRazonSocial());
        }
        //Tipo de cliente
        if(null != cliente.getTipoCliente()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.TIPOCLIENTE, cliente.getTipoCliente().getId());
        }
        //Sector
        if(null != cliente.getSector()){
            Catalogo sector = cliente.getSector();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.SECTOR, sector.getId());
        }
        //Pais
        if(null != cliente.getPais()){
            Catalogo pais = cliente.getPais();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.PAIS, pais.getId());
        }
        //Id
        if(0 <= cliente.getIdCliente()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.ID, cliente.getIdCliente());
        }
        //Tipo de indentificacion
        if(null != cliente.getTipoIdentificacion()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.TIPOIDENTIFICACION, cliente.getTipoIdentificacion());
        }
        //Oficina
        if(null != cliente.getOficina()){
            Catalogo oficina = cliente.getOficina();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.OFICINA, oficina.getId());
        }
        //Ejecutivo
        if(null != cliente.getEjecutivo()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.EJECUTIVO, cliente.getEjecutivo());
        }
        //Fecha de aprobacion
        if(null != cliente.getFechaAprobacion()){
            GregorianCalendar fechaAprobacion = cliente.getFechaAprobacion().toGregorianCalendar();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.FECHAAPROBACION,
                                                         new java.sql.Timestamp(fechaAprobacion.getTimeInMillis()));
        }
        //Autorizo
        //Delete attribute 
        
        //SRC
        if(null != cliente.getSCR()){
            Catalogo scr = cliente.getSCR();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.SCR, scr.getId());
        }
        //Perspectiva
        if(null != cliente.getPerspectiva()){
            Catalogo perspectiva = cliente.getPerspectiva();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.PERSPECTIVA, perspectiva.getId());
        }
        //Abreviatura
        if(null != cliente.getAbreviatura()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.ABREVIATURA, cliente.getAbreviatura());
        }
        //idFlexcube
        if(null != cliente.getIdFacturador()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.IDFLEXCUBE, cliente.getIdFacturador());
        }
        
        //Tipo institucion
        if(null != cliente.getTipoInstitucion()){
            Catalogo tipoInstitucion = cliente.getTipoInstitucion();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.TIPOINSTITUCION, tipoInstitucion.getId());
        }
        //Grupo economico
        if(null != cliente.getGrupoEconomico()){
            Catalogo grupoEconomico = cliente.getGrupoEconomico();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.GRUPOECONOMICO, grupoEconomico.getId());
        }
        //Tipo persona
        if(null != cliente.getTipoPersona()){
            Catalogo tipoPersona = cliente.getTipoPersona();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.TIPOPERSONA, tipoPersona.getId());
        }
        //Numero identificacion
        if(null != cliente.getNumeroIdentificacion()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.NUMEROIDENTIFICACION, cliente.getNumeroIdentificacion());
        }
        //fecha registro
        if(null != cliente.getFechaRegistro()){
            GregorianCalendar fechaRegistro = cliente.getFechaRegistro().toGregorianCalendar();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.FECHAREGISTRO,
                                                         new java.sql.Timestamp(fechaRegistro.getTimeInMillis())); 
        }
        //Dia pago
        if(null != cliente.getDiaPago()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.DIAPAGO, cliente.getDiaPago());
        }
        //Comentario de aprobacion
        if(null != cliente.getComentarioAprobacion()){
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.COMENTARIOAPROBACION, cliente.getComentarioAprobacion());
        }
        //fecha de baja
        if(null != cliente.getFechaBaja()){
            GregorianCalendar fechaBaja = cliente.getFechaBaja().toGregorianCalendar();
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.FECHABAJA,
                                                         new java.sql.Timestamp(fechaBaja.getTimeInMillis()));
        }
        //Mora
        if(null != cliente.isEnMora()){
            if(cliente.isEnMora()){
                rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.MORA, FenixModelConstants.SI_TEXT);
            }else{
                rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.MORA, FenixModelConstants.NO_TEXT);
            }
        }
        //es cobro automatico
        if (null != cliente.getRequiereEnvioAutomatico()) {
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.REQENVIOAVISOCOBROAUT, cliente.getRequiereEnvioAutomatico());
        }
        //bic_code
        if (null != cliente.getBicCode()) {
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.BICCODE, cliente.getBicCode());
        }
        //direccion
        if (null != cliente.getDireccion()) {
            rowDetalleClienteVO.setAttribute(DetalleClienteVORowImpl.DIRECCION, cliente.getDireccion());
        }
        //Agrega el Row 
        this.insertRow(rowDetalleClienteVO);
        this.setCurrentRow(rowDetalleClienteVO);
        logger.log(ADFLogger.WARNING,"Successful mappingConsultarClienteByIdCliente");
    }
}

