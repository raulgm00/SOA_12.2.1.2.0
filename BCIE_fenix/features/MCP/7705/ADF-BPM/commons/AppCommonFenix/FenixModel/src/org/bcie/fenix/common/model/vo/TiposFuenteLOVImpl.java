package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TiposFuenteLOV;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 28 09:53:45 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TiposFuenteLOVImpl extends ViewObjectImpl implements TiposFuenteLOV {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public TiposFuenteLOVImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void testMethodCall (){
        List<String> lista = new ArrayList<String>();
        lista.add("LP-557");
        lista.add("LP-305");
        this.validarFuenteSinDisponibilidad(lista);
    }
    
    public Boolean validarFuenteSinDisponibilidad(List<String> idLineaPasivaList){
        Boolean result = Boolean.FALSE;
        logger.warning("Dentro validarFuenteSinDisponibilidad : " +idLineaPasivaList);
        ViewCriteria criteria = null;
        
        try{                                                    
            for(String idLneaPasiva : idLineaPasivaList){
                Row row = null;
                this.setidLineaPasiva(idLneaPasiva);                                           
                criteria = getViewCriteria("BusquedaPorCodigoCriteria");                       
                applyViewCriteria(criteria);
                executeQuery();
                this.setRangeSize(-1);
                row =this.getRowAtRangeIndex(0);
                
                if(null != row && null != row.getAttribute("MontoDisponible")){
                    BigDecimal montoDisponible = (BigDecimal)row.getAttribute("MontoDisponible");
                    logger.warning("montoDisponible : "+montoDisponible);
                    if(montoDisponible.doubleValue() <= 0){
                        logger.warning("Se encuentra un registro con montoDisponible menor o igual a 0");
                        result = Boolean.TRUE;
                        break;
                    }
                }else{
                    logger.severe("Error el row es null.");
                }
            }                  
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria : ",e);                                    
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("BusquedaPorCodigoCriteria");  
        }
        logger.warning("Fuera validarFuenteSinDisponibilidad, return : "+result);
        return result;
    }
    
    
    public Row[] buscarFuentePorNombre(String nombre){
        logger.warning("Dentro buscarFuentePorNombre : " +nombre);
        Row[] result =null;
        ViewCriteria criteria = null;
        try{                                                    
            this.setvarNombreFuente(nombre);                                          
            criteria = getViewCriteria("BusquedaPorNombre");                       
            applyViewCriteria(criteria);
            executeQuery();
            this.setRangeSize(-1);
            result = this.getAllRowsInRange();  
            for(Row row :  result){
                logger.warning("value :"+row.getAttribute("Descripcion"));
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria BusquedaPorNombre : ",e);                                    
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("BusquedaPorNombre");  
        }
        
        logger.warning("Fuera buscarFuentePorNombre");
        return result;
    }

    /**
     * Returns the variable value for idLineaPasiva.
     * @return variable value for idLineaPasiva
     */
    public String getidLineaPasiva() {
        return (String) ensureVariableManager().getVariableValue("idLineaPasiva");
    }

    /**
     * Sets <code>value</code> for variable idLineaPasiva.
     * @param value value to bind as idLineaPasiva
     */
    public void setidLineaPasiva(String value) {
        ensureVariableManager().setVariableValue("idLineaPasiva", value);
    }

    /**
     * Returns the variable value for varNombreFuente.
     * @return variable value for varNombreFuente
     */
    public String getvarNombreFuente() {
        return (String) ensureVariableManager().getVariableValue("varNombreFuente");
    }

    /**
     * Sets <code>value</code> for variable varNombreFuente.
     * @param value value to bind as varNombreFuente
     */
    public void setvarNombreFuente(String value) {
        ensureVariableManager().setVariableValue("varNombreFuente", value);
    }
}

