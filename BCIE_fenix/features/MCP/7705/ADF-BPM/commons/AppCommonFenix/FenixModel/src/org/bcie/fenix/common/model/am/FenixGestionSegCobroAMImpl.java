package org.bcie.fenix.common.model.am;

import com.bcie.xmlns.documentoservice.Documento12BndQSService;
import com.bcie.xmlns.documentoservice.DocumentoPT;

import java.util.ArrayList;
import java.util.Date;

import java.util.HashMap;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ApplicationModuleImpl;

import org.bcie.documentobo.Documento;
import org.bcie.documentobo.ListaDocumentos;
import org.bcie.documentomo.CargarDocumentoRequestType;
import org.bcie.documentomo.CargarDocumentoResponseType;
import org.bcie.errorbo.Error;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.common.FenixGestionSegCobroAM;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.DocumentoVOImpl;
import org.bcie.fenix.common.model.vo.ConsultarDocumentoClienteNumeroSerieVOImpl;
import org.bcie.fenix.common.model.vo.FondosLOVImpl;
import org.bcie.fenix.common.model.vo.GestionarAvisoDeCobroVOImpl;
import org.bcie.fenix.common.model.vo.LineasDeCreditoOperacionLOVImpl;
import org.bcie.fenix.common.model.vo.OperacionesClienteLOVImpl;
import org.bcie.fenix.common.model.vo.VcaDesembolsoClienteFondoImpl;
import org.bcie.resultbo.SuccessType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 09 10:42:09 VET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FenixGestionSegCobroAMImpl extends ApplicationModuleImpl implements FenixGestionSegCobroAM {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    public FenixGestionSegCobroAMImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    public Boolean eliminaDocumentoAdjunto(Long idCliente, Long numSerie){
        logger.warning("Entra en eliminaDocumentoAdjunto.");
        logger.warning("idCliente :"+idCliente);
        logger.warning("numSerie :"+numSerie);
        
        Boolean esEliminado = Boolean.FALSE;
        List<Row> rows = new ArrayList<>();
        Long idAdjunto = null;
        Long idDocumento = null;
        String idOnBase = null;
        Integer contador = 0;
        try{
            rows = getConsultarDocumentoClienteNumeroSerieVO().obtenerDocumentosAEliminarPorNumeroSerie(idCliente, numSerie);
            logger.warning("Numero de rows obtenido : " + rows.size());
            if(null != rows && rows.size() > 0){
                for(Row row : rows){
                    if(null != row.getAttribute("IdAdjunto")){
                        idAdjunto = (Long)row.getAttribute("IdAdjunto");
                        logger.warning("idAdjunto : " + idAdjunto);
                    }else{
                        logger.warning("idAdjunto nulo.");
                    }
                    if(null != row.getAttribute("IdOnbase")){
                        idOnBase = (String)row.getAttribute("IdOnbase");
                        logger.warning("idOnBase : " + idOnBase);
                    }else{
                        logger.warning("idOnBase nulo.");
                    }
                    if(null != row.getAttribute("IdDocumento")){
                        idDocumento = (Long)row.getAttribute("IdDocumento");
                        logger.warning("idDocumento : " + idDocumento);
                    }else{
                        logger.warning("idDocumento nulo.");
                    }
                    if(null != idOnBase && !"".equals(idOnBase)){
                        esEliminado = servicioEliminarDocumento(idAdjunto);
                        if(esEliminado.compareTo(Boolean.FALSE) == 0){
                            logger.warning("Error al eliminar el documento con id adjunto : " + idAdjunto);
                            break;
                        }else{
                            getDocumentoVO().borrarFisicamenteDocumentoFenix(idDocumento);
                            contador++;
                        }
                    }else{
                        getDocumentoVO().borrarFisicamenteDocumentoFenix(idDocumento);
                        contador++;
                    }
                }
                if(contador > 0){
                    logger.warning("Entra a ejecutar el commit.");
                    getDocumentoVO().getDBTransaction().commit();
                    esEliminado = Boolean.TRUE;
                }else{
                    logger.warning("No se ejecuta commit.");
                }
            }else{
                esEliminado = Boolean.TRUE;
                logger.warning("No se encontraron documentos adjuntos con el cliente : " + idCliente);
            }
        }catch(Exception e){
            esEliminado = Boolean.FALSE;
            logger.warning("Error en eliminaDocumentoAdjunto.", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al eliminar documentos."));
            throw ex;
        }
        return esEliminado;
    }
    
    private Boolean servicioEliminarDocumento(Long idAdjunto) throws Exception {
        logger.warning("Entra en eliminarDocumentosCancelarProceso.");
        
        FenixAMImpl fenixAMImpl = null;
        String wsdl = null;
        CargarDocumentoRequestType request = null;
        CargarDocumentoResponseType response=null;
        ListaDocumentos listaDocumentos = null;
        Documento documento = null;

        Boolean esEliminado = Boolean.FALSE;
        
        try {
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DOCUMENTO);

            Documento12BndQSService documento12BndQSService =
                IWsdlLocation.Service.getInstance(Documento12BndQSService.class, wsdl);
            DocumentoPT documentoPT = documento12BndQSService.getDocumento12BndQSPort();

            documento = new Documento();
            listaDocumentos = new ListaDocumentos();

            documento.setIdAdjunto(idAdjunto);
            documento.setAccionARealizar("3");
            listaDocumentos.getDocumento().add(documento);

            request = new CargarDocumentoRequestType();
            request.setDocumentos(listaDocumentos);
            Boolean ejecutoServicio = Boolean.TRUE;

            Date horaInicio =
                ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ELIMINAR_DOCUMENTO_FINALIZA_PROCESO);
            response = documentoPT.eliminarDocumento(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ACTUALIZAR_ELIMINAR_DOCUMENTO, horaInicio);

            if (null != response) {

                if (null != response.getResultado()) {

                    if (null != response.getResultado().getError()) {

                        if (null != response.getResultado().getResult()) {
                            
                            switch(response.getResultado().getResult()) {
                            case OK:
                                logger.warning("La respuesta del servicio es correcta.");
                                if (null != response.getResultado().getMessage()) {
                                    logger.warning("Respuesta :" + response.getResultado().getMessage());
                                }
                                esEliminado = Boolean.TRUE;
                                break;
                            case ERROR:
                                logger.warning("Se obtuvo ERROR en la respuesta del servicio.");
                                String msj=response.getResultado().getError().getErrorDescription();
                                throw new Exception("Error:  " + msj);
                                //break;
                            }

                        } else {
                            logger.warning("response.getResultado().getResult() es nulo");
                        }

                    } else {
                        logger.warning("La respuesta del servicio contiene errores.");
                    }

                } else {
                    logger.warning("El resultado en la respuesta del servicio es nula.");
                }

            } else {
                logger.warning("La respuesta del servicio es nula.");

            }
        } catch (Exception e) {
            logger.warning("error al ejecutar el servicio", e);
            throw(e);
        }
        logger.warning("Eliminacion de archivos : " + esEliminado);
        return esEliminado;
    }
    /**
     * Container's getter for GestionarAvisoDeCobroVO1.
     * @return GestionarAvisoDeCobroVO1
     */
    public GestionarAvisoDeCobroVOImpl getGestionarAvisoDeCobroVO() {
        return (GestionarAvisoDeCobroVOImpl) findViewObject("GestionarAvisoDeCobroVO");
    }

    /**
     * Container's getter for OperacionesClienteLOV1.
     * @return OperacionesClienteLOV1
     */
    public OperacionesClienteLOVImpl getOperacionesClienteLOV1() {
        return (OperacionesClienteLOVImpl) findViewObject("OperacionesClienteLOV1");
    }

    /**
     * Container's getter for LineasDeCreditoOperacionLOV1.
     * @return LineasDeCreditoOperacionLOV1
     */
    public LineasDeCreditoOperacionLOVImpl getLineasDeCreditoOperacionLOV1() {
        return (LineasDeCreditoOperacionLOVImpl) findViewObject("LineasDeCreditoOperacionLOV1");
    }

    /**
     * Container's getter for FondosLOV1.
     * @return FondosLOV1
     */
    public FondosLOVImpl getFondosLOV1() {
        return (FondosLOVImpl) findViewObject("FondosLOV1");
    }

    /**
     * Container's getter for VcaDesembolsoClienteFondo1.
     * @return VcaDesembolsoClienteFondo1
     */
    public VcaDesembolsoClienteFondoImpl getVcaDesembolsoClienteFondo() {
        return (VcaDesembolsoClienteFondoImpl) findViewObject("VcaDesembolsoClienteFondo");
    }

    /**
     * Container's getter for DocumentoVO.
     * @return DocumentoVO
     */
    public DocumentoVOImpl getDocumentoVO() {
        return (DocumentoVOImpl) findViewObject("DocumentoVO");
    }

    /**
     * Container's getter for ConsultarDocumentoClienteNumeroSerieVO1.
     * @return ConsultarDocumentoClienteNumeroSerieVO1
     */
    public ConsultarDocumentoClienteNumeroSerieVOImpl getConsultarDocumentoClienteNumeroSerieVO() {
        return (ConsultarDocumentoClienteNumeroSerieVOImpl) findViewObject("ConsultarDocumentoClienteNumeroSerieVO");
    }
}

