package org.bcie.fenix.common.model.vo;

import java.sql.SQLException;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ComentarioClienteVO;

import static org.bcie.fenix.common.model.FenixModelConstants.ID_CLIENTE_INIT_NUM;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 14 12:21:39 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComentarioClienteVOImpl
  extends ViewObjectImpl implements ComentarioClienteVO
{
  /**
   * This is the default constructor (do not remove).
   */
  
  private static ADFLogger logger = null;
  
  public ComentarioClienteVOImpl()
  {
      if (logger == null) {
          logger = ADFLogger.createADFLogger(this.getClass());
      }
  }

  public void setIdCliente(String value)
  {
      System.out.println(value);
        
      try {
          setNamedWhereClauseParam("varIdCliente", new Number(value));
        System.out.println("OK" + value);
      } catch (SQLException e) {
          setNamedWhereClauseParam("varIdCliente", ID_CLIENTE_INIT_NUM);
      }
  }
  
    public Boolean eliminarComentarioClientePadre(Long idComentario){
        logger.warning("Inicia metodo eliminarComentarioClientePadre... ");
        Boolean resultado = Boolean.TRUE;
        Row filaRecuperada = null;
        ViewCriteria criteria = null;
        Long id = null;

        logger.warning("idComentario recibido: " + idComentario);

        if (idComentario == null) {
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("ComentarioClienteVOCriteriaByIdComentario");
            criteria.ensureVariableManager().setVariableValue("varIdComentario", idComentario);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Id: " + filaRecuperada.getAttribute("Id"));
                id = Long.parseLong(filaRecuperada.getAttribute("Id").toString());
                filaRecuperada.setAttribute("BanEstatus", 0);
                try {
                    getDBTransaction().commit();
                    logger.warning("Se hace commit a la DB");
                    resultado = Boolean.TRUE;
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR,
                          "Error al intentar hacer el eliminado logico en el metodo eliminarComentarioClientePadre ->: ", e);
                    try{
                        getDBTransaction().commit();
                        logger.warning("Se hace segundo commit a la DB");
                        resultado = Boolean.TRUE;
                    }catch(Exception ex){
                        logger.severe("Error en segundo commit:"+ex);
                        //getDBTransaction().rollback();
                        resultado = Boolean.FALSE;
                    }
                }
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("ComentarioClienteVOCriteriaByIdComentario");
                resultado = Boolean.FALSE;
                executeQuery();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->", e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("ComentarioClienteVOCriteriaByIdComentario");
        }
        
        logger.warning("Valor a retornar de resultado: " + resultado);
        logger.warning("Finaliza metodo eliminarComentarioClientePadre... ");

        return resultado;
    }
  
}

