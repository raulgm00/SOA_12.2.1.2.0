package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TcaMiembroReunionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jan 10 16:05:22 CST 2019
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TcaMiembroReunionVOImpl extends ViewObjectImpl implements TcaMiembroReunionVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public TcaMiembroReunionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean buscarTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol(String loginUsuario,Integer idTreComiteRol){
        logger.warning("Dentro de buscarTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol");
        logger.warning("loginUsuario : "+loginUsuario);
        logger.warning("idTreComiteRol :"+idTreComiteRol);
        
        //declaracion de variables
        Boolean resultado = Boolean.FALSE;
        ViewCriteria criteria = null;
        Row row = null;
        
        try {
            //asignar el criterio de busqueda
            criteria = getViewCriteriaManager().getViewCriteria("TcaMiembroReunionByLoginUsuarioAndIdTreComiteRol"); 
            //asignar el  filtro de busqueda
            criteria.ensureVariableManager().setVariableValue("varLoginUsuario", loginUsuario); 
            criteria.ensureVariableManager().setVariableValue("varIdTreComiteRol", idTreComiteRol);
            //aplicar criterio
            applyViewCriteria(criteria);
            executeQuery();
            
            logger.warning("Cantidad de registros :"+this.getEstimatedRowCount()+"  con el loginUsuario :"
                            +loginUsuario + " y  idTreComiteRol :"+idTreComiteRol+ " en la tabla TCA_MIEMBRO_REUNION");
        
            //validar que existan registros con el criterio de busqueda sugerido
            if (this.getEstimatedRowCount() > 0) {  
                
                row = this.getRowAtRangeIndex(0);

                logger.warning("LoginUsuario :"+row.getAttribute("LoginUsuario"));
                logger.warning("NombreUsuario :"+row.getAttribute("NombreUsuario"));
                logger.warning("Dependencia :"+row.getAttribute("Dependencia"));
                logger.warning("IdTreComiteRol :"+row.getAttribute("IdTreComiteRol"));
                logger.warning("EsPropietario :"+row.getAttribute("EsPropietario"));
                logger.warning("BanEstatus :"+row.getAttribute("BanEstatus"));
                
                //asignar TRUE por que existen registros
                resultado = Boolean.TRUE;
            } else {
                logger.warning("No existe registro con loginUsuario: "+loginUsuario 
                                + " y  idTreComiteRol :"+idTreComiteRol + " en la tabla TCA_MIEMBRO_REUNION");     
                //asginar FALSE ya que no existe registros
                resultado = Boolean.FALSE;
            }

        } catch (Exception e) {
            logger.severe("Error en buscarTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol",e);
            resultado = Boolean.FALSE;
        } finally {
            //removemos el criterio de busqueda
            getViewCriteriaManager().removeApplyViewCriteriaName("TcaMiembroReunionByLoginUsuarioAndIdTreComiteRol");
        }    
        
        logger.warning("resultado :"+resultado);
        logger.warning("Fuera de buscarTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol");
        
        //retornamos resltado
        return resultado;
    }
    
    /**
     * crearTcaMiembroReunion
     * @param loginUsuario
     * @param nombreUsuario
     * @param dependencia
     * @param idTreComiteRol
     * @param esPropietario
     * @param banEstatus
     * @return
     */
    public Boolean crearTcaMiembroReunion(String loginUsuario,String nombreUsuario,String dependencia,
                                            Integer idTreComiteRol,Integer esPropietario,Integer banEstatus) {
        logger.warning("Dentro de crearTcaMiembroReunion");
        logger.warning("loginUsuario :"+loginUsuario);
        logger.warning("nombreUsuario :"+nombreUsuario);
        logger.warning("dependencia :"+dependencia);
        logger.warning("idTreComiteRol :"+idTreComiteRol);
        logger.warning("esPropietario :"+esPropietario);
        logger.warning("banEstatus :"+banEstatus);
        
        //delaracion de variables
        NameValuePairs nvpCondicion = null;
        Row rowNuevo = null;
        Boolean resultado = null;
            
            
        //iniialisar variables    
        nvpCondicion = new NameValuePairs();
        resultado = Boolean.TRUE;

        try{
        
            //Asigna valores al objeto
            nvpCondicion.setAttribute("LoginUsuario", loginUsuario);
            nvpCondicion.setAttribute("NombreUsuario", nombreUsuario);
            nvpCondicion.setAttribute("Dependencia", dependencia);
            nvpCondicion.setAttribute("IdTreComiteRol", idTreComiteRol);
            nvpCondicion.setAttribute("EsPropietario", esPropietario);
            nvpCondicion.setAttribute("BanEstatus", banEstatus);

            //se crea el nuevo row
            rowNuevo = this.createAndInitRow(nvpCondicion); 
            //se realiza commit
            getDBTransaction().commit();  
        
        }catch(Exception e){
            logger.severe("Error al insertar registros en crearTcaMiembroReunion",e);
            resultado = Boolean.FALSE;
        }
        
        // Re-ejecutamos el query debido a que se creó un nuevo registro
        this.executeQuery();
        
        logger.warning("resultado :"+resultado);
        logger.warning("Fuera de crearTcaMiembroReunion");
        
        //retornar el resultado de la insercion
        return resultado;
    }
    
    public Row buscarRowTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol(String loginUsuario,Integer idTreComiteRol){
        logger.warning("Dentro de buscarRowTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol");
        logger.warning("loginUsuario :"+loginUsuario);
        logger.warning("idTreComiteRol :"+idTreComiteRol);
        ViewCriteria criteria = null;
        Row row = null;
        
        try {
            //asignar el criterio de busqueda
            criteria = getViewCriteriaManager().getViewCriteria("TcaMiembroReunionByLoginUsuarioAndIdTreComiteRol"); 
            //asignar el  filtro de busqueda
            criteria.ensureVariableManager().setVariableValue("varLoginUsuario", loginUsuario);    
            criteria.ensureVariableManager().setVariableValue("varIdTreComiteRol", idTreComiteRol); 
            //aplicar criterio
            applyViewCriteria(criteria);
            executeQuery();
            logger.warning("Cantidad de registros :"+this.getEstimatedRowCount());
    
            //validar que existan registros con el criterio de busqueda sugerido
            if (this.getEstimatedRowCount() > 0 ) {  
                
                row = this.getRowAtRangeIndex(0);

                logger.warning("LoginUsuario :"+row.getAttribute("LoginUsuario"));
                logger.warning("NombreUsuario :"+row.getAttribute("NombreUsuario"));
                logger.warning("Dependencia :"+row.getAttribute("Dependencia"));
                logger.warning("IdTreComiteRol :"+row.getAttribute("IdTreComiteRol"));
                logger.warning("EsPropietario :"+row.getAttribute("EsPropietario"));
                logger.warning("BanEstatus :"+row.getAttribute("BanEstatus"));
      
            } else {
                logger.warning("No existe registro con loginUsuario: "+loginUsuario + 
                                " y idTreComiteRol :"+idTreComiteRol);     
            }

        } catch (Exception e) {
            logger.severe("Error en buscarRowTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol",e);
        } finally {
            //removemos el criterio de busqueda
            getViewCriteriaManager().removeApplyViewCriteriaName("TcaMiembroReunionByLoginUsuarioAndIdTreComiteRol");
        }
        
        
        logger.warning("Fuera de buscarRowTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol");
        return row;
    }
    
    
    /**
     * crearTcaMiembroReunion
     * @param loginUsuario
     * @param nombreUsuario
     * @param dependencia
     * @param idTreComiteRol
     * @param esPropietario
     * @param banEstatus
     * @return
     */
    public Boolean actualizarNombreUsuarioTcaMiembroReunion(String loginUsuario,String nombreUsuario,
                                                                Integer idTreComiteRol) {
        logger.warning("Dentro de actualizarNombreUsuarioTcaMiembroReunion");
        logger.warning("loginUsuario :"+loginUsuario);
        logger.warning("nombreUsuario :"+nombreUsuario);
        logger.warning("idTreComiteRol :"+idTreComiteRol);

        //delaracion de variables
        Row row = null;
    
        Boolean resultado = null;
            


        try{
            //recuperar row por loginUsuario
            row = buscarRowTcaMiembroReunionPorLoginUsuarioAndIdTreComiteRol(loginUsuario,idTreComiteRol);
            
            if(row != null){
                logger.warning("row contiene valores");
                //Asigna valores al objeto
                row.setAttribute("NombreUsuario", nombreUsuario);
                //se realiza commit
                getDBTransaction().commit();  
                logger.warning("Se realiza commit");
                resultado = Boolean.TRUE;
            }else{
                logger.severe("row es nulo");
                resultado = Boolean.FALSE;
            }
        
        }catch(Exception e){
            logger.severe("Error al cambiar registro en actualizarNombreUsuarioTcaMiembroReunion",e);
            resultado = Boolean.FALSE;
        }
        
        // Re-ejecutamos el query debido a que se creó un nuevo registro
        this.executeQuery();
        
        logger.warning("resultado :"+resultado);
        logger.warning("Fuera de actualizarNombreUsuarioTcaMiembroReunion");
        
        //retornar el resultado de la insercion
        return resultado;
    }
    
    public Boolean actualizarBanEstatusPorIdTreComiteRol(Integer idTreComiteRol){
        logger.warning("Dentro de actualizarBanEstatusPorIdTreComiteRol");
        logger.warning("idTreComiteRol :"+idTreComiteRol);
        Boolean resultado = null;
        ViewCriteria criteria = null;
        
        try {
            //asignar el criterio de busqueda
            criteria = getViewCriteriaManager().getViewCriteria("TcaMiembroReunionByIdTreComiteRol"); 
            //asignar el  filtro de busqueda
            criteria.ensureVariableManager().setVariableValue("varIdTreComiteRol", idTreComiteRol);      
            //aplicar criterio
            applyViewCriteria(criteria);
            executeQuery();
            logger.warning("Cantidad de registros :"+this.getEstimatedRowCount());
        
            //validar que existan registros con el criterio de busqueda sugerido
            if (this.getEstimatedRowCount() > 0 ) {  
                this.setRangeSize(-1);
                for(Row row : this.getAllRowsInRange()){
                    logger.warning("LoginUsuario :"+row.getAttribute("LoginUsuario"));
                    row.setAttribute("BanEstatus", new Integer("0"));
                    logger.warning("set BanEstatus en 0");
                }

                //se realiza commit
                getDBTransaction().commit(); 
                logger.warning("se realiza commit");
                resultado = Boolean.TRUE;
            } else {
                logger.warning("No existe registros con idTreComiteRol: "+idTreComiteRol);  
                resultado = Boolean.FALSE;
            }

        } catch (Exception e) {
            logger.severe("Error en actualizarBanEstatusPorIdTreComiteRol",e);
            resultado = Boolean.FALSE;
        } finally {
            //removemos el criterio de busqueda
            getViewCriteriaManager().removeApplyViewCriteriaName("TcaMiembroReunionByIdTreComiteRol");
        }
        logger.warning("resultado :"+resultado);
        logger.warning("Fuera de actualizarBanEstatusPorIdTreComiteRol");
        return resultado;
    }
    
    public Boolean actualizarBanEstatusActivoPorLoginUsuarioAndIdTreComiteRol(String loginUsuario,Integer idTreComiteRol){
        logger.warning("Dentro de actualizarBanEstatusPorLoginUsuarioAndIdTreComiteRol");
        logger.warning("loginUsuario :"+loginUsuario);
        logger.warning("idTreComiteRol :"+idTreComiteRol);
        Boolean resultado = null;
        ViewCriteria criteria = null;
        Row row = null;
        
        try {
            //asignar el criterio de busqueda
            criteria = getViewCriteriaManager().getViewCriteria("TcaMiembroReunionByLoginUsuarioAndIdTreComiteRol"); 
            //asignar el  filtro de busqueda
            criteria.ensureVariableManager().setVariableValue("varLoginUsuario", loginUsuario);      
            criteria.ensureVariableManager().setVariableValue("varIdTreComiteRol", idTreComiteRol);  
            //aplicar criterio
            applyViewCriteria(criteria);
            executeQuery();
            logger.warning("Cantidad de registros :"+this.getEstimatedRowCount());
        
            //validar que existan registros con el criterio de busqueda sugerido
            if (this.getEstimatedRowCount() > 0 ) {  
                
                row = this.getRowAtRangeIndex(0);
                logger.warning("LoginUsuario :"+row.getAttribute("LoginUsuario"));
                row.setAttribute("BanEstatus", new Integer("1"));
                  

                //se realiza commit
                getDBTransaction().commit(); 
                logger.warning("se realiza commit");
                resultado = Boolean.TRUE;
            } else {
                logger.warning("No existe registros con loginUsuario : +"+loginUsuario+
                                " y idTreComiteRol: "+idTreComiteRol);  
                resultado = Boolean.FALSE;
            }

        } catch (Exception e) {
            logger.severe("Error en actualizarBanEstatusPorLoginUsuarioAndIdTreComiteRol",e);
            resultado = Boolean.FALSE;
        } finally {
            //removemos el criterio de busqueda
            getViewCriteriaManager().removeApplyViewCriteriaName("TcaMiembroReunionByLoginUsuarioAndIdTreComiteRol");
        }
        logger.warning("resultado :"+resultado);
        logger.warning("Fuera de actualizarBanEstatusPorLoginUsuarioAndIdTreComiteRol");
        return resultado;
    }

    /**
     * Returns the variable value for varLoginUsuario.
     * @return variable value for varLoginUsuario
     */
    public String getvarLoginUsuario() {
        return (String) ensureVariableManager().getVariableValue("varLoginUsuario");
    }

    /**
     * Sets <code>value</code> for variable varLoginUsuario.
     * @param value value to bind as varLoginUsuario
     */
    public void setvarLoginUsuario(String value) {
        ensureVariableManager().setVariableValue("varLoginUsuario", value);
    }

    /**
     * Returns the variable value for varIdTreComiteRol.
     * @return variable value for varIdTreComiteRol
     */
    public Integer getvarIdTreComiteRol() {
        return (Integer) ensureVariableManager().getVariableValue("varIdTreComiteRol");
    }

    /**
     * Sets <code>value</code> for variable varIdTreComiteRol.
     * @param value value to bind as varIdTreComiteRol
     */
    public void setvarIdTreComiteRol(Integer value) {
        ensureVariableManager().setVariableValue("varIdTreComiteRol", value);
    }
}

