package org.bcie.fenix.common.model.vo;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.sql.SQLException;import java.sql.Timestamp;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.activation.MimeType;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.NameValuePairs;import oracle.jbo.Row;import oracle.jbo.RowSetIterator;import oracle.jbo.ViewCriteria;import oracle.jbo.domain.BlobDomain;import oracle.jbo.domain.Number;import oracle.jbo.server.SequenceImpl;import oracle.jbo.server.ViewObjectImpl;import org.apache.poi.ss.usermodel.DateUtil;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.bcie.fenix.common.model.am.FenixAMImpl;import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;import org.bcie.fenix.common.model.vo.common.CalendarioComplejoVO;public class CalendarioComplejoVOImpl extends ViewObjectImpl implements CalendarioComplejoVO {    private static ADFLogger logger = null;    public CalendarioComplejoVOImpl() {        if(logger == null){            logger = ADFLogger.createADFLogger(this.getClass());        }    }    public Boolean setCalendarioComplejo(Long idCondicionFinanciera, String filename, String mimeType,                                       String tipoPago, BlobDomain content) {        Boolean error =Boolean.FALSE;        logger.warning("---------INSIDE setCalendarioComplejo por: "+ tipoPago);        logger.log(ADFLogger.WARNING, "- idCondicionFinanciera : "+idCondicionFinanciera);        logger.log(ADFLogger.WARNING, "- filename : "+filename);        logger.log(ADFLogger.WARNING, "- MimeType : "+mimeType);        logger.log(ADFLogger.WARNING, "- tipoPago : "+tipoPago);        logger.log(ADFLogger.WARNING, "- FechaRegistro : " + new java.sql.Timestamp(System.currentTimeMillis()));                if(null == idCondicionFinanciera || null == filename ||           null == mimeType || null == tipoPago || null == content){            logger.warning("Parametros requeridos para guardar el documento son NULL.");            return Boolean.TRUE;        }                Row calendarioComplejoRow = null;        oracle.jbo.domain.Number idCalendarioComplejo = null;                calendarioComplejoRow = recuperarRegistroCalendarioComplejo(idCondicionFinanciera, tipoPago);        if(null != calendarioComplejoRow){            logger.warning("Registro de calendario encontrado para actualizar.");            try {                idCalendarioComplejo = new Number(calendarioComplejoRow.getAttribute("Id").toString());            } catch (Exception e) {                logger.warning("ERROR al recuperar el idCalendarioComplejo.", e);            }                        calendarioComplejoRow.setAttribute("Filename", filename);            calendarioComplejoRow.setAttribute("MimeType", mimeType);            calendarioComplejoRow.setAttribute("TipoPago", tipoPago);            calendarioComplejoRow.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));            calendarioComplejoRow.setAttribute("Content",content);        }else{            logger.warning("No se encontró registro de calendario. Se creará uno nuevo.");                        SequenceImpl sequencecalendarioComplejo = null;            NameValuePairs nvpCalendarioComplejo = null;                        //Obtener la secuencia de la tabla "CALENDARIO_COMPLEJO"            sequencecalendarioComplejo = new SequenceImpl("CALENDARIO_COMPLEJO_SEQ", getDBTransaction());            idCalendarioComplejo =  sequencecalendarioComplejo.getSequenceNumber();            logger.log(ADFLogger.WARNING, "-- Id -- "+idCalendarioComplejo);                        nvpCalendarioComplejo = new NameValuePairs();            nvpCalendarioComplejo.setAttribute("Id", idCalendarioComplejo.longValue());            nvpCalendarioComplejo.setAttribute("IdCondicionFinanciera", idCondicionFinanciera);            nvpCalendarioComplejo.setAttribute("Filename", filename);            nvpCalendarioComplejo.setAttribute("MimeType", mimeType);            nvpCalendarioComplejo.setAttribute("TipoPago", tipoPago);            nvpCalendarioComplejo.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));            nvpCalendarioComplejo.setAttribute("Content",content);            calendarioComplejoRow = this.createAndInitRow(nvpCalendarioComplejo);        }        logger.warning("IdCalendarioComplejo: " + idCalendarioComplejo);        Boolean resultadoDetalle = Boolean.FALSE;                     if(calendarioComplejoRow != null){            FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =                (FenixGestorDesembolsosAMImpl) this.getApplicationModule();                            if(null != gestorDesembolsoAMImpl){                resultadoDetalle = gestorDesembolsoAMImpl.getDetallesCalendarioVO().setDetalleCalendario(idCalendarioComplejo.longValue(), content);                if(resultadoDetalle){                          try{                        logger.log(ADFLogger.WARNING, "Registros de formato preparados para guardarse.");                                     this.getDBTransaction().commit();                    }catch(Exception e){                        try {                            logger.warning("Ejecuta segundo commit");                            this.getDBTransaction().commit();                        } catch (Exception ex) {                            logger.log(ADFLogger.ERROR, "Exception in setCalendarioComplejo : ", e);                            getDBTransaction().rollback();                            error = Boolean.TRUE;                        }                    }                }else{                    logger.log(ADFLogger.WARNING, "Registros de formato NO preparados para guardarse.");                    error = Boolean.TRUE;                }                    }else{                logger.warning("Instancia de GestorDesembolsosFenixAMImpl es NULL.");                error = Boolean.TRUE;            }            this.executeQuery();        }else{            logger.warning("CalendarioComplejoRow es NULL.");            error = Boolean.TRUE;        }        return error;    }        public Row recuperarRegistroCalendarioComplejo(Long idCondicionFinanciera, String tipoPago){        logger.warning("Inicia metodo recuperarRegistroCalendarioComplejo");        Row row = null;        Row calendarioComplejoRow = null;        RowSetIterator iter = createRowSetIterator(null);                executeQuery();        logger.warning("Registros de Calendarios Complejos: " + getEstimatedRowCount());        if(getEstimatedRowCount()>0){            if(null != iter){                String tipoPagoRow = null;                Long idCondicionRow = null;                iter.reset();                while(iter.hasNext()){                    calendarioComplejoRow = iter.next();                    if(null != calendarioComplejoRow){                        try{                            idCondicionRow = (Long) calendarioComplejoRow.getAttribute("IdCondicionFinanciera");                        }catch(Exception e){                            logger.warning("No se pudo recuperar el atributo IdCondicionFinanciera.", e);                        }                                                try{                            tipoPagoRow = (String) calendarioComplejoRow.getAttribute("TipoPago");                        }catch(Exception e){                            logger.warning("No se pudo recuperar el atributo TipoPago.", e);                        }                                                logger.warning("IDCONDICIONFINANCIERA: " + idCondicionFinanciera                                       + ", IDCONDICIONROW: " + idCondicionRow);                        logger.warning("TIPOPAGO: " + tipoPago + ", TIPOPAGOROW: " + tipoPagoRow);                        if(null != idCondicionRow && null != tipoPagoRow){                            if(idCondicionRow.compareTo(idCondicionFinanciera)==0 &&                               tipoPagoRow.equalsIgnoreCase(tipoPago)){                                logger.warning("COINCIDENCIA ENCONTRADA.");                                row = calendarioComplejoRow;                                break;                               }                        }else{                            logger.warning("IdCondicionRow o tipoPagoRow son NULL.");                        }                    }                }            }        }                iter.closeRowSetIterator();        logger.warning("Termina metodo recuperarRegistroCalendarioComplejo");        return row;    }        public Row getCalendarioComplejo(Long idCondicion, String tipoPago){        //TODO decidir si el documento se maneja en este metodo        Row row = null;                return row;    }        public Boolean validarArchivoExcel(BlobDomain fileData, String tipoPago){        logger.warning("Inicia metodo validarArchivoExcel");        Boolean resultado = null;        InputStream in = null;                if(null == fileData){            logger.warning("Parametros requeridos NULL.");            logger.warning("fileData: " + fileData);            return resultado;        }                try {            in = fileData.getBinaryStream();            XSSFWorkbook workbook = new XSSFWorkbook(in);            XSSFSheet sheet = workbook.getSheetAt(0);            int rowsCount = sheet.getFirstRowNum();            int lastRowIndex = sheet.getLastRowNum();                        logger.warning("Filas encontradas en el excel: " + rowsCount);            if(rowsCount == 0){ //Evaluar encabezados de hoja.                for (int i = 0; i == rowsCount; i++) {                    logger.warning("Validando encabezados del archivo.");                    int j = 0;                    int colCounts;                    XSSFRow row = sheet.getRow(i);                                        try {                        colCounts = row.getLastCellNum();                    } catch (NullPointerException e) {                        colCounts = 1;                    }                                        logger.warning("Columnas en el archivo: " + colCounts);                    if(tipoPago.equalsIgnoreCase("CAPITAL")){                        if(colCounts-1 <= 1){                            String[] excel_data = new String[colCounts + 1];                            for (int k = 0; k < colCounts; k++) {                                j = j + 1;                                try {                                    XSSFCell cell = row.getCell(k);                                    switch (cell.getCellType()) {                                    case XSSFCell.CELL_TYPE_STRING:                                        excel_data[j] = cell.getRichStringCellValue().getString();                                        logger.log(ADFLogger.WARNING, "El valor de celda es STRING.");                                        logger.log(ADFLogger.WARNING, "DATA_STRING: " + excel_data[j]);                                        logger.warning("Row de hoja: " + row.getRowNum() + ", Columna de hoja: " + cell.getColumnIndex());                                                                                switch(cell.getColumnIndex()){                                        case 0:                                            if(null != excel_data[j] && excel_data[j].equals("Fecha (dd/mm/yyyy)")){                                                resultado = Boolean.TRUE;                                            }else{                                                logger.warning("Formato incorrecto. Primer columna diferente.");                                                resultado = Boolean.FALSE;                                            }                                            break;                                        case 1:                                            if(null != excel_data[j] && excel_data[j].equals("Monto")){                                                resultado = Boolean.TRUE;                                            }else{                                                logger.warning("Formato incorrecto. Segunda columna diferente.");                                                resultado = Boolean.FALSE;                                            }                                            break;                                        default:                                                                                    }                                                                                if(i > 0){                                            logger.warning("Evaluando datos STRING en filas que NO son encabezados.");                                            resultado = Boolean.FALSE;                                        }                                                                                break;                                    case XSSFCell.CELL_TYPE_NUMERIC:                                        logger.warning("EL valor de la celda es NUMERICO.");                                        resultado = Boolean.FALSE;                                        break;                                    default:                                        //logger.log(ADFLogger.WARNING, "Celda NULL");                                    }                                } catch (Exception e) {                                    //logger.log(ADFLogger.WARNING, "ERRROR al crear row de celda excel");                                    excel_data[j] = "";                                }                            }                        }else{                            logger.warning("El archivo contiene mas columnas.");                            resultado = Boolean.FALSE;                        }                    }else{                        if(colCounts-1 < 1){                            String[] excel_data = new String[colCounts + 1];                            for (int k = 0; k < colCounts; k++) {                                j = j + 1;                                try {                                    XSSFCell cell = row.getCell(k);                                    switch (cell.getCellType()) {                                    case XSSFCell.CELL_TYPE_STRING:                                        excel_data[j] = cell.getRichStringCellValue().getString();                                        logger.log(ADFLogger.WARNING, "El valor de celda es STRING.");                                        logger.log(ADFLogger.WARNING, "DATA_STRING: " + excel_data[j]);                                        logger.warning("Row de hoja: " + row.getRowNum() + ", Columna de hoja: " + cell.getColumnIndex());                                                                                if(null != excel_data[j] && excel_data[j].equals("Fecha (dd/mm/yyyy)")){                                            resultado = Boolean.TRUE;                                        }else{                                            logger.warning("Formato incorrecto. Primer columna diferente.");                                            resultado = Boolean.FALSE;                                        }                                                                                if(i > 0){                                            logger.warning("Evaluando datos STRING en filas que NO son encabezados.");                                            resultado = Boolean.FALSE;                                        }                                                                                break;                                    case XSSFCell.CELL_TYPE_NUMERIC:                                        logger.warning("EL valor de la celda es NUMERICO.");                                        resultado = Boolean.FALSE;                                        break;                                    default:                                        //logger.log(ADFLogger.WARNING, "Celda NULL");                                    }                                } catch (Exception e) {                                    //logger.log(ADFLogger.WARNING, "ERRROR al crear row de celda excel");                                    excel_data[j] = "";                                }                            }                        }else{                            logger.warning("El archivo contiene mas columnas.");                            resultado = Boolean.FALSE;                        }                    }                }            }                        workbook.close();        } catch (IOException e) {            logger.log(ADFLogger.WARNING, " ERROR al validar contenido de hoja de calculo.", e);            resultado = null;            return resultado;        }        try {            in.close();        } catch (Exception e) {            logger.warning("ERROR al cerrar el inputStream.", e);            resultado = null;        }                        logger.warning("Termina metodo validarArchivoExcel");        return resultado;    }        public BlobDomain getCalendarioDocumento(Long idCondicion, String tipoPago){        logger.log(ADFLogger.WARNING, "-- INSIDE getCalendarioDocumento, idCondicion: " + idCondicion + tipoPago);        BlobDomain condicionDoc = null;        ViewCriteria criteria = null;                if(null == idCondicion){            logger.log(ADFLogger.WARNING, "ERROR! idCondicion NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("CondicionFinancieraCriteria");                criteria.ensureVariableManager().setVariableValue("pIdCondicionFinanciera", idCondicion);                criteria.ensureVariableManager().setVariableValue("pTipoPago", tipoPago);                this.applyViewCriteria(criteria);                this.executeQuery();                this.setCurrentRow(first());                condicionDoc = (BlobDomain) this.getCurrentRow().getAttribute("Content");                if(condicionDoc != null){                    logger.log(ADFLogger.WARNING, "OK Documento " + tipoPago );                                        }            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en filtraLineaByIdOperacion " + e.getClass() + ":" + e.getMessage());            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("CondicionFinancieraCriteria");            }                    }        return condicionDoc;    }    public void leerCalendarioComplejo(Long idCalendarioComplejo, BlobDomain fileData) throws Exception {        logger.log(ADFLogger.WARNING, "INSIDE leerCalendarioComplejo METODO_TEST");        try {            InputStream in = fileData.getBinaryStream();            XSSFWorkbook workbook = new XSSFWorkbook(in);            XSSFSheet sheet = workbook.getSheetAt(0);                        int rowsCount = sheet.getLastRowNum();            for (int i = 0; i <= rowsCount; i++) {                int j = 0;                int colCounts;                XSSFRow row = sheet.getRow(i);                try {                    colCounts = row.getLastCellNum();                } catch (NullPointerException e) {                    colCounts = 1;                }                String[] excel_data = new String[colCounts + 1];                for (int k = 0; k < colCounts; k++) {                    j = j + 1;                    try {                        XSSFCell cell = row.getCell(k);                        switch (cell.getCellType()) {                        case XSSFCell.CELL_TYPE_STRING:                            excel_data[j] = cell.getRichStringCellValue().getString();                            logger.warning("CONTENIDO DE CELDA: " + excel_data[j]);                            //TODO                            //logger.log(ADFLogger.WARNING, j + "Letras: " + excel_data[j]);                            break;                        case XSSFCell.CELL_TYPE_NUMERIC:                            if (DateUtil.isCellDateFormatted(cell)) {                                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");                                excel_data[j] = df.format(cell.getDateCellValue());                                logger.warning("CONTENIDO DE CELDA: " + excel_data[j]);                                //TODO armar listFechas                                //logger.log(ADFLogger.WARNING, "GUARDAMOS DATA_FECHA");                                //listaFechas.add((Date)cell.getDateCellValue());                                logger.log(ADFLogger.WARNING,  "Numero de Celda: "+ k + " Data: " + excel_data[j]);                            } else {                                //BigDecimal resultVar;                                //resultVar =  BigDecimal.valueOf(cell.getNumericCellValue());                                //excel_data[j] = BigDecimal.toString(resultVar);                                //TODO armar listaMontos                                //logger.log(ADFLogger.WARNING, "GUARDAMOS DATA_MONTO");                                //listaMontos.add(resultVar);                                int resultVar;                                resultVar = (int) cell.getNumericCellValue();                                excel_data[j] = Integer.toString(resultVar);                                logger.warning("CONTENIDO DE CELDA: " + excel_data[j]);                                logger.log(ADFLogger.WARNING, "Numero de Celda: "+ k + " Data: " + excel_data[j]);                            }                            break;                        default:                            excel_data[j] = "";                        }                    } catch (NullPointerException e) {                        excel_data[j] = "";                    }                }            }            //logger.log(ADFLogger.WARNING, " " + listaMontos.get(1));            //TODO guardar dataExcel en detalles calendario        } catch (Exception e) {            logger.warning("ERROR al leer el documento.", e);        }    }        public Map recuperarListaCalendariosRegistrados(Long idCondicioFinanciera){        logger.warning("Inicia metodo recuperarListaCalendariosRegistrados");        Map listaCalendarios = new HashMap();        ViewCriteria criteria = null;                if(null == idCondicioFinanciera){            logger.log(ADFLogger.WARNING, "ERROR! idCondicion NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("CalendarioComplejoPorIdCondicionVC");                criteria.ensureVariableManager().setVariableValue("pIdCondicionFinanciera", idCondicioFinanciera);                this.applyViewCriteria(criteria);                this.executeQuery();                                logger.warning("Registros de Calendario encontrados para la condicion financiera: " + getEstimatedRowCount());                if(getEstimatedRowCount()>0){                    RowSetIterator iter = createRowSetIterator(null);                    Row row = null;                    String tipoCalendario = null;                    String nombreArchivo = null;                    if(null != iter){                        iter.reset();                        while(iter.hasNext()){                            row = iter.next();                                                        try{                                tipoCalendario = (String) row.getAttribute("TipoPago");                            }catch(Exception e){                                logger.warning("ERROR al obtener el Tipo de pago de la condicion financiera.", e);                            }                                                        try{                                nombreArchivo = (String) row.getAttribute("Filename");                            }catch(Exception e){                                logger.warning("ERROR al obtener el nombre de archivo.", e);                            }                                                        if(null != tipoCalendario && null != nombreArchivo){                                logger.warning("TipoCalendario recuperado: " + tipoCalendario);                                listaCalendarios.put(tipoCalendario, nombreArchivo);                            }                        }                        iter.closeRowSetIterator();                    }                }            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en filtraLineaByIdOperacion " + e.getClass() + ":" + e.getMessage());            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("CondicionFinancieraCriteria");            }                    }                        logger.warning("Registros de calendarios encontrados para la condicion: " + listaCalendarios.size());        logger.warning("Termina metodo recuperarListaCalendariosRegistrados");        return listaCalendarios;    }        public Integer consultarDocumentosPorIdCondicion(Long idCondicion){        logger.warning("Inicia metodo consultarDocumentosPorIdCondicion");        //Valores a retornar del campo respuesta:         //0.- ha ocurrido algun error de logica de programacion dentro del metodo        //1.-Se han cargado ambos tipos de cocumento        //2.-Solo se ha cargado el tipo de documento CAPITAL        //3.-Solo se ha cargado el tipo de doucmento INTERESES        //4.-No se ha cargado ningun documento o no existen registros de documentos para la condicion        Integer respuesta = null;        ViewCriteria criteria = null;                logger.warning("idCondicionFinanciera recibido: " + idCondicion);                if(null == idCondicion){            logger.log(ADFLogger.WARNING, "ERROR! idCondicion NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("CalendarioComplejoPorIdCondicionVC");                criteria.ensureVariableManager().setVariableValue("pIdCondicionFinanciera", idCondicion);                this.applyViewCriteria(criteria);                this.executeQuery();                                logger.warning("Registros de Calendario encontrados para la condicion financiera: " + getEstimatedRowCount());                if(getEstimatedRowCount()>0){                    if(getEstimatedRowCount() == 2){                        logger.warning("Se han cargado ambos tipos de documento (CAPITAL E INTERESES)");                        respuesta = Integer.valueOf(1);                    }                    else{                        RowSetIterator iter = createRowSetIterator(null);                        Row row = null;                        String tipoCalendario = null;                        if(null != iter){                            iter.reset();                            while(iter.hasNext()){                                row = iter.next();                                                                try{                                    tipoCalendario = (String) row.getAttribute("TipoPago");                                    if(tipoCalendario.compareTo("CAPITAL") == 0){                                        logger.warning("Solo se ha cargado el tipo de documento CAPITAL");                                        respuesta = Integer.valueOf(2);                                    }                                    else if(tipoCalendario.compareTo("INTERES") == 0){                                        logger.warning("Solo se ha cargado el tipo de documento INTERES");                                        respuesta = Integer.valueOf(3);                                    }                                    else{                                        logger.warning("ERROR, el tipo de documento no entra dentro de la validacion si es CAPITAL O INTERESES");                                        respuesta = Integer.valueOf(0);                                    }                                }catch(Exception e){                                    logger.warning("ERROR al obtener el Tipo de pago de la condicion financiera.", e);                                    respuesta = Integer.valueOf(0);                                }                            }                            iter.closeRowSetIterator();                        }                    }                }                else{                    logger.warning("No se obtuvieron registros de documentos para la condicion.");                    respuesta = Integer.valueOf(4);                }            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en consultarDocumentosPorIdCondicion...", e);            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("CalendarioComplejoPorIdCondicionVC");            }          }        logger.warning("Valor respuesta a retornar: " + respuesta);        logger.warning("Finaliza metodo consultarDocumentosPorIdCondicion");        return respuesta;    }    /**     * Returns the variable value for pIdCondicionFinanciera.     * @return variable value for pIdCondicionFinanciera     */    public Long getpIdCondicionFinanciera() {        return (Long) ensureVariableManager().getVariableValue("pIdCondicionFinanciera");    }    /**     * Sets <code>value</code> for variable pIdCondicionFinanciera.     * @param value value to bind as pIdCondicionFinanciera     */    public void setpIdCondicionFinanciera(Long value) {        ensureVariableManager().setVariableValue("pIdCondicionFinanciera", value);    }    /**     * Returns the variable value for pTipoPago.     * @return variable value for pTipoPago     */    public String getpTipoPago() {        return (String) ensureVariableManager().getVariableValue("pTipoPago");    }    /**     * Sets <code>value</code> for variable pTipoPago.     * @param value value to bind as pTipoPago     */    public void setpTipoPago(String value) {        ensureVariableManager().setVariableValue("pTipoPago", value);    }}