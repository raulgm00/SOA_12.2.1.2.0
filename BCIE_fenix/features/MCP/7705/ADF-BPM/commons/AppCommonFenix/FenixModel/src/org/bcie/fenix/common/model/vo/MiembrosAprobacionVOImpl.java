package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;
import java.util.ResourceBundle;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.javatools.resourcebundle.BundleFactory;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.MiembrosAprobacionVO;
import org.bcie.solicitudaprobacionbo.ListadoUsuariosReunion;
import org.bcie.solicitudaprobacionbo.MiembroReunion;
import org.bcie.solicitudaprobacionbo.UsuarioReunion;
import org.bcie.solicitudaprobacionmo.ConfigurarSolicitudAprobacionResponseType;

import static org.bcie.fenix.common.model.FenixModelConstants.TIPO_MIEMBRO_COMITE_CREDITO;
import static org.bcie.fenix.common.model.FenixModelConstants.TIPO_MIEMBRO_NOTIFICACION;
import static org.bcie.fenix.common.model.FenixModelConstants.TIPO_MIEMBRO_EQUIPO_TRABAJO;
import static org.bcie.fenix.common.model.FenixModelConstants.NIVEL_APROBACION_COMITE_CREDITO_INT;
import static org.bcie.fenix.common.model.FenixModelConstants.NIVEL_APROBACION_PRESIDENCIA_INT;
import static org.bcie.fenix.common.model.FenixModelConstants.ID_ROL_SECRETARIO_COMITE_CREDITO;
import static org.bcie.fenix.common.model.FenixModelConstants.ID_ROL_ASISTENTE_PRESIDENCIA;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 25 16:17:18 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MiembrosAprobacionVOImpl extends ViewObjectImpl implements MiembrosAprobacionVO {
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(MiembrosAprobacionVOImpl.class);
    
    /**
     * Contiene clave de bundle para el valor del atributo Otro
     */
    public final static String OTRO_VALUE_KEY = "org.bcie.fenix.common.model.vo.MiembrosAprobacionVO.EsOtro.Value";
    
    /**
     * Contiene clave de bundle para el valor del atributo excusado
     */
    public final static String EXCUSADO_VALUE_KEY = "org.bcie.fenix.common.model.vo.MiembrosAprobacionVO.EsExcusado.Value";
    
    /**
     * Define classpath y Resource Bundle
     */
    public static final String BUNDLE = "org.bcie.fenix.common.model.FenixModelBundle";
    
    /**
     * Lista de registros de la VO programatica
     */
    private List<MiembrosAprobacionVORowImpl> rows = new ArrayList<MiembrosAprobacionVORowImpl>();

    /**
     * This is the default constructor (do not remove).
     */
    public MiembrosAprobacionVOImpl() {
        super();
    }
    
    /**
     * create - overridden for custom java data source support.
     */
    @Override
    protected void create() {
        super.create();
        getViewDef().setQuery(null);
        getViewDef().setSelectClause(null);
        setQuery(null);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        
        if(rows.size() > 0){
            setFetchPosition(qc, 0);
        }
        super.executeQueryForCollection(qc, params, noUserParams);    
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        //boolean bRet = super.hasNextForCollection(qc);
        
        boolean bRet = false;
        if(rows.size() > 0){
            bRet = getFetchPosition(qc) < rows.size();
        }else{
            bRet = super.hasNextForCollection(qc);
        }
        
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        //ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        
        ViewRowImpl value = null;
        MiembrosAprobacionVORowImpl row = null;
        
        if(rows.size() > 0){
            
            //Obtiene la posicion actual del current Row
            int fetchPosition = getFetchPosition(qc);
            
            //Crea un nuevo registro de VO
            value = createNewRowForCollection(qc);

            //Obtiene elemento de la colleccion de datos externa
            row = rows.get(fetchPosition);
            
            //Asigna el registro externo al registro de la VO
            value = row;
            
            //Actualiza la posicion del current Row
            setFetchPosition(qc, fetchPosition + 1);
        }else{
            value = super.createRowFromResultSet(qc, resultSet);
        }
        
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = 0;
        if(rows.size() > 0 ){
            value = rows.size();
        }else{
            if(viewRowSet != null){
                //value = super.getQueryHitCount(viewRowSet);        
            }
        }
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = 0;
        if(rows.size() > 0 ){
            value = rows.size();
        }
            //super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    /**
     * Method to set the new fetch position
     * @param rowset
     * @param position
     * To set the position on the nextRecord to fetch i.e. next record of arrayList
     */
    private void setFetchPosition(Object rowset, int position) {
        
        if(rows.size() > 0){
            if (position == rows.size() - 1) {
                setFetchCompleteForCollection(rowset, true);
            }
            setUserDataForCollection(rowset, new Integer(position)); 
        }
    }

    /**
     * Method to get the current fetch position
     * @param rowset
     * @return
     *
     * This method gets the fetchPosition to fetch the row from the arrayList to retrieve the data
     */
    private int getFetchPosition(Object rowset) {
        int value = 0;
        try{
            value = ((Integer)getUserDataForCollection(rowset)).intValue();    
        }catch(Exception e){
            e.printStackTrace();
        }
        return value;
    }
    
    public void setRows(List<MiembrosAprobacionVORowImpl> rows) {
        this.rows.clear();
        this.rows.addAll(rows);
        for(MiembrosAprobacionVORowImpl row : this.rows){
            insertRow(row);
        }
    }

    public List<MiembrosAprobacionVORowImpl> getRows() {
        return this.rows;
    }
    
    /**
     * Asigna lista de miembros considerando los valores de los campos de miembros de Comite de Credito
     * @param rows contiene lista de miembros
     */
    public void setMiembrosComite(List<MiembrosAprobacionVORowImpl> rows){
        setMiembros(rows, TIPO_MIEMBRO_COMITE_CREDITO);
    }
    
    /**
     * Asigna lista de miembros considerando los valores de los campos de miembros Notificacion
     * @param rows contiene lista de miembros
     */
    public void setMiembrosConNotificacion(List<MiembrosAprobacionVORowImpl> rows){
        setMiembros(rows, TIPO_MIEMBRO_NOTIFICACION);
    }
    
    /**
     * Asigna lista de miembros considerando los valores de los campos de miembros de equipo de trabajo
     * @param rows contiene lista de miembros
     */
    public void setMiembrosEquipoTrabajo(List<MiembrosAprobacionVORowImpl> rows){
        setMiembros(rows, TIPO_MIEMBRO_EQUIPO_TRABAJO);
    }
    
    private void setMiembros(List<MiembrosAprobacionVORowImpl> rows, 
                             int intTipoLista){
        
        List<MiembrosAprobacionVORowImpl> newRows = 
            new ArrayList<MiembrosAprobacionVORowImpl>();
        
        MiembrosAprobacionVORowImpl newRow = null;
        long id = 0;
        for(MiembrosAprobacionVORowImpl row : rows){
            id = id + 1;
            if(intTipoLista == TIPO_MIEMBRO_COMITE_CREDITO){
                newRow = setRowMiembroComiteCredito(id, row);
            }
            if(intTipoLista == TIPO_MIEMBRO_NOTIFICACION){
                newRow = setRowMiembroNotificacion(id, row);
            }
            if(intTipoLista == TIPO_MIEMBRO_EQUIPO_TRABAJO){
                newRow = setRowMiembroEquipoTrabjo(id, row);
            }
            
            if(newRow != null){
                newRows.add(newRow);
            }
        }
        
        //Ordena miembros por Id (Como fueron leidos y agregados del WS)
        ordenarMiembros(newRows);
        
        setRows(newRows);
    }
    
    /**
     * Ordena los miembros de aprobacion por Id
     * @param miembrosList contiene lista de miembros de aprobacion
     * @return devuelve lista
     */
    private List<MiembrosAprobacionVORowImpl> ordenarMiembros(List<MiembrosAprobacionVORowImpl> miembrosList){
        logger.warning("Dentro de ordenarMiembros");
        Collections.sort(miembrosList, new Comparator<MiembrosAprobacionVORowImpl>(){
            public int compare(MiembrosAprobacionVORowImpl miembro1, MiembrosAprobacionVORowImpl miembro2) {
                return miembro2.getId().compareTo(miembro1.getId());
            }
        });
        logger.warning("Fuera de ordenarMiembros");
        return miembrosList;
    }
    
    /**
     * Asigna valores de un registro general de miembro a un registro de miembro comite credito
     * @param row contiene el registro generico de miembros
     * @return devuelve registro de miembro comite de credito
     */
    private MiembrosAprobacionVORowImpl setRowMiembroComiteCredito(long id,
                                                                   MiembrosAprobacionVORowImpl row){
        
        logger.warning("Dentro de setRowMiembroComiteCredito");
        
        MiembrosAprobacionVORowImpl newRow = null;
        newRow = (MiembrosAprobacionVORowImpl) createRow();
        
        if(row.getId() == null){
            newRow.setId(new Number(id));
        }else{
            newRow.setId(row.getId());
        }
        newRow.setNombre(row.getNombre());
        newRow.setIdTcaRolBpm(row.getIdTcaRolBpm());
        newRow.setCveRolBPM(row.getCveRolBPM());
        newRow.setDescRolBPM(row.getDescRolBPM());
        newRow.setUsuario(row.getUsuario());
        
        if(row.getEsOtro() != null){
            String strOtroValue = getValueAtributoEsOtro();
            newRow.setEsOtro(strOtroValue);    
        }
        if(row.getEsExcusado() != null){
            String strExcusadoValue = getValueAtributoEsExcusado();
            newRow.setEsExcusado(strExcusadoValue);    
        }
        newRow.setEmiteVoto(row.getEmiteVoto());
        newRow.setNotificar(row.getNotificar());
        newRow.setPropietario(row.getPropietario() != null ? 
                              row.getPropietario() : false);
        
        logger.warning("Fuera de setRowMiembroComiteCredito");
        
        return newRow;
    }
    
    /**
     * Asigna valores de un registro general de miembro a un registro de miembro Notificacion
     * @param row contiene el registro generico de miembros
     * @return devuelve registro de miembro Notificacion
     */
    private MiembrosAprobacionVORowImpl setRowMiembroNotificacion(long id,
                                                                  MiembrosAprobacionVORowImpl row){
        
        MiembrosAprobacionVORowImpl newRow = null;
        newRow = (MiembrosAprobacionVORowImpl) createRow();
        
        if(row.getId() == null){
            newRow.setId(new Number(id));
        }else{
            newRow.setId(row.getId());
        }
        newRow.setNombre(row.getNombre());
        newRow.setIdTcaRolBpm(row.getIdTcaRolBpm());
        newRow.setCveRolBPM(row.getCveRolBPM());
        newRow.setDescRolBPM(row.getDescRolBPM());
        newRow.setDependencia(row.getDependencia());
        
        newRow.setUsuario(row.getUsuario());
        newRow.setIdEmpleado(row.getIdEmpleado());
        newRow.setIdJefeInmediato(row.getIdJefeInmediato());
        if(row.getEsConConsulta() != null){
            newRow.setEsConConsulta(row.getEsConConsulta());    
        }
        newRow.setNotificar(row.getNotificar());
        newRow.setPropietario(row.getPropietario() != null ? 
                              row.getPropietario() : false);
    
        return newRow;
    }
    
    /**
     * Asigna valores de un registro general de miembro a un registro de miembro de Equipo de Trabajo
     * @param row contiene el registro generico de miembros
     * @return devuelve registro de miembro Equipo de Trabajo
     */
    private MiembrosAprobacionVORowImpl setRowMiembroEquipoTrabjo(long id,
                                                                  MiembrosAprobacionVORowImpl row){
        
        MiembrosAprobacionVORowImpl newRow = null;
        newRow = (MiembrosAprobacionVORowImpl) createRow();
        
        if(row.getId() == null){
            newRow.setId(new Number(id));
        }else{
            newRow.setId(row.getId());
        }
        newRow.setNombre(row.getNombre());
        newRow.setIdTcaRolBpm(row.getIdTcaRolBpm());
        newRow.setCveRolBPM(row.getCveRolBPM());
        newRow.setDescRolBPM(row.getDescRolBPM());
        
        newRow.setUsuario(row.getUsuario());
        newRow.setIdEmpleado(row.getIdEmpleado());
        newRow.setIdJefeInmediato(row.getIdJefeInmediato());
        if(row.getEsConConsulta() != null){
            newRow.setEsConConsulta(row.getEsConConsulta());    
        }
        newRow.setNotificar(row.getNotificar());
        newRow.setPropietario(row.getPropietario() != null ? 
                              row.getPropietario() : false);
        
        newRow.setDependencia(row.getDependencia());
        
        return newRow;
    }
    
    /**
     * Publica el valor asignado al atributo EsOtro
     * @return
     */
    public String getValueAtributoEsOtro(){
        
        ResourceBundle rb = BundleFactory.getBundle(BUNDLE);
        String value = rb.getString(OTRO_VALUE_KEY);
        return value;
    }
    
    /**
     * Publica el valor asignado al atributo EsExcusado
     * @return
     */
    public String getValueAtributoEsExcusado(){
        
        ResourceBundle rb = BundleFactory.getBundle(BUNDLE);
        String value = rb.getString(EXCUSADO_VALUE_KEY);
        return value;
    }
    
    /**
     * Obtiene los miembros de aprobacion de la respuesta del WS
     * @param response contiene objeto respuesta de WS
     * @param tipoMiembro define el tipo de miembro aprobacion, 1 para Comite de Credito, 2 para Notificacion y 3 para
     *        equipo de trabajo
     * @return devuelve lista de miembros
     */
    public List<MiembrosAprobacionVORowImpl> obtenerMiembrosWS(ConfigurarSolicitudAprobacionResponseType response, 
                                                               int tipoMiembro){
        logger.warning("Entra en obtenerMiembrosWS.");
        logger.warning("tipoMiembro : " + tipoMiembro);
        List<MiembrosAprobacionVORowImpl> miembros = null;
        MiembrosAprobacionVORowImpl row = null;
        
        Number id = null;
        Number idTcaRolBpm = null; //Id de catalogo de Roles BPM
        String cveRolBpm = null; //Descripcion corta de Rol BPM
        String descRolBpm = null; //Descripcion para mostrar del Rol BPM
        String nombreMiembro = null;
        String usuarioMiembro = null;
        Boolean esPropietario = false;
        String esOtro = null;
        String esExcusado = null;
        String conConsulta = null;
        boolean emiteVoto = false;
        boolean notificar = false;
        
        FenixAMImpl am = (FenixAMImpl)getApplicationModule();
        
        boolean continuar = false;
        if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
            if(response != null &&
               response.getListadoEmitirVoto() != null &&
               response.getListadoEmitirVoto().size() > 0 &&
               response.getListadoEmitirVoto().get(0).getMiembroReunion() != null &&
               response.getListadoEmitirVoto().get(0).getMiembroReunion().size() > 0){
                continuar = true;
            }
        }
        if(tipoMiembro == TIPO_MIEMBRO_NOTIFICACION){
            if(response != null &&
               response.getListadoConNotificacion() != null &&
               response.getListadoConNotificacion().size() > 0 &&
               response.getListadoConNotificacion().get(0).getMiembroReunion() != null &&
               response.getListadoConNotificacion().get(0).getMiembroReunion().size() > 0){
                continuar = true;
            }
        }
        if(tipoMiembro == TIPO_MIEMBRO_EQUIPO_TRABAJO){
            if(response != null &&
               response.getListadoEquipoTrabajo() != null &&
               response.getListadoEquipoTrabajo().size() > 0 &&
               response.getListadoEquipoTrabajo().get(0).getMiembroReunion() != null &&
               response.getListadoEquipoTrabajo().get(0).getMiembroReunion().size() > 0){
                continuar = true;
            }
        }
        logger.warning("Continuar : " + continuar);
        if(continuar){
            
            int index = 0;
            
            boolean agregaOtro = true;
            boolean agregaExcusado = true;
            
            List<MiembroReunion> miembroReunionList = null;
            if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                miembroReunionList = response.getListadoEmitirVoto().get(0).getMiembroReunion();    
            }
            if(tipoMiembro == TIPO_MIEMBRO_NOTIFICACION){
                miembroReunionList = response.getListadoConNotificacion().get(0).getMiembroReunion();
            }
            if(tipoMiembro == TIPO_MIEMBRO_EQUIPO_TRABAJO){
                miembroReunionList = response.getListadoEquipoTrabajo().get(0).getMiembroReunion();
            }
            logger.warning("Miembro Reunion List : " + miembroReunionList.size());
            for(MiembroReunion miembroReunion : miembroReunionList){
                
                if(miembroReunion.isExcusado()){
                    logger.warning("isExcusado true,agregaOtro es true");
                    agregaOtro = true;
                }
                
                if(miembroReunion.isExcusado()){
                    logger.warning("isExcusado true,agregaExcusado es true");
                    agregaExcusado = true;
                }
                logger.warning("rol bpm : " + miembroReunion.getRol().getId());
                if(miembroReunion.getRol() != null){
                    try{
                        idTcaRolBpm = new Number(miembroReunion.getRol().getId());
                        cveRolBpm = miembroReunion.getRol().getDescripcionCorta();
                        if(cveRolBpm != null){
                            cveRolBpm = cveRolBpm.trim();
                        }
                        descRolBpm = miembroReunion.getRol().getDescripcion();
                        if(descRolBpm != null){
                            descRolBpm = descRolBpm.trim();
                        }
                    }catch(Exception e){
                        logger.severe("Error al obtener los datos de Rol", e);
                    }
                }else{
                    logger.warning("Error al obtener el id rol.");
                }
                
                //Valida si tipo miembro es Comite de credito
                if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                    emiteVoto = miembroReunion.isEmiteVoto();
                    notificar = miembroReunion.isNotificar();
                    esOtro = getValueAtributoEsOtro();
                    esExcusado = getValueAtributoEsExcusado();
                }
                
                //Valida si tipo miembro es Notificacion o Equipo de Trabajo
                if(tipoMiembro == TIPO_MIEMBRO_NOTIFICACION ||
                   tipoMiembro == TIPO_MIEMBRO_EQUIPO_TRABAJO){
                    
                    conConsulta = String.valueOf(miembroReunion.isNotificar());
                    notificar = miembroReunion.isNotificar();
                }
                
                ListadoUsuariosReunion usuariosList = miembroReunion.getListadoUsuarios();
                logger.warning("usuariosList : " +usuariosList.getUsuario().size());
                if(usuariosList != null){
                    List<UsuarioReunion> usuarios = usuariosList.getUsuario();
                    logger.warning("usuarios : " + usuarios.size());
                    if(usuarios != null &&
                       usuarios.size() > 0){
                        for(UsuarioReunion usuario : usuarios){
                            
                            nombreMiembro = usuario.getNombreUsuario();
                            usuarioMiembro = usuario.getUsuario();
                            esPropietario = usuario.isPropietario();
                            logger.warning("idTcaRolBpm : " + idTcaRolBpm);
                            logger.warning("descRolBpm : " + descRolBpm);
                            logger.warning("nombreMiembro : " + nombreMiembro);
                            logger.warning("usuarioMiembro : " + usuarioMiembro);
                            if(idTcaRolBpm != null &&
                               descRolBpm != null &&
                               nombreMiembro != null &&
                               usuarioMiembro != null){
                                
                                index = index + 1;
                                id = new Number(index);
                                
                                if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                                    row = 
                                        (MiembrosAprobacionVORowImpl) am.getMiembrosAprobacionComiteCreditoVO1().createRow();    
                                }else{
                                    if(tipoMiembro == TIPO_MIEMBRO_NOTIFICACION){
                                        row = 
                                            (MiembrosAprobacionVORowImpl) am.getMiembrosAprobacionNotificacionVO1().createRow();
                                    }else{
                                        if(tipoMiembro == TIPO_MIEMBRO_EQUIPO_TRABAJO){
                                            row = 
                                                (MiembrosAprobacionVORowImpl) am.getMiembrosAprobacionEquipoTrabajoVO1().createRow();
                                        }
                                    }
                                }
                                
                                row.setId(id);
                                row.setIdTcaRolBpm(idTcaRolBpm);
                                row.setCveRolBPM(cveRolBpm);
                                row.setDescRolBPM(descRolBpm);
                                row.setNombre(nombreMiembro);
                                row.setUsuario(usuarioMiembro);
                                
                                row.setDependencia(usuario.getDependecia());
                                
                                if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                                    row.setEmiteVoto(emiteVoto);
                                    row.setNotificar(notificar);
                                    row.setEsOtro(esOtro);
                                    row.setEsExcusado(esExcusado);
                                    row.setPropietario(esPropietario);
                                }else{
                                    if(tipoMiembro == TIPO_MIEMBRO_NOTIFICACION ||
                                       tipoMiembro == TIPO_MIEMBRO_EQUIPO_TRABAJO){
                                        row.setNotificar(notificar);
                                        row.setEsConConsulta(conConsulta);
                                    }
                                }
                                if(miembros == null){
                                    miembros = new ArrayList<MiembrosAprobacionVORowImpl>();
                                }
                                miembros.add(row);
                            }else{
                                if(idTcaRolBpm == null){
                                    logger.warning("idTcaRolBpm es nulo");
                                }
                                
                                if(descRolBpm == null){
                                    logger.warning("descRolBpm es nulo ");
                                }
                                
                                if(nombreMiembro == null){
                                    logger.warning("nombreMiembro es nulo");
                                }
                                
                                if(usuarioMiembro == null){
                                    logger.warning("usuarioMiembro es nulo");
                                }
                                
                            }
                            }
                        
                        if(agregaOtro && 
                           tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                            index = index + 1;
                            id = new Number(index);
                            
                            nombreMiembro = esOtro;
                            usuarioMiembro = MiembrosAprobacionVOImpl.OTRO_VALUE_KEY;
                            
                            row = 
                                (MiembrosAprobacionVORowImpl) am.getMiembrosAprobacionComiteCreditoVO1().createRow();
                            row.setId(id);
                            row.setIdTcaRolBpm(idTcaRolBpm);
                            row.setCveRolBPM(cveRolBpm);
                            row.setDescRolBPM(descRolBpm);
                            row.setNombre(nombreMiembro);
                            row.setUsuario(usuarioMiembro);
                            row.setEmiteVoto(emiteVoto);
                            row.setNotificar(null);
                            row.setEsOtro(esOtro);
                            row.setEsExcusado(null);
                            row.setPropietario(false);

                            miembros.add(row);
                        }
                        
                        if(agregaExcusado &&
                           tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                            index = index + 1;
                            id = new Number(index);
                            
                            nombreMiembro = esExcusado;
                            usuarioMiembro = MiembrosAprobacionVOImpl.EXCUSADO_VALUE_KEY;
                            
                            row = 
                                (MiembrosAprobacionVORowImpl) am.getMiembrosAprobacionComiteCreditoVO1().createRow();
                            row.setId(id);
                            row.setIdTcaRolBpm(idTcaRolBpm);
                            row.setCveRolBPM(cveRolBpm);
                            row.setDescRolBPM(descRolBpm);
                            row.setNombre(nombreMiembro);
                            row.setUsuario(usuarioMiembro);
                            row.setEmiteVoto(emiteVoto);
                            row.setNotificar(null);
                            row.setEsOtro(null);
                            row.setEsExcusado(esExcusado);
                            row.setPropietario(false);

                            miembros.add(row);
                        }
                    }else{
                        logger.warning("usuarios es nulo.");
                    }
                }else{
                    logger.warning("usuariosList es nulo.");
                }
                
            }
        }
        
        return miembros;
    }
    
    /**
     * Devuelve una lista de elementos de miembros de comite de credito para el WS de
     * Solicitud de Aprobacion
     * @return devuelve lista
     */
    public List<MiembroReunion> getSolAprobComiteCredWSNodeList(){
        
        logger.entering(MiembrosAprobacionVOImpl.class.getName(), 
                        "getSolAprobComiteCredWSNodeList");
        
        List<MiembroReunion> comiteCreditoList = null;
        comiteCreditoList = getMiembrosWSList(TIPO_MIEMBRO_COMITE_CREDITO);
        
        if(comiteCreditoList != null){
            logger.warning("Cantidad de Miembros Comite de Credito obtenidos: " + comiteCreditoList.size());
        }
        
        logger.exiting(MiembrosAprobacionVOImpl.class.getName(), 
                       "getSolAprobComiteCredWSNodeList",
                       new Object[]{comiteCreditoList});
        return comiteCreditoList;
    }
    
    /**
     * Devuelve una lista de elementos de miembros de Notificacion para el WS de
     * Solicitud de Aprobacion
     * @return devuelve lista
     */
    public List<MiembroReunion> getSolAprobNotificacionWSNodeList(Integer nivelAprob){
        
        logger.entering(MiembrosAprobacionVOImpl.class.getName(), 
                        "getSolAprobNotificacionWSNodeList");
        
        List<MiembroReunion> notificacionList = null;
        notificacionList = getMiembrosWSList(TIPO_MIEMBRO_NOTIFICACION);
        
        if(notificacionList != null){
            logger.warning("Cantidad de Miembros Notificacion obtenidos: " + notificacionList.size());
        }
        
        //Agrega Usuario Secretario
        MiembroReunion miembroDefault = new MiembroReunion();
        if(notificacionList == null){
            notificacionList = new ArrayList<MiembroReunion>();
        }
        
        //Configura Usuario Secretario  o Asistente de Presidencia
        String usuarioLogin = ADFContext.getCurrent().getSecurityContext().getUserName();
        String nombre = ADFContext.getCurrent().getSecurityContext().getUserProfile().getDisplayName();
        if(nombre == null ||
           "".equals(nombre)){
            nombre = ADFContext.getCurrent().getSecurityContext().getUserProfile().getName();
        }
        
        miembroDefault.setUsuario(usuarioLogin);
        miembroDefault.setExcusado(false);
        miembroDefault.setOtro(false);
        miembroDefault.setEmiteVoto(false);
        
        ListadoUsuariosReunion usuReuListContent = new ListadoUsuariosReunion();
        List<UsuarioReunion> usuReuList = new ArrayList<UsuarioReunion>();
        UsuarioReunion usuReu = new UsuarioReunion();
        
        usuReu.setNombreUsuario(nombre); //Se desconoce nombre del miembro para rol Secretario
        usuReu.setPropietario(false);
        usuReu.setUsuario(usuarioLogin); //Se desconoce usuario del miembro para rol Secretario
        
        FenixAMImpl am = (FenixAMImpl)getApplicationModule();
        Catalogo catRol = new Catalogo();
        
        Number idRolPorDefecto = null;
        
        if(nivelAprob != null){
            if(nivelAprob.equals(NIVEL_APROBACION_COMITE_CREDITO_INT)){
                //Asigna Id de Rol Secretario para Comite de Credito
                idRolPorDefecto = new Number(ID_ROL_SECRETARIO_COMITE_CREDITO);   
            }
            if(nivelAprob.equals(NIVEL_APROBACION_PRESIDENCIA_INT)){
                //Asigna Id de Rol Asistente de Presidencia
                idRolPorDefecto = new Number(ID_ROL_ASISTENTE_PRESIDENCIA);   
            }
        }
        
        am.getTcaRolBpmLOV1().getRolBPMDescCortaPorId(idRolPorDefecto);
        TcaRolBpmLOVRowImpl rowTcaRol = (TcaRolBpmLOVRowImpl) am.getTcaRolBpmLOV1().first();
        if(rowTcaRol != null && 
           rowTcaRol.getId() != null){
            catRol.setId(rowTcaRol.getId().longValue());
            catRol.setDescripcion(rowTcaRol.getDescripcion());
            catRol.setDescripcionCorta(rowTcaRol.getDescripcionCorta());
            boolean status = true;
            
            if(rowTcaRol.getBanEstatus() != null){
                if(rowTcaRol.getBanEstatus().compareTo(new BigDecimal(0)) <= 0){
                    status = false;
                }
            }
            catRol.setEstatus(status);
            catRol.setCodigoExterno(rowTcaRol.getCodExterno());
        }else{
            catRol.setId(idRolPorDefecto.longValue());
            catRol.setEstatus(true);
        }
        miembroDefault.setRol(catRol);
        
        usuReuList.add(usuReu);
        
        usuReuListContent.getUsuario().addAll(usuReuList);
        
        miembroDefault.setListadoUsuarios(usuReuListContent);
        notificacionList.add(miembroDefault);
        
        logger.exiting(MiembrosAprobacionVOImpl.class.getName(), 
                       "getSolAprobNotificacionWSNodeList",
                       new Object[]{notificacionList});
        return notificacionList;
    }
    
    /**
     * Devuelve una lista de elementos de miembros del Equipo de Trabajo para el WS de
     * Solicitud de Aprobacion
     * @return devuelve lista
     */
    public List<MiembroReunion> getSolAprobEquipoTrabajoWSNodeList(){
        
        logger.entering(MiembrosAprobacionVOImpl.class.getName(), 
                        "getSolAprobEquipoTrabajoWSNodeList");
        
        List<MiembroReunion> equipoTrabajoList = null;
        equipoTrabajoList = getMiembrosWSList(TIPO_MIEMBRO_EQUIPO_TRABAJO);
        
        if(equipoTrabajoList != null){
            logger.warning("Cantidad de Miembros Equipo de Trabajo obtenidos: " + equipoTrabajoList.size());
        }
        
        logger.exiting(MiembrosAprobacionVOImpl.class.getName(), 
                       "getSolAprobEquipoTrabajoWSNodeList",
                       new Object[]{equipoTrabajoList});
        return equipoTrabajoList;
    }
    
    /**
     * Obtiene todos los roles de los registros de Miembros Aprobacion
     * @return devuelve lista
     */
    public List<Long> getRoles(){
        
        List<Long> idRolList = null;
        MiembrosAprobacionVORowImpl row = null;
        
        RowSetIterator rsIterator = createRowSetIterator(null);  
        rsIterator.reset();  
        while (rsIterator.hasNext()) {  
            row = (MiembrosAprobacionVORowImpl) rsIterator.next();
            
            if(row.getIdTcaRolBpm() != null){
                if(idRolList == null){
                    idRolList = new ArrayList<Long>();
                    idRolList.add(row.getIdTcaRolBpm().longValue());
                }else{
                    boolean agregar = true;
                    for(Long id : idRolList){
                        if(id.equals(row.getIdTcaRolBpm().longValue())){
                            agregar = false;
                        }
                    }
                    
                    if(agregar){
                        idRolList.add(row.getIdTcaRolBpm().longValue());
                    }
                }
            } 
        }  
        rsIterator.closeRowSetIterator();  
        
        return idRolList;
    }
    
    /**
     * Obtiene lista de objetos Miembro Aprobacion para el WS de Solicitud Aprobacion
     * @return devuelve lista
     */
    public List<MiembroReunion> getMiembrosWSList(int tipoMiembro){
        
        logger.entering(MiembrosAprobacionVOImpl.class.getName(),
                        "getMiembrosWSList");
        
        logger.warning("Inicia getMiembrosWSList");
        
        List<MiembroReunion> miembrosReunion = null;
        
        String usuarioLogin = ADFContext.getCurrent().getSecurityContext().getUserName();
        logger.warning("Usuario en session: " + usuarioLogin);
        
        FenixAMImpl am = (FenixAMImpl)getApplicationModule();
        
        MiembroReunion miembroRWs = null;
        MiembrosAprobacionVORowImpl row = null;
        
        List<Long> idRolList = getRoles();
        if(idRolList != null){
            
            logger.warning("Cantidad de Roles: " + idRolList.size());
            
            for(Long idRol : idRolList){
                
                ListadoUsuariosReunion usuarios = null;
                List<UsuarioReunion> usuariosRList = null;
                UsuarioReunion usuario = null;
                Catalogo cat = null;
                
                GrupoRolAprobacionVORowImpl grupoMiembro = null;
                if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                    
                    logger.warning("Obtiene Grupo Miembro por Id Rol: " + idRol);
                    grupoMiembro = am.getGrupoRolAprobacionVO1().getGrupoPorIdRol(idRol);
                    if(grupoMiembro != null){
                        logger.warning("Tipo Comite. Grupo Miembro Cve Rol: " + grupoMiembro.getCveRolBpm());    
                    }else{
                        logger.warning("Grupo Miembro NULL");    
                    }
                }
                
                RowSetIterator rsIterator = createRowSetIterator(null);
                rsIterator.reset();
                while (rsIterator.hasNext()) {
                    row = (MiembrosAprobacionVORowImpl) rsIterator.next();
                    
                    if(row.getIdTcaRolBpm() != null &&
                       row.getNombre() != null &&
                       row.getUsuario() != null){
                        
                        logger.warning("Miembro Id Rol: " + row.getIdTcaRolBpm() +
                                       " Nombre: " + row.getNombre() +
                                       " Usuario: " + row.getUsuario());
                        
                        boolean esValido = false;
                        if(grupoMiembro != null){
                            if(row.getUsuario().equals(grupoMiembro.getUsuario())){
                                logger.warning("Miembro valido");
                                esValido = true;    
                            }
                        }else{
                            logger.warning("Miembro valido");
                            esValido = true; 
                        }
                        
                        if(idRol.equals(row.getIdTcaRolBpm().longValue()) && esValido){
                            
                            logger.warning("Crea Objeto Miembro");
                            
                            miembroRWs = new MiembroReunion();
                            
                            /* Se deshabilita asignacion por WS
                            miembroRWs.setEmiteVoto(row.getEmiteVoto() != null ? 
                                                    row.getEmiteVoto() : false);
                            */
                            //Asigna banderar de emite voto por Modelo previamente validado
                            if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                                if(grupoMiembro != null){
                                    miembroRWs.setEmiteVoto(grupoMiembro.getEmiteVoto());    
                                }else{
                                    miembroRWs.setEmiteVoto(true);    
                                }
                            }else{
                                miembroRWs.setEmiteVoto(false);
                            }
                            
                            miembroRWs.setEstado(true);
                            
                            //Se cambia logica, no se asigna usuario de login, el usuario sera el de ws. 17/12/2015
                            //miembroRWs.setUsuario(usuarioLogin);
                            miembroRWs.setUsuario(row.getUsuario());
                            
                            cat = new Catalogo();
                            cat.setId(idRol);
                            cat.setDescripcionCorta(row.getCveRolBPM());
                            cat.setDescripcion(row.getDescRolBPM());
                            miembroRWs.setRol(cat);
                            
                            miembroRWs.setDependecia(row.getDependencia());
                            
                            boolean esUsuario = false;
                            if(row.getUsuario().equals(MiembrosAprobacionVOImpl.EXCUSADO_VALUE_KEY) ||
                               row.getUsuario().equals(MiembrosAprobacionVOImpl.OTRO_VALUE_KEY)){
                                
                                if(row.getUsuario().equals(MiembrosAprobacionVOImpl.EXCUSADO_VALUE_KEY)){
                                    miembroRWs.setExcusado(true);    
                                    miembroRWs.setOtro(false);    
                                }
                                if(row.getUsuario().equals(MiembrosAprobacionVOImpl.OTRO_VALUE_KEY)){
                                    miembroRWs.setOtro(true);    
                                    miembroRWs.setExcusado(false);
                                }
                                miembroRWs.setUsuario(null);
                                miembroRWs.setNotificar(false);
                            }else{
                                esUsuario = true;
                                miembroRWs.setExcusado(false);
                                miembroRWs.setOtro(false);
                                miembroRWs.setNotificar(row.getNotificar() != null ?
                                                        row.getNotificar() : false);
                                if(tipoMiembro == TIPO_MIEMBRO_NOTIFICACION || tipoMiembro == TIPO_MIEMBRO_EQUIPO_TRABAJO)
                                    miembroRWs.setNotificar(row.getEsConConsulta() == "true" ? true : false);
                            }
                            
                            if(esUsuario && 
                               miembroRWs != null){
                                usuario = new UsuarioReunion();
                                usuario.setUsuario(row.getUsuario());
                                usuario.setNombreUsuario(row.getNombre());
                                usuario.setPropietario(row.getPropietario() != null ? 
                                                       row.getPropietario() : false);
                                
                                usuariosRList = new ArrayList<UsuarioReunion>();
                                usuariosRList.add(usuario);
                            }
                            
                            //Agrega Nodos de listados sin importar roles
                            if(usuariosRList != null){                                
                                usuarios = new ListadoUsuariosReunion();
                                usuarios.getUsuario().addAll(usuariosRList);    
                                
                                miembroRWs.setListadoUsuarios(usuarios);
                            }
                            
                            if(miembrosReunion == null){
                                miembrosReunion = new ArrayList<MiembroReunion>();
                            }
                            miembrosReunion.add(miembroRWs);
                            
                            //Valida grupo miembro si se trata de miembros comite de credito
                            if(tipoMiembro == TIPO_MIEMBRO_COMITE_CREDITO){
                                break;
                            }
                        }
                    }
                }
                rsIterator.closeRowSetIterator();
            }    
        }else{
            logger.warning("Lista de roles NULL");
        }
        
        logger.warning("Finaliza getMiembrosWSList");
        
        logger.exiting(MiembrosAprobacionVOImpl.class.getName(),
                       "getMiembrosWSList",
                       new Object[]{miembrosReunion});
        return miembrosReunion;
    }
    
    public Boolean miembrosAprobados(){
        Boolean respuesta=Boolean.TRUE;
        
            MiembrosAprobacionVORowImpl row=null;
            
            int contador=0;
            RowSetIterator rsIterator = createRowSetIterator(null);  
            rsIterator.reset();  
            boolean esEncontrado = false;
            while (rsIterator.hasNext()) {
                row=(MiembrosAprobacionVORowImpl)rsIterator.next();
                if(null!=row){
                    //Llenar los datos del miembro de notificacion
                    if(null != row.getNombre()){
                            contador=contador+1;
                        }
                    }        
            }
            if(contador == this.getEstimatedRowCount()){
                    respuesta=Boolean.TRUE;
                }
            rsIterator.closeRowSetIterator();  
        
        return respuesta;
        }
}

