package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.FormularioLoteImplementacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Dec 04 15:17:28 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FormularioLoteImplementacionVOImpl extends ViewObjectImpl implements FormularioLoteImplementacionVO {
    /**
     * This is the default co
     * nstructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    private final static Integer idTcaResultado = Integer.valueOf(5);   //Valor del Catalogo TcaResultadoProceso = Nuevo 
    
    public FormularioLoteImplementacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowFormularioLoteImplementacion(Long idImplementacion, String nombreLote, 
                                                     BigDecimal montoPresupuestado, Integer idTcaTipoMoneda,
                                                     Integer idTcaResultadoProceso, Integer banEstatus, 
                                                     Integer idContrato){
        logger.log(ADFLogger.TRACE, "INTO crearRowFormularioLoteImplementacion.");
        this.clearCache();
        Row row = this.createRow();
        try{
            String idLoteImplementacion = new Integer(1).toString();
            row.setAttribute(FormularioLoteImplementacionVORowImpl.ID, Long.parseLong(idLoteImplementacion));
            row.setAttribute(FormularioLoteImplementacionVORowImpl.IDIMPLEMENTACION, idImplementacion);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.NOMBRELOTE, nombreLote);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.MONTOPRESUPUESTADO, montoPresupuestado);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.IDTCATIPOMONEDA, idTcaTipoMoneda);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.IDTCARESULTADOPROCESO, idTcaResultadoProceso);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.IDCONTRATO, idContrato);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.BANESTATUS, banEstatus);
            row.setNewRowState(Row.STATUS_INITIALIZED);
            
            this.insertRowAtRangeIndex(0, row); 
            this.setCurrentRow(row); // Se asigna row como current (Fila actual)
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormularioLoteImplementacion." + e.getClass() + e.getMessage());
        }
    }
    
    public void crearRowFormularioLoteImplementacionInsertarLote(){
        logger.log(ADFLogger.TRACE, "INTO crearRowFormularioLoteImplementacionInsertarLote.");
        Row row = this.createRow();
        row.setAttribute("IdTcaResultadoProceso", idTcaResultado);
        try{
            //this.insertRow(row);
            this.insertRowAtRangeIndex(0, row);
            this.setCurrentRow(row);
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormularioLoteImplementacion." + e);
        }
    }
    
    public Boolean validarFormularioLoteImplementacionInsertarLote(){
        logger.log(ADFLogger.TRACE, "INTO validarFormularioLoteImplementacionInsertarLote.");
        
        String nombreLote = null;
        BigDecimal montoPresupuestado = null;
        Integer idTcaTipoMoneda = null;
        
        Boolean validarFormulario = Boolean.FALSE;
        
        FormularioLoteImplementacionVORowImpl formularioLoteImplementacionVORowImpl = (FormularioLoteImplementacionVORowImpl) this.getCurrentRow();
        
        try{
            nombreLote = formularioLoteImplementacionVORowImpl.getNombreLote();
            montoPresupuestado = formularioLoteImplementacionVORowImpl.getMontoPresupuestado();
            idTcaTipoMoneda = formularioLoteImplementacionVORowImpl.getIdTcaTipoMoneda();
            
            logger.warning("valor nombreLote obtenido del formulario: " + nombreLote);
            logger.warning("valor montoPresupuestado obtenido del formulario: " + montoPresupuestado);
            logger.warning("valor idTcaTipoMoneda obtenido del formulario: " + idTcaTipoMoneda);
            
            if(null != nombreLote && null != montoPresupuestado){
                validarFormulario = Boolean.TRUE;
            }
            else{
                validarFormulario = Boolean.FALSE;
            }
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Excepcion en validarFormularioLoteImplementacionInsertarLote." + e.getClass() + e.getMessage()); 
        }
        
        return (validarFormulario);
    }
    
    public void eliminarRowFormularioLoteImplementacion(){
        logger.log(ADFLogger.TRACE, "INTO eliminarRowFormularioLoteImplementacion.");
        Row row = this.getCurrentRow();
        try{
            row.remove();
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en eliminarRowFormularioLoteImplementacion." + e.getClass() + e.getMessage());
        }
    }
    
    public void crearRowFormLoteImplementacion(Long id, String nombreLote,
                                               BigDecimal montoPresupuestado, Integer idTcaTipoMoneda, 
                                               Integer numeroLote, Integer idTcaResultadoProceso){
        logger.log(ADFLogger.TRACE, "INTO crearRowFormLoteImplementacion.");
        //this.clearCache();
        Row row = this.createRow();
        try{
            row.setAttribute(FormularioLoteImplementacionVORowImpl.ID, id);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.NOMBRELOTE, nombreLote);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.MONTOPRESUPUESTADO, montoPresupuestado);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.IDTCATIPOMONEDA, idTcaTipoMoneda);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.NUMEROLOTE, numeroLote);
            row.setAttribute(FormularioLoteImplementacionVORowImpl.IDTCARESULTADOPROCESO, idTcaResultadoProceso);
            
            this.insertRow(row);
            //this.insertRowAtRangeIndex(0, row);
            //this.setCurrentRow(row); // Se asigna row como current (Fila actual)
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormLoteImplementacion." + e.getClass() + e.getMessage());
        }
    }
    
    public void limpiarFormLoteImplementacion(){
        logger.warning("INTO limpiarFormLoteImplementacion.");
        this.clearCache();
        logger.warning("Finaliza limpiarFormLoteImplementacion.");
    }
    
    public Boolean validarMontoPresupuestado(){
        logger.warning("Dentro de validarMontoPresupuestado");
        Boolean esValidoMontoPresupuestado = Boolean.FALSE;
            
        FormularioLoteImplementacionVORowImpl formularioLoteImplementacionVORowImpl =
            (FormularioLoteImplementacionVORowImpl) this.getCurrentRow();
            
        try{
            if(null != formularioLoteImplementacionVORowImpl.getMontoPresupuestado()){
                esValidoMontoPresupuestado = Boolean.TRUE;
                logger.warning("montoPresupuestado es diferente de nulo");
                logger.warning("montoPresupuestado : "+formularioLoteImplementacionVORowImpl.getMontoPresupuestado());
            }else{
                esValidoMontoPresupuestado = Boolean.FALSE;
                logger.warning("montoPresupuestado es nulo");
            }
        }catch(Exception e){
            logger.severe("Error en validarMontoPresupuestado :",e); 
        }
        logger.warning("Fuera de validarMontoPresupuestado,return :"+esValidoMontoPresupuestado);
        return (esValidoMontoPresupuestado);
    }


    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

