package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.lineacreditoservice.LineaCredito;
import com.bcie.xmlns.lineacreditoservice.LineaCreditoPT;

import java.sql.Timestamp;

import java.util.ArrayList;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.domain.Date;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ConsultarLineasPorOperacionVO;
import org.bcie.fenix.common.model.vo.ConfiguracionVOImpl;
import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType;
import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 06 10:59:14 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarLineasPorOperacionVOImpl extends ViewObjectImpl implements ConsultarLineasPorOperacionVO {
     
    private static ADFLogger logger = null;
     
    public ConsultarLineasPorOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }    
    }

    public Row[] cargarLineasPorOperacion(Long idOperacion) {
        logger.warning("inicia metodo cargarLineasPorOperacion");
        Row[] lineasArray = null;
        Long idLinea = null;
        Date fechaVencimientoLinea = null;
        Timestamp fechaMaximaDesembolsar = null;
        int contador = 0;
        //FenixAMImpl fenixAMImpl = null;

        logger.warning("*Inf,  idOperacion: " + idOperacion);

        if (idOperacion == null) {
            logger.warning("***Error, parametro idOperacion requerido");
            return null;
        }
        try {
            setpIdOperacion(idOperacion);
            this.executeQuery();
        } catch (Exception e) {
            logger.warning("Erro al consultar Lineas por operacion", e);
        }
        logger.warning("Numero de rows Obtenidos :" + getEstimatedRowCount());
        Long rowConunt = (getEstimatedRowCount() > 0) ? getEstimatedRowCount() : null;

        if (rowConunt != null) {

            int numeroDeLineas = rowConunt.intValue();

            lineasArray = new Row[numeroDeLineas];

            RowSetIterator iteratorContrato = null;
            ConsultarLineasPorOperacionVORowImpl LineasPorOperacionRow = null;

            iteratorContrato = this.createRowSetIterator(null);
            iteratorContrato.reset();

            logger.warning("Inf, iterando sobre lineas ...");

            while (iteratorContrato.hasNext()) {
                LineasPorOperacionRow = (ConsultarLineasPorOperacionVORowImpl) iteratorContrato.next();
                logger.warning("Inf, idLinea recuperada: " + LineasPorOperacionRow.getAttribute("IdLinea"));

                idLinea =
                    (null == LineasPorOperacionRow.getAttribute("IdLinea")) ? null :
                    (Long) LineasPorOperacionRow.getAttribute("IdLinea");
                logger.warning("Valor del id Linea : " + idLinea);
                fechaMaximaDesembolsar = obtenerFechaMaximaDesembolsar(idLinea);
                if(null != fechaMaximaDesembolsar){
                    LineasPorOperacionRow.setAttribute("FechaMaximaDesembolsar", fechaMaximaDesembolsar);
                }else{
                    logger.warning("La fecha maxima es nula.");
                }
                lineasArray[contador] = LineasPorOperacionRow;
                contador = contador + 1;
            }
            iteratorContrato.closeRowSetIterator();

        } else {
            logger.warning("*inf, no se encontraron lineas asociadas a la operacion ");
        }

        logger.warning("*inf, Numero de lineas asociadas a la operacion : " + getEstimatedRowCount());

        logger.warning("*Inf, Termina metodo cargarLineasPorOperacion");
        return lineasArray;
    }

    private Timestamp obtenerFechaMaximaDesembolsar(Long idLinea){
        logger.warning("Entra en obtenerFechaMaximaDesembolsar");
        Boolean obtieneFecha = Boolean.FALSE;
        XMLGregorianCalendar fechaMaxima = null;
        Timestamp fechaMaximaDesembolsar = null;
        String mensajeError = null;
        try{
            FenixImplementacionPctAMImpl fenixImplementacionPctAMImpl = null;
            fenixImplementacionPctAMImpl = (FenixImplementacionPctAMImpl) this.getApplicationModule();
            String wsdl = fenixImplementacionPctAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
            ConsultarLineaCreditoBPELRequestType request = new ConsultarLineaCreditoBPELRequestType();
            ConsultarLineaCreditoBPELResponseType response = null;
            
            LineaCredito lineaCredito = IWsdlLocation.Service.getInstance(LineaCredito.class, wsdl);
            LineaCreditoPT lineaCreditoPT = lineaCredito.getLineaCredito12Bnd();
            
            request.setIdLineaCredito(idLinea);
            
            
                logger.warning("Ejecutando servicio " + FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO);
                java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO);
                response = lineaCreditoPT.consultarLineaCreditoById(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO, horaInicio);
                logger.warning("Servicio " + FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO_BY_ID_LINEA_CREDITO + " ejecutado correctamente");
            
            if(null != response){
                if (null != response.getResultado()) {
                    if (response.getResultado().getResult().value() == "OK") {
                        if (null != response.getLineaCredito()) {
                            logger.warning("Obteniendo Fechamaxima a desembolsar.");
                            if (response.getLineaCredito().getFechaMaximaDesembolso() != null) {
                                fechaMaxima = response.getLineaCredito().getFechaMaximaDesembolso();
                                fechaMaximaDesembolsar = new Timestamp(fechaMaxima.toGregorianCalendar().getTime().getTime());
                                logger.warning("Fecha : " + fechaMaximaDesembolsar);
                            } else {
                                logger.warning("La fecha maxima a desembolsar que regresa el servicio es nula.");
                            }
                        } else {
                            logger.warning("El objeto LineaCredito del servicio es NULL.");
                        }
                    } else {
                        logger.warning("Servicio  devuelve ERROR >> " + response.getResultado().getMessage());
                        throw new Exception(response.getResultado().getMessage());
                    }
                } else {
                    logger.warning("getResultado de servicio es NULL.");
                    mensajeError = "El objeto getResultado es nulo.";
                    throw new Exception(mensajeError);
                }
            }else{
                logger.warning("ERROR: Response es null.");
                mensajeError = "El objeto response es nulo.";
                throw new Exception(mensajeError);
            }
        }catch(Exception e){
            logger.warning("Error en obtenerFechaMaximaDesembolsar.", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception(e.getMessage()));
            throw ex;
        }
        return fechaMaximaDesembolsar;
    }
    
    public Date fechaVencimientoLinea(Long idLineaCredito){
      logger.warning("Inf, inicia metodo FechaVencimientoLinea");
        FenixAMImpl fenixAMImpl = null;   
        Row fila = null;
        Date fechaVencimientoLinea = null;
      
          if(idLineaCredito == null){          
              logger.warning("Inf, no se recibio el parameto requerido idLineaCredito");   
              return null;
            }
             
      
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl  gestorDesembolsosAm = 
                                (FenixGestorDesembolsosAMImpl)fenixAMImpl.getFenixGestorDesembolsosAM();                        
               
                gestorDesembolsosAm.getConsultaLineaCreditoVO().consultarLineaCredito(idLineaCredito, null);
                fila = gestorDesembolsosAm.getConsultaLineaCreditoVO().obtenerRowCurrent();
       
                if(fila != null){
                    
                    fechaVencimientoLinea = (null == fila.getAttribute("FechaVencimiento"))? null 
                                          : (Date)fila.getAttribute("FechaVencimiento");                    
                }else{
                    logger.warning("no se recupero un row de consultarLineaCreditoVo");                    
                    }
    
     
      logger.warning("Inf, termina metodo FechaVencimientoLinea");
       return fechaVencimientoLinea;
        }
    
    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        setNamedWhereClauseParam("pIdOperacion", value);
    }
}
