package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import java.util.ResourceBundle;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import oracle.adf.share.logging.ADFLogger;

import oracle.javatools.resourcebundle.BundleFactory;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.vo.common.NoObjecionEditableVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Apr 04 12:43:49 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class NoObjecionEditableVOImpl extends ViewObjectImpl implements NoObjecionEditableVO {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public NoObjecionEditableVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varObjecion.
     * @return bind variable value for varObjecion
     */
    public Long getvarObjecion() {
        return (Long) getNamedWhereClauseParam("varObjecion");
    }

    /**
     * Sets <code>value</code> for bind variable varObjecion.
     * @param value value to bind as varObjecion
     */
    public void setvarObjecion(Long value) {
        setNamedWhereClauseParam("varObjecion", value);
    }
    
    
    public Map precargarAdquisicion(Long idAdquisicion, Long idNoObjecion) {
        logger.warning("Ingresa metodo precargarAdquisicionVO");
        logger.warning("idAdquisicion recibido: " + idAdquisicion);
        logger.warning("idNoObjecion recibido: " + idNoObjecion);
        Map resultado = new HashMap<String, Object>();
        Map resultado2 = new HashMap<String, Object>();
        
        Boolean consultaObjecion = Boolean.FALSE;
        if (null != idAdquisicion) {
            Integer catalogo = null;
            FenixAMImpl fenixAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixAdquisicionAMImpl fenixAdquisicionesAMImpl =
                (FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();
            resultado2 = fenixAdquisicionesAMImpl.getAdquisicionVO().aplicarNoobjecion(idAdquisicion);
            logger.warning("valor resultado2.get(resultado)" + resultado2.get("resultado"));
            if (null != (Boolean) resultado2.get("resultado")) {
                logger.warning("Ingresa if resultado2");
                consultaObjecion = (Boolean) resultado2.get("resultado");
                Boolean esPrevia=(Boolean)resultado2.get("previa");
                resultado.put("resultado", consultaObjecion);
                resultado.put("previa", esPrevia);
                logger.warning("valor de resultado: " + consultaObjecion);
                logger.warning("valor de previa: " + esPrevia);
            } else {
                logger.warning("Ingresa else resultado2");
                resultado.put("resultado", consultaObjecion);
            }
            if (consultaObjecion) {
                logger.warning("Ingresa if consultaObjecion");
                logger.warning("modalidad " + (Integer) resultado2.get("modalidad"));
                if (null != (Integer) resultado2.get("modalidad")) {                    
                    fenixAdquisicionesAMImpl.getTcaTipoNoObjecionVO().setvarModalidad((Integer) resultado2.get("modalidad"));
                    catalogo = (Integer) resultado2.get("modalidad");
                    resultado.put("modalidad", catalogo);
                    switch (catalogo) {
                    case FenixModelConstants.MODALIDAD_LICITACION1:
                    case FenixModelConstants.MODALIDAD_LICITACION2:
                    case FenixModelConstants.MODALIDAD_CONCURSO5:
                    case FenixModelConstants.MODALIDAD_CONCURSO6:
                        logger.warning("Aplica categoria 1");
                        resultado.put("categoria1", Boolean.TRUE);
                        resultado.put("categoria2", Boolean.FALSE);
                        resultado.put("categoria3", Boolean.FALSE);
                        break;
                    case FenixModelConstants.MODALIDAD_COMPARACION3:
                    case FenixModelConstants.MODALIDAD_COMPARACION7:
                        logger.warning("Aplica categoria 2");
                        resultado.put("categoria2", Boolean.TRUE);
                        resultado.put("categoria1", Boolean.FALSE);
                        resultado.put("categoria3", Boolean.FALSE);
                        break;
                    case FenixModelConstants.MODALIDAD_DIRECTO4:
                        logger.warning("Aplica categoria 3");
                        resultado.put("categoria3", Boolean.TRUE);
                        resultado.put("categoria2", Boolean.FALSE);
                        resultado.put("categoria1", Boolean.FALSE);
                        break;
                    default:
                        logger.warning("Aplica categoria ninguna");
                        resultado.put("categoria1", Boolean.FALSE);
                        resultado.put("categoria2", Boolean.FALSE);
                        resultado.put("categoria3", Boolean.FALSE);
                        break;
                    }

                } else {
                    logger.warning("Aplica categoria ninguna");
                    resultado.put("categoria1", Boolean.FALSE);
                    resultado.put("categoria2", Boolean.FALSE);
                    resultado.put("categoria3", Boolean.FALSE);
                }


                Integer valorTipo = null;
                Integer valorResultado = null;
                setvarObjecion(idNoObjecion);                
                executeQuery();
                Row row =getRowAtRangeIndex(0);
                Long primero = null;
                if (null == idNoObjecion) {
                    logger.warning("Error al obtener el id de objecion");
                } else {
                    Row noObjecionrow = null;
                    noObjecionrow = getRowAtRangeIndex(0);

                    if (null != noObjecionrow) {
                        if(null!= catalogo){
                        noObjecionrow.setAttribute("Modalidad", catalogo);
                            }
                        logger.warning("ID adquisicion primer registro" + (Long) noObjecionrow.getAttribute("Id"));
                        if (null != (Long) noObjecionrow.getAttribute("Id")) {
                            primero = idNoObjecion;
                            resultado.put("claveobjecion", primero);
                            if (null != (Integer) noObjecionrow.getAttribute("IdTcaTipoNoObjecion")) {
                                valorTipo = (Integer) noObjecionrow.getAttribute("IdTcaTipoNoObjecion");
                                resultado.put("tipoobjecion", valorTipo);
                                fenixAdquisicionesAMImpl.getNoObjecionParticipantesVO().cargarDatos(primero, valorTipo);
                            }
                            if (null != (Integer) noObjecionrow.getAttribute("IdTcaResultadoProceso")) {
                                valorResultado = (Integer) noObjecionrow.getAttribute("IdTcaResultadoProceso");
                                resultado.put("resultadoobjecion", valorResultado);
                            }
                            if(null!=valorTipo && null!=idNoObjecion){
                                    precargaConcursantes(idNoObjecion, valorTipo);
                                }
                            
                            setCurrentRow(noObjecionrow);
                            
                        } else {
                            logger.warning("ID adquisicion del registro no obtenido");
                        }
                       // noObjecionUnica(idNoObjecion);
                    } else {
                        logger.warning("ID adquisicion primer registro no obtenido");
                    }
                }


            }
        } else {
            logger.warning("Ingresa else consultaObjecion");
            logger.warning("No se consultan los datos de la no objecion");
            logger.warning("Aplica categoria ninguna");
            resultado.put("categoria1", Boolean.FALSE);
            resultado.put("categoria2", Boolean.FALSE);
            resultado.put("categoria3", Boolean.FALSE);
        }

        return resultado;
    }
    
    
    /**
     * M&eacute;todo para establecer los par&aacute;metros where de las consultas de
     * concursantes
     * @author Jonathan Ruiz
     * @param idNoObjecion
     * @param idTcaTipoNoObjecion
     */
    public void precargaConcursantes(Long idNoObjecion, Integer idTcaTipoNoObjecion) {
        logger.info("precargaConcursantes. idNoObjecion:" + idNoObjecion + ", idTcaTipoNoObjecion:" +
                    idTcaTipoNoObjecion);
        Integer idTcaTipoPerfil;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        if(null!=idTcaTipoNoObjecion && null!=idNoObjecion){
                if (idTcaTipoNoObjecion.equals(FenixModelConstants.ID_NO_OBJECION_INFORME_RESULTADOS)) {
                    // Informe de resultados

                    idTcaTipoPerfil = FenixModelConstants.ID_TIPO_PERFIL_OFERENTE;
                    fenixAdquisicionesAMImpl.getOferentesVO().setWhereParams(idNoObjecion, idTcaTipoPerfil);

                    idTcaTipoPerfil = FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO;
                    fenixAdquisicionesAMImpl.getAdjudicatariosVO().setWhereParams(idNoObjecion, idTcaTipoPerfil);
                } else if (idTcaTipoNoObjecion.equals(FenixModelConstants.ID_NO_OBJECION_CONTRATADO)) {
                    // Contratado

                    idTcaTipoPerfil = FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO;
                    fenixAdquisicionesAMImpl.getAdjudicatariosVO().setWhereParams(idNoObjecion, idTcaTipoPerfil);

                    idTcaTipoPerfil = FenixModelConstants.ID_TIPO_PERFIL_CONTRATADO;
                    fenixAdquisicionesAMImpl.getContratadosVO().setWhereParams(idNoObjecion, idTcaTipoPerfil);
                } else if (idTcaTipoNoObjecion.equals(FenixModelConstants.ID_NO_OBJECION_RESULTDO_PROCESO)) {
                    // Resultados del proceso

                    idTcaTipoPerfil = FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO;
                    fenixAdquisicionesAMImpl.getAdjudicatariosVO().setWhereParams(idNoObjecion, idTcaTipoPerfil);
                } else if (idTcaTipoNoObjecion.equals(FenixModelConstants.ID_NO_OBJECION_ORDEN_COMPRA)) {
                    // Contrato u Orden de compra

                    idTcaTipoPerfil = FenixModelConstants.ID_TIPO_PERFIL_CONTRATADO;
                    fenixAdquisicionesAMImpl.getContratadosVO().setWhereParams(idNoObjecion, idTcaTipoPerfil);
                } else {
                    fenixAdquisicionesAMImpl.getContratadosVO().setWhereParams(0L, 0);
                }
            
            }
        else{
                logger.warning("No se obtuvieron los datos del id no objecion y del id tipo resultado");
            }

    }
    
    /**
     *  M&eacujte;todo para eliminar el oferente seleccionado
     *  @author Jonathan Ruiz
     *  @param id del oferente
     */
    public void eliminarOferente(Long id) {
        logger.log(ADFLogger.WARNING, "Into eliminarOferente.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row oferenteSeleccionado = fenixAdquisicionesAMImpl.getOferentesVO().getRow(new Key(new Object[] { id }));
        fenixAdquisicionesAMImpl.getOferentesVO().eliminarOferente(oferenteSeleccionado);
    }

    /**
     *  M&eacujte;todo para adjudicar el oferente seleccionado
     *  @author Jonathan Ruiz
     *  @param id del oferente
     */
    public void adjudicarOferente(Long id) {
        logger.log(ADFLogger.WARNING, "Into adjudicarOferente.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row oferenteSeleccionado = fenixAdquisicionesAMImpl.getOferentesVO().getRow(new Key(new Object[] { id }));
        fenixAdquisicionesAMImpl.getAdjudicatariosVO().adjudicarOferente(oferenteSeleccionado);
        fenixAdquisicionesAMImpl.getOferentesVO().eliminarOferente(oferenteSeleccionado);
    }
    
    /**
     *  M&eacujte;todo para crear un nuevo registro de adjudicatarios
     *  @author Jonathan Ruiz
     */
    public void crearRowAdjudicatario(Long idNoObjecion) {
        logger.log(ADFLogger.WARNING, "Into crearRowAdjudicatario.");
        logger.log(ADFLogger.WARNING, "idNoObjecion: " + idNoObjecion);        
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        fenixAdquisicionesAMImpl.getAdjudicatariosVO().crearRowAdjudicatario(idNoObjecion);
    }

    /**
     *  M&eacujte;todo para eliminar el adjudicatario seleccionado
     *  @author Jonathan Ruiz
     *  @param id
     */
    public void eliminarAdjudicatario(Long id) {
        logger.log(ADFLogger.WARNING, "Into eliminarAdjudicatario.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row seleccionado = fenixAdquisicionesAMImpl.getAdjudicatariosVO().getRow(new Key(new Object[] { id }));
        fenixAdquisicionesAMImpl.getAdjudicatariosVO().eliminarAdjudicatario(seleccionado);
    }

    /**
     *  M&eacujte;todo para crear un nuevo registro de contratados
     *  @author Jonathan Ruiz
     */
    public void crearRowContratado(Long idNoObjecion) {
        logger.log(ADFLogger.WARNING, "Into crearRowContratado.");
        logger.log(ADFLogger.WARNING, "idNoObjecion: " + idNoObjecion);
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        fenixAdquisicionesAMImpl.getContratadosVO().crearRowContratado(idNoObjecion);
    }

    /**
     *  M&eacujte;todo para eliminar el contratado seleccionado
     *  @author Jonathan Ruiz
     *  @param id
     */
    public void eliminarContratado(Long id) {
        logger.log(ADFLogger.WARNING, "Into eliminarContratado.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row contratadoSeleccionado = fenixAdquisicionesAMImpl.getContratadosVO().getRow(new Key(new Object[] { id }));
        fenixAdquisicionesAMImpl.getContratadosVO().eliminarContratado(contratadoSeleccionado);
    }
    
    /**
     *  M&eacujte;todo para contratar el adjudicatario seleccionado
     *  @author Jonathan Ruiz
     *  @param id del oferente
     */
    public void contratarAdjudicatario(Long id) {
        logger.warning("Into contratarAdjudicatario.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row adjudicatarioSeleccionado = fenixAdquisicionesAMImpl.getAdjudicatariosVO().getRow(new Key(new Object[] { id }));
        fenixAdquisicionesAMImpl.getContratadosVO().contratarAdjudicatario(adjudicatarioSeleccionado);
        fenixAdquisicionesAMImpl.getAdjudicatariosVO().eliminarAdjudicatario(adjudicatarioSeleccionado);
    }
    
    /**
     *  M&eacujte;todo para remover el adjudicatario seleccionado
     *  @author Jonathan Ruiz
     *  @param id
     */
    public void removerAdjudicatario(Long id) {
        logger.log(ADFLogger.WARNING, "Into removerAdjudicatario." + id);
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row adjudicatarioSeleccionado = fenixAdquisicionesAMImpl.getAdjudicatariosVO().getRow(new Key(new Object[] { id }));
        fenixAdquisicionesAMImpl.getOferentesVO().removerAdjudicatario(adjudicatarioSeleccionado);
        fenixAdquisicionesAMImpl.getAdjudicatariosVO().eliminarAdjudicatario(adjudicatarioSeleccionado);
    }
    
    /**
     *  M&eacujte;todo para eliminar todos los concursantes
     *  @author Jonathan Ruiz
     */
    public void eliminarConcursantes() {
        logger.log(ADFLogger.WARNING, "Into eliminarConcursantes.");
        // TODO implementar
    }
    
    /**
     *  M&eacujte;todo para remover el contratado seleccionado
     *  @author Jonathan Ruiz
     *  @param id
     */
    public void removerContratado(Long id) {
        logger.log(ADFLogger.WARNING, "Into removerContratado.");
        logger.log(ADFLogger.WARNING, "Id Contratado:" + id);
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row adjudicatarioSeleccionado = fenixAdquisicionesAMImpl.getContratadosVO().getRow(new Key(new Object[] { id }));
        
        Row noObjecionCurrentRow = getCurrentRow();
        Integer idTipoNoObjecion= (Integer) noObjecionCurrentRow.getAttribute("IdTcaTipoNoObjecion");

        if (null != idTipoNoObjecion && idTipoNoObjecion.compareTo(11) != 0) {
            fenixAdquisicionesAMImpl.getAdjudicatariosVO().removerContratado(adjudicatarioSeleccionado);
        }
        
        fenixAdquisicionesAMImpl.getContratadosVO().eliminarContratado(adjudicatarioSeleccionado);
    }
    
    /**
     *  M&eacujte;todo para los campos de la no objeci&oacujte;n
     *  @author Jonathan Ruiz
     *  @param id
     */
    @SuppressWarnings("unchecked")
    public Map validarCampos(Long idAdquisicion) {
        logger.log(ADFLogger.WARNING, "Into validarCampos."+idAdquisicion);
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Row adquisicionRow = fenixAdquisicionesAMImpl.getAdquisicionVO().getRow(new Key(new Object[] { idAdquisicion }));
        Boolean noObjecionContrato = Boolean.FALSE;
        
        Map<String, Object> map = new HashMap<String, Object>();
        Row row = getCurrentRow();
        
        int idTcaTipoNoObjecion = 0;
        if (null != row) {
            idTcaTipoNoObjecion = (Integer)row.getAttribute(NoObjecionVORowImpl.AttributesEnum.IdTcaTipoNoObjecion.toString());
        }
        
        int modalidad = 0;
        if (null != adquisicionRow && null != adquisicionRow.getAttribute("IdTcaTipoModalidadProceso")) {
            modalidad = (Integer)adquisicionRow.getAttribute("IdTcaTipoModalidadProceso");
        }
        
        int resultadoProceso = 0;
        if (null != row) {
            if (null != (Integer)row.getAttribute(NoObjecionVORowImpl.AttributesEnum.IdTcaResultadoProceso.toString())) {
                resultadoProceso = (Integer)row.getAttribute(NoObjecionVORowImpl.AttributesEnum.IdTcaResultadoProceso.toString());
            }
        }
        
        switch(idTcaTipoNoObjecion) {
        case FenixModelConstants.NO_OBJECION_AVISO:
            map = anexarValidaciones(map, validarCamposAviso(row));
            break;
        case FenixModelConstants.NO_OBJECION_INFORME_RESULTADOS:
            map = anexarValidaciones(map, validarCamposInforme(row));
            map = anexarValidaciones(map, validarCamposOferentes(row, idTcaTipoNoObjecion));
            
            if (resultadoProceso == FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO) {
                map = anexarValidaciones(map, validarCamposAdjudicatarios(row, idTcaTipoNoObjecion));
            }
            break; 
        case FenixModelConstants.NO_OBJECION_CONTRATO:
            noObjecionContrato = validaContratos(row);
            if (noObjecionContrato) {
                map = anexarValidaciones(map, validarContratados(row)); 
            } else {
                map = anexarValidaciones(map, validarCamposContrato(row));
                map = anexarValidaciones(map, validarCamposContratados(row, modalidad));    
            }
            break;
        case FenixModelConstants.NO_OBJECION_RESULTADO_PROCESO:
            map = anexarValidaciones(map, validarCamposProceso(row));
            map = anexarValidaciones(map, validarCamposAdjudicatarios(row, idTcaTipoNoObjecion));
            break;
        case FenixModelConstants.NO_OBJECION_CARGO_COMPRA:
            logger.info("NO_OBJECION_CARGO_COMPRA.validarCamposContratados.modalidad:"+modalidad);
            map = anexarValidaciones(map, validarCamposContrato(row));
            map = anexarValidaciones(map, validarCamposContratados(row, modalidad));
            break;
        }
        
        return map;
    }
    
    private Map validarCamposAviso(Row noObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
                
        String lugarObtenerDocBase = null;
        Timestamp fechaPublicacion = null;
        Timestamp fechaInicioDocBase = null;
        Timestamp fechaFinDocBase = null;
        Timestamp fechaRecepcion = null;
        String correoInfoAdicional = null;
        String dirPresentPropuesta = null;
        
        Boolean RN_05 = Boolean.FALSE;
        Boolean RN_06 = Boolean.FALSE;
        Boolean RN_07 = Boolean.FALSE;
        Boolean RN_08 = Boolean.FALSE;
        Boolean VA_50 = Boolean.FALSE;
        
        if (null != noObjecion) {
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.LugarObtenerDoctoBase.toString())) {
                lugarObtenerDocBase = (String)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.LugarObtenerDoctoBase.toString());
            }
            
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaPublicacion.toString())) {
                fechaPublicacion = (Timestamp)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaPublicacion.toString());
            }
            
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaInicioDispDoctoBase.toString())) {
                fechaInicioDocBase = (Timestamp)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaInicioDispDoctoBase.toString());
            }
            
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaFinDispDoctoBase.toString())) {
                fechaFinDocBase = (Timestamp)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaFinDispDoctoBase.toString());
            }
            
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaRecepcionPropuesta.toString())) {
                fechaRecepcion = (Timestamp)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.FechaRecepcionPropuesta.toString());
            }
            
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.CorreoInformacionAdicional.toString())) {
                correoInfoAdicional = (String)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.CorreoInformacionAdicional.toString());
            }
            
            if (null != noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.DirPresentacionPropuesta.toString())) {
                dirPresentPropuesta = (String)noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.DirPresentacionPropuesta.toString());
            } 
        }
        
        if (null != correoInfoAdicional) {
            String expression="^[_A-Za-z0-9-]+(\\.[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(\\.[A-Za-z0-9]+)*(\\.[A-Za-z]{2,})$";
            Pattern pattern=Pattern.compile(expression);
            Matcher matcher=pattern.matcher(correoInfoAdicional);
            
            //el correo ingresado debe corresponder al formato de una direccion de correo electronica.
            if (!matcher.matches()) {
                VA_50 = Boolean.TRUE;
                mapMensajes.put("VA_50", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.VA50"));
            }
        }
        
        map.put("noObjecion", (null == noObjecion) );
        
        map.put("lugarObtenerDocBase", (null == lugarObtenerDocBase) );
        map.put("fechaPublicacion", (null == fechaPublicacion) );
        map.put("fechaInicioDocBase", (null == fechaInicioDocBase) );
        map.put("fechaFinDocBase", (null == fechaFinDocBase) );
        map.put("fechaRecepcion", (null == fechaRecepcion) );
        map.put("correoInfoAdicional", (null == correoInfoAdicional) );
        map.put("dirPresentPropuesta", (null == dirPresentPropuesta) );
        
        //mensajes
        if (null == lugarObtenerDocBase)
            mapMensajes.put("lugarObtenerDocBase", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.Lugar.vacio"));
        if (null == fechaPublicacion)
            mapMensajes.put("fechaPublicacion", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.FechaPub.requerido"));
        if (null == fechaInicioDocBase)
            mapMensajes.put("fechaInicioDocBase", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.FechaIni.requerido"));
        if (null == fechaFinDocBase)
            mapMensajes.put("fechaFinDocBase", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.FechaFin.requerido"));
        if (null == fechaRecepcion)
            mapMensajes.put("fechaRecepcion", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.FechaRep.requerido"));
        if (null == correoInfoAdicional)
            mapMensajes.put("correoInfoAdicional", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.Correo.requerido"));
        if (null == dirPresentPropuesta)
            mapMensajes.put("dirPresentPropuesta", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.Direcc.requerido"));
          
        if (null != fechaPublicacion && null != fechaInicioDocBase) {
            Integer compDateRN05 = fechaPublicacion.compareTo(fechaInicioDocBase);
            //La fecha de publicacion debe ser menor o igual a la fecha de inicio de disponibilidad de documento base.
            if (null != RN_05 && (Integer.compare(compDateRN05, 1) == 0)) {
                RN_05 = Boolean.TRUE;
                mapMensajes.put("RN_05", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.RN05"));
            }
        }
        
        if (null != fechaInicioDocBase && null != fechaFinDocBase) {
            Integer compDateRN06 = fechaInicioDocBase.compareTo(fechaFinDocBase);
            Integer compDateRN07 = fechaFinDocBase.compareTo(fechaInicioDocBase);
            
            //La fecha de inicio de disponibilidad de documento base debe ser menor a la fecha de fin de disponibilidad de documento base.
            if (null != RN_06 && (Integer.compare(compDateRN06, -1) > 0)) {
                RN_06 = Boolean.TRUE;
                mapMensajes.put("RN_06", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.RN06"));
            }
            
            //La fecha de fin de disponibilidad de documento base debe ser mayor a la fecha inicio de disponibilidad de documento base.
            if (null != RN_07 && (Integer.compare(compDateRN07, 1) < 0)) {
                RN_07 = Boolean.TRUE;
                mapMensajes.put("RN_07", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.RN07"));
            }
        }
        
        if (null != fechaRecepcion && null != fechaFinDocBase) {
            Integer compDateRN08 = fechaRecepcion.compareTo(fechaFinDocBase);
            
            //La fecha de recepcion de propuestas debe ser mayor o igual a la fecha de fin de disponibilidad de documento base.
            if (null != RN_08 && (Integer.compare(compDateRN08, 0) < 0)) {
                RN_08 = Boolean.TRUE;
                mapMensajes.put("RN_08", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.RN08"));
            }
        }
        
        map.put("fechaPublicacion", (null == fechaPublicacion) );
        map.put("fechaInicioDocBase", (null == fechaInicioDocBase) );
        map.put("fechaFinDocBase", (null == fechaFinDocBase) );
        map.put("fechaRecepcion", (null == fechaRecepcion) );
        map.put("correoInfoAdicional", (null == correoInfoAdicional) );
        map.put("dirPresentPropuesta", (null == dirPresentPropuesta) );
        
        map.put("RN_05", RN_05);
        map.put("RN_06", RN_06);
        map.put("RN_07", RN_07);
        map.put("RN_08", RN_08);
        map.put("VA_50", VA_50);
        
        map.put("mensajes", mapMensajes);
        
        
        return map;
    }
    
    private Map validarCamposContrato(Row noObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        logger.warning("rb.is:"+rb);
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        boolean contratadosRequeridos = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        
        if (fenixAdquisicionesAMImpl.getContratadosVO().numRegistros() == 0) {
            contratadosRequeridos = Boolean.TRUE;
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("contratadosRequeridos", contratadosRequeridos);
        
        //logger.warning("***bundle: "+rb.getString("org.bcie.fenix.common.model.vo.ContratadosVO.requerido"));
        
        //mensajes
        if (contratadosRequeridos == true)
            mapMensajes.put("contratadosRequeridos", rb.getString("org.bcie.fenix.common.model.vo.ContratadosVO.requerido"));
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map validarContratados(Row noObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        logger.warning("rb.is:"+rb);
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        boolean contratadosRequeridos = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        
        if (fenixAdquisicionesAMImpl.getContratadosAdjudicatariosVO().numRegistros() == 0) {
            contratadosRequeridos = Boolean.TRUE;
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("contratadosRequeridos", contratadosRequeridos);
        
        //logger.warning("***bundle: "+rb.getString("org.bcie.fenix.common.model.vo.ContratadosVO.requerido"));
        
        //mensajes
        if (contratadosRequeridos == true)
            mapMensajes.put("contratadosRequeridos", rb.getString("org.bcie.fenix.common.model.vo.ContratadosVO.requerido"));
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map validarCamposProceso(Row noObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        Boolean adjudicatariosRequeridos = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        
        if (fenixAdquisicionesAMImpl.getAdjudicatariosVO().numRegistros() == 0) {
            adjudicatariosRequeridos = Boolean.TRUE;
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("adjudicatariosRequeridos", adjudicatariosRequeridos);
        
        //mensajes
        if (adjudicatariosRequeridos)
            mapMensajes.put("adjudicatariosRequeridos", rb.getString("org.bcie.fenix.common.model.vo.AdjudicatariosVO.requerido"));
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map validarCamposInforme(Row noObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        Boolean idTcaResultadoProceso = Boolean.FALSE;
        
        if (null != noObjecion) {
            if (null == noObjecion.getAttribute(NoObjecionVORowImpl.AttributesEnum.IdTcaResultadoProceso.toString())) {
                idTcaResultadoProceso = Boolean.TRUE;
            }
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("idTcaResultadoProceso", idTcaResultadoProceso );
        
        //mensajes
        if (idTcaResultadoProceso)
            mapMensajes.put("idTcaResultadoProceso", rb.getString("org.bcie.fenix.common.model.vo.NoObjecionVO.Resultado.requerido"));
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map validarCamposOferentes(Row noObjecion, int idTcaTipoNoObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        Boolean nombreOferente = Boolean.FALSE;
        Boolean nacionalidadOferente = Boolean.FALSE;
        Boolean ambosOferente = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        
        int oferentesValidos = fenixAdquisicionesAMImpl.getOferentesVO().validarCampos();
        
        switch(oferentesValidos) {
        case 0:
            nombreOferente = Boolean.TRUE;
            mapMensajes.put("nombreOferente", rb.getString("org.bcie.fenix.common.model.vo.OferentesVO.nombre.requerido"));
            break;
        case 1:
            nacionalidadOferente = Boolean.TRUE;
            mapMensajes.put("nacionalidadOferente", rb.getString("org.bcie.fenix.common.model.vo.OferentesVO.nacionalidad.requerido"));
            break;
        case 2:
            ambosOferente = Boolean.TRUE;
            mapMensajes.put("ambosOferente", rb.getString("org.bcie.fenix.common.model.vo.OferentesVO.nacionalidad.requerido"));
            break;
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("nombreOferente", nombreOferente);
        map.put("nacionalidadOferente", nacionalidadOferente);
        map.put("ambosOferente", ambosOferente);
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map validarCamposContratados(Row noObjecion, int modalidad) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        Boolean todosContatado = Boolean.FALSE;
        Boolean instanciaContratado = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        
        boolean validarInstancia = (modalidad == FenixModelConstants.MODALIDAD_DIRECTO4);
        int contratadosValidos = fenixAdquisicionesAMImpl.getContratadosVO().validarCampos(validarInstancia);
        
        switch(contratadosValidos) {
        case 0:
            todosContatado = Boolean.TRUE;
            mapMensajes.put("todosContatado", rb.getString("org.bcie.fenix.common.model.vo.ContratadosVO.todos.requerido"));
            break;
        case 1:
            instanciaContratado = Boolean.TRUE;
            mapMensajes.put("instanciaContratado", rb.getString("org.bcie.fenix.common.model.vo.ContratadosVO.instancia.requerido"));
            break;
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("todosContatado", todosContatado);
        map.put("instanciaContratado", instanciaContratado);
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map validarCamposAdjudicatarios(Row noObjecion, int idTcaTipoNoObjecion) {
        ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
        
        Map<String, Object> map = new HashMap<String, Object>();
        Map<String, Object> mapMensajes = new HashMap<String, Object>();
        
        Boolean todosAdjudicatarios = Boolean.FALSE;
        Boolean montoAdjudicatarios = Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        
        //Se validan todos los campos por integridad de la tabla
        boolean soloMonto = Boolean.FALSE;//(idTcaTipoNoObjecion == FenixModelConstants.ID_NO_OBJECION_INFORME_RESULTADOS);
        int adjudicatariosValidos = fenixAdquisicionesAMImpl.getAdjudicatariosVO().validarCampos(soloMonto);
        
        switch(adjudicatariosValidos) {
        case 0:
            todosAdjudicatarios = Boolean.TRUE;
            mapMensajes.put("todosAdjudicatarios", rb.getString("org.bcie.fenix.common.model.vo.AdjudicatariosVO.todos.requerido"));
            break;
        case 1:
            montoAdjudicatarios = Boolean.TRUE;
            mapMensajes.put("montoAdjudicatarios", rb.getString("org.bcie.fenix.common.model.vo.AdjudicatariosVO.monto.requerido"));
            break;
        }
        
        map.put("noObjecion", (null == noObjecion) );
        map.put("todosAdjudicatarios", todosAdjudicatarios);
        map.put("montoAdjudicatarios", montoAdjudicatarios);
        
        map.put("mensajes", mapMensajes);
        
        return map;
    }
    
    private Map anexarValidaciones(Map<String, Object> map, Map<String, Object> newMap) {
        if (null == map) 
            map = new HashMap<String, Object>();
        
        if (null == newMap) 
            newMap = new HashMap<String, Object>();
        
        Map<String, Object> mapMensajes = (Map<String, Object>)map.get("mensajes");
        Map<String, Object> newMapMensajes = (Map<String, Object>)newMap.get("mensajes");
        
        if (null == mapMensajes) 
            mapMensajes = new HashMap<String, Object>();
        
        if (null == newMapMensajes) 
            newMapMensajes = new HashMap<String, Object>();
        
        mapMensajes.putAll(newMapMensajes);
        map.putAll(newMap);
        map.put("mensajes", mapMensajes);
        return map;
    }
    
    public Boolean validaContratos(Row row) {
        logger.warning("Inside validaContratos.");
        Boolean result = Boolean.FALSE;
        if (row != null) {
            Integer idTcaTipoNoObjecion = (Integer) row.getAttribute("IdTcaTipoNoObjecion");
            if (idTcaTipoNoObjecion.compareTo(9) == 0) {
                result = Boolean.TRUE;
            }
        } else {
            logger.warning("No Objecion sin seleccionar.");
        }
        
        return result;
    }
    
    public Boolean comitNoObjecion() {
        logger.warning("*** Inicia metodo comitTransferencia");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl)fenixAMImpl.getFenixAdquisicionAM();
        Boolean respuesta = Boolean.FALSE;
        try { 
            long vn_getOferentesVO_rows = fenixAdquisicionesAMImpl.getOferentesVO().getEstimatedRowCount();
            logger.warning("fenixAdquisicionesAMImpl.getOferentesVO().rowCount() : " + vn_getOferentesVO_rows);  
            if(vn_getOferentesVO_rows > 0)
            {
                fenixAdquisicionesAMImpl.getOferentesVO().fusionarCamposTrasient();
                logger.warning("vn_getOferentesVO_rows : "+vn_getOferentesVO_rows);  
            }
            long vn_getAdjudicatariosVO_rows = fenixAdquisicionesAMImpl.getAdjudicatariosVO().getEstimatedRowCount();
            logger.warning("fenixAdquisicionesAMImpl.getAdjudicatariosVO().rowCount() : " + vn_getAdjudicatariosVO_rows);    
            if(vn_getAdjudicatariosVO_rows > 0)
            {
                fenixAdquisicionesAMImpl.getAdjudicatariosVO().fusionarCamposTrasient();
                logger.warning("vn_getAdjudicatariosVO_rows : "+vn_getAdjudicatariosVO_rows);  
            }
            
            long vn_getContratadosVO_rows = fenixAdquisicionesAMImpl.getContratadosVO().getEstimatedRowCount();
            logger.warning("fenixAdquisicionesAMImpl.getContratadosVO().rowCount() : " + vn_getContratadosVO_rows); 
            if(vn_getContratadosVO_rows > 0)
            {
                fenixAdquisicionesAMImpl.getContratadosVO().fusionarCamposTrasient();
                logger.warning("vn_getContratadosVO_rows : "+vn_getContratadosVO_rows);  
            }   
            
            getDBTransaction().commit();
            respuesta = Boolean.TRUE;
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error al intentar guardar la no objecion ->: ", e);
            rollBackNoObjecion();
        }
        return respuesta;
    }
    
    public Boolean rollBackNoObjecion() {
        Boolean respuesta = Boolean.FALSE;
        try {
            getDBTransaction().rollback();
            respuesta = Boolean.TRUE;
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error al intentar hacer rollback a la noobjecion ->: " + e.getMessage());
            respuesta = Boolean.FALSE;
        }
        return respuesta;
    }
    
    private FenixAdquisicionAMImpl getFenixAdquisicionAM() {
        FenixAMImpl fenixAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionesAMImpl = (FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();

        return fenixAdquisicionesAMImpl;
    }

    /**
     *  M&eacujte;todo para crear un nuevo registro de oferentes
     *  @author Jonathan Ruiz
     */
    public void crearRowOferente(Long idNoObjecion) {
        logger.log(ADFLogger.WARNING, "Into crearRowOferente.");
        getFenixAdquisicionAM().getOferentesVO().crearRowOferente(idNoObjecion);
    }
    
    public Long obtenerAdquisicion(Long idObjecion){
        Long resultado=null;
        if(null!=idObjecion){
            setvarObjecion(idObjecion);
            this.executeQuery();
            if(getEstimatedRowCount()>0){
                    Row row=getRowAtRangeIndex(0);
                    if(null!=row.getAttribute("IdAdquisicion")){
                        resultado=(Long)row.getAttribute("IdAdquisicion");
                        }
                    else{
                        logger.warning("No se pudo obtener el valor de la adquisicion");
                        }
                    }
                    else{
                        logger.warning("No existen registros");
                        }
                }
            else{
                logger.warning("No se pudo obtener el valor de la no objecion");
                }
            logger.warning("valor recuperado de adquisicion: "+resultado);    
        return resultado;
        }
    
    public Row obtenerObjecion(Long idObjecion){
        Row resultado=null;
        if(null!=idObjecion){
            setvarObjecion(idObjecion);
            this.executeQuery();
            if(getEstimatedRowCount()>0){
                    resultado=getRowAtRangeIndex(0);
                }
            else{
                logger.warning("No se pudo obtener el valor de la no objecion");
                }
        }
        return resultado;
        }
}

