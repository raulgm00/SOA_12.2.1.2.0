package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TreEvidenciaAdquisicionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Nov 25 01:37:03 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreEvidenciaAdquisicionVOImpl extends ViewObjectImpl implements TreEvidenciaAdquisicionVO {
    
    public static ADFLogger logger = null;
    private static final Integer SE_PUEDE_ELIMINAR = 1;
    private static final Integer NO_SE_PUEDE_ELIMINAR = 0;
    /**
     * This is the default constructor (do not remove).
     */
    public TreEvidenciaAdquisicionVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(TreEvidenciaAdquisicionVOImpl.class);
        }
    }
    
    public void agregarTreEvidenciaAdquisicion(Long idDocumento, Long idAdquisicion) {
        logger.log(ADFLogger.TRACE, "Inside agregarTreEvidenciaAdquisicion.");
        logger.warning("Inicia metodo agregarTreEvidenciaAdquisicion de TreEvidenciaAdquisicionVO");
        
        oracle.jbo.domain.Number idTreEvidenciaAdquisicion = null;
        NameValuePairs nvpTreEvidenciaAdquisicion = null;
        SequenceImpl seqTreEvidenciaAdquisicion = null;
        logger.warning("Continua porceso agregarTreEvidenciaAdquisicion 1");
        
        seqTreEvidenciaAdquisicion = new SequenceImpl("TRE_EVIDENCIA_ADQUISICION_SEQ", getDBTransaction());
        idTreEvidenciaAdquisicion = seqTreEvidenciaAdquisicion.getSequenceNumber();
        logger.warning("id Evidencia Adquisicion: " + idTreEvidenciaAdquisicion);
        nvpTreEvidenciaAdquisicion = new NameValuePairs();
        nvpTreEvidenciaAdquisicion.setAttribute("Id", idTreEvidenciaAdquisicion);
        nvpTreEvidenciaAdquisicion.setAttribute("IdDocumento", idDocumento);
        nvpTreEvidenciaAdquisicion.setAttribute("IdAdquisicion", idAdquisicion);
        nvpTreEvidenciaAdquisicion.setAttribute("SePuedeEliminar", SE_PUEDE_ELIMINAR);
        logger.warning("Id--->" + idTreEvidenciaAdquisicion);
        logger.warning("IdDocumento--->" + idDocumento);
        logger.warning("IdAdquisicion--->" + idAdquisicion);
        logger.warning("Continua porceso agregarTreEvidenciaAdquisicion 3");
        
        this.createAndInitRow(nvpTreEvidenciaAdquisicion);
        logger.warning("Continua proceso agregarTreEvidenciaAdquisicion 4");
                
        getDBTransaction().commit();
        logger.warning("Continua porceso agregarTreEvidenciaAdquisicion 5 (se hace commit a la VO)");
    }
    
    public void eliminarTreEvidenciaAdquisicion(Integer idTreEvidenciaAdquisicion) {
       
        logger.warning("Ingresa al metodo eliminarTreEvidenciaAdquisicion de la VO TreEvidenciaAdquisicion");
        logger.warning("idTreEvidenciaAdquisicion---->"+ idTreEvidenciaAdquisicion);
        Row row = null;
        //executeQuery();
        row = getRow(new Key(new Object[]{Long.parseLong(idTreEvidenciaAdquisicion.toString())}));
       
        if(row != null){
            logger.warning("Metodo eliminarTreEvidenciaAdquisicion------Ingresa al If");
            row.remove();
            logger.warning("Metodo eliminarTreEvidenciaAdquisicion------Aplica row.remove");
            getDBTransaction().commit();
            logger.warning("Metodo eliminarTreEvidenciaAdquisicion------Hace el commit");
        }
        logger.warning("Metodo eliminarTreEvidenciaAdquisicion------Fin metodo eliminarTreEvidenciaAdquisicionso");
    }

    public Boolean actualizarSePuedeEliminarTreEvidenciaAdquisicion(Long idAdquisicion){
      logger.warning("Entra en actualizarTreEvidenciaAdquisicionSePuedeEliminar");
      logger.warning("idAdquisicion : " + idAdquisicion);
      Boolean sePuedeEliminar = Boolean.TRUE;
      Row row = null;
      try{
          ViewCriteria viewCriteria =
              this.getViewCriteriaManager().getViewCriteria("TreEvidenciaAdquisicionVOCriteria");
          viewCriteria.ensureVariableManager().setVariableValue("pIdAdquisicion", idAdquisicion);
          viewCriteria.ensureVariableManager().setVariableValue("pSePuedeEliminar", SE_PUEDE_ELIMINAR);
          this.applyViewCriteria(viewCriteria);
          this.executeQuery();
          
          logger.warning("Numero de registros encontrados : " + this.getEstimatedRowCount());
          
          if(this.getEstimatedRowCount() > 0){
              RowSetIterator iterator = this.createRowSetIterator(null);
              iterator.reset();
              
              while(iterator.hasNext()){
                  row = iterator.next(); 
                  row.setAttribute("SePuedeEliminar", NO_SE_PUEDE_ELIMINAR);
              }
              iterator.closeRowSetIterator();
              
              logger.warning("Se ejecuta commit.");
              getDBTransaction().commit();
              logger.warning("Commit ejecutado correctamente.");
          }else{
              logger.warning("No se encontraron registros para actualizar.");
          }
      }catch(Exception e){
          logger.warning("Error en actualizarTreEvidenciaAdquisicionSePuedeEliminar.", e);
          sePuedeEliminar = Boolean.FALSE;
      }finally{
          logger.warning("Se remueve criterio de busqueda.");
          this.removeApplyViewCriteriaName("TreEvidenciaAdquisicionVOCriteria");
      }
      logger.warning("actualizacion de registro : " + sePuedeEliminar);
      return sePuedeEliminar;
    }
    
    /**
     * Returns the variable value for pIdAdquisicion.
     * @return variable value for pIdAdquisicion
     */
    public Long getpIdAdquisicion() {
        return (Long) ensureVariableManager().getVariableValue("pIdAdquisicion");
    }

    /**
     * Sets <code>value</code> for variable pIdAdquisicion.
     * @param value value to bind as pIdAdquisicion
     */
    public void setpIdAdquisicion(Long value) {
        ensureVariableManager().setVariableValue("pIdAdquisicion", value);
    }

    /**
     * Returns the variable value for pSePuedeEliminar.
     * @return variable value for pSePuedeEliminar
     */
    public Integer getpSePuedeEliminar() {
        return (Integer) ensureVariableManager().getVariableValue("pSePuedeEliminar");
    }

    /**
     * Sets <code>value</code> for variable pSePuedeEliminar.
     * @param value value to bind as pSePuedeEliminar
     */
    public void setpSePuedeEliminar(Integer value) {
        ensureVariableManager().setVariableValue("pSePuedeEliminar", value);
    }
}

