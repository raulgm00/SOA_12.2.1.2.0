package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.QPreguntaVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 20 16:58:06 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class QPreguntaVOImpl extends ViewObjectImpl implements QPreguntaVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public QPreguntaVOImpl()
    { 
        if (logger == null) {
            logger = ADFLogger.createADFLogger(QPreguntaVOImpl.class);
        }
    }

    /**
     * Returns the bind variable value for varIdOperacion.
     * @return bind variable value for varIdOperacion
     */
    public Long getvarIdOperacion()
    {
        return (Long) getNamedWhereClauseParam("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Long value)
    {
        System.out.println("AM : setvarIdOperacion () ");
        System.out.println("Id Operacion :" + value);
        setNamedWhereClauseParam("varIdOperacion", value);
    }

    /**
     * Returns the variable value for varIdPregunta.
     * @return variable value for varIdPregunta
     */
    public Long getvarIdPregunta() {
        return (Long) ensureVariableManager().getVariableValue("varIdPregunta");
    }

    /**
     * Sets <code>value</code> for variable varIdPregunta.
     * @param value value to bind as varIdPregunta
     */
    public void setvarIdPregunta(Long value) {
        ensureVariableManager().setVariableValue("varIdPregunta", value);
    }
    
    public Boolean agregarEvidenciaPorId(Long id,Long idDocumento){
        logger.warning("Dentro de agregarEvidenciaPorId");
        logger.warning("idPregunta :"+id);
        logger.warning("idDocumento :"+idDocumento);
        
        Row row = null;
        Boolean resultado = Boolean.FALSE;
        
        row = obtenerPreguntaPorId(id);
        
        if(null != row){
        
            row.setAttribute("IdDocumento", idDocumento);
        
            try{
                getDBTransaction().commit();
                resultado = Boolean.TRUE;
                logger.warning("Se actualiza el registros correctamente");
            }catch(Exception e){
                logger.warning("Error al realizar el commit. Realizando ROLLBACK.", e);
                getDBTransaction().rollback();
            }
            
        }else{
            logger.warning("row es null no agrega evidencia");
        }
        
        logger.warning("resultado :"+resultado);
        logger.warning("Dentro de agregarEvidenciaPorId");
        
        return resultado;
    }
    
    public Row obtenerPreguntaPorId(Long id) {
        logger.warning("Dentro de obtenerPreguntaPorId");
        logger.warning("id : " + id);
        
        ViewCriteria criteria = null;
        Row row = null;
    
        try {    
            
            criteria =this.getViewCriteriaManager().getViewCriteria("preguntaPorIdVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varIdPregunta", id);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            
            logger.warning("cantidad de registros :" + this.getEstimatedRowCount());
            
            if (this.getEstimatedRowCount() > 0) {
                logger.warning("Se encontro registro");
                row = this.getRowAtRangeIndex(0);
                logger.warning("idPregunta :"+row.getAttribute("IdPregunta"));
            } else {
                logger.warning("No se encontraron registros");
            }
            
        } catch(Exception e) {
            logger.warning("Error al buscar por idPregunta : " + e);     
        } finally {
            logger.warning("Se remueve criterio de busqueda");
            getViewCriteriaManager().removeApplyViewCriteriaName("preguntaPorIdVOCriteria");   
        }
         
           this.executeQuery();
        
        
        logger.warning("Fuera de obtenerPreguntaPorId");
        return row;
    }

    /**
     * Returns the bind variable value for varIdProceso.
     * @return bind variable value for varIdProceso
     */
    public Long getvarIdProceso() {
        return (Long) getNamedWhereClauseParam("varIdProceso");
    }

    /**
     * Sets <code>value</code> for bind variable varIdProceso.
     * @param value value to bind as varIdProceso
     */
    public void setvarIdProceso(Long value) {
        System.out.println("AM : setvarIdProceso () ");
        System.out.println("Id Proceso :" + value);
        setNamedWhereClauseParam("varIdProceso", value);
    }
}

