package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.ComponenteProductoPoseeMoraVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Mar 15 14:49:20 CST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComponenteProductoPoseeMoraVOImpl extends ViewObjectImpl implements ComponenteProductoPoseeMoraVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public ComponenteProductoPoseeMoraVOImpl() {
        if(null == logger){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for ProductoFlex.
     * @return bind variable value for ProductoFlex
     */
    public String getProductoFlex() {
        return (String) getNamedWhereClauseParam("ProductoFlex");
    }

    /**
     * Sets <code>value</code> for bind variable ProductoFlex.
     * @param value value to bind as ProductoFlex
     */
    public void setProductoFlex(String value) {
        setNamedWhereClauseParam("ProductoFlex", value);
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    public Boolean poseeMora(String ProductoFlex){
        logger.warning("Inicia metodo poseeMora");
        logger.warning("ProductoFlex: " + ProductoFlex);
        Boolean respuestaPoseeMora = null;
        
        try {
            logger.warning("Se ejecuta el query");
            this.setProductoFlex(ProductoFlex);
            this.executeQuery();
            logger.warning("Se obtiene el valor de poseeMora");
            Long countRows = getEstimatedRowCount();
            if (countRows.compareTo(0L) == 0) {
                logger.warning("No se encontro registros: " + countRows + ", para verificar la mora." );      
            } 
            else {
                logger.warning("Si se encontro registros: " + countRows);
                Row fila = first();  
                String poseeMora = (String)fila.getAttribute("PoseeMora");
                logger.warning("poseeMora: " + poseeMora);  
                if(poseeMora.equals("1")){
                    respuestaPoseeMora = Boolean.TRUE;
                }
                else
                {
                    respuestaPoseeMora = Boolean.FALSE;
                }
                logger.warning("respuestaPoseeMora: " + respuestaPoseeMora);  
            }

        } catch (Exception e) {
            logger.warning("Error metodo poseeMora ->", e);
        }   

        logger.warning("Finaliza metodo poseeMora");
        return respuestaPoseeMora;
    }
}

