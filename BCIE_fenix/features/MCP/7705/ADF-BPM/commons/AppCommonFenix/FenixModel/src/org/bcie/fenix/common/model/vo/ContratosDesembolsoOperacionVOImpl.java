package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ContratosDesembolsoOperacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 09 15:21:16 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratosDesembolsoOperacionVOImpl extends ViewObjectImpl implements ContratosDesembolsoOperacionVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContratosDesembolsoOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for vIdOperacion.
     * @return bind variable value for vIdOperacion
     */
    public Long getvIdOperacion() {
        return (Long) getNamedWhereClauseParam("vIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable vIdOperacion.
     * @param value value to bind as vIdOperacion
     */
    public void setvIdOperacion(Long value) {
        logger.warning("inside setvIdOperacion.");
        setNamedWhereClauseParam("vIdOperacion", value);
        this.executeQuery();
        logger.warning("Numero de rows obtenidos :" + this.getRowCount());
    }
    
    
    public BigDecimal sumaMontoContratos(Long idOperacion){
        logger.warning("*Inf, Inicia metodo sumaMontoContratos idOperacion recibido: "+idOperacion);
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
         BigDecimal sumaMontoContratos = BigDecimal.ZERO;
         Integer ESTADO_CONTRATO_DESEMBOLSADO = 18;
          setvIdOperacion(idOperacion);
            
          if(getEstimatedRowCount() > 0){
               logger.warning("*Inf, iterando sobre contratos");
               RowSetIterator iterador = createRowSetIterator(null);
               ContratosDesembolsoOperacionVORowImpl RowContrato = null;
               
                   while(iterador.hasNext()){                        
                         RowContrato = (ContratosDesembolsoOperacionVORowImpl)iterador.next();
                            logger.warning("*Inf, contrato desembolso: "+RowContrato.getId());   
                            logger.warning("*Inf, contrato desembolso: "+RowContrato.getId()+" tiene un monto de: "
                                                                                       +RowContrato.getMontoDesembolsar());

                      if(RowContrato.getIdTcaEstado().compareTo(ESTADO_CONTRATO_DESEMBOLSADO) == 0 ){
                            if(RowContrato.getMontoDesembolsar() != null){                                            
                                sumaMontoContratos = sumaMontoContratos.add(RowContrato.getMontoDesembolsar());                                                  
                              }else{
                               logger.warning("*Inf, el desembolso: "+RowContrato.getId()+" no tiene contrato");
                              }                   
                      }else{
                              logger.warning("*Inf, el desembolso: "+RowContrato.getId()
                                                             +" no tiene estado desembolsado, no se tomara en cuenta");
                          } 
                   }
                   iterador.closeRowSetIterator();
          }else{
             logger.warning("*Inf, no se encontraron contratos en estado desembolsado o registrado de la operacion");
          }
            
            TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
            tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia            
            logger.warning("*Inf, Termina metodo sumaMontoContratos con una duracion de: "+tiempo+" segundos");  
         return sumaMontoContratos;
        }
}

