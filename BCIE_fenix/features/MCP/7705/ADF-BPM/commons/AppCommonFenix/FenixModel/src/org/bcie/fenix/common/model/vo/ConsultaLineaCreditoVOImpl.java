package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;
import java.util.Date;
import java.util.GregorianCalendar;

import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.jbo.JboException;

import oracle.jbo.NameValuePairs;

import org.bcie.catalogobo.Catalogo;
import org.bcie.commonbo.MontoType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ConsultaLineaCreditoVO;
import org.bcie.lineacreditobo.InformacionAdicional;
import org.bcie.lineacreditobo.LineaCredito;
import org.bcie.lineacreditomo.ConsultarLineaCreditoBPELResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 09 12:44:49 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultaLineaCreditoVOImpl extends ViewObjectImpl implements ConsultaLineaCreditoVO {
    private static ADFLogger logger = null;

    /**
     * This is the default constructor (do not remove).
     */
    public ConsultaLineaCreditoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Vamos a consultar el servicio de ConsultarLineaCreditoById y cargamos sus valores a la VO
     * ConsultaLineaCredito: DISPONIBLE, TRANSITO, DISPONIBLE_DESEMBOLSO.
     * Vamos a consultar el servicio pasandole el tipo moneda, la llamada con los parametros: idLinea y TipoMoneda
     * retornara ademas el monto PROGRAMADO.
     *
     * @param idLineaCredito
     * @since 12/09/2016
     */
    public void consultarLineaCredito(Long idLineaCredito, String tipoMoneda) {
        logger.warning("----------INTO consultarLineaCredito->" + idLineaCredito + " tipo Moneda ->" + tipoMoneda +
                       "--------------");
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
        //ConsultaLineaCreditoVORowImpl newLineaCredito = (ConsultaLineaCreditoVORowImpl) createRow();
        NameValuePairs newLineaCredito = new NameValuePairs();

        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService =
            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
            lineaCredito12BndQSService.getLineaCredito12Bnd();
        try {
            logger.log(ADFLogger.WARNING, "<*> HNWS lineaCreditoPT <*>" + lineaCreditoPT.toString());

            org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType request =
                new org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType();

            //se agrega los parametros al request idOperacion e instanciaProceso
            request.setIdLineaCredito(idLineaCredito);

            if (null != tipoMoneda) {
                InformacionAdicional informacionAdicional = new InformacionAdicional();
                MontoType montoType = new MontoType();
                Catalogo catalogo = new Catalogo();

                catalogo.setCodigoExterno(tipoMoneda);
                montoType.setMoneda(catalogo);
                informacionAdicional.setMonto(montoType);

                //SetTipoMoneda cuando se encuentra un contrato relacionado a la linea.
                request.setInformacionAdicional(informacionAdicional);
            }

            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);

            ConsultarLineaCreditoBPELResponseType response = lineaCreditoPT.consultarLineaCreditoById(request);

            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);
            //Vamos a guardar los datos en el ROW
            if (response.getLineaCredito() != null) {
                //LineaCredito listaCredito = listaLineasObtenidas.get(0);

                if (response.getLineaCredito().getIdLineaCredito() > 0) {
                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.IDLINEACREDITO,
                                                 response.getLineaCredito().getIdLineaCredito());
                }
                FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
                    (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
                if (null != response.getLineaCredito()) {
                    if (null != response.getLineaCredito().getMontoLinea()) {
                        try{
                            gestorDesembolsoAMImpl.getConsultarLineaCreditoDesembolsoVO().getCurrentRow().setAttribute("MontoLinea", response.getLineaCredito().getMontoLinea());
                        }catch(Exception e){
                            logger.warning("ERROR al Cambiar el MontoLinea con valor de servicio: ", e);
                        }
                    } else {
                        logger.warning("No se obtuvo el monto de la linea");
                    }
                } else {
                    logger.warning("No se obtuvo el monto de la linea");
                }

                //Vamos por los montos que estan en List<MontoType>

                if (response.getLineaCredito().getMonto() != null) {

                    List<MontoType> lista = response.getLineaCredito().getMonto();
                    logger.warning("Recuperando montos...");
                    for (MontoType montos : lista) {

                        try {

                            if (montos.getTipo() != null) {

                                String descripcionMonto =
                                    (null == montos.getTipo().getDescripcionCorta()) ? null :
                                    montos.getTipo().getDescripcionCorta().toString();

                                if (descripcionMonto == null || descripcionMonto.equals("")) {
                                    logger.warning("***Important! el servicio esta regresando un monto sin descripcion");
                                } else {

                                    switch (descripcionMonto) {
                                    case "DISPONIBLE":
                                        logger.warning("*Monto recuperado: " + montos.getTipo().getDescripcionCorta());
                                        if (montos.getImporte() != null) {
                                            newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.DISPONIBLE,
                                                                         montos.getImporte());
                                            logger.warning("*Importe recuperado: " + montos.getImporte());
                                        } else {
                                            logger.warning("*El Monto recuperado: " +
                                                           montos.getTipo().getDescripcionCorta() +
                                                           " no tiene un importe");
                                        }

                                        break;
                                    case "TRANSITO":
                                        logger.warning("*Monto recuperado: " + montos.getTipo().getDescripcionCorta());
                                        if (montos.getImporte() != null) {
                                            newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.TRANSITO,
                                                                         montos.getImporte());
                                            logger.warning("*Importe recuperado: " + montos.getImporte());
                                        } else {
                                            logger.warning("*El Monto recuperado: " +
                                                           montos.getTipo().getDescripcionCorta() +
                                                           " no tiene un importe");
                                        }

                                        break;
                                    case "DISPONIBLE_DESEMBOLSO":
                                        logger.warning("*Monto recuperado: " + montos.getTipo().getDescripcionCorta());
                                        if (montos.getImporte() != null) {
                                            newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.DISPONIBLE_DESEMBOLSO,
                                                                         montos.getImporte());
                                            logger.warning("*Importe recuperado: " + montos.getImporte());
                                        } else {
                                            logger.warning("*El Monto recuperado: " +
                                                           montos.getTipo().getDescripcionCorta() +
                                                           " no tiene un importe");
                                        }

                                        break;
                                    case "PROGRAMADO":
                                        logger.warning("*Monto recuperado: " + montos.getTipo().getDescripcionCorta());
                                        if (montos.getImporte() != null) {
                                            newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.PROGRAMADO,
                                                                         montos.getImporte());
                                            logger.warning("*Importe recuperado: " + montos.getImporte());
                                        } else {
                                            logger.warning("*El Monto recuperado: " +
                                                           montos.getTipo().getDescripcionCorta() +
                                                           " no tiene un importe");
                                        }

                                        break;
                                    }
                                }

                            } else {
                                logger.warning("*Important! montos.getTipo() es resuelto a null ");
                            }


                        } catch (Exception e) {
                            logger.warning("error al recuperar los montos: ", e);
                        }

                    }
                } else {
                    logger.log(ADFLogger.WARNING, "*** Error response.getLineaCredito().getMonto() es resuelto a Null");
                }
                //Vamos por las fechas:
                logger.warning("---->Recuperando Fechas......");

                try {
                    logger.warning("---->FECHA REGISTRO: " + response.getLineaCredito().getFechaRegistro());
                    logger.warning("---->FECHA FECHAVENCIMIENTO: " + response.getLineaCredito().getFechaVencimiento());
                    logger.warning("---->FECHA FECHAMAXIMADESEMBOLSO: " +
                                   response.getLineaCredito().getFechaMaximaDesembolso());
                } catch (Exception e) {
                    logger.warning("Error al imprimir las fechas: " + e);
                }
                if (response.getLineaCredito().getFechaRegistro() != null) {
                    GregorianCalendar fechaReguistro =
                        response.getLineaCredito().getFechaRegistro().toGregorianCalendar();
                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.FECHAREGISTRO,
                                                 new java.sql.Timestamp(fechaReguistro.getTimeInMillis()));
                }
                if (response.getLineaCredito().getFechaVencimiento() != null) {
                    GregorianCalendar fechaVencimiento =
                        response.getLineaCredito().getFechaVencimiento().toGregorianCalendar();
                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.FECHAVENCIMIENTO,
                                                 new java.sql.Timestamp(fechaVencimiento.getTimeInMillis()));
                }
                if (response.getLineaCredito().getFechaMaximaDesembolso() != null) {
                    GregorianCalendar fechaMaximaDesembolso =
                        response.getLineaCredito().getFechaMaximaDesembolso().toGregorianCalendar();
                    newLineaCredito.setAttribute(ConsultaLineaCreditoVORowImpl.FECHAMAXIMADESEMBOLSO,
                                                 new java.sql.Timestamp(fechaMaximaDesembolso.getTimeInMillis()));
                }
                //Vamos por el insert en el ROW de consultaLineaCredito
                //insertRow(newLineaCredito);
                //setCurrentRow(newLineaCredito);
                logger.warning("Inicializando y asignando row.");
                Row row = null;
                row = createAndInitRow(newLineaCredito);
                insertRow(row);
                setCurrentRow(row);


            } else {
                logger.log(ADFLogger.WARNING, "No se recupero ninguna Lineas Credito");
            }

        } catch (Exception e) {
            logger.warning("ERROR: ", e);
        }
    }


    public Row obtenerRowCurrent(){
       logger.warning("Inf, inicia metodo obtenerRowCurrent");
       Row fila = null;
       
       if(getEstimatedRowCount() > 0){           
           fila = getCurrentRow();           
         }else{
           logger.warning("Inf, no hay un row current en la VO");           
        }
        
       logger.warning("Inf, termina metodo obtenerRowCurrent");
        return fila;
      }
    
    
    public Map consultarLineaCreditoByIdLineaCredito(Long idLineaCredito, String tipoMoneda) {
        logger.warning("Into consultarLineaCreditoByIdLineaCredito idLineaCredito : "+idLineaCredito+" " +
            " tipo Moneda : "+tipoMoneda);
        Map<String,Object> resultMap = new HashMap<String,Object>();
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        
         String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);
        
        
        //Datos de prueba
        // String wsdl = "http://hn-obpm-qa-1.bcie.org:7013/Entidad/LineaCreditoService/V1.0?wsdl";
        // idLineaCredito = 4557L;
        // tipoMoneda = "USD";
        
          com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService = null;
          com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT = null;
         
       try{
             lineaCredito12BndQSService =
                       IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
         
             lineaCreditoPT = lineaCredito12BndQSService.getLineaCredito12Bnd();
       
       }catch(Exception e){
            logger.warning("Ha ocurrido un error al consultar la definicion del servicio ConsultarLineaCredito - WSDL_LINEA_CREDITO no disponible");
            logger.warning("*Error ->",e);
            throw new JboException("Ha ocurrido un error al consultar la definicion del ConsultarLineaCredito - WSDL_LINEA_CREDITO no disponible");                    
        }
       
       
        try {
            logger.log(ADFLogger.WARNING, "<*> HNWS consultarLineaCreditoByIdLineaCredito <*>" + lineaCreditoPT.toString());

            org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType request =
                new org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType();

            //se agrega los parametros al request idOperacion e instanciaProceso
            request.setIdLineaCredito(idLineaCredito);
            
            if(null != tipoMoneda){
                InformacionAdicional informacionAdicional = new InformacionAdicional();
                MontoType montoType = new MontoType();
                Catalogo catalogo = new Catalogo();
                
                catalogo.setCodigoExterno(tipoMoneda);
                montoType.setMoneda(catalogo);
                informacionAdicional.setMonto(montoType);
                
                //SetTipoMoneda cuando se encuentra un contrato relacionado a la linea.
                request.setInformacionAdicional(informacionAdicional);              
            }else{
                logger.warning("tipoMoneda is null");
            }

            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);
            ConsultarLineaCreditoBPELResponseType response = lineaCreditoPT.consultarLineaCreditoById(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);
            
            //Vamos a guardar los datos en el ROW
            if (response.getLineaCredito() != null) {
                                       
                try{
                    logger.warning("idLineaCredito: "+response.getLineaCredito().getIdLineaCredito());
                    logger.warning("numeroLinea: "+response.getLineaCredito().getNumeroLineaCredito());
                    logger.warning("descripcionLinea: "+response.getLineaCredito().getDescripcion());
					logger.warning("id tipo de moneda montoLinea: "+response.getLineaCredito().getIdTipoMonedaMontoLinea());
                    logger.warning("montoLinea: "+response.getLineaCredito().getMontoLinea());
                    logger.warning("fondoLinea: "+response.getLineaCredito().getFondo());
					logger.warning("id tipo de moneda montoTotal: "+response.getLineaCredito().getIdTipoMonedaMontoLinea());
                    logger.warning("monto total: "+response.getLineaCredito().getMontoLinea());
                }catch(Exception e){
                        logger.warning("***Error al imprimir datos de la linea: ", e);
                }
                
                if (null != response.getLineaCredito().getMontoLinea()) {
                    resultMap.put("idMontoTotal", response.getLineaCredito().getMontoLinea()); 
                } else {
                    logger.warning("No se obtuvo el monto de la linea");
                }
                
                if(response.getLineaCredito().getIdLineaCredito() != null){
                    resultMap.put("idLineaCredito", response.getLineaCredito().getIdLineaCredito());  
                }
                if(response.getLineaCredito().getNumeroLineaCredito() != null){
                    resultMap.put("numeroLinea", response.getLineaCredito().getNumeroLineaCredito());  
                }
                if(response.getLineaCredito().getDescripcion() != null){
                    resultMap.put("descripcionLinea", response.getLineaCredito().getDescripcion());
                }
                if(response.getLineaCredito().getMontoLinea() != null){
                    resultMap.put("montoLinea", response.getLineaCredito().getMontoLinea());
                }                
               
                if(response.getLineaCredito().getIdTipoMonedaMontoLinea() != null){
                    Integer idTipoMoneda = response.getLineaCredito().getIdTipoMonedaMontoLinea().intValue();
                    idTipoMoneda = idTipoMoneda - 1;
                    logger.warning("id tipo de moneda montoLinea: "+idTipoMoneda);
                    logger.warning("id tipo de moneda montoTotal: "+idTipoMoneda);
                    resultMap.put("idTipoMonedaMontoLinea", idTipoMoneda);
                    resultMap.put("idTipoMonedaMontoTotal", idTipoMoneda);
                } else {
                    Integer idTipoMoneda = 1;
                    idTipoMoneda = idTipoMoneda - 1;
                    
                    logger.warning("id tipo de moneda montoLinea: "+idTipoMoneda);
                    logger.warning("id tipo de moneda montoTotal: "+idTipoMoneda);
                    resultMap.put("idTipoMonedaMontoLinea", idTipoMoneda);
                    resultMap.put("idTipoMonedaMontoTotal", idTipoMoneda);                    
                }
				
                if(response.getLineaCredito().getHerramientaCE() != null){               
                    
                    if(response.getLineaCredito().getHerramientaCE().getActividadEconomica() != null){
                        resultMap.put("actividadEconomica", response.getLineaCredito().getHerramientaCE().getActividadEconomica().getDescripcionCorta());
                    }
                   
                    if(response.getLineaCredito().getHerramientaCE().getEjeEstrategico() != null){                                                
                        resultMap.put("ejeEstrategico", response.getLineaCredito().getHerramientaCE().getEjeEstrategico().getDescripcionCorta());
                    }
                    
                    if(response.getLineaCredito().getHerramientaCE().getAreaFocalizacion() != null){                        
                        resultMap.put("areaFocalizacion", response.getLineaCredito().getHerramientaCE().getAreaFocalizacion().getDescripcionCorta());
                    }
                    
                }
               
               // datos para el popUp de detalle de la linea
                
                if(response.getLineaCredito().getLineaCreditoFlexcube() != null){
                    
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getNumeroLineaCreditoRespOut() != null){
                        resultMap.put("numeroLineaCreditoRespOut", response.getLineaCredito().getLineaCreditoFlexcube().getNumeroLineaCreditoRespOut());
                      }                    
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getNumeroContrato() != null){
                        resultMap.put("numeroContrato", response.getLineaCredito().getLineaCreditoFlexcube().getNumeroContrato());
                      }                    
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getDescripcionLinea() != null){
                        resultMap.put("descripcionLineaString", response.getLineaCredito().getLineaCreditoFlexcube().getDescripcionLinea());
                      }                      
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getMoneda() != null){
                        resultMap.put("moneda", response.getLineaCredito().getLineaCreditoFlexcube().getMoneda());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getMontoAprobado() != null){
                        resultMap.put("montoAprobadoString", response.getLineaCredito().getLineaCreditoFlexcube().getMontoAprobado());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getCodigoCliente() != null){
                        resultMap.put("codigoCliente", response.getLineaCredito().getLineaCreditoFlexcube().getCodigoCliente());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getRevolvencia() != null){
                        resultMap.put("revolvencia", response.getLineaCredito().getLineaCreditoFlexcube().getRevolvencia());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getFondo() != null){
                        resultMap.put("fondo", response.getLineaCredito().getLineaCreditoFlexcube().getFondo());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getLineaFinanciera() != null){
                        resultMap.put("lineaFinanciera", response.getLineaCredito().getLineaCreditoFlexcube().getLineaFinanciera());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getDestino() != null){
                        resultMap.put("destino", response.getLineaCredito().getLineaCreditoFlexcube().getDestino());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getTipoRecurso() != null){
                        resultMap.put("tipoRecurso", response.getLineaCredito().getLineaCreditoFlexcube().getTipoRecurso());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getPais() != null){
                        resultMap.put("pais", response.getLineaCredito().getLineaCreditoFlexcube().getPais());
                      }                     
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getActividadEconomica() != null){
                        resultMap.put("actividadEconomicaString", response.getLineaCredito().getLineaCreditoFlexcube().getActividadEconomica());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getSectorInstitucional() != null){
                        resultMap.put("sectorInstitucional", response.getLineaCredito().getLineaCreditoFlexcube().getSectorInstitucional());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getEjecutivo() != null){
                        resultMap.put("ejecutivo", response.getLineaCredito().getLineaCreditoFlexcube().getEjecutivo());
                      }                      
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getEjeEstrategico() != null){
                        resultMap.put("ejeEstrategicoString", response.getLineaCredito().getLineaCreditoFlexcube().getEjeEstrategico());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getAreaFocalizacion() != null){
                        resultMap.put("areaFocalizacionString", response.getLineaCredito().getLineaCreditoFlexcube().getAreaFocalizacion());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getObjeticoEstrategico() != null){
                        resultMap.put("objeticoEstrategico", response.getLineaCredito().getLineaCreditoFlexcube().getObjeticoEstrategico());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getPlantillaLimite() != null){
                        resultMap.put("plantillaLimite", response.getLineaCredito().getLineaCreditoFlexcube().getPlantillaLimite());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getSerialLimite() != null){
                        resultMap.put("serialLimite", response.getLineaCredito().getLineaCreditoFlexcube().getSerialLimite());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getSaldo() != null){
                        resultMap.put("saldo", response.getLineaCredito().getLineaCreditoFlexcube().getSaldo());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getDisponibilidad() != null){
                        resultMap.put("disponibilidad", response.getLineaCredito().getLineaCreditoFlexcube().getDisponibilidad());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getDisponibilidadIfacil() != null){
                        resultMap.put("disponibilidadIfacil", response.getLineaCredito().getLineaCreditoFlexcube().getDisponibilidadIfacil());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getTieneCondEspeciales() != null){
                        resultMap.put("tieneCondEspeciales", response.getLineaCredito().getLineaCreditoFlexcube().getTieneCondEspeciales());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getDescCondEspeciales() != null){
                        resultMap.put("descCondEspeciales", response.getLineaCredito().getLineaCreditoFlexcube().getDescCondEspeciales());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getFechaMaxDesembolsar() != null){
                        resultMap.put("fechaMaxDesembolsar", response.getLineaCredito().getLineaCreditoFlexcube().getFechaMaxDesembolsar());
                      }
                      if(response.getLineaCredito().getLineaCreditoFlexcube().getNumeroDesembolsos() != null){
                        resultMap.put("numeroDesembolsos", response.getLineaCredito().getLineaCreditoFlexcube().getNumeroDesembolsos());
                      }
                    
                  }
                
                
                if(response.getLineaCredito().getFondo() != null){
                    String idFonndo =  (String)response.getLineaCredito().getFondo();
                    String descFondo =  gestorDesembolsoAMImpl.getCatFondoLineaVO().recuperarDescripcionFondoByIdFondo(idFonndo);                                    
                    resultMap.put("fondoLinea",descFondo);   
                }
                
                 String descripcionCorta = obtenerDescripcionCorta(response.getLineaCredito().getDescripcion());
                 resultMap.put("descripcionCortaLinea", descripcionCorta);                  
                       
                
                //Vamos por los montos que estan en List<MontoType>
                if(response.getLineaCredito().getMonto() != null){
               
                    List<MontoType> listaMonto=response.getLineaCredito().getMonto();
                for(MontoType montos: listaMonto){
                    
                  try{
                       
                     if(montos.getTipo() != null){
                       
                        String descripcionMonto = ( null == montos.getTipo().getDescripcionCorta())? null 
                                                : montos.getTipo().getDescripcionCorta().toString() ;
                        
                            if(descripcionMonto == null || descripcionMonto.equals("")){
                                logger.warning("Monto sin descripcion");
                            }else{                                 
                               
                                switch(descripcionMonto){
                                case "DISPONIBLE":
                                    logger.warning("*Monto recuperado: "+montos.getTipo().getDescripcionCorta()); 
                                      if(montos.getImporte() != null){
                                            resultMap.put("DISPONIBLE", montos.getImporte()); 
                                            logger.warning("*Importe recuperado: "+montos.getImporte()); 
                                      }else{
                                            logger.warning("*El Monto recuperado: "+ montos.getTipo().getDescripcionCorta()
                                                                                   +" no tiene un importe");
                                      }
                                    
                                break;
                                case "TRANSITO":
                                    logger.warning("*Monto recuperado: "+montos.getTipo().getDescripcionCorta());  
                                    if(montos.getImporte() != null){
                                        resultMap.put("TRANSITO", montos.getImporte());
                                        logger.warning("*Importe recuperado: "+montos.getImporte()); 
                                    }else{
                                        logger.warning("*El Monto recuperado: "+ montos.getTipo().getDescripcionCorta()
                                                                                 +" no tiene un importe");
                                    }
                                                                   
                                break ;
                                case "DISPONIBLE_DESEMBOLSO":
                                    logger.warning("*Monto recuperado: "+montos.getTipo().getDescripcionCorta());  
                                    if(montos.getImporte() != null){
                                        resultMap.put("DISPONIBLE_DESEMBOLSO", montos.getImporte());
                                        logger.warning("*Importe recuperado: "+montos.getImporte()); 
                                    }else{
                                        logger.warning("*El Monto recuperado: "+ montos.getTipo().getDescripcionCorta()
                                                                                 +" no tiene un importe");
                                    }
                                
                                break;
                                case "PROGRAMADO":
                                    logger.warning("*Monto recuperado: "+montos.getTipo().getDescripcionCorta());  
                                    if(montos.getImporte() != null){
                                        resultMap.put("PROGRAMADO", montos.getImporte()); 
                                        logger.warning("*Importe recuperado: "+montos.getImporte()); 
                                    }else{
                                        logger.warning("*El Monto recuperado: "+ montos.getTipo().getDescripcionCorta()
                                                                                 +" no tiene un importe");
                                    }
                                                                   
                                break;
                                case "APROBADO":
                                    logger.warning("*Monto recuperado: "+montos.getTipo().getDescripcionCorta());  
                                    if(montos.getImporte() != null){
                                        resultMap.put("APROBADO", montos.getImporte()); 
                                        logger.warning("*Importe recuperado: "+montos.getImporte()); 
                                    }else{
                                        logger.warning("*El Monto recuperado: "+ montos.getTipo().getDescripcionCorta()
                                                                                 +" no tiene un importe");
                                    }
                                                                   
                                break; 
                                }
                            }                               
                        }else{
                                 logger.warning("montos.getTipo() es nulo"); 
                        }          

                    }catch(Exception e){
                            logger.warning("error al recuperar los montos: ",e);                          
                    }                    
                }
                }else{
                        logger.log(ADFLogger.WARNING, "*** Error response.getLineaCredito().getMonto() es resuelto a Null");
                }
               
                try{
                    logger.warning("FECHA REGISTRO: "+response.getLineaCredito().getFechaRegistro());
                    logger.warning("FECHA FECHAVENCIMIENTO: "+response.getLineaCredito().getFechaVencimiento());
                    logger.warning("FECHA FECHAMAXIMADESEMBOLSO: "+response.getLineaCredito().getFechaMaximaDesembolso());               
                }catch(Exception e){
                        logger.warning("Error al imprimir las fechas: "+e);
                }
                
                if(response.getLineaCredito().getFechaRegistro() != null){
                    GregorianCalendar fechaReguistro = response.getLineaCredito().getFechaRegistro().toGregorianCalendar();
                    resultMap.put("FECHAREGISTRO", new java.sql.Timestamp(fechaReguistro.getTimeInMillis()));
                }
                if(response.getLineaCredito().getFechaVencimiento() != null){
                    GregorianCalendar fechaVencimiento = response.getLineaCredito().getFechaVencimiento().toGregorianCalendar();
                    resultMap.put("FECHAVENCIMIENTO", new java.sql.Timestamp(fechaVencimiento.getTimeInMillis()));
                }
                if(response.getLineaCredito().getFechaMaximaDesembolso() != null){
                    GregorianCalendar fechaMaximaDesembolso = response.getLineaCredito().getFechaMaximaDesembolso().toGregorianCalendar();
                    resultMap.put("FECHAMAXIMADESEMBOLSO", new java.sql.Timestamp(fechaMaximaDesembolso.getTimeInMillis()));
                }
                
                
                                
                
                
            } else {
                logger.log(ADFLogger.WARNING, "*Inf, Important! No se recupero ninguna Lineas Credito");
            }

        } catch (Exception e) {
            e.printStackTrace();
            logger.log(ADFLogger.ERROR, e.getMessage().toString());
        }
        logger.warning("Leave consultarLineaCreditoByIdLineaCredito return :"+resultMap);
        return resultMap;
    }



    private String obtenerDescripcionCorta(String descripcion){
        logger.warning("Ingresa el metodo obtenerDescripcionCorta");
        
        String descripcionCorta = null;
        
        try{
            if(null!=descripcion){
                logger.warning("descripcion es diferente de null");
                logger.warning("descripcion length: " + descripcion.length() );
                if(descripcion.length()>40)
                    descripcionCorta = descripcion.substring(0, 40);
                else
                    descripcionCorta = descripcion;
            }
            else{
                logger.warning("descripcion es null");
                descripcionCorta = null;
            }
        }
        catch(Exception e){
            logger.warning("Error al generar la descripcion corta... " + e);
            descripcionCorta = null;
        }
        
        logger.warning("Valor a retornar descripcionCorta: " + descripcionCorta);
        logger.warning("Finaliza el metodo obtenerDescripcionCorta");
        return descripcionCorta;
    }

    public Map obtenerFechaVencimientoMaximaMontoDisponible(Long idLineaCredito, String tipoMoneda) {
        logger.warning("Inicia metodo obtenerFechaVencimientoMaximaMontoDisponible.");
        Map mapaDatosLinea = new HashMap();
        Date fechaVencimientoDate = null;
        Date fechaMaximaDate = null;
        BigDecimal montoDisponible = null;
        
        if(null == idLineaCredito){
            logger.warning("Parametro IDLINEACREDITO requerido es NULL.");
            return mapaDatosLinea;
        }        
        
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.LINEA_CREDITO);

        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService =
            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
            lineaCredito12BndQSService.getLineaCredito12Bnd();

        org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType request =
            new org.bcie.lineacreditomo.ConsultarLineaCreditoBPELRequestType();
        
        ConsultarLineaCreditoBPELResponseType response = new ConsultarLineaCreditoBPELResponseType();

        //se agrega los parametros al request idOperacion e instanciaProceso
        request.setIdLineaCredito(idLineaCredito);

        if (null != tipoMoneda) {
            InformacionAdicional informacionAdicional = new InformacionAdicional();
            MontoType montoType = new MontoType();
            Catalogo catalogo = new Catalogo();

            catalogo.setCodigoExterno(tipoMoneda);
            montoType.setMoneda(catalogo);
            informacionAdicional.setMonto(montoType);

            //SetTipoMoneda cuando se encuentra un contrato relacionado a la linea.
            request.setInformacionAdicional(informacionAdicional);
        }
        
        //Se ejecuta servicio consultarLineaCreditoById()
        try{
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);
            response = lineaCreditoPT.consultarLineaCreditoById(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);
        }catch(Exception e){
            logger.warning("ERROR al ejecutar servicio ConsultarLineaCreditoById.", e);
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Error al ejecutar servicio ConsultarLineaCreditoById: " + e.getMessage()));
            throw ex;
        }
        
        //Evaluando el response del servicio
        if(null != response){
            if (null != response.getResultado()){
                if (response.getResultado().getResult().value() == "OK"){
                    if(null != response.getLineaCredito()){
                        LineaCredito lineaCredito = response.getLineaCredito();
                        
                        if (lineaCredito.getFechaVencimiento() != null) {
                            GregorianCalendar fechaVencimiento =
                                response.getLineaCredito().getFechaVencimiento().toGregorianCalendar();
                            fechaVencimientoDate = fechaVencimiento.getTime();
                            logger.warning("Fecha de vencimiento de servicio en Date: " + fechaVencimientoDate);
                        }else{
                            logger.warning("FechaVencimiento del servicio ConsultarLineaCreditoById es NULL.");
                        }
                        
                        if (lineaCredito.getFechaMaximaDesembolso() != null) {
                            GregorianCalendar fechaMaximaDesembolso =
                                response.getLineaCredito().getFechaMaximaDesembolso().toGregorianCalendar();
                            fechaMaximaDate = fechaMaximaDesembolso.getTime();
                            logger.warning("Fecha maxima desembolso de servicio en Date: " + fechaMaximaDate);
                        }else{
                            logger.warning("FechaMaximaDesembolso del servicio ConsultarLineaCreditoById es NULL.");
                        }
                        
                        if(null != lineaCredito.getMonto() && !lineaCredito.getMonto().isEmpty() && 
                           lineaCredito.getMonto().size() > 0){
                            for(MontoType monto : lineaCredito.getMonto()){
                                logger.warning("Iterando Lista de montos...");
                                if(null != monto.getTipo()){
                                    if(null != monto.getTipo().getDescripcionCorta() && 
                                       !monto.getTipo().getDescripcionCorta().equalsIgnoreCase("")){
                                        if(monto.getTipo().getDescripcionCorta().equalsIgnoreCase("DISPONIBLE")){
                                            logger.warning("Es Monto Disponible.");
                                            if(null != monto.getImporte()){
                                                montoDisponible = monto.getImporte();
                                                logger.warning("Monto DISPONIBLE: " + montoDisponible);
                                            }else{
                                                logger.warning("El importe del Monto Disponible es NULL.");
                                            }
                                        }else{
                                            logger.warning("No es Monto Disponible.");
                                        }
                                    }else{
                                        logger.warning(" DescripcionCorta de Monto() de servicio ConsultarLineaCreditoById es NULL o VACIO.");
                                    }
                                }else{
                                    logger.warning(" Objeto Tipo() de Monto() de servicio ConsultarLineaCreditoById es NULL.");
                                }
                            }
                        }else{
                            logger.warning("La lista de Montos del servicio ConsultarLineaCreditoById es NULL o VACIA.");
                        }
                    }else{
                        logger.warning("Objeto LineaCredito de servicio ConsultarLineaCreditoById es NULL.");
                        JboException ex = new JboException("");
                        ex.addToExceptions(new Exception("Objeto LineaCredito de servicio ConsultarLineaCreditoById es NULL."));
                        throw ex;
                    }
                }else{
                    logger.warning("Servicio ConsultarLineaCreditoById devuelve ERROR >> " +
                                   response.getResultado().getMessage());
                    JboException ex = new JboException("");
                    ex.addToExceptions(new Exception("Servicio ConsultarLineaCreditoById devuelve ERROR >> " + 
                                                     response.getResultado().getMessage()));
                    throw ex;
                }
            }else{
                logger.warning("getResultado de servicio ConsultarLineaCreditoById es NULL.");
                JboException ex = new JboException("");
                ex.addToExceptions(new Exception("El objeto getResutado del servicio ConsultarLineaCreditoById es NULL."));
                throw ex;
            }
        }else{
            logger.warning("Response del servicio ConsultarLineaCreditoById es NULL.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Response del servicio ConsultarLineaCreditoById es NULL."));
            throw ex;
        }
        
        mapaDatosLinea.put("MontoDisponible", montoDisponible);
        mapaDatosLinea.put("FechaVencimiento", fechaVencimientoDate);
        mapaDatosLinea.put("FechaMaxima", fechaMaximaDate);
        logger.warning("Termina metodo obtenerFechaVencimientoMaximaMontoDisponible.");
        return mapaDatosLinea;
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for pIdContratoDesembolso.
     * @return variable value for pIdContratoDesembolso
     */
    public Number getpIdContratoDesembolso() {
        return (Number) ensureVariableManager().getVariableValue("pIdContratoDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pIdContratoDesembolso.
     * @param value value to bind as pIdContratoDesembolso
     */
    public void setpIdContratoDesembolso(Number value) {
        ensureVariableManager().setVariableValue("pIdContratoDesembolso", value);
    }
}

