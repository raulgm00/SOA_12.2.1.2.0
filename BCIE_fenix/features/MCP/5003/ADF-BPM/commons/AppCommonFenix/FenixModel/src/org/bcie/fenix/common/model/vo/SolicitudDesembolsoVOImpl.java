package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.logging.Logger;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsobo.SolicitudDesembolso;
import org.bcie.desembolsobo.SolicitudDesembolsoType;
import org.bcie.desembolsomo.VerificarValidacionAsignacionRequestType;
import org.bcie.desembolsomo.VerificarValidacionAsignacionResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.ContratoDesembolsoTreeVOImpl;

import org.bcie.fenix.common.model.vo.common.ContratoDesembolsoTreeVO;
import org.bcie.fenix.common.model.vo.common.SolicitudDesembolsoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 24 13:48:47 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SolicitudDesembolsoVOImpl extends ViewObjectImpl implements SolicitudDesembolsoVO {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(SolicitudDesembolsoVOImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public SolicitudDesembolsoVOImpl() {
    }

    /**
     * Returns the variable value for idOperacionSolicitud.
     * @return variable value for idOperacionSolicitud
     */
    public Number getpIdOperacionSolicitud() {
        return (Number) ensureVariableManager().getVariableValue("pIdOperacionSolicitud");
    }

    /**
     * Sets <code>value</code> for variable idOperacionSolicitud.
     * @param value value to bind as idOperacionSolicitud
     */
    public void setpIdOperacionSolicitud(Number value) {
        ensureVariableManager().setVariableValue("pIdOperacionSolicitud", value);
    }

    /**
     * Returns the variable value for idSolicitud.
     * @return variable value for idSolicitud
     */
    public Number getpIdSolicitud() {
        return (Number) ensureVariableManager().getVariableValue("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable idSolicitud.
     * @param value value to bind as idSolicitud
     */
    public void setpIdSolicitud(Number value) {
        ensureVariableManager().setVariableValue("pIdSolicitud", value);
    }
    /**
     * Pobla un row con las solicitud que se encuentra en base a idSOlicitud,
     * idOperacion
     * 
     * @since 25/08/2016
     * @param idSolicitud
     * @param idSolicitudOperacion
     * @return Row de solicitud 
     */
    public Row getSolicitudDesembolso(Long idSolicitud, Long idSolicitudOperacion){
        logger.log(ADFLogger.WARNING, "Inside getSolicitudDesembolso");
        Integer banEstatus = 1;
        Row row = null;
        ViewCriteria criteria = null;
        if(null == idSolicitud || null == idSolicitudOperacion){
            logger.log(ADFLogger.WARNING, "Parametros son NULL");
            return row;
        }
        
        try{
            criteria = this.getViewCriteriaManager().getViewCriteria("VerSolicitudVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
            criteria.ensureVariableManager().setVariableValue("pIdOperacionSolicitud", idSolicitudOperacion);
            criteria.ensureVariableManager().setVariableValue("pBanEstatus", banEstatus);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            if(this.getEstimatedRowCount() > 0){
                this.setCurrentRow(first());
                row = this.getCurrentRow();
                logger.warning("Id Solicitod Row: " + row.getAttribute("Id"));
            }else {
                logger.warning("El row es NULL");
            }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error en BuscarSolicitudOperacion " + e.getClass() + ":" + e.getMessage());
        }finally{
            this.getViewCriteriaManager().removeApplyViewCriteriaName("VerSolicitudVOCriteria");
        }
        return row;
    }


    @SuppressWarnings("unchecked")
    public Map crearSolicitudDesembolso(Long idOperacion, Date fechaCreacionSolicitud) {
        logger.warning("Inicia metodo crearSolicitudDesembolso");
        Row solicitudRow = null;
        oracle.jbo.domain.Number idSolicitud = null;
        SequenceImpl sequenceSolicitud = null;
        NameValuePairs nvpSolicitud = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        Integer moneda=null;
        try{
                moneda=fenixAMImpl.getTccTerminoVO().obtenerTipoMonedaMontoFormalizado(idOperacion);  
        }catch(Exception ex){
            logger.warning("Error al obtener la descripcion moneda: " , ex);
            moneda=FenixModelConstants.TIPO_MONEDA_USD;
        }
        Map mapaDatos = new HashMap();
        
        logger.warning("valor de la moneda para la solicitud a crear: "+moneda);

        try {
            sequenceSolicitud = new SequenceImpl("SOLICITUD_DESEMBOLSO_SEQ", getDBTransaction());
            idSolicitud = sequenceSolicitud.getSequenceNumber();
            nvpSolicitud = new NameValuePairs();
            
            logger.warning("ID de secuencia: " + idSolicitud);
            nvpSolicitud.setAttribute("Id", idSolicitud.longValue());
            nvpSolicitud.setAttribute("IdOperacion", idOperacion);
            nvpSolicitud.setAttribute("FechaCreacion", fechaCreacionSolicitud);
            nvpSolicitud.setAttribute("IdTcaEstado", FenixModelConstants.ESTADO_SOLICITUD_CREADA);
            if(null!=moneda){
                    nvpSolicitud.setAttribute("IdTcaTipoMoneda", moneda);    
                }
            nvpSolicitud.setAttribute("BanEstatus", 1);
            
            logger.warning("ID asignado: " + idSolicitud.longValue());
            logger.warning("IdOperacion: " + idOperacion);
            logger.warning("FechaCreacion: " + fechaCreacionSolicitud);

            solicitudRow = this.createAndInitRow(nvpSolicitud);
            getDBTransaction().commit();
            logger.warning("se ejecutto commit");
            mapaDatos.put("newIdSolicitud", idSolicitud);
            mapaDatos.put("idEstadoSolicitud", FenixModelConstants.ESTADO_SOLICITUD_CREADA);

        } catch (Exception e) {

            logger.log(ADFLogger.ERROR,
                       "Error al crear solicitud (es probable que id de operacion a asociar exista)  vea el error cachado->: ", e);
            getDBTransaction().rollback();
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Error al crear la solicitud: " + e.getMessage()));
            throw ex;
        }
        //ejecutar query
        this.executeQuery();
        logger.warning("Termina metodo crearSolicitudDesembolso");
        return mapaDatos;

    }

    /**
     * Vamos y revisamos los estados de los contratos hijos de la solicitud, si se encuentran
     * en Creado (idTcaEstatus = 10) se elimina Fisicamente la Solicitud y los contratos hijos.
     *
     * @since 13/09/2016
     * @return boolean
     */
    public boolean eliminarSolicitudActual(Long idSolicitud){
        logger.log(ADFLogger.WARNING, "Inside eliminarSolicitudActual");
        
        boolean solicitudEliminada = Boolean.FALSE;
        boolean verTcaContratos = Boolean.FALSE;
        boolean esError = Boolean.FALSE;
        Row currentRow = null;
        Long idCurrentRow = null;
        
        try{
            currentRow = this.getCurrentRow();
            ContratoDesembolsoTreeVOImpl ver = new ContratoDesembolsoTreeVOImpl();
            verTcaContratos = ver.verTcaEstadoContratosDesembnolso();
            if(verTcaContratos){
                if(currentRow != null) {
                    idCurrentRow = (Long)currentRow.getAttribute("Id");
                    
                    logger.warning("Id de Solicitud a eliminar: " + String.valueOf(idCurrentRow));
                    currentRow.remove();
                    this.getDBTransaction().commit();
                    solicitudEliminada = true;
                }
            }else{
                logger.warning("No se ha Desestimado la Solicitud, vea el Log para mas informacion.");            
            }
            
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error al eliminar el Término actual: " + ex.getMessage());
            this.getDBTransaction().rollback();
            esError = true;
            throw new JboException(ex); // Mandamos excepción a pantalla
        }
        finally{
            if(esError) {
                // Regresa el current row al elemento que no pudo ser eliminado
                setCurrentRow(getRow(new Key(new Object[]{idCurrentRow}))); 
            }
        }
        return solicitudEliminada;        
    }
    
    /**
     * Vamos a Desestimar la Solicitud cambiando su BAN_ESTATUS con la condicion que Todos 
     * los contratos ligados a la solicitud se enceuntren con un 
     * TcaEstado = 10 'Creato' de no cumplir esta condicion retornamos FALSE
     * 
     * @return TRUE si las condiciones se cumplen / FALSE no se desestima la solicitud
     * @since 15/09/2016
     *
     */
    public Boolean desestimarSolicitud(Long idSolicitud){
        logger.warning("Inf, inicia metodo desestimarSolicitud");
            Boolean seDesestimo = Boolean.FALSE;
            Row rowSolicitud = null;
            FenixAMImpl fenixAMImpl = null;
            Boolean sonContratosEstadoCreado = Boolean.FALSE;
            Row[] rowContratos = null;
            Row solicitudRow = null;
              //solicitudRow = getRow(new Key(new Object[] { idSolicitud }));
              solicitudRow = obtenerSolicitudPorId(idSolicitud);
              
              if(solicitudRow != null){ 
                        setCurrentRow(solicitudRow);        
                try{
                    rowSolicitud = getCurrentRow();
                    
                    fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                    FenixGestorDesembolsosAMImpl gestorDesembolsoAMImpl =
                        (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
                              
                  sonContratosEstadoCreado
                         = gestorDesembolsoAMImpl.getConsultarContratoTreSolicitudLineaCreditoVO().validarEstadoContratosBySolicitud(idSolicitud);
                    
                    if(sonContratosEstadoCreado){                         
                          logger.warning("Inf,ok la solicitud solo tiene contratos en estado creado se realizara un eliminado fisico");
                           gestorDesembolsoAMImpl.getConsultarContratoTreSolicitudLineaCreditoVO().desestimarContratosBySolicitud(idSolicitud);                  
                           rowSolicitud.remove();
                         
                            try{
                                getDBTransaction().commit();
                                seDesestimo = Boolean.TRUE;
                                logger.warning("Inf, OK DESESTIMAR SOLICITUD REALIZADO CORRECTAMENTE ");
                            }catch(Exception e){
                                logger.warning("No se pudo realizar el commit para desestimar solicitud. Ejecutando ROLLBACK. "+e);
                                //getDBTransaction().rollback();
                                seDesestimo = Boolean.FALSE;
                                
                                JboException ex = new JboException(e.getMessage().toString());
                                throw ex;
                            }                            
                                     
                       }else{
                                                
                         logger.warning("***Error, almenos un contrato asociado a la solicitud a iniciado un proceso no se puede desestimar la solicitud");
                        }
                                
                    }catch(Exception e){
                        logger.warning("***ERROR AL DESESTIMAR SOLICITUD" + e);
                        //this.getDBTransaction().rollback();
                        JboException ex = new JboException(e.getMessage().toString());
                        throw ex;
                    }   
                
              }else{
              logger.warning("***ERROR, no se pudeo recuperar la solicitud con id : "+ idSolicitud);
              }
              
              
        logger.warning("Inf, termina metodo desestimarSolicitud");
       return seDesestimo;
    }
    
    public Boolean requiereValidacionAsignacionSolicitud(Long idSolicitud, Long idOperacion){
        logger.warning("Inicia metodo requiereValidacionAsignacionSolicitud");
        Boolean requiereValidacion = null;
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        Row row = null;
        
        if(null == idSolicitud || null == idOperacion){
            logger.warning("Parametros idSolicitud o idOperacion requeridos son NULL.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Parametros idSolicitud o idOperacion requeridos para ejecutar servicio verificarValidacionAsignacion son NULL."));
            throw ex;
        }
        
        String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);
        DesembolsoPTSOAP12BindingQSService desembolsoService =
            IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
        
        DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();
        VerificarValidacionAsignacionRequestType request = new VerificarValidacionAsignacionRequestType();
        VerificarValidacionAsignacionResponseType response = null;
        
        request.setIdSolicitud(idSolicitud);
        request.setIdOperacion(idOperacion);
        
        try {
            logger.warning("Ejecutando servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION);
            java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION);
            response = desembolsoPT.verificarValidacionAsignacion(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION, horaInicio);
            logger.warning("Servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION + " ejecutado correctamente");
        } catch (Exception e) {
            logger.warning("Error al ejecutar servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION, e);
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Error al ejecutar servicio verificarValidacionAsignacion: " + e.getMessage()));
            throw ex;
        }
        
        if(null != response){
            if (null != response.getResultado()) {
                if (response.getResultado().getResult().value() == "OK"){
                    if(null != response.getSolicitudDesembolso()){
                        requiereValidacion = response.getSolicitudDesembolso().isValidacionAsignacion();
                        logger.warning("Requiere validacion de asignacion de recursos: " + requiereValidacion);
                        if(null == requiereValidacion){
                            JboException ex = new JboException("");
                            ex.addToExceptions(new Exception("El servicio verificarValidacionAsignacion responde NULL en objeto isValidacionAsignacion."));
                            throw ex;
                        }
                    }else{
                        logger.warning("Objeto getSolicitudDesembolso de servicio verificarValidacionAsignacion es NULL.");
                        JboException ex = new JboException("");
                        ex.addToExceptions(new Exception("El servicio verificarValidacionAsignacion responde NULL en objeto isValidacionAsignacion."));
                        throw ex;
                    }
                }else {
                    logger.warning("Servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION + " devuelve ERROR >> " +
                                   response.getResultado().getMessage());
                    requiereValidacion = Boolean.TRUE;

                    row = getCurrentRow();
                    if(null != row){
                        logger.warning("Asignando mensaje de error a atributo Transient.");
                        
                        if(null != response.getResultado().getMessage()){
                            logger.warning("Servicio verificarValidacionAsignacion devuelve ERROR: " + response.getResultado().getMessage());
                        //                        JboException ex = new JboException("");
                        //                        ex.addToExceptions(new Exception("Servicio verificarValidacionAsignacion devuelve ERROR: " + response.getResultado().getMessage()));
                        //                        throw ex;
                            row.setAttribute("MensajeErrorServicio",
                                             "Servicio verificarValidacionAsignacion devuelve ERROR: "
                                             + response.getResultado().getMessage());
                        }else{
                            logger.warning("Servicio verificarValidacionAsignacion devuelve ERROR. No existe mensaje de ERROR recibido.");
                        //    JboException ex = new JboException("");
                        //     ex.addToExceptions(new Exception("Servicio verificarValidacionAsignacion devuelve ERROR. No existe mensaje de ERROR recibido."));
                        //    throw ex;
                            row.setAttribute("MensajeErrorServicio",
                                             "Servicio verificarValidacionAsignacion devuelve ERROR. No existe mensaje de ERROR recibido.");
                        }
                    }
                }
            } else {
                logger.warning("getResultado de servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION + " es NULL.");
                JboException ex = new JboException("");
                ex.addToExceptions(new Exception("Objeto getResultado de servicio verificarValidacionAsignacion es NULL."));
                throw ex;
            }
        }else{
            logger.warning("El response del servicio VerificarValidacionAsignacion es NULL.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("El response del servicio VerificarValidacionAsignacion es NULL."));
            throw ex;
        }
        
        logger.warning("Termina metodo requiereValidacionAsignacionSolicitud");
        return requiereValidacion;
    }
    
    public Boolean requiereValidacionAsignacionRecursos(Long idSolicitud, Long idOperacion){
        logger.warning("Inicia metodo requiereValidacionAsignacionRecursos.");
        Boolean requiereValidacion = Boolean.FALSE;
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();        
        String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);
        Row row = getCurrentRow();
        
        DesembolsoPTSOAP12BindingQSService desembolsoService =
            IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
        
        DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();
        VerificarValidacionAsignacionRequestType request = new VerificarValidacionAsignacionRequestType();
        VerificarValidacionAsignacionResponseType response = null;
        
        if(null == idSolicitud || null == idOperacion){
            logger.warning("Parametros idSolicitud o idOperacion requeridos son NULL.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Parametros idSolicitud o idOperacion requeridos para ejecutar servicio verificarValidacionAsignacion son NULL."));
            throw ex;
        }
        
        request.setIdSolicitud(idSolicitud);
        request.setIdOperacion(idOperacion);
        
        try {
            logger.warning("Ejecutando servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION);
            java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION);
            response = desembolsoPT.verificarValidacionAsignacion(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION, horaInicio);
            logger.warning("Servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION + " ejecutado correctamente");
        } catch (Exception e) {
            logger.warning("Error al ejecutar servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION, e);
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("Error al ejecutar servicio verificarValidacionAsignacion: " + e.getMessage()));
            throw ex;
        }
        
        if(null != response){
            if (null != response.getResultado()) {
                if (response.getResultado().getResult().value() == "OK"){
                    if(null != response.getSolicitudDesembolso()){
                        requiereValidacion = response.getSolicitudDesembolso().isValidacionAsignacion();
                        logger.warning("Requiere validacion de asignacion de recursos: " + requiereValidacion);
                        if(null == requiereValidacion){
                            JboException ex = new JboException("");
                            ex.addToExceptions(new Exception("El servicio verificarValidacionAsignacion responde NULL en objeto isValidacionAsignacion."));
                            throw ex;
                        }
                    }else{
                        logger.warning("Objeto getSolicitudDesembolso de servicio verificarValidacionAsignacion es NULL.");
                        JboException ex = new JboException("");
                        ex.addToExceptions(new Exception("El servicio verificarValidacionAsignacion responde NULL en objeto isValidacionAsignacion."));
                        throw ex;
                    }
                }else {
                    logger.warning("Servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION + " devuelve ERROR >> " +
                                   response.getResultado().getMessage());
                    requiereValidacion = null;
                    if(null != row){
                        logger.warning("Asignando mensaje de error a atributo Transient.");
                        
                        if(null != response.getResultado().getMessage()){
                            logger.warning("Servicio verificarValidacionAsignacion devuelve ERROR: " + response.getResultado().getMessage());
                        //                        JboException ex = new JboException("");
                        //                        ex.addToExceptions(new Exception("Servicio verificarValidacionAsignacion devuelve ERROR: " + response.getResultado().getMessage()));
                        //                        throw ex;
                            row.setAttribute("MensajeErrorServicio",
                                             "Servicio verificarValidacionAsignacion devuelve ERROR: "
                                             + response.getResultado().getMessage());
                        }else{
                            logger.warning("Servicio verificarValidacionAsignacion devuelve ERROR. No existe mensaje de ERROR recibido.");
                        //    JboException ex = new JboException("");
                        //     ex.addToExceptions(new Exception("Servicio verificarValidacionAsignacion devuelve ERROR. No existe mensaje de ERROR recibido."));
                        //    throw ex;
                            row.setAttribute("MensajeErrorServicio",
                                             "Servicio verificarValidacionAsignacion devuelve ERROR. No existe mensaje de ERROR recibido.");
                        }
                    }
                }
            } else {
                logger.warning("getResultado de servicio " + FenixModelConstants.WS_VERIFICAR_VALIDACION_ASIGNACION + " es NULL.");
                JboException ex = new JboException("");
                ex.addToExceptions(new Exception("Objeto getResultado de servicio verificarValidacionAsignacion es NULL."));
                throw ex;
            }
        }else{
            logger.warning("El response del servicio VerificarValidacionAsignacion es NULL.");
            JboException ex = new JboException("");
            ex.addToExceptions(new Exception("El response del servicio VerificarValidacionAsignacion es NULL."));
            throw ex;
        }
        logger.warning("Termina metodo requiereValidacionAsignacionRecursos.");
        return requiereValidacion;
    }


    public Row getSolicitudCurrent(){
     logger.warning("*Inf, Inicia metodo getSolicitudCurrent");
     Row fila = null;
     
     if(getCurrentRow() != null){
         
         try{
           fila = getCurrentRow();
           logger.warning("*Inf, ok Solicitud como current: "+getCurrentRow().getAttribute("Id"));            
         }catch(Exception e){
             logger.warning("***Error, al recuperar el id de la solicitud Current ->",e);
         }
         
     }else{
        logger.warning("*Inf, no se enconto una solicitud Current");
     }
     
     logger.warning("*Inf, Termina metodo getSolicitudCurrent");
     return fila;
    }
    
    /**
     * Metodo que recupera el ID de la moneda del primer contrato de la solicitud
     * @params idSolicitud
     * */
    public Integer recuperarIdMonedaSolicitud(Long idSolicitud) {
        logger.warning("Inicia metodo recuperarIdMonedaSolicitud.");
        Integer idTipoMoneda = null;
        Long idPrimerContrato = null;
        Row rowPrimerContrato = null;
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM =
            (FenixGestorDesembolsosAMImpl) this.getApplicationModule();
        
        if(null == idSolicitud){
            logger.warning("Parametro requerido idSOlicitud es NULL.");
            return null;
        }
        
        logger.warning("Buscando primer contrato de la solicitud.");
        idPrimerContrato =
            fenixGestorDesembolsosAM.getConsultarContratoTreSolicitudLineaCreditoVO().obtenerPrimerContratoActivo(idSolicitud);

        fenixGestorDesembolsosAM.getContratoDesembolsoVO().ejecutarQuerty();

        if (null != idPrimerContrato) {
            rowPrimerContrato =
                fenixGestorDesembolsosAM.getContratoDesembolsoVO().obtenerContratoPorId(idPrimerContrato);
            if (null != rowPrimerContrato) {
                try {
                    idTipoMoneda = (Integer) rowPrimerContrato.getAttribute("IdTcaTipoMoneda");
                } catch (Exception e) {
                    logger.warning("ERROR al recuperar moneda de primer contrato de la solicitud.");
                }
            } else {
                logger.warning("No se encontró registro para el primer contrato activo de la solicitud.");
                return idTipoMoneda;
            }
        } else {
            logger.warning("No se encontró primer contrato de la solicitud.");
            return idTipoMoneda;
        }
        
        logger.warning("IdTipoMoneda recuperado: " + idTipoMoneda);
        logger.warning("Termina metodo recuperarIdMonedaSolicitud.");
        return idTipoMoneda;
    }

    /**
     * Returns the variable value for pBanEstatus.
     * @return variable value for pBanEstatus
     */
    public Integer getpBanEstatus() {
        return (Integer) ensureVariableManager().getVariableValue("pBanEstatus");
    }

    /**
     * Sets <code>value</code> for variable pBanEstatus.
     * @param value value to bind as pBanEstatus
     */
    public void setpBanEstatus(Integer value) {
        ensureVariableManager().setVariableValue("pBanEstatus", value);
    }

    /**
     * Returns the variable value for pIdEstado1.
     * @return variable value for pIdEstado1
     */
    public Integer getpIdEstado1() {
        return (Integer) ensureVariableManager().getVariableValue("pIdEstado1");
    }

    /**
     * Sets <code>value</code> for variable pIdEstado1.
     * @param value value to bind as pIdEstado1
     */
    public void setpIdEstado1(Integer value) {
        ensureVariableManager().setVariableValue("pIdEstado1", value);
    }

    /**
     * Returns the variable value for pIdEstado2.
     * @return variable value for pIdEstado2
     */
    public Integer getpIdEstado2() {
        return (Integer) ensureVariableManager().getVariableValue("pIdEstado2");
    }

    /**
     * Sets <code>value</code> for variable pIdEstado2.
     * @param value value to bind as pIdEstado2
     */
    public void setpIdEstado2(Integer value) {
        ensureVariableManager().setVariableValue("pIdEstado2", value);
    }

    /**
     * Returns the variable value for varOperacion.
     * @return variable value for varOperacion
     */
    public Long getvarOperacion() {
        return (Long) ensureVariableManager().getVariableValue("varOperacion");
    }

    /**
     * Sets <code>value</code> for variable varOperacion.
     * @param value value to bind as varOperacion
     */
    public void setvarOperacion(Long value) {
        ensureVariableManager().setVariableValue("varOperacion", value);
    }

    public Boolean solicitudEnFinProceso(Long idOperacion) {
        logger.warning("Inicia metodo solicitudEnFinProceso");
        Boolean respuesta = Boolean.FALSE;        
        Integer estado1 = FenixModelConstants.ESTADO_SOLICITUD_DESEMBOLSO_CERRADO;
        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if (idOperacion != null) {
            criteriaByClienteInstanciaProceso =
                this.getViewCriteriaManager().getViewCriteria("SolicitudDesembolsoVOCriteria");
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("pIdEstado1", estado1);            
            criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varOperacion", idOperacion);

            this.applyViewCriteria(criteriaByClienteInstanciaProceso);
            this.executeQuery();

            // 2) Asignamos valor de retorno
            if (this.getEstimatedRowCount() > 0) {
                respuesta = Boolean.TRUE;

                // Removemos criteria del VO
                this.getViewCriteriaManager().removeApplyViewCriteriaName("SolicitudDesembolsoVOCriteria");
                
                this.executeQuery();
            }
        }
        logger.warning("Fin metodo solicitudEnFinProceso");
        logger.warning("respuesta del metodo: " +respuesta);
        return respuesta;
    }
    
    public Row obtenerSolicitudPorId(Long idSolicitud){
        logger.warning("Inicia metodo obtenerSolicitudPorId.");      
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        
        Row row = null;
        ViewCriteria criteria = null;
        
        if(null == idSolicitud){
            logger.warning("El idSolicitud es NULL");
            return row;
        }
        
        executeQuery();
        try{  
            logger.warning("Ejecutando criteria de busqueda de Solicitud.");
            criteria = this.getViewCriteriaManager().getViewCriteria("SolicitudDesembolsoVOCriteriaById");
            criteria.ensureVariableManager().setVariableValue("varIdSolicitud", idSolicitud);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        
            logger.warning("Registros de solicitudes encontradas: " + getEstimatedRowCount());
            if(getEstimatedRowCount() > 0){
                row = first();
            }
        }catch(Exception e){
            logger.warning("ERROR al ejecutar el crietria SolicitudDesembolsoVOCriteriaById.", e);
        }finally{
            //Eliminamos el ViewCriteria
            this.getViewCriteriaManager().removeApplyViewCriteriaName("SolicitudDesembolsoVOCriteriaById");
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo obtenerSolicitudPorId con una duracion de: "+tiempo+" segundos");
        return row;
    }

    /**
     * Returns the variable value for varIdSolicitud.
     * @return variable value for varIdSolicitud
     */
    public Long getvarIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("varIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable varIdSolicitud.
     * @param value value to bind as varIdSolicitud
     */
    public void setvarIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("varIdSolicitud", value);
    }
    
    public Boolean actualizarMoneda(Long solicitud, Integer moneda){
        logger.warning("Inicia metodo de actualizar moneda");
        Boolean respuesta=Boolean.FALSE;
        Row row=this.getCurrentRow();
        if(null!=row){
            if(null!=row.getAttribute("Id")){
                Long solicitudActual=(Long)row.getAttribute("Id");
                if(solicitudActual.compareTo(solicitud)==0){
                    if(null!=moneda){
                            row.setAttribute("IdTcaTipoMoneda",moneda);
                            respuesta=Boolean.TRUE;
                        }
                    }
                }
            }
            logger.warning("respuesta del metodo de actualizar moneda: "+ respuesta);
            logger.warning("Termina metodo de actualizar moneda");
        return respuesta;
        }

    public Boolean validarActualizarMoneda(Long idOperacion, Long idSolicitud) {
        logger.warning("Inicia metodo de validar actualizar moneda");
        Boolean respuesta = Boolean.FALSE;
        Integer tipoMonedaActual = null;
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
        gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        if (null != idOperacion && null != idSolicitud) {
            tipoMonedaActual = gestorDesembolsosAMImpl.getMonedaContratoVO1().monedaId(idSolicitud, idOperacion);
            Row row = this.getCurrentRow();
            if (null != row) {
                if (null != row.getAttribute("Id")) {
                    Long solicitudActual = (Long) row.getAttribute("Id");
                    if (solicitudActual.compareTo(idSolicitud) == 0) {
                        if (null == row.getAttribute("IdTcaTipoMoneda")) {
                            row.setAttribute("IdTcaTipoMoneda", tipoMonedaActual);
                            try {
                                getDBTransaction().commit();
                                logger.warning("se ejecutto commit");
                                respuesta = Boolean.TRUE;
                            } catch (Exception ex) {
                                logger.warning("Error al actualizar la moneda: ", ex);
                                try {
                                    getDBTransaction().commit();
                                    logger.warning("se ejecutto commit");
                                    respuesta = Boolean.TRUE;
                                } catch (Exception exy) {
                                    logger.warning("Error al actualizar la moneda: ", exy);
                                }
                            }
                        }
                        else{
                                respuesta = Boolean.TRUE;
                            }
                    } else {
                        logger.warning("Registro actual no coincide con la solicitud a modificar");
                        row = getSolicitudDesembolso(idSolicitud, idOperacion);
                        if (row != null) {
                            if (null == row.getAttribute("IdTcaTipoMoneda")) {
                                row.setAttribute("IdTcaTipoMoneda", tipoMonedaActual);
                                try {
                                    getDBTransaction().commit();
                                    logger.warning("se ejecutto commit");
                                    respuesta = Boolean.TRUE;
                                } catch (Exception ex) {
                                    logger.warning("Error al actualizar la moneda: ", ex);
                                    try {
                                        getDBTransaction().commit();
                                        logger.warning("se ejecutto commit");
                                        respuesta = Boolean.TRUE;
                                    } catch (Exception exy) {
                                        logger.warning("Error al actualizar la moneda: ", exy);
                                    }
                                }
                            }
                            else{
                                    respuesta = Boolean.TRUE;
                                }

                        }

                    }
                }
            } else {
                logger.warning("Registro actual no obtenido");
                row = getSolicitudDesembolso(idSolicitud, idOperacion);
                if (null != row) {
                    if (null != row.getAttribute("Id")) {
                        Long solicitudActual = (Long) row.getAttribute("Id");
                        if (solicitudActual.compareTo(idSolicitud) == 0) {
                            if (null == row.getAttribute("IdTcaTipoMoneda")) {
                                row.setAttribute("IdTcaTipoMoneda", tipoMonedaActual);
                                try {
                                    getDBTransaction().commit();
                                    logger.warning("se ejecutto commit");
                                    respuesta = Boolean.TRUE;
                                } catch (Exception ex) {
                                    logger.warning("Error al actualizar la moneda: ", ex);
                                    try {
                                        getDBTransaction().commit();
                                        logger.warning("se ejecutto commit");
                                        respuesta = Boolean.TRUE;
                                    } catch (Exception exy) {
                                        logger.warning("Error al actualizar la moneda: ", exy);
                                    }
                                }
                            }
                            else{
                                    respuesta = Boolean.TRUE;
                                }
                        } else {
                            logger.warning("Registro actual no coincide con la solicitud a modificar");
                        }
                    }
                }
            }
        }

        logger.warning("respuesta del metodo de actualizar moneda: " + respuesta);
        logger.warning("Termina metodo de actualizar moneda");
        return respuesta;
    }
    
}

