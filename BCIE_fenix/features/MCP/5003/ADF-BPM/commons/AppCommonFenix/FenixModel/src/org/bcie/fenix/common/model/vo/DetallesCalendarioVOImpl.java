package org.bcie.fenix.common.model.vo;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.math.RoundingMode;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.List;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.NameValuePairs;import oracle.jbo.Row;import oracle.jbo.RowSetIterator;import oracle.jbo.ViewCriteria;import oracle.jbo.domain.BlobDomain;import oracle.jbo.server.ViewObjectImpl;import org.apache.poi.ss.usermodel.DateUtil;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.bcie.fenix.common.model.vo.common.DetallesCalendarioVO;public class DetallesCalendarioVOImpl extends ViewObjectImpl implements DetallesCalendarioVO {    private static ADFLogger logger = null;    public DetallesCalendarioVOImpl() {        super();        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }    }        public Boolean setDetalleCalendarioData(Long idCalendarioComplejo, Date fechaPago, BigDecimal montoPago){        logger.warning("---------INSIDE setDetalleCalendarioData -------------");        logger.log(ADFLogger.WARNING, "---- idCalendarioComplejo : " + idCalendarioComplejo);        logger.log(ADFLogger.WARNING, "---- FechaActual : " + new java.sql.Timestamp(fechaPago.getTime()));                NameValuePairs nvpJustificacionExcepcion = null;        try{//Se crea un row por cada fecha de pago que tenemos            Row detalleCalendario = this.createRow();            detalleCalendario.setAttribute("IdCalendarioComplejo", idCalendarioComplejo);            detalleCalendario.setAttribute("FechaPago", new java.sql.Timestamp(fechaPago.getTime()));            detalleCalendario.setAttribute("MontoPago", montoPago);            this.insertRow(detalleCalendario);                                    try{                               logger.log(ADFLogger.WARNING, "Realizando commit ");                this.getDBTransaction().commit();            }catch(Exception ex){                logger.log(ADFLogger.ERROR, "fallo el commit reintentando...: "+ex.getMessage());                try{                                  this.getDBTransaction().commit();                }catch(Exception ea){                    logger.log(ADFLogger.ERROR, "fallo el commit  "+ea);                    return Boolean.TRUE;                }            }                        this.executeQuery();        }catch(Exception e){            logger.log(ADFLogger.ERROR, "ERROR en setDetalleCalendarioData : "+e.getMessage());            getDBTransaction().rollback();                    return Boolean.TRUE;        }        return Boolean.FALSE;    }        public Boolean setDetalleCalendario(Long idCalendarioComplejo, BlobDomain fileData) {        logger.warning("Inicia setDetalleCalendario idCalendario: "+ idCalendarioComplejo);        Boolean resultado = Boolean.FALSE;        InputStream in = null;                if(null == idCalendarioComplejo || null == fileData){            logger.warning("Parametros requeridos NULL.");            logger.warning("IdCalendarioComplejo: " + idCalendarioComplejo + ", fileData: " + fileData);            return resultado;        }                try {            in = fileData.getBinaryStream();            XSSFWorkbook workbook = new XSSFWorkbook(in);            XSSFSheet sheet = workbook.getSheetAt(0);            Row rowDetalleCalendario = null;            int rowsCount = sheet.getLastRowNum();                        removerRegistrosDetalleCalendario(idCalendarioComplejo);                        logger.warning("Filas encontradas en el excel: " + rowsCount);            if(rowsCount > 0){                for (int i = 1; i <= rowsCount; i++) {                    int j = 0;                    int colCounts;                    XSSFRow row = sheet.getRow(i);                    rowDetalleCalendario = this.createRow();                    rowDetalleCalendario.setAttribute("IdCalendarioComplejo", idCalendarioComplejo);                                        try {                        colCounts = row.getLastCellNum();                    } catch (NullPointerException e) {                        colCounts = 1;                    }                                        String[] excel_data = new String[colCounts + 1];                    for (int k = 0; k < colCounts; k++) {                        j = j + 1;                        try {                            XSSFCell cell = row.getCell(k);                                                        if (null != cell) {                                switch (cell.getCellType()) {                                case XSSFCell.CELL_TYPE_STRING:                                    excel_data[j] = cell.getRichStringCellValue().getString();                                    logger.log(ADFLogger.WARNING, "DATA_STRING: " + excel_data[j]);                                    logger.warning("Row de hoja: " + row.getRowNum() + ", Columna de hoja: " + cell.getColumnIndex());                                    break;                                case XSSFCell.CELL_TYPE_NUMERIC:                                    if (DateUtil.isCellDateFormatted(cell)) {                                        DateFormat df = new SimpleDateFormat("dd/MM/yyyy");                                        excel_data[j] = df.format(cell.getDateCellValue());                                        rowDetalleCalendario.setAttribute("FechaPago",                                                                 new java.sql.Timestamp(cell.getDateCellValue().getTime()));                                        logger.log(ADFLogger.WARNING, "Fechas: " + excel_data[j] + rowsCount);                                    } else {                                        String montoStringFix = "" +cell.getNumericCellValue();                                                                                BigDecimal montoPagoBD =  new BigDecimal(montoStringFix);                                        logger.warning("montoPagoBD: " + montoPagoBD);                                                                                BigDecimal montoPagoScale = montoPagoBD.setScale(2, RoundingMode.FLOOR);                                        logger.warning("montoPagoBD FLOOR: " + montoPagoScale);                                                                                rowDetalleCalendario.setAttribute("MontoPago", montoPagoScale);                                        int resultVar = (int) cell.getNumericCellValue();                                        excel_data[j] = Integer.toString(resultVar);                                        logger.log(ADFLogger.WARNING, "MontoPago: " + excel_data[j] + rowsCount);                                    }                                    logger.warning("Row de hoja: " + row.getRowNum() + ", Columna de hoja: " + cell.getColumnIndex());                                    break;                                default:                                    excel_data[j] = "";                                    //logger.log(ADFLogger.WARNING, "Celda NULL");                                }                            } else {                                logger.warning("Celda nula");                            }                        } catch (Exception e) {                            logger.warning("ERRROR al crear row en DetalleCalendarioVO", e);                            excel_data[j] = "";                        }                    }                    if(rowDetalleCalendario != null){                        logger.log(ADFLogger.WARNING, "------ New_ROW --------");                        logger.log(ADFLogger.WARNING, "ID: " + rowDetalleCalendario.getAttribute("IdCalendarioComplejo"));                        logger.log(ADFLogger.WARNING, "FechaPago: " + rowDetalleCalendario.getAttribute("FechaPago"));                        logger.log(ADFLogger.WARNING, "MontoPago: " + rowDetalleCalendario.getAttribute("MontoPago"));                        this.insertRow(rowDetalleCalendario);                        if(null == rowDetalleCalendario.getAttribute("FechaPago")){                            logger.warning("Removiendo row con fecha NULL.");                            rowDetalleCalendario.remove();                        }                    }else{                        logger.log(ADFLogger.WARNING, " ERROR rowDetalleCalendario Null");                    }                }                                logger.warning("Registros de DetallesCalendarioVO: " + getEstimatedRowCount());                resultado = Boolean.TRUE;            }        } catch (IOException e) {            logger.log(ADFLogger.WARNING, " ERROR al validar contenido de hoja de calculo.", e);            return resultado;        }        try {            in.close();        } catch (Exception e) {            logger.warning("ERROR al cerrar el inputStream.", e);        }        logger.warning("Termina setDetalleCalendario idCalendario: "+ idCalendarioComplejo);        return resultado;    }        public void removerRegistrosDetalleCalendario(Long idCalendarioComplejo){        logger.warning("Inicia metodo removerRegistrosDetalleCalendario.");        List<Row> rows = new ArrayList<Row>();                executeQuery();        logger.warning("Registros de detalles encontrados: " + getEstimatedRowCount());        if(getEstimatedRowCount()>0){            rows = getDetalleCalendario(idCalendarioComplejo);        }else{            logger.warning("No se encontraron registros de detalles.");        }                if(null != rows && rows.size() > 0){            logger.warning(rows.size() + " Registros de detalle para el CalendarioComplejo: " + idCalendarioComplejo);            for(Row row : rows){                logger.warning("Eliminando registro");                row.remove();            }        }else{            logger.warning("No se encontraron registros de detalle de calendario para la condicion financiera.");        }                logger.warning("Inicia metodo removerRegistrosDetalleCalendario.");    }    public List<Row> getDetalleCalendario(Long idCalendarioComplejo){        logger.log(ADFLogger.WARNING, "-- INSIDE getDetalleCalendario, idCalendario: " + idCalendarioComplejo);        ViewCriteria criteria = null;        List<Row> row = new ArrayList<Row>();        Row detalleRow = null;        RowSetIterator iter = createRowSetIterator(null);                if(null == idCalendarioComplejo){            logger.log(ADFLogger.WARNING, "ERROR! idCalendario NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("DetallesCalendarioVOCriteria");                criteria.ensureVariableManager().setVariableValue("pIdCalendarioComplejo", idCalendarioComplejo);                this.applyViewCriteria(criteria);                this.executeQuery();                if(this.getEstimatedRowCount() > 0){                    if(null != iter){                        iter.reset();                        while(iter.hasNext()){                            detalleRow = iter.next();                            row.add(detalleRow);                        }                    }                }            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en getDetalleCalendario " + e.getClass() + ":" + e.getMessage());            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("CalendarioComplejoCriteria");            }                    }        return row;    }    /**     * Returns the variable value for pIdCalendarioComplejo.     * @return variable value for pIdCalendarioComplejo     */    public Long getpIdCalendarioComplejo() {        return (Long) ensureVariableManager().getVariableValue("pIdCalendarioComplejo");    }    /**     * Sets <code>value</code> for variable pIdCalendarioComplejo.     * @param value value to bind as pIdCalendarioComplejo     */    public void setpIdCalendarioComplejo(Long value) {        ensureVariableManager().setVariableValue("pIdCalendarioComplejo", value);    }}