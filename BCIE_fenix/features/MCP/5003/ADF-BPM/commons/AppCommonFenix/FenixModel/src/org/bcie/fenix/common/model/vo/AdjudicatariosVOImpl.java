package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.Date;
import java.util.ResourceBundle;

import oracle.adf.share.logging.ADFLogger;

import oracle.javatools.resourcebundle.BundleFactory;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.vo.common.AdjudicatariosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 17:28:14 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AdjudicatariosVOImpl extends ViewObjectImpl implements AdjudicatariosVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public AdjudicatariosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    /** 
     * M&eacute;todo para obtener la implementaci&oacute;n del ConcursanteAdquisicionVORow
     * por el id de la no objeci&oacute;n y el id del tipo de perfil
     * @author Jonathan Ruiz
     * @param idNoObjecion id de la no objeci&oacute;n
     * @param idTcaTipoPerfil id del tipo de perfil
     * @return objetos de implementaci&oacute;n de ConcursanteAdquisicionVORow
     */
    public Row[] getAdjudicatarios(Long idNoObjecion, Integer idTcaTipoPerfil) {
        logger.log(ADFLogger.TRACE, "Inside getConcursanteByIdNoObjecionAndIdTcaTipoPerfil.");
        ConcursanteAdquisicionVORowImpl concursanteRow = null;
        ViewCriteria criteriaByIdNoObjecionAndIdTcaTipoPerfil = null;
        Row[] concursantesRow = null;
        
        // Validamos los parametros necesarios
        if (idNoObjecion == null || idTcaTipoPerfil == null) {
            ResourceBundle rb = BundleFactory.getBundle("org.bcie.fenix.common.model.FenixModelBundle");
            String msg = rb.getString("org.bcie.fenix.common.vo.concursante.adquisicion.msg.campos.nulos.getby.tipoperfil");
            
            JboException ex = new JboException(msg);
            throw ex;
        }
        
        // Los atributos idOperacion e instanciaProceso son requeridos por el ViewCriteria
        if(idNoObjecion != null && idTcaTipoPerfil != null) {
            // 1) Filtramos el VO por idOperacion e instanciaProceso
            criteriaByIdNoObjecionAndIdTcaTipoPerfil = 
                this.getViewCriteriaManager().getViewCriteria("AdjudicatariosVOCriteria");
            
            criteriaByIdNoObjecionAndIdTcaTipoPerfil.ensureVariableManager().setVariableValue("varIdNoObjecion", idNoObjecion);
            criteriaByIdNoObjecionAndIdTcaTipoPerfil.ensureVariableManager().setVariableValue("varIdTcaTipoPerfil", idTcaTipoPerfil);
            
            this.applyViewCriteria(criteriaByIdNoObjecionAndIdTcaTipoPerfil);
            this.setRangeSize(-1);
            this.executeQuery();
            
            // 2) Asignamos valor de retorno
            if(this.getEstimatedRowCount() > 0) {
                concursantesRow = this.getAllRowsInRange();
                
                // Removemos criteria del VO
                //this.getViewCriteriaManager().removeApplyViewCriteriaName("AdjudicatariosVOCriteria");
                
                // Re-ejecutamos el query 
                //this.executeQuery();
            }
        }
        
        return concursantesRow;
    }

    /**
     * Returns the variable value for varIdNoObjecion.
     * @return variable value for varIdNoObjecion
     */
    public Long getvarIdNoObjecion() {
        return (Long) ensureVariableManager().getVariableValue("varIdNoObjecion");
    }

    /**
     * Sets <code>value</code> for variable varIdNoObjecion.
     * @param value value to bind as varIdNoObjecion
     */
    public void setvarIdNoObjecion(Long value) {
        ensureVariableManager().setVariableValue("varIdNoObjecion", value);
    }

    /**
     * Returns the variable value for varIdTcaTipoPerfil.
     * @return variable value for varIdTcaTipoPerfil
     */
    public Integer getvarIdTcaTipoPerfil() {
        return (Integer) ensureVariableManager().getVariableValue("varIdTcaTipoPerfil");
    }

    /**
     * Sets <code>value</code> for variable varIdTcaTipoPerfil.
     * @param value value to bind as varIdTcaTipoPerfil
     */
    public void setvarIdTcaTipoPerfil(Integer value) {
        ensureVariableManager().setVariableValue("varIdTcaTipoPerfil", value);
    }
    
    public void setWhereParams(Long idNoObjecion, Integer idTcaTipoPerfil) {
        logger.warning("Adjudicatarios.setWhereParams.  idNoObjecion:"+ idNoObjecion + ", idTcaTipoPerfil:" + idTcaTipoPerfil);
        if(null!=idNoObjecion){
            //setNamedWhereClauseParam("varIdNoObjecion", idNoObjecion);
            setvarIdNoObjecion(idNoObjecion);
        }
        if(null!=idTcaTipoPerfil){
            //setNamedWhereClauseParam("varIdTcaTipoPerfil", idTcaTipoPerfil);
            setvarIdTcaTipoPerfil(idTcaTipoPerfil);
        }
        
        ViewCriteria criteriaByIdNoObjecionAndIdTcaTipoPerfil = null;
        criteriaByIdNoObjecionAndIdTcaTipoPerfil = 
        this.getViewCriteriaManager().getViewCriteria("AdjudicatariosVOCriteria");
        this.applyViewCriteria(criteriaByIdNoObjecionAndIdTcaTipoPerfil);

        executeQuery();
        
        RowSetIterator rs = this.createRowSetIterator(null);
        rs.reset();
        while(rs.hasNext()) {
            AdjudicatariosVORowImpl adjudicatarioRow = (AdjudicatariosVORowImpl)rs.next();
            String nombre =  (String)adjudicatarioRow.getAttribute("Nombre");
            Integer idPais=null;
            String nombrePaises=null;
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixAdquisicionAMImpl fenixAdquisicionAMImpl =(FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();
            
            if (!nombre.equals("X")) {
                adjudicatarioRow.setAttribute("NombreTr", adjudicatarioRow.getAttribute("Nombre"));
                
                if(null!=adjudicatarioRow.getAttribute("IdCatPais")){
                        idPais=(Integer)adjudicatarioRow.getAttribute("IdCatPais");
                        nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(idPais);
                        if(null!=nombrePaises){
                            adjudicatarioRow.setAttribute("NacionalidadTr", nombrePaises);
                            }
                    }
            } else {
                adjudicatarioRow.setAttribute("NombreTr", adjudicatarioRow.getAttribute("NombreTr"));
                if(null!=adjudicatarioRow.getAttribute("IdCatPais")){
                        idPais=(Integer)adjudicatarioRow.getAttribute("IdCatPais");
                        nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(idPais);
                        if(null!=nombrePaises){
                            adjudicatarioRow.setAttribute("NacionalidadTr", nombrePaises);
                            }
                    }
            }
            
        }
        rs.closeRowSetIterator();
        logger.info("this.getEstimatedRowCount(): "+this.getEstimatedRowCount());
    }
    
    public void setWhereParams2(Long idNoObjecion, Integer idTcaTipoPerfil) {
        logger.warning("Adjudicatarios.setWhereParams2.  idNoObjecion:"+ idNoObjecion + ", idTcaTipoPerfil:" + idTcaTipoPerfil);
        if(null!=idNoObjecion){
            //setNamedWhereClauseParam("varIdNoObjecion", idNoObjecion);
            setvarIdNoObjecion(idNoObjecion);
        }
        if(null!=idTcaTipoPerfil){
            //setNamedWhereClauseParam("varIdTcaTipoPerfil", idTcaTipoPerfil);
            setvarIdTcaTipoPerfil(idTcaTipoPerfil);
        }
        
        ViewCriteria criteriaByIdNoObjecionAndIdTcaTipoPerfil = null;
        criteriaByIdNoObjecionAndIdTcaTipoPerfil = 
        this.getViewCriteriaManager().getViewCriteria("AdjudicatariosVOCriteria1");
        this.applyViewCriteria(criteriaByIdNoObjecionAndIdTcaTipoPerfil);

        executeQuery();
        
        RowSetIterator rs = this.createRowSetIterator(null);
        rs.reset();
        while(rs.hasNext()) {
            AdjudicatariosVORowImpl adjudicatarioRow = (AdjudicatariosVORowImpl)rs.next();
            String nombre =  (String)adjudicatarioRow.getAttribute("Nombre");
            Integer idPais=null;
            String nombrePaises=null;
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixAdquisicionAMImpl fenixAdquisicionAMImpl =(FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();
            
            if (!nombre.equals("X")) {
                adjudicatarioRow.setAttribute("NombreTr", adjudicatarioRow.getAttribute("Nombre"));
                
                if(null!=adjudicatarioRow.getAttribute("IdCatPais")){
                        idPais=(Integer)adjudicatarioRow.getAttribute("IdCatPais");
                        nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(idPais);
                        if(null!=nombrePaises){
                            adjudicatarioRow.setAttribute("NacionalidadTr", nombrePaises);
                            }
                    }
            } else {
                adjudicatarioRow.setAttribute("NombreTr", adjudicatarioRow.getAttribute("NombreTr"));
                if(null!=adjudicatarioRow.getAttribute("IdCatPais")){
                        idPais=(Integer)adjudicatarioRow.getAttribute("IdCatPais");
                        nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(idPais);
                        if(null!=nombrePaises){
                            adjudicatarioRow.setAttribute("NacionalidadTr", nombrePaises);
                            }
                    }
            }
            
        }
        rs.closeRowSetIterator();
        logger.info("this.getEstimatedRowCount(): "+this.getEstimatedRowCount());
    }
    
    /**
     *  M&eacute;todo para crear  un nuevo registro de adjudicatarios
     *  @author Jonathan Ruiz
     */
    public void crearRowAdjudicatario(Long idNoObjecion){
        logger.log(ADFLogger.TRACE, "Into crearRowAdjudicatario.");
        
        // Obtenemos siguiente valor de la secuencia
        oracle.jbo.domain.Number idConcursante = null;
        SequenceImpl seqConcursante = null;

        seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
        idConcursante = seqConcursante.getSequenceNumber();

        logger.log(ADFLogger.WARNING, "idConcursante:" + idConcursante.longValue());
        
        // Agregamos el nuevo oferente
        Row row = this.createRow();
        row.setAttribute("Id", idConcursante.longValue());
        row.setAttribute("IdNoObjecion", idNoObjecion);
        row.setAttribute("IdNoObjecionAnterior", idNoObjecion);
        row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO);
        row.setAttribute("Nombre", "X");
        row.setAttribute("IdCatPais", null);
        row.setAttribute("NombreTr", "");
        row.setAttribute("NacionalidadTr", "");
        row.setAttribute("FechaRegistro", new java.sql.Timestamp(new Date().getTime()));
        this.insertRow(row);
        this.setCurrentRow(row);
    }
    
    /**
     *  M&eacujte;todo para eliminar el adjudicatario seleccionado
     *  @author Jonathan Ruiz
     *  @param adjudicatario
     */
    public void eliminarAdjudicatario(Row adjudicatario){
        logger.warning("Into eliminarAdjudicatario.");
        if (null != adjudicatario) {
            adjudicatario.remove();
        }
    }
    
    /**
     *  M&eacujte;todo para contratar el adjudicatario seleccionado
     *  @author Jonathan Ruiz
     */
    public void contratarAdjudicatario() {
        logger.log(ADFLogger.TRACE, "Into contratarAdjudicatario.");
        this.executeQuery();
        Row lineaCreditoRow = null;
        
        // Obtenemos row actual
        lineaCreditoRow = this.getCurrentRow();
        
        // Actualizamos perfil
        lineaCreditoRow.setAttribute("IdTcaTipoPerfil", FenixModelConstants.ID_TIPO_PERFIL_CONTRATADO);
        getDBTransaction().commit();
    }
    
    /**
     *  M&eacujte;todo para adjudicar un oferentes
     *  @author Jonathan Ruiz
     */
    public void adjudicarOferente(Row oferente){
        logger.log(ADFLogger.TRACE, "Into crearRowOferente.");
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionAMImpl =(FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();

        
        if (null != oferente) {
            // Obtenemos siguiente valor de la secuencia
            oracle.jbo.domain.Number idConcursante = null;
            SequenceImpl seqConcursante = null;

            seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
            idConcursante = seqConcursante.getSequenceNumber();
            
            // Agregamos el nuevo oferente
            Row row = this.createRow();
            row.setAttribute("Id", idConcursante.longValue());
            row.setAttribute("IdNoObjecion", oferente.getAttribute("IdNoObjecion"));
            row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO);
            row.setAttribute("NombreTr", oferente.getAttribute("NombreTr"));
            row.setAttribute("IdCatPais", oferente.getAttribute("IdCatPais"));
            if(null!=oferente.getAttribute("IdCatPais")){
                Integer pais=(Integer)oferente.getAttribute("IdCatPais");
                String nombrePaises=fenixAdquisicionAMImpl.getTcaPaisesVO().nombrePais(pais);
                    if(null!=nombrePaises){
                        row.setAttribute("NacionalidadTr", nombrePaises);
                        }
                }
            row.setAttribute("Nombre", oferente.getAttribute("Nombre"));
            row.setAttribute("FechaRegistro", oferente.getAttribute("FechaRegistro"));
            row.setAttribute("IdNoObjecionAnterior", oferente.getAttribute("IdNoObjecion"));
            this.insertRow(row);
            this.setCurrentRow(row);
        }
    }
    
    public Row adjudicarOferenteByExcel(Row oferente, String nacionalidad, BigDecimal monto){
        logger.warning("Into adjudicarOferenteByExcel.");
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixAdquisicionAMImpl fenixAdquisicionAMImpl =(FenixAdquisicionAMImpl) fenixAMImpl.getFenixAdquisicionAM();
        Row rowNuevoAdjudicatario = null;
        logger.warning("IdNoObjecion: "+oferente.getAttribute("IdNoObjecion"));
        logger.warning(" adjudicarOferenteByExcel monto: "+monto);
        logger.warning(" adjudicarOferenteByExcel NombreTr : "+oferente.getAttribute("NombreTr"));
        logger.warning(" adjudicarOferenteByExcel NacionalidadTr : "+nacionalidad);
        
        if (null != oferente) {
            // Obtenemos siguiente valor de la secuencia
            oracle.jbo.domain.Number idConcursante = null;
            SequenceImpl seqConcursante = null;

            seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
            idConcursante = seqConcursante.getSequenceNumber();
            
            // Agregamos el nuevo oferente
            Row row = this.createRow();
            row.setAttribute("Id", idConcursante.longValue());
            row.setAttribute("IdNoObjecion", oferente.getAttribute("IdNoObjecion"));
            row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO);
            row.setAttribute("NombreTr", oferente.getAttribute("NombreTr"));
            //row.setAttribute("IdCatPais", oferente.getAttribute("IdCatPais"));
            row.setAttribute("NacionalidadTr", nacionalidad);
            row.setAttribute("Nombre", "X");
            row.setAttribute("FechaRegistro", new java.sql.Timestamp(new Date().getTime()));
            row.setAttribute("IdNoObjecionAnterior", oferente.getAttribute("IdNoObjecion"));
            row.setAttribute("Monto", monto);
            this.insertRow(row);
            this.setCurrentRow(row);
            
            rowNuevoAdjudicatario = row;
            
        }
        return rowNuevoAdjudicatario;
    }
    
    /**
     *  M&eacujte;todo para remover un contratado
     *  @author Jonathan Ruiz
     */
    public void removerContratado(Row contratado){
        logger.log(ADFLogger.TRACE, "Into removerAdjudicatario.");
        
        if (null != contratado) {
            // Obtenemos siguiente valor de la secuencia
            oracle.jbo.domain.Number idConcursante = null;
            SequenceImpl seqConcursante = null;

            seqConcursante = new SequenceImpl("CONCURSANTE_ADQUISICION_SEQ", getDBTransaction());
            idConcursante = seqConcursante.getSequenceNumber();
            
            // Agregamos el nuevo adjudicado
            Row row = this.createRow();
            row.setAttribute("Id", idConcursante.longValue());
            row.setAttribute("IdNoObjecion", contratado.getAttribute("IdNoObjecionAnterior"));
            row.setAttribute("IdNoObjecionAnterior", contratado.getAttribute("IdNoObjecionAnterior"));
            row.setAttribute("IdTcaTipoPerfil",  FenixModelConstants.ID_TIPO_PERFIL_ADJUDICATARIO);
            row.setAttribute("Nombre", contratado.getAttribute("Nombre"));
            row.setAttribute("IdCatPais", contratado.getAttribute("IdCatPais"));
            row.setAttribute("NombreTr", contratado.getAttribute("NombreTr"));
            row.setAttribute("NacionalidadTr", contratado.getAttribute("NacionalidadTr"));
            row.setAttribute("Monto", contratado.getAttribute("Monto"));
            row.setAttribute("FechaRegistro", contratado.getAttribute("FechaRegistro"));
            this.insertRow(row);
            this.setCurrentRow(row);
        }
    }
    
    public long numRegistros() {
        return this.getEstimatedRowCount();
    }
    
    public void fusionarCamposTrasient() {
        logger.warning("Inicio fusionarCamposTrasient AjudicatariosVOImpl" );
        RowSetIterator rs = this.createRowSetIterator(null);
        
        while(rs.hasNext()) {
            AdjudicatariosVORowImpl adjudicatarioRow = (AdjudicatariosVORowImpl)rs.next();
            String NombreTr = adjudicatarioRow.getAttribute("NombreTr") != null? (String)adjudicatarioRow.getAttribute("NombreTr"): "vacio nombre tr" ;
            String Nombre = adjudicatarioRow.getAttribute("Nombre") != null? (String)adjudicatarioRow.getAttribute("Nombre"): "vacio nombre" ;
            
            logger.warning("prb NombreTr:" + NombreTr);
            logger.warning("prb Nombre:" + Nombre);
            
            adjudicatarioRow.setAttribute("Nombre", Nombre);
            //adjudicatarioRow.setAttribute("Nacionalidad", adjudicatarioRow.getAttribute("NacionalidadTr"));
            
            logger.warning("adjudicatario.Id:"+adjudicatarioRow.getId());
            logger.warning("adjudicatario.Nombre:"+adjudicatarioRow.getNombre());
            logger.warning("adjudicatario.Nacionalidad:"+adjudicatarioRow.getIdCatPais());
            logger.warning("adjudicatario.NombreTr:"+adjudicatarioRow.getNombreTr());
        }
        rs.closeRowSetIterator();
    }
    
    /**
     * @return campos no validos
     * -1 los campos son validos
     * 0 el nombre no es valido
     * 1 la nacionalidad no es valida
     * 2 ambos son invalidos
     */
    public int validarCampos() {
        RowSetIterator rs = this.createRowSetIterator(null);
        int camposValidos = -1;
        boolean nombresValidos = Boolean.TRUE;
        boolean nacionalidadesValidos = Boolean.TRUE;
        while(rs.hasNext()) {
            OferentesVORowImpl oferenteRow = (OferentesVORowImpl)rs.next();
            String nombre = (String)oferenteRow.getAttribute("NombreTr");
            String nacionalidad = (String)oferenteRow.getAttribute("NacionalidadTr");
            
            if (null == nombre) {
                nombresValidos = Boolean.FALSE;
            } else {
                if (nombre.trim().equals("")) {
                    nombresValidos = Boolean.FALSE;
                }
            }
            
            if (null == nacionalidad) {
                nacionalidadesValidos = Boolean.FALSE;
            } else {
                if (nacionalidad.trim().equals("")) {
                    nacionalidadesValidos = Boolean.FALSE;
                }
            }
        }
        rs.closeRowSetIterator();
        
        if (!nombresValidos && !nacionalidadesValidos) {
            camposValidos = 2;
        } else if (!nombresValidos && nacionalidadesValidos) {
            camposValidos = 0;
        } else if (nombresValidos && !nacionalidadesValidos) {
            camposValidos = 1;
        }
        
        logger.log(ADFLogger.TRACE, "Into oferentes.validarCampos."+camposValidos);
        return camposValidos;
    }
    
    /**
     * @return campos no validos
     * -1 los campos son validos
     * 0 todos no validos
     * 1 monto no valido
     */
    public int validarCampos(boolean validarSoloMonto) {
        RowSetIterator rs = this.createRowSetIterator(null);
        int camposValidos = -1;
        boolean nombresValidos = Boolean.TRUE;
        boolean nacionalidadesValidos = Boolean.TRUE;
        boolean montosValidos = Boolean.TRUE;
        boolean instanciasValidos = Boolean.TRUE;

        while(rs.hasNext()) {
        AdjudicatariosVORowImpl adjudicatarioRow = (AdjudicatariosVORowImpl)rs.next();
        String nombre = (String)adjudicatarioRow.getAttribute("NombreTr");
        String nacionalidad = (String)adjudicatarioRow.getAttribute("NacionalidadTr");
        BigDecimal monto = (BigDecimal)adjudicatarioRow.getAttribute("Monto");
            
        if (null == nombre) {
            nombresValidos = Boolean.FALSE;
        } else {
            if (nombre.trim().equals("")) {
                nombresValidos = Boolean.FALSE;
            }
        }
            
        if (null == nacionalidad) {
            nacionalidadesValidos = Boolean.FALSE;
        } else {
            if (nacionalidad.trim().equals("")) {
                nacionalidadesValidos = Boolean.FALSE;
            }
        }
            
            if (validarSoloMonto && null == monto) {
                montosValidos = Boolean.FALSE;
            }
        }
        rs.closeRowSetIterator();
        
        if(getEstimatedRowCount()<=0){
            logger.warning("No hay registros");
            }
        
        if (!validarSoloMonto && (!montosValidos || !nombresValidos || !nacionalidadesValidos) ) {
            camposValidos = 0;
        } else if (validarSoloMonto && !montosValidos) {
            camposValidos = 1;
        }
        
        logger.log(ADFLogger.TRACE, "Into adjudicatarios.validarCampos."+camposValidos);
        return camposValidos;
    }
}

