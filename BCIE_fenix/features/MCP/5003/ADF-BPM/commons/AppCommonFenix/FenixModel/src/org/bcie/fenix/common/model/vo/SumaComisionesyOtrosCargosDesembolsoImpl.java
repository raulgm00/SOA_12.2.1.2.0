package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.SumaComisionesyOtrosCargosDesembolso;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 25 20:35:20 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SumaComisionesyOtrosCargosDesembolsoImpl extends ViewObjectImpl implements SumaComisionesyOtrosCargosDesembolso {
    
    private static ADFLogger logger = null;
     
    public SumaComisionesyOtrosCargosDesembolsoImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
          }
    }


    public BigDecimal cargarConsultaComisionesOtrosCargos(Number IdContrato) {
        logger.warning("inicia el metodo cargarConsultaComisionesOtrosCargos con idContrato->" + IdContrato);
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        BigDecimal montoComisionesCargo = null;

        if (IdContrato == null) {
            logger.warning("Error al recuperar los cargos del contrato el Id del contrato es null ");
        } else {

            setpIdContrato(IdContrato);
            executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                montoComisionesCargo = (BigDecimal) getCurrentRow().getAttribute("totalComisionesOtrosCargos");
            } else {
                logger.warning("No se obtubo un current en la consulta de cargar cargos desembolso");
            }

        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina el metodo cargarConsultaComisionesOtrosCargos con montoCargo->" + montoComisionesCargo +
                       "  con una duracion de: " + tiempo + " segundos");
        return montoComisionesCargo;
    }



    /**
     * Returns the bind variable value for pIdContrato.
     * @return bind variable value for pIdContrato
     */
    public Number getpIdContrato() {
        return (Number) getNamedWhereClauseParam("pIdContrato");
    }

    /**
     * Sets <code>value</code> for bind variable pIdContrato.
     * @param value value to bind as pIdContrato
     */
    public void setpIdContrato(Number value) {
        setNamedWhereClauseParam("pIdContrato", value);
    }
}

