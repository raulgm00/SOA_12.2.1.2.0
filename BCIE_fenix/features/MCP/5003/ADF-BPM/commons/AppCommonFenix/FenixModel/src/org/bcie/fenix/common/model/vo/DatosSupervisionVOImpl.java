package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.DatosSupervisionVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 21 16:41:37 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosSupervisionVOImpl extends ViewObjectImpl implements DatosSupervisionVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    
    public DatosSupervisionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varIdOperacion.
     * @return bind variable value for varIdOperacion
     */
    public String getvarIdOperacion() {
        return (String) getNamedWhereClauseParam("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(String value) {
        if (value != null) {
            setNamedWhereClauseParam("varIdOperacion", Long.parseLong(value));    
        }
    }
    
    public Boolean obtenerDatosSupervisionById(Long id){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerDatosSupervisionById : ");
        Integer contador = 0;
        Boolean validaDatosSupervision = Boolean.FALSE;
        
        try {
            if(id == null)
            {
                validaDatosSupervision = Boolean.FALSE;
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("DatosSupervisionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varId", id);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsDatosSupervisionVo = createRowSetIterator(null);
                rowsDatosSupervisionVo.reset();
                    while (rowsDatosSupervisionVo.hasNext()) {
                        DatosSupervisionVORowImpl rowL = (DatosSupervisionVORowImpl) rowsDatosSupervisionVo.next();
                        contador++;
                    }
                logger.warning("Numero de rows: " + contador);
                
                try{
                    if(contador>0)
                        validaDatosSupervision = Boolean.TRUE;
                    else
                        validaDatosSupervision = Boolean.FALSE;
                }catch(Exception e){
                    logger.warning("Numero de rows: vacío");
                }
                rowsDatosSupervisionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerDatosSupervisionById " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("DatosSupervisionVOCriteria");
        }
        
        return validaDatosSupervision;
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }
    
    public void currentSupervision(String idOperacion) {
        logger.warning("Inside currentSupervision.");
        // Limpia el cache de la VO para que no se quede con los datos de otro id operación
        this.clearCache();
        setvarIdOperacion(idOperacion);
        
        this.executeQuery();
        
        Row row = this.getRowAtRangeIndex(0);
        
        if (row != null) {
            this.setCurrentRow(row);
        } else {
            logger.warning("Current row es Null.");
        }
    }
    
    public Integer obtenerTipoProyecto() {
        logger.warning("Inside obtenerTipoProyecto.");
        
        Integer tipoProyecto = null;
        Row supervisionRow = getRowAtRangeIndex(0);
        
        if (supervisionRow != null) {
            logger.warning("idSupervision: " + supervisionRow.getAttribute("Id"));
            tipoProyecto = (Integer) supervisionRow.getAttribute("EsProyectoEnOperacion");    
        } else {
            logger.warning("Row de supervision es Null.");
        }
        
        logger.warning("tipoProyecto: " + tipoProyecto);
        
        return tipoProyecto;
    }
}

