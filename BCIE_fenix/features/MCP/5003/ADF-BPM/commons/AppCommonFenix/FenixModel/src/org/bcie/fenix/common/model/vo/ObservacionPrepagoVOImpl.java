package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.vo.common.ObservacionPrepagoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 30 18:53:16 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ObservacionPrepagoVOImpl extends ViewObjectImpl implements ObservacionPrepagoVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ObservacionPrepagoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row buscarObservacionPrepagoPorId(Long id){
        logger.warning("Dentro de buscarObservacionPrepagoPorId idObservacionPrepago:"+id);
        Row row = null;
        ViewCriteria criteria = null;
        try{                                                    
            this.setvarIdObservacionPrepago(id);                                   
            criteria = getViewCriteria("ObservacionPrepagoPorId");                       
            this.applyViewCriteria(criteria);
            this.executeQuery();
            for(Row rowAux : this.getAllRowsInRange()){
                row = rowAux;
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria ObservacionPrepagoPorId : ",e);                                    
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("ObservacionPrepagoPorId");  
        }    
        logger.warning("Fuera de buscarObservacionPrepagoPorId");
        return row;
    }
    
    public Long crearObservacionPrepago(Integer idTcaTareaBpm,String observacion,String loginUsuario,
                                            String nombreUsuario) {
        logger.log(ADFLogger.WARNING, "Into crearObservacionPrepago.");
        logger.log(ADFLogger.WARNING, "value idTcaTareaBpm : "+idTcaTareaBpm);
        logger.log(ADFLogger.WARNING, "value loginUsuario : "+loginUsuario);
        logger.log(ADFLogger.WARNING, "value nombreUsuario : "+nombreUsuario);
        logger.log(ADFLogger.WARNING, "value observacion : "+observacion);
        Row observacionPrepagoRow = null;
        oracle.jbo.domain.Number idObservacionPrepago = null;
        SequenceImpl sequenceObservacionPrepago = null;
        NameValuePairs nvpObservacionPrepago = null;
        try{
        //Obtener la secuencia de la tabla "OBSERVACION_PREPAGO"
        sequenceObservacionPrepago = new SequenceImpl("OBSERVACION_PREPAGO_SEQ", getDBTransaction());
        idObservacionPrepago = sequenceObservacionPrepago.getSequenceNumber();
        nvpObservacionPrepago = new NameValuePairs();
        nvpObservacionPrepago.setAttribute("Id",idObservacionPrepago.longValue());
        nvpObservacionPrepago.setAttribute("IdTcaTareaBpm",idTcaTareaBpm);
        nvpObservacionPrepago.setAttribute("Observacion",observacion);
        nvpObservacionPrepago.setAttribute("LoginUsuario",loginUsuario);
        nvpObservacionPrepago.setAttribute("NombreUsuario",nombreUsuario);
        nvpObservacionPrepago.setAttribute("BanEstatus", BANESTATUS_TRUE);//default value 1
        nvpObservacionPrepago.setAttribute("FechaRegistro",new java.sql.Timestamp(System.currentTimeMillis()));
        
        observacionPrepagoRow = this.createAndInitRow(nvpObservacionPrepago);
              
        getDBTransaction().commit();
        
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Exception in crearObservacionPrepago : "+e.getMessage());
            getDBTransaction().rollback();
            return null;
        }
        //ejecutar query
        this.executeQuery();
        
        return idObservacionPrepago.longValue();

    }
    
    public void actualizarObservacionPrepago(Long idObservacion, String observacion){
        logger.log(ADFLogger.WARNING, "INTO actualizarObservacionPrepago.");
        Row rowObservacion = null;
        rowObservacion = this.buscarObservacionPrepagoPorId(idObservacion);
        logger.log(ADFLogger.TRACE, "Valor ID dela observacion." + idObservacion + "..Numero de rows..." + this.getRowCount());
        try{
        if(rowObservacion != null){
            logger.log(ADFLogger.WARNING, "Row diferente a null.");
           rowObservacion.setAttribute("Observacion", observacion);
            getDBTransaction().commit();
        }else{
            logger.log(ADFLogger.WARNING, "rowObservacion is null.");

        }
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error al agregar la Observacion en actualizarObservacionPrepago." + ex.getClass() + ":" + ex.getMessage());
        }
        
    }

    /**
     * Returns the variable value for varIdObservacionPrepago.
     * @return variable value for varIdObservacionPrepago
     */
    public Long getvarIdObservacionPrepago() {
        return (Long) ensureVariableManager().getVariableValue("varIdObservacionPrepago");
    }

    /**
     * Sets <code>value</code> for variable varIdObservacionPrepago.
     * @param value value to bind as varIdObservacionPrepago
     */
    public void setvarIdObservacionPrepago(Long value) {
        ensureVariableManager().setVariableValue("varIdObservacionPrepago", value);
    }
}

