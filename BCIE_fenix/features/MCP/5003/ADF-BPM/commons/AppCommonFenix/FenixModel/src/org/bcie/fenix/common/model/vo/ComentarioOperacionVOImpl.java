package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.SQLException;

import java.sql.Timestamp;

import java.util.Date;
import java.util.GregorianCalendar;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ComentarioOperacionVO;

import static org.bcie.fenix.common.model.FenixModelConstants.ID_OPERACION_INIT_NUM;
import org.bcie.fenix.common.model.vo.consultarconfigcondicionesfinancieras.clases.TablaDinamicaVOBean;
import org.bcie.fenix.common.model.vo.comentarios.ComentarioOperacionVOBean;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 07 00:30:29 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComentarioOperacionVOImpl extends ViewObjectImpl implements ComentarioOperacionVO {
    
    private static ADFLogger logger = null;
    
    /**
     * Class name.
     */
    private static final String CLASS_NAME = ComentarioOperacionVOImpl.class.getName();
    
    /**
     * This is the default constructor (do not remove).
     */
    public ComentarioOperacionVOImpl()
    {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    /**
     * Nombre del ViewCriteria para buscar el comentario por id operacion.
     */
    public final String VC_COMENTARIO_POR_OPERACION = "obtenerComentarioPorOperacion";
    
    /**
     * @Featuature: 4297
     * @Developer: rgarcia/vmartinez
     * @Date:09/07/2021
     * */
    public Map<String,ComentarioOperacionVOBean> getComentariosFiltrados(Integer p_idOperacion, Integer p_idInstanciaTarea)
    {
        //Escenario: Query principal tiene un parametro de entrada que debe ser seteado, al igual que el ViewCriterial estos
        //parametros adicionales tambien deben ser seteados.
        Map<String, ComentarioOperacionVOBean> map = new HashMap<String, ComentarioOperacionVOBean>();
        
        Date horaInicio = new GregorianCalendar().getTime();
        Date horaTermino ;
        Long tiempoProcesoSegundos ;
            
        ViewCriteria criterial = null;
        logger.warning("Tiempo de inicio comentarios del: " + horaInicio);
        try {
            logger.warning("ID_OPERACION: " + p_idOperacion + " ID_INSTANCIA_TAREA: " + p_idInstanciaTarea);
            //Asignaci�n del parametro global del query
            setNamedWhereClauseParam("varIdOperacion", new Number(p_idOperacion));
            //Asignaci�n de la clausula View Criterial
            criterial = this.getViewCriteriaManager().getViewCriteria("ComentarioOperacionVsInstanciaTareaVOCriteria");
            criterial.ensureVariableManager().setVariableValue("p_idInstanciaTarea", p_idInstanciaTarea);
            this.applyViewCriteria(criterial);
            executeQuery();
            logger.warning("N�mero de registros de comentarios encontrados para la operaci�n " + this.getEstimatedRowCount());
            
            //Validar que existen datos en la ejecucu�n de View Criterial
            if (this.getEstimatedRowCount() > 0) {
                //Obtener Iterador de Row en memoria:
                RowSetIterator iter = this.createRowSetIterator(null);
                map = desempaquetarColecion(iter, this.getEstimatedRowCount());
                imprimirMapa(map);
            } else {
                logger.warning("No se encontraron registros");
                map.put("ERROR", null);
                
            }
            
        } catch (SQLException e) {
            setNamedWhereClauseParam("varIdOperacion", ID_OPERACION_INIT_NUM);
            map= null;
        }finally{
            //Limiamos la memoria del ViewCriterial
            logger.info("Se remueve criterio de busqueda");
            getViewCriteriaManager().removeApplyViewCriteriaName("ComentarioOperacionVsInstanciaTareaVOCriteria");
            this.executeQuery();
            horaTermino = new GregorianCalendar().getTime();
            tiempoProcesoSegundos = (horaTermino.getTime() - horaInicio.getTime()) / 1000;
            
        }
        logger.warning("Tiempo de respuesta del metodo Inico metodo de adquisiciones "+ tiempoProcesoSegundos+" segundos");
        return map;
    }
    
    /**
     * @Featuature: 4297
     * @Developer: rgarcia/vmartinez
     * @Date:09/07/2021
     * */
    public Map<String, ComentarioOperacionVOBean> desempaquetarColecion(RowSetIterator iter, Long longuitud) {
        int contador = (int) (long) longuitud;
        int contadorNodos=1;
        Map<String, ComentarioOperacionVOBean> mapa = new HashMap<String, ComentarioOperacionVOBean>();
        ComentarioOperacionVOBean beanLocal = null;
        
        while (iter.hasNext()) {
            Row fila = iter.next();
            beanLocal = new ComentarioOperacionVOBean(
                                                            (Long) fila.getAttribute("Id"),
                                                            fila.getAttribute("Comentario").toString(),
                                                            (Timestamp) fila.getAttribute("FechaRegistro"),
                                                            fila.getAttribute("IdInstanciaTarea").toString(),
                                                            (Long) fila.getAttribute("IdOperacion"),
                                                            (Integer) fila.getAttribute("IdTcaTarea"),
                                                            fila.getAttribute("LoginUsuario").toString(),
                                                            fila.getAttribute("NombreUsuario").toString(),
                                                            (Integer) fila.getAttribute("BanEstatus"),
                                                            fila.getAttribute("Nombretarea").toString(),
                                                            fila.getAttribute("Nombreproceso").toString(),
                                                            (Integer) fila.getAttribute("IdTcaTipoComentario")
                                                            );
            if( contador > contadorNodos){
                mapa.put("H_"+contadorNodos, beanLocal);
            } else {
                mapa.put("P_0", beanLocal);
            }
            contadorNodos += 1;
        }

        return mapa;
    }
    
    /**
     * @Featuature: 4297
     * @Developer: rgarcia/vmartinez
     * @Date:09/07/2021
     * */
    public void imprimirMapa(Map<String, ComentarioOperacionVOBean> map) {

        for (Map.Entry<String, ComentarioOperacionVOBean> entry : map.entrySet()) {
            System.out.println(" ======================== " + entry.getKey() + " ================================== " );
            System.out.println(entry.getValue().toString());
        }

    }
    
    public void setIdOperacion(String value)
    {
        long startTime = System.currentTimeMillis();                    
        startTime = System.currentTimeMillis();
        logger.warning("Tiempo de inicio comentarios del: "
        + startTime);
        try {
            logger.warning("Valor entrante de operaci�n: " + value);
            setNamedWhereClauseParam("varIdOperacion", new Number(value));
            executeQuery();
            logger.warning("N�mero de registros de comentarios encontrados para la operaci�n " + getEstimatedRowCount());
            
           
            
        } catch (SQLException e) {
            setNamedWhereClauseParam("varIdOperacion", ID_OPERACION_INIT_NUM);
        }
        
        long endTime = System.currentTimeMillis();
        logger.warning("Tiempo de fin comentario: " + endTime);
        logger.warning("Tiempo de respuesta del metodo Inico metodo de adquisiciones "
        + (endTime - startTime)/1000 + " segundos");
    }
    
    public Boolean eliminarComentarioPadre(Long idComentario){
        logger.warning("Inicia metodo eliminarComentarioPadre... ");
        Boolean resultado = Boolean.TRUE;
        Row filaRecuperada = null;
        ViewCriteria criteria = null;
        Long id = null;

        logger.warning("idComentario recibido: " + idComentario);

        if (idComentario == null) {
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("ComentarioOperacionVOCriteriaByIdComentario");
            criteria.ensureVariableManager().setVariableValue("varIdComentario", idComentario);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Id: " + filaRecuperada.getAttribute("Id"));
                id = Long.parseLong(filaRecuperada.getAttribute("Id").toString());
                filaRecuperada.setAttribute("BanEstatus", 0);
                try {
                    getDBTransaction().commit();
                    logger.warning("Se hace commit a la DB");
                    resultado = Boolean.TRUE;
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR,
                          "Error al intentar hacer el eliminado logico en el metodo eliminarComentarioPadre ->: ", e);
                    //getDBTransaction().rollback();
                    resultado = Boolean.FALSE;
                }
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("ComentarioOperacionVOCriteriaByIdComentario");
                resultado = Boolean.FALSE;
                executeQuery();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->", e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("ComentarioOperacionVOCriteriaByIdComentario");
        }
        
        logger.warning("Valor a retornar de resultado: " + resultado);
        logger.warning("Finaliza metodo eliminarComentarioPadre... ");

        return resultado;
    }
    
    public void realizarCommit(){
        logger.warning("Inicia el metodo realizarCommit");
        
          try{
             this.getDBTransaction().commit();
          }catch(Exception e){              
              logger.warning("Ha ocurrido un error al realizar el commit ->",e);
              logger.warning("reintentandoo commit...."); 
              
              try{
                    this.getDBTransaction().commit();
                 }catch(Exception ea){
                     logger.warning("error al realizar commit ->",ea);
                 }
              
          }
        
        logger.warning("Termina el metodo realizarCommit");
    }
    
    /**
     * Validar el commentario por Id Operacion.
     * @param idOperacion
     */
    public Long validarComentario(Number idOperacion, Number idTarea) {
        
        final String METHOD_NAME = "validarJustificacion";
        logger.entering(CLASS_NAME, METHOD_NAME);
        
        Long count = null;
        
        if(idOperacion != null) {
            
            logger.info("Limpiando la consulta y parametros");
            setWhereClause(null);
            setWhereClauseParams(null);
            
            setBindOperacion(idOperacion);
            setBindIdTarea(idTarea);
            setApplyViewCriteriaName(VC_COMENTARIO_POR_OPERACION);
            executeQuery();

            count = getEstimatedRowCount();

            logger.info("Limpiar ViewCriteria.");
            removeApplyViewCriteriaName(VC_COMENTARIO_POR_OPERACION);
            
        } else {
            logger.severe("Parametro id operacion es nulo.");
        }
        
        logger.exiting(CLASS_NAME, METHOD_NAME);
        
        return count;
    }

    /**
     * Returns the bind variable value for varIdOperacion.
     * @return bind variable value for varIdOperacion
     */
    public Number getvarIdOperacion() {
        return (Number) getNamedWhereClauseParam("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Number value) {
        setNamedWhereClauseParam("varIdOperacion", value);
    }

    /**
     * Returns the variable value for varIdInstanciaTarea.
     * @return variable value for varIdInstanciaTarea
     */
    public String getvarIdInstanciaTarea() {
        return (String) ensureVariableManager().getVariableValue("varIdInstanciaTarea");
    }

    /**
     * Sets <code>value</code> for variable varIdInstanciaTarea.
     * @param value value to bind as varIdInstanciaTarea
     */
    public void setvarIdInstanciaTarea(String value) {
        ensureVariableManager().setVariableValue("varIdInstanciaTarea", value);
    }

    /**
     * Returns the variable value for varTarea.
     * @return variable value for varTarea
     */
    public Integer getvarTarea() {
        return (Integer) ensureVariableManager().getVariableValue("varTarea");
    }

    /**
     * Sets <code>value</code> for variable varTarea.
     * @param value value to bind as varTarea
     */
    public void setvarTarea(Integer value) {
        ensureVariableManager().setVariableValue("varTarea", value);
    }

    /**
     * Returns the variable value for varIdComentario.
     * @return variable value for varIdComentario
     */
    public Long getvarIdComentario() {
        return (Long) ensureVariableManager().getVariableValue("varIdComentario");
    }

    /**
     * Sets <code>value</code> for variable varIdComentario.
     * @param value value to bind as varIdComentario
     */
    public void setvarIdComentario(Long value) {
        ensureVariableManager().setVariableValue("varIdComentario", value);
    }

    /**
     * Returns the variable value for BindOperacion.
     * @return variable value for BindOperacion
     */
    public Number getBindOperacion() {
        return (Number) ensureVariableManager().getVariableValue("BindOperacion");
    }

    /**
     * Sets <code>value</code> for variable BindOperacion.
     * @param value value to bind as BindOperacion
     */
    public void setBindOperacion(Number value) {
        ensureVariableManager().setVariableValue("BindOperacion", value);
    }

    /**
     * Returns the variable value for BindIdTarea.
     * @return variable value for BindIdTarea
     */
    public Number getBindIdTarea() {
        return (Number) ensureVariableManager().getVariableValue("BindIdTarea");
    }

    /**
     * Sets <code>value</code> for variable BindIdTarea.
     * @param value value to bind as BindIdTarea
     */
    public void setBindIdTarea(Number value) {
        ensureVariableManager().setVariableValue("BindIdTarea", value);
    }

    /**
     * Returns the variable value for p_idTarea.
     * @return variable value for p_idTarea
     */
    public String getp_idInstanciaTarea() {
        return (String) ensureVariableManager().getVariableValue("p_idInstanciaTarea");
    }

    /**
     * Sets <code>value</code> for variable p_idTarea.
     * @param value value to bind as p_idTarea
     */
    public void setp_idInstanciaTarea(String value) {
        ensureVariableManager().setVariableValue("p_idInstanciaTarea", value);
    }

    /**
     * Returns the variable value for p_idProceso.
     * @return variable value for p_idProceso
     */
    public Integer getp_idProceso() {
        return (Integer) ensureVariableManager().getVariableValue("p_idProceso");
    }

    /**
     * Sets <code>value</code> for variable p_idProceso.
     * @param value value to bind as p_idProceso
     */
    public void setp_idProceso(Integer value) {
        ensureVariableManager().setVariableValue("p_idProceso", value);
    }
}

