package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.validarClienteTipoDocumentoYMimeTypeVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Nov 07 14:27:32 VET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class validarClienteTipoDocumentoYMimeTypeVOImpl extends ViewObjectImpl implements validarClienteTipoDocumentoYMimeTypeVO {
    
    private static ADFLogger logger = null;
    
    
    /**
     * This is the default constructor (do not remove).
     */
    public validarClienteTipoDocumentoYMimeTypeVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for idClienteBind.
     * @return variable value for idClienteBind
     */
    public Long getidClienteBind() {
        return (Long) ensureVariableManager().getVariableValue("idClienteBind");
    }

    /**
     * Sets <code>value</code> for variable idClienteBind.
     * @param value value to bind as idClienteBind
     */
    public void setidClienteBind(Long value) {
        ensureVariableManager().setVariableValue("idClienteBind", value);
    }

    /**
     * Returns the variable value for idTipoDocumentoBind.
     * @return variable value for idTipoDocumentoBind
     */
    public Integer getidTipoDocumentoBind() {
        return (Integer) ensureVariableManager().getVariableValue("idTipoDocumentoBind");
    }

    /**
     * Sets <code>value</code> for variable idTipoDocumentoBind.
     * @param value value to bind as idTipoDocumentoBind
     */
    public void setidTipoDocumentoBind(Integer value) {
        ensureVariableManager().setVariableValue("idTipoDocumentoBind", value);
    }

    /**
     * Returns the variable value for mimeTypeBind.
     * @return variable value for mimeTypeBind
     */
    public String getmimeTypeBind() {
        return (String) ensureVariableManager().getVariableValue("mimeTypeBind");
    }

    /**
     * Sets <code>value</code> for variable mimeTypeBind.
     * @param value value to bind as mimeTypeBind
     */
    public void setmimeTypeBind(String value) {
        ensureVariableManager().setVariableValue("mimeTypeBind", value);
    }


    /**Valida que el un idCliente tenga al menos un idDocumento asociado a un idTipoDocumento y que el adjunto asociado
     * a este idDocumento sea de un mimeType especifico. (Valida existencia de tipo documento y extencion del documento 
     * para un cliente)
     * @param idCliente
     * @param idTipoDocumento
     * @param mimeType
     * @return
     */
    public Boolean validarDocumentoClientePorTipoDocumentoYMimeType(Long idCliente, Integer idTipoDocumento, String mimeType){
        Boolean resultado = null;
        try{
            ViewCriteria viewCriteria =this.getViewCriteriaManager().getViewCriteria("validarClienteTipoDocumentoYMimeTypeVOCriteria");
            viewCriteria.ensureVariableManager().setVariableValue("idClienteBind", idCliente);
            viewCriteria.ensureVariableManager().setVariableValue("idTipoDocumentoBind", idTipoDocumento);
            viewCriteria.ensureVariableManager().setVariableValue("mimeTypeBind", mimeType);
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            resultado = (this.getEstimatedRowCount() > 0) ? Boolean.TRUE : Boolean.FALSE;
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en validarClienteTipoDocumentoYMimeType " + ex.getClass() + ":" + ex.getMessage());
            return Boolean.FALSE;
        }finally{
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("validarClienteTipoDocumentoYMimeTypeVOCriteria");
        }
        return resultado;
    }


    /**Valida que el un idCliente tenga al menos un idDocumento asociado a un idTipoDocumento y que el adjunto asociado
     * a este idDocumento sea de un mimeType especifico. (Valida existencia de tipo documento y extencion del documento 
     * para un cliente)
     * @param idCliente
     * @param idTipoDocumento
     * @param mimeType
     * @return
     */
    public Boolean validarDocumentoClienteMimeTypeSerie(Long idCliente, Integer idTipoDocumento, String mimeType, Long serie){
        
        logger.warning("idCliente " +idCliente);
        logger.warning("idTipoDocumento " +idTipoDocumento);
        logger.warning("mimeType " +mimeType);
        logger.warning("serie " +serie);
        
        Boolean resultado = Boolean.FALSE;
        try{
            ViewCriteria viewCriteria =this.getViewCriteriaManager().getViewCriteria("validarClienteTipoDocumentoYMimeTypeVOCriteria1");
            viewCriteria.ensureVariableManager().setVariableValue("idClienteBind", idCliente);
            viewCriteria.ensureVariableManager().setVariableValue("idTipoDocumentoBind", idTipoDocumento);
            viewCriteria.ensureVariableManager().setVariableValue("mimeTypeBind", mimeType);
            viewCriteria.ensureVariableManager().setVariableValue("numSerieBnd", serie);
            applyViewCriteria(viewCriteria);
           executeQuery();
            if(getEstimatedRowCount() > 0){
                    resultado = Boolean.TRUE;
                }
         }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en validarClienteTipoDocumentoYMimeType " + ex.getClass() + ":" + ex.getMessage());
            return Boolean.FALSE;
        }finally{
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("validarClienteTipoDocumentoYMimeTypeVOCriteria1");
        }
        return resultado;
    }

    /**
     * Returns the variable value for numSerieBnd.
     * @return variable value for numSerieBnd
     */
    public Long getnumSerieBnd() {
        return (Long) ensureVariableManager().getVariableValue("numSerieBnd");
    }

    /**
     * Sets <code>value</code> for variable numSerieBnd.
     * @param value value to bind as numSerieBnd
     */
    public void setnumSerieBnd(Long value) {
        ensureVariableManager().setVariableValue("numSerieBnd", value);
    }
}

