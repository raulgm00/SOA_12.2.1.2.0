package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.CallableStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Timestamp;

import java.util.Random;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jdbc.OracleTypes;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.ContratoDesembolsoPorRangoFechasPrepagoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 21 12:14:11 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratoDesembolsoPorRangoFechasPrepagoVOImpl extends ViewObjectImpl implements ContratoDesembolsoPorRangoFechasPrepagoVO {
    
    private static ADFLogger logger = null;
    
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContratoDesembolsoPorRangoFechasPrepagoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    public void llenarContratoDesembolsoPorRangoFechasPrepago(Long idOperacion,String contratoDesembolso,
                                                                Timestamp fechaSolicitud, Timestamp fechaPrepago,
                                                                    Integer idTcaTipoMoneda) {
        long startTime = System.currentTimeMillis();
        ResultSet rs = null;
        BigDecimal sqlCodeValue = null;
        String sqlResultValue = null;
        
        String storeProcedure = null;
        CallableStatement callableStatement = null;

        this.executeQuery();
        logger.log(ADFLogger.WARNING,"Into llenarContratoDesembolsoPorRangoFechasPrepago");
        logger.log(ADFLogger.WARNING,"Parameter value idOperacion : " + idOperacion);
        logger.log(ADFLogger.WARNING,"Parameter value contratoDesembolso : " + contratoDesembolso);
        logger.log(ADFLogger.WARNING,"Parameter value fechaSolicitud : " + fechaSolicitud);
        logger.log(ADFLogger.WARNING,"Parameter value fechaPrepago : " + fechaPrepago);
        logger.log(ADFLogger.WARNING,"Parameter value idTcaTipoMoneda : " + idTcaTipoMoneda);
        
        try {
            storeProcedure = "{call SP_CONTRATO_DESEM_PROX_PAGO(?,?,?,?,?,?,?,?)}";
            callableStatement = this.getDBTransaction().createCallableStatement(storeProcedure,0);
            //parametros de entrada
            
            
            callableStatement.setObject(FenixModelConstants.P_ID_MONEDA_SP_CONTRATO_DESEM_PROX_PAGO,idTcaTipoMoneda);
            callableStatement.setObject(FenixModelConstants.P_ID_OPERACION_SP_CONTRATO_DESEM_PROX_PAGO, idOperacion);
            callableStatement.setObject(FenixModelConstants.P_CONTRATO_DESEMBOLSO_SP_CONTRATO_DESEM_PROX_PAGO,
                                            contratoDesembolso);
            callableStatement.setObject(FenixModelConstants.P_FECHA_SOLICITUD_SP_CONTRATO_DESEM_PROX_PAGO, 
                                            fechaSolicitud);
            callableStatement.setObject(FenixModelConstants.P_FECHA_PREPAGO_SP_CONTRATO_DESEM_PROX_PAGO ,fechaPrepago);
            
            //parametros de salida
            callableStatement.registerOutParameter(FenixModelConstants.P_CODIGO_RES_SP_CONTRATO_DESEM_PROX_PAGO, 
                                                    OracleTypes.NUMBER);
            callableStatement.registerOutParameter(FenixModelConstants.P_MENSAJE_SP_CONTRATO_DESEM_PROX_PAGO, 
                                                    OracleTypes.VARCHAR);
            callableStatement.registerOutParameter(FenixModelConstants.RECORDSET_SP_CONTRATO_DESEM_PROX_PAGO, 
                                                    OracleTypes.CURSOR);
            callableStatement.executeUpdate();
            //recuperar el resultado de la ejecuccion del stored procedure
            sqlCodeValue = (BigDecimal) callableStatement.getObject(6);
            sqlResultValue = (String) callableStatement.getObject(7);
            rs = (ResultSet) callableStatement.getObject(8);
            if (null != rs) {
                
                while (rs.next()) {
                    //crear registro
                    Row row = this.createRow();
                    //Id
                    row.setAttribute("Id",(null != rs.getObject("ID")) ? rs.getInt("ID"):new Integer(0)); 
                    //NumeroLineaCredito
                    row.setAttribute("LineaCredito",
                                        (null != rs.getString("NUMERO_LINEA_CREDITO")) ?
                                            rs.getString("NUMERO_LINEA_CREDITO") : null);
                    //ContratoDesembolso
                    row.setAttribute("ContratoDesembolsoFlexcube",
                                        (null != rs.getObject("CONTRATO_DESEMBOLSO")) ? 
                                            rs.getString("CONTRATO_DESEMBOLSO"): null); 
                    //FechaEfectiva
                    row.setAttribute("FechaEfectiva",
                                        (null != rs.getObject("FECHA_EFECTIVA")) ? 
                                            rs.getString("FECHA_EFECTIVA"): null); 
                    //Vencimiento
                    row.setAttribute("FechaVencimiento",
                                        (null != rs.getObject("VENCIMIENTO")) ? 
                                            rs.getString("VENCIMIENTO"): null); 
                    //ProximoPago
                    row.setAttribute("FechaProximoPago",
                                        (null != rs.getObject("PROXIMO_PAGO")) ? 
                                            rs.getString("PROXIMO_PAGO"): null); 
                    //Escrituracion
                    row.setAttribute("FechaEscrituracion",
                                        (null != rs.getObject("ESCRITURACION")) ? 
                                            rs.getString("ESCRITURACION"): null); 
                    //FondoContable
                    row.setAttribute("FondoContable",
                                        (null != rs.getObject("FONDO_CONTABLE")) ? 
                                            rs.getString("FONDO_CONTABLE"): null); 
                    //UserRefNo
                    row.setAttribute("UserRef",
                                        (null != rs.getObject("USER_REF_NO")) ? 
                                            rs.getString("USER_REF_NO"): null); 

                    //Moneda
                    row.setAttribute("IdTcaTipoMoneda",
                                     (null != rs.getString("MONEDA")) ? rs.getString("MONEDA") : null);

                    //CapitalNoVencido
                    row.setAttribute("CapitalNoVencido",
                                     (null != rs.getString("CAPITAL_NO_VENCIDO")) ?
                                     rs.getString("CAPITAL_NO_VENCIDO") : null);

                    //EsPagoTotal
                    row.setAttribute("EsPagoTotal",
                                     (null != rs.getObject("PAGO_TOTAL")) ? rs.getInt("PAGO_TOTAL") :
                                     new Integer(0));

                    //MontoPrepago
                    row.setAttribute("MontoPrepago",
                                     (null != rs.getString("MONTO_PREPAGO")) ? rs.getString("MONTO_PREPAGO") : null);

                    // Datos de prueba
//                    StringBuilder sb = new StringBuilder("");
//                    Random random = new Random();
//                    sb.append(random.nextInt(100000 - 1 + 1) + 1);
//                    sb.append("1");
//                    sb.append(random.nextInt((99 - 1) + 1) + 1);
//                    BigDecimal capitalNoVencidoRandom = new BigDecimal(sb.toString());
//                    row.setAttribute("CapitalNoVencido", capitalNoVencidoRandom); 

                    //insertar registro
                    this.insertRow(row);
                }
            } else {
                logger.log(ADFLogger.WARNING, "No se obtuvieron valores del SP.");
            }
        
        }catch(SQLException sqlerr){
            logger.log(ADFLogger.WARNING,"SQLException in llenarContratoDesembolsoPorRangoFechasPrepago : ", sqlerr);
            logger.log(ADFLogger.WARNING,"SQLCODE Value : " +sqlCodeValue);
            logger.log(ADFLogger.WARNING,"SQLMSG Value : " +sqlResultValue);
            throw new JboException(sqlerr);
        }catch(Exception e) {
            logger.log(ADFLogger.WARNING,"Exception in llenarContratoDesembolsoPorRangoFechasPrepago : ", e);
            throw new JboException(e.getMessage());
        }
        
        logger.log(ADFLogger.WARNING,"SQLCODE value : " +sqlCodeValue);
        logger.log(ADFLogger.WARNING,"SQLMSG value : " +sqlResultValue);
        logger.log(ADFLogger.WARNING,"successful method llenarContratoDesembolsoPrepago.");
        long endTime = System.currentTimeMillis();
        
        logger.warning("Tiempo en ejecutar metodo llenarContratoDesembolsoPrepago :  "
                            + (endTime - startTime)/1000 + " segundos");
        
        logger.log(ADFLogger.WARNING,"Leave llenarContratoDesembolsoPorRangoFechasPrepago");
    }


}

