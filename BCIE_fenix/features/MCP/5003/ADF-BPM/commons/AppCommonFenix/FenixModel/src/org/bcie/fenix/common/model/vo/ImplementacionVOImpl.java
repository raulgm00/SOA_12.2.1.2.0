package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.ImplementacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 16:23:17 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ImplementacionVOImpl extends ViewObjectImpl implements ImplementacionVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public ImplementacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Long agregarImplementacion(  Long idOperacion, String tipoProceso, 
                                        String nombreAdquisicion, BigDecimal montoPresupuestado) {
        logger.log(ADFLogger.TRACE, "Inside agregarImplementacion.");
        logger.warning("Inicia metodo agregarImplementacion de ImplementacionVO");
        Long idImp = null;
        String tipoProcesoM = tipoProceso.toUpperCase();
        
        
        try{
            oracle.jbo.domain.Number idImplementacion = null;
            NameValuePairs nvpImplementacion = null;
            SequenceImpl seqImplementacion = null;
            //logger.warning("Continua proceso agregarImplementacion 1");
            
            seqImplementacion = new SequenceImpl("IMPLEMENTACION_SEQ", getDBTransaction());
            idImplementacion = seqImplementacion.getSequenceNumber();
            
            //logger.warning("Continua porceso agregarImplementacion 2");
            nvpImplementacion = new NameValuePairs();
            nvpImplementacion.setAttribute("Id", idImplementacion);
            nvpImplementacion.setAttribute("IdOperacion", idOperacion);
            nvpImplementacion.setAttribute("TipoProceso", tipoProcesoM);
            nvpImplementacion.setAttribute("NombreAdquisicion", nombreAdquisicion);
            nvpImplementacion.setAttribute("MontoPresupuestado", montoPresupuestado);
            
            java.util.Date today = new java.util.Date();
            //nvpImplementacion.setAttribute("IdTcaTipoMoneda", 1);
            //nvpImplementacion.setAttribute("ObservacionGestion", "");
            nvpImplementacion.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            nvpImplementacion.setAttribute("BanEstatus", 1);
            //nvpImplementacion.setAttribute("FechaPublicacion", new java.sql.Timestamp(today.getTime()));
            //nvpImplementacion.setAttribute("FechaLimiteRecepcion", new java.sql.Timestamp(today.getTime()));
            //nvpImplementacion.setAttribute("RequiereTramos", 0);
            //nvpImplementacion.setAttribute("IdTcaResultadoProceso", "");
            //nvpImplementacion.setAttribute("FechaOrdenInicio", new java.sql.Timestamp(today.getTime()));
            
            logger.warning("Id--->" + idImplementacion);
            logger.warning("TipoProceso--->" + tipoProcesoM);
            logger.warning("NombreAdquisicion--->" + nombreAdquisicion);
            logger.warning("MontoPresupuestado--->" + montoPresupuestado);
            
            this.createAndInitRow(nvpImplementacion);
            
            getDBTransaction().commit();
            logger.warning("Se hace commit a la VO)");
            try{
                idImp = Long.parseLong(idImplementacion.toString());
                logger.warning("Id implementacion retornado--->" + idImp);
            }catch(Exception ex){
                idImp = null;
                logger.warning("Error al retornar el Id implementacion--->(valor: " + idImp + ")");
            }
            
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en agregarImplementacion " + ex.getClass() + ":" + ex.getMessage());
        }
        return idImp;
    }
    
    public Boolean obtenerImplementacionByIdImplementacion(Long idImplementacion){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerImplementacionByIdImplementacion : ");
        Integer contador = 0;
        Boolean validaImplementacion = Boolean.FALSE;
        
        try {
            if(idImplementacion == null)
            {
                validaImplementacion = Boolean.FALSE;
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsImplementacionVo = createRowSetIterator(null);
                rowsImplementacionVo.reset();
                    while (rowsImplementacionVo.hasNext()) {
                        ImplementacionVORowImpl rowL = (ImplementacionVORowImpl) rowsImplementacionVo.next();
                        contador++;
                    }
                logger.warning("Numero de rows: " + contador);
                
                try{
                    if(contador>0)
                        validaImplementacion = Boolean.TRUE;
                    else
                        validaImplementacion = Boolean.FALSE;
                }catch(Exception e){
                    logger.warning("Numero de rows: vacío");
                }
                rowsImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerImplementacionByIdImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionVOCriteria");
        }
        
        return validaImplementacion;
    }
    
    public Boolean actualizarObservacion(Long idImplementacion, String observacion){
        Boolean resultado=Boolean.TRUE;
        try{
            if(null != idImplementacion){
                Row row=  getRow(new Key(new Object[] { idImplementacion })); 
                if(null!= row){
                    logger.warning("IdImplementacion: "+ idImplementacion);
                    logger.warning("Valor anterior Observacion: "+ row.getAttribute("Observacion"));
                    if(null!=observacion){
                        row.setAttribute("Observacion", observacion);
                        logger.warning("Observacion ingresada.." + observacion);
                            try{
                                getDBTransaction().commit();
                                logger.warning("Se hace commint a la DB");
                            }catch(Exception e){            
                                logger.log(ADFLogger.ERROR, "Error al intentar guardar la Observacion ->: ", e);
                                getDBTransaction().rollback();
                                resultado = Boolean.FALSE;
                            }
                    }
                    else{
                        logger.warning("Observacion es null");
                        resultado=Boolean.FALSE;
                    }
                }
                else{
                    logger.warning("IdImplementacion: "+ idImplementacion + " no encontrado en DB");
                    resultado=Boolean.FALSE;
                 }
            }
            else{
                logger.warning("IdImplementacion es null");
                resultado=Boolean.FALSE;
            }
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en actualizarObservacion " + ex.getClass() + ":" + ex.getMessage());
        }
        
        return resultado;
    }
    
    public Boolean actualizarDatosInicio(Long idImplementacion, String tipoProceso, String nombreAquisicion, BigDecimal montoPresupuestado){
        Boolean resultado=Boolean.TRUE;
        String tipoProcesoM = tipoProceso.toUpperCase();
        String nombreAdquisicionFormat = null;
        Integer longitudNombreAdquisicion = Integer.valueOf(0);
        try{
            if(null != idImplementacion){
                Row row=  getRow(new Key(new Object[] { idImplementacion })); 
                if(null!= row){
                    longitudNombreAdquisicion = nombreAquisicion.length();
                    if(longitudNombreAdquisicion > 1024)
                        nombreAdquisicionFormat = nombreAquisicion.substring(0, 1024);
                    else
                        nombreAdquisicionFormat = nombreAquisicion;
                    
                    logger.warning("IdImplementacion: "+ idImplementacion);
                    //logger.warning("Valor anterior tipoProceso: "+ row.getAttribute("TipoProceso"));
                    //logger.warning("Valor anterior nombreAquisicion: "+ row.getAttribute("NombreAdquisicion"));
                    //logger.warning("Valor anterior montoPresupuestado: "+ row.getAttribute("MontoPresupuestado"));
                    if(null!=tipoProceso && null!=nombreAquisicion && null!=montoPresupuestado){
                        row.setAttribute("TipoProceso", tipoProcesoM);
                        row.setAttribute("NombreAdquisicion", nombreAdquisicionFormat);
                        row.setAttribute("MontoPresupuestado", montoPresupuestado);
                            try{
                                getDBTransaction().commit();
                                logger.warning("Se hace commint a la DB");
                            }catch(Exception e){            
                                logger.log(ADFLogger.ERROR, "Error al intentar guardar en el metodo actualizarDatosInicio ->: "+e.getMessage());
                                getDBTransaction().rollback();
                                resultado = Boolean.FALSE;
                            }
                    }
                    else{
                        logger.warning("Se reciben valores como null");
                        resultado=Boolean.FALSE;
                    }
                }
                else{
                    logger.warning("IdImplementacion: "+ idImplementacion + " no encontrado en DB");
                    resultado=Boolean.FALSE;
                 }
            }
            else{
                logger.warning("IdImplementacion es null");
                resultado=Boolean.FALSE;
            }
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en actualizarDatosInicio " + ex.getClass() + ":" + ex.getMessage());
        }
        
        return resultado;
    }
    
    public Boolean actualizarInicioAdquisicion(Long idImplementacion, Timestamp fechaPublicacion, 
                                               Timestamp fechaLimiteRecepcionPropuestas, BigDecimal montoPresupuestado,
                                               Integer idTcaTipoMoneda, Integer requiereLotes){
        Boolean resultado=Boolean.TRUE;
        
        try{
            if(null != idImplementacion){
                Row row=  getRow(new Key(new Object[] { idImplementacion })); 
                if(null!= row){
                    logger.warning("IdImplementacion: "+ idImplementacion);
                    logger.warning("Valor anterior Fecha Publicacion: "+ row.getAttribute("FechaPublicacion"));
                    logger.warning("Valor anterior Fecha Limite de Recepcion: "+ row.getAttribute("FechaLimiteRecepcion"));
                    logger.warning("Valor anterior Monto Presupuestado: "+ row.getAttribute("MontoPresupuestado"));
                    logger.warning("Valor anterior Id Tca Tipo Moneda: "+ row.getAttribute("IdTcaTipoMoneda"));
                    logger.warning("Valor anterior Requiere Lotes: "+ row.getAttribute("RequiereLotes"));
                    if(null!=fechaPublicacion && null!=fechaLimiteRecepcionPropuestas && null!=montoPresupuestado 
                       && null!=idTcaTipoMoneda && null!=requiereLotes){
                        row.setAttribute("FechaPublicacion", fechaPublicacion);
                        row.setAttribute("FechaLimiteRecepcion", fechaLimiteRecepcionPropuestas);
                        row.setAttribute("MontoPresupuestado", montoPresupuestado);
                        row.setAttribute("IdTcaTipoMoneda", idTcaTipoMoneda);
                        row.setAttribute("RequiereLotes", requiereLotes);
                            try{
                                getDBTransaction().commit();
                                logger.warning("Se hace commit a la DB");
                            }catch(Exception e){            
                                logger.log(ADFLogger.ERROR, "Error al intentar guardar los datos Inicio Adquisicion ->: "+e.getMessage());
                                getDBTransaction().rollback();
                                resultado = Boolean.FALSE;
                            }
                    }
                    else{
                        logger.warning("Dato Inicio Adquisicion es null");
                        resultado=Boolean.FALSE;
                    }
                }
                else{
                    logger.warning("IdImplementacion: "+ idImplementacion + " no encontrado en DB");
                    resultado=Boolean.FALSE;
                 }
            }
            else{
                logger.warning("IdImplementacion es null");
                resultado=Boolean.FALSE;
            }
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en actualizarObservacion " + ex.getClass() + ":" + ex.getMessage());
        }
        
        return resultado;
    }
    
    public Boolean actualizarIdTcaTipoMoneda(Long idImplementacion, Integer idTipoMoneda){
        Boolean resultado=Boolean.TRUE;
        try{
            if(null != idImplementacion){
                Row row=  getRow(new Key(new Object[] { idImplementacion })); 
                if(null!= row){
                    logger.warning("IdImplementacion: "+ idImplementacion);
                    logger.warning("Valor anterior IdTcaTipoMoneda: "+ row.getAttribute("IdTcaTipoMoneda"));
                    if(null!=idTipoMoneda){
                        row.setAttribute("IdTcaTipoMoneda", idTipoMoneda);
                            try{
                                getDBTransaction().commit();
                                logger.warning("Se hace commit a la DB");
                            }catch(Exception e){            
                                logger.log(ADFLogger.ERROR, "Error al intentar guardar la IdTcaTipoMoneda ->: "+e.getMessage());
                                getDBTransaction().rollback();
                                resultado = Boolean.FALSE;
                            }
                    }
                    else{
                        logger.warning("IdTcaTipoMoneda es null");
                        resultado=Boolean.FALSE;
                    }
                }
                else{
                    logger.warning("IdImplementacion: "+ idImplementacion + " no encontrado en DB");
                    resultado=Boolean.FALSE;
                 }
            }
            else{
                logger.warning("IdImplementacion es null");
                resultado=Boolean.FALSE;
            }
        }catch(Exception ex){
            logger.log(ADFLogger.ERROR, "Error en actualizarIdTcaTipoMoneda " + ex.getClass() + ":" + ex.getMessage());
        }
        
        return resultado;
    }
    
    public Integer obtenerTipoMonedaImplementacion(Long idImplementacion){    
        logger.log(ADFLogger.WARNING, "Entra en obtenerTipoMonedaImplementacion : ");
        Integer idTipoMoneda = null;
        
        try {
            if(idImplementacion == null)
            {
                logger.warning("El id de Implementacion es nulo.");
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                executeQuery();
                RowSetIterator rowsImplementacionVo = createRowSetIterator(null);
                rowsImplementacionVo.reset();
                    while (rowsImplementacionVo.hasNext()) {
                        ImplementacionVORowImpl rowL = (ImplementacionVORowImpl) rowsImplementacionVo.next();
                        if(null != rowL.getAttribute("IdTcaTipoMoneda")){
                        idTipoMoneda = (Integer)rowL.getAttribute("IdTcaTipoMoneda");                            
                        }else{
                            logger.warning("El id de la moneda es nulo.");
                        }
                    }
                    rowsImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerTipoMonedaImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionVOCriteria");
        }
        
        return idTipoMoneda;
    }
    
    public Integer obtenerRequiereLotesByIdImplementacion(Long idImplementacion){
        
        logger.log(ADFLogger.WARNING, "Entra en obtenerRequiereLotesByIdImplementacion : ");
        Integer requiereLote = null;
        
        try {
            if(idImplementacion == null)
            {
                logger.warning("El id de Implementacion es nulo.");
            }
            else{
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                executeQuery();
                
                RowSetIterator rowsImplementacionVo = createRowSetIterator(null);
                rowsImplementacionVo.reset();
                    while (rowsImplementacionVo.hasNext()) {
                        ImplementacionVORowImpl rowL = (ImplementacionVORowImpl) rowsImplementacionVo.next();
                        if(null != rowL.getAttribute("RequiereLotes")){
                        requiereLote = (Integer)rowL.getAttribute("RequiereLotes");
                        }else{
                            logger.warning("El id requiere lotes es nulo, la bandera se regresa en 0.");
                            requiereLote = 0;
                        }
                    }
                rowsImplementacionVo.closeRowSetIterator();
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerRequiereLotesByIdImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionVOCriteria");
        }
        
        return requiereLote;
    }

    public Long obtenerIdImplementacionByIdOperacion(Long idOperacion){
        logger.warning("Entra en obtenerIdImpleentacionByIdOperacion");
        Long idImplementacion = null;
        
        try {
            if(idOperacion == null)
            {
                logger.warning("El id de Operacion es nulo.");
            }
            else{
                logger.warning("id Operacion :" + idOperacion);
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("ImplementacionByIdOperacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdOperacion", idOperacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                logger.warning("Ejecuta criterio de busqueda.");
                Row rowLast = null;
                RowSetIterator rowsImplementacionVo = getRowSetIterator();
                
                if (null != rowsImplementacionVo.last()) {
                    
                    rowLast = rowsImplementacionVo.last();

                    if (null != rowLast.getAttribute("Id")) {
                        idImplementacion = (Long) rowLast.getAttribute("Id");
                        logger.warning("El Id de implementacion es :" + idImplementacion);
                    } else {
                        logger.warning("El Id de implementacion es nulo.");
                    }
                    
                } else {
                    logger.warning("No se encontro registro de implementacion asociado a la operacion.");
                }
                                
                } 
            }
        catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerIdImplementacionByIdOperacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionByIdOperacionVOCriteria");
        }
        return idImplementacion;
    }
    /**
     * Returns the variable value for varIdImplementacion.
     * @return variable value for varIdImplementacion
     */
    public Long getvarIdImplementacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdImplementacion");
    }

    /**
     * Sets <code>value</code> for variable varIdImplementacion.
     * @param value value to bind as varIdImplementacion
     */
    public void setvarIdImplementacion(Long value) {
        ensureVariableManager().setVariableValue("varIdImplementacion", value);
    }

    /**
     * Returns the variable value for varIdOperacion.
     * @return variable value for varIdOperacion
     */
    public Long getvarIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("varIdOperacion", value);
    }
}

