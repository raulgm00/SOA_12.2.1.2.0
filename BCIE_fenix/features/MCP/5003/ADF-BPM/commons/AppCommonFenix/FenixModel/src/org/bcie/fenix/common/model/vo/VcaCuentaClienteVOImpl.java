package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.VcaCuentaClienteVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 17 19:55:27 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VcaCuentaClienteVOImpl extends ViewObjectImpl implements VcaCuentaClienteVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public VcaCuentaClienteVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for pCodigoCliente.
     * @return bind variable value for pCodigoCliente
     */
    public String getpCodigoCliente() {
        return (String) getNamedWhereClauseParam("pCodigoCliente");
    }

    /**
     * Sets <code>value</code> for bind variable pCodigoCliente.
     * @param value value to bind as pCodigoCliente
     */
    public void setpCodigoCliente(String value) {
        setNamedWhereClauseParam("pCodigoCliente", value);
    }

    /**
     * Returns the bind variable value for pMoneda.
     * @return bind variable value for pMoneda
     */
    public String getpMoneda() {
        return (String) getNamedWhereClauseParam("pMoneda");
    }

    /**
     * Sets <code>value</code> for bind variable pMoneda.
     * @param value value to bind as pMoneda
     */
    public void setpMoneda(String value) {
        setNamedWhereClauseParam("pMoneda", value);
    }
    
    public void ejecutarBusquedaCuentas(String pCodigoCliente, String pMoneda){            
        logger.warning("Inicia metodo ejecutarBusquedaCuentas parametros recuperados BHQ->"+pCodigoCliente+" moneda->"+pMoneda);
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        if(null == pCodigoCliente || null == pMoneda){
            logger.warning("Parametros de query son NULL");
            return;
        }
        
        setpCodigoCliente(pCodigoCliente);
        setpMoneda(pMoneda);
        
        logger.warning("Ejecutando query");
        executeQuery();
        logger.warning("Numero de cuentas asociadas al cliente encontrados: " + getEstimatedRowCount());
        
        if(getEstimatedRowCount() == 1 ){
            logger.warning("Solo se encontro una cuenta se seteara como current");
            setCurrentRow(first());
        }else{
             logger.warning("no se ara un set de cuenta como current");
        }
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo ejecutarBusquedaCuentas con una duracion de: "+tiempo+" segundos");
    }
    
    
    public Row obtenerFilaActual() {
        logger.warning("Inicia metodo obtenerFilaActual en VcaCuentasCliente");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        Row row = null;
        if (getCurrentRow() != null) {
            logger.warning("Cuenta como current en VcaCuentasCliente->" + getCurrentRow().getAttribute("Cuenta"));
            row = getCurrentRow();
        } else {
            logger.warning("No hay un current en la vo de VcaCuentasCliente ");
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo obtenerFilaActual en VcaCuentasCliente con una duracion de: "+tiempo+" segundos");
        return row;
    }
    
    
    public String obtenerCuenta(String pCodigoCliente, String pMoneda){
            String resultado=null;
        if(null!=pCodigoCliente && null!=pMoneda){
                logger.warning("registros obtenidos: " + getEstimatedRowCount());
                logger.warning("Inicia metodo ejecutarBusquedaCuentas parametros recuperados BHQ->"+pCodigoCliente+" moneda->"+pMoneda);
                setpCodigoCliente(pCodigoCliente);
                setpMoneda(pMoneda);
                
                logger.warning("Ejecutando query");
                executeQuery();
                logger.warning("Numero de cuentas asociadas al cliente encontrados: " + getEstimatedRowCount());

                if(getEstimatedRowCount()>0 && getEstimatedRowCount()<2){
                    VcaCuentaClienteVORowImpl row=(VcaCuentaClienteVORowImpl)getRowAtRangeIndex(0);
                    if(null!=row.getCuenta()){
                            resultado=row.getCuenta();
                        }
                    else{
                            logger.warning("No se puede obtener registro");
                        }
                    Row row1=getRowAtRangeIndex(0);
                    if(null!= row1){
                            logger.warning("registro obtneido: " + (String)row1.getAttribute("CodigoCliente"));
                        }
                    else{
                            logger.warning("No se puede obtener registro");
                        }
                }
            }
        else{
                logger.warning("No tiene los parametros suficientes");
            }
        return resultado;
        }
}

