package org.bcie.fenix.common.model.vo;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.Row;import oracle.jbo.ViewCriteria;import oracle.jbo.server.ViewObjectImpl;import org.bcie.fenix.common.model.am.FenixAMImpl;import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;import org.bcie.fenix.common.model.vo.common.VtaProductoDesemFlexcubeVO;// ---------------------------------------------------------------------// ---    File generated by Oracle ADF Business Components Design Time.// ---    Wed Nov 02 16:26:25 CST 2016// ---    Custom code may be added to this class.// ---    Warning: Do not modify method signatures of generated methods.// ---------------------------------------------------------------------public class VtaProductoDesemFlexcubeVOImpl extends ViewObjectImpl implements VtaProductoDesemFlexcubeVO {       private static ADFLogger logger = null;          public VtaProductoDesemFlexcubeVOImpl() {        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }       }    public Boolean cargarDastosVCAProducto(Long idOperacion, String tipoTaza,  Long idDesembolso){        logger.warning("*Inf, Inicia metodo cargarDstos en vtaProductoDesemFlexcube");        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        Boolean respuesta = Boolean.FALSE;        FenixAMImpl fenixAMImpl = null;        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =                            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();        String programa=null;        try{            if(null!=idDesembolso){                programa= fenixGestorDesembolsosAMImpl.getContratoDesembolsoQueryVO().obtencionPrograma(idDesembolso);                }        }catch(Exception ex){                logger.log(ADFLogger.WARNING, "*** Error ->" + ex.getClass() + ":" + ex.getMessage());                 }                        logger.warning("*Inf, idOperacion: "+idOperacion);            logger.warning("*Inf, idDesembolso: "+idDesembolso);            logger.warning("*Inf, tipoTaza: "+tipoTaza);            logger.warning("*Inf, programa: "+programa);                        if(idOperacion == null || tipoTaza == null){                logger.warning("***Error, parametros requeridos idOperacion o tipoTaza son resueltos a null");                               return Boolean.FALSE;            }                                setpIdOperacion(idOperacion);                setpTipoTaza(tipoTaza);                if(null!=programa){                setpVarPrograma(programa);                    }                executeQuery();                                if(getEstimatedRowCount() > 0){                    logger.warning("*Inf, Numero de registos encontrados: "+getEstimatedRowCount() );                    respuesta = Boolean.TRUE;                }else{                    logger.warning("*Inf, El executeQuery debuelve cero rows");                 }                TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia        logger.warning("*Inf, Termina metodo cargarDstos en vtaProductoDesemFlexcube con una duracion de: "+tiempo+" segundos");            return respuesta;        }    public String recuperarIdByDescripcion(String descripcion, Long idOperacion, String tipoTaza, Long idDesembolso){        logger.warning("*Inf, Inicia metodo recuperarIdByDescripcion en vtaProductoDesemFlexcube");            String id = null;            Row filaRecuperada = null;                    ViewCriteria criteria = null;            FenixAMImpl fenixAMImpl = null;            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =                                (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();            String programa=null;            try{                if(null!=idDesembolso){                    programa= fenixGestorDesembolsosAMImpl.getDatosContratoDesembolsoVO().obtencionPrograma(idDesembolso);                    }            }catch(Exception ex){                    logger.log(ADFLogger.WARNING, "*** Error ->" + ex.getClass() + ":" + ex.getMessage());                     }            logger.warning("*Inf, idDesembolso: "+idDesembolso);                logger.warning("*Inf, idOperacion: "+idOperacion);            logger.warning("*Inf, tipoTaza: "+tipoTaza);            logger.warning("*Inf, programa: "+programa);            logger.warning("*Inf, descripcion: "+descripcion);                                        if(idOperacion == null || tipoTaza == null || descripcion == null){                logger.warning("***Error, parametros requeridos son resueltos a null");                               return null;            }                                try{                                      criteria = getViewCriteriaManager().getViewCriteria("filtrarByDescripcionVC");                criteria.ensureVariableManager().setVariableValue("pDescripcion", descripcion.trim());                applyViewCriteria(criteria);                                setpIdOperacion(idOperacion);                setpTipoTaza(tipoTaza);                setpVarPrograma(programa);                                executeQuery();                            if(getEstimatedRowCount() > 0){                                                       filaRecuperada = first();                    logger.warning("Id recuperado ->"+filaRecuperada.getAttribute("Id"));                                    id = (String)filaRecuperada.getAttribute("Id");                }else{                     logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");                    }                            }catch(Exception e){                logger.log(ADFLogger.WARNING, "*** Error ->" + e.getClass() + ":" + e.getMessage());                 }finally{               getViewCriteriaManager().removeApplyViewCriteriaName("filtrarByDescripcionVC");            }                        logger.warning("*Inf, termina metodo recuperarIdByDescripcion en vtaProductoDesemFlexcube");            return id;        }  /**-------------- Accesors  ---------------**/    /**     * Returns the bind variable value for pIdOperacion.     * @return bind variable value for pIdOperacion     */    public Long getpIdOperacion() {        return (Long) getNamedWhereClauseParam("pIdOperacion");    }    /**     * Sets <code>value</code> for bind variable pIdOperacion.     * @param value value to bind as pIdOperacion     */    public void setpIdOperacion(Long value) {        setNamedWhereClauseParam("pIdOperacion", value);    }    /**     * Returns the bind variable value for pTipoTaza.     * @return bind variable value for pTipoTaza     */    public String getpTipoTaza() {        return (String) getNamedWhereClauseParam("pTipoTaza");    }    /**     * Sets <code>value</code> for bind variable pTipoTaza.     * @param value value to bind as pTipoTaza     */    public void setpTipoTaza(String value) {        setNamedWhereClauseParam("pTipoTaza", value);    }    /**     * Returns the variable value for pDescripcion.     * @return variable value for pDescripcion     */    public String getpDescripcion() {        return (String) ensureVariableManager().getVariableValue("pDescripcion");    }    /**     * Sets <code>value</code> for variable pDescripcion.     * @param value value to bind as pDescripcion     */    public void setpDescripcion(String value) {        ensureVariableManager().setVariableValue("pDescripcion", value);    }    /**     * Returns the bind variable value for pVarPrograma.     * @return bind variable value for pVarPrograma     */    public String getpVarPrograma() {        return (String) getNamedWhereClauseParam("pVarPrograma");    }    /**     * Sets <code>value</code> for bind variable pVarPrograma.     * @param value value to bind as pVarPrograma     */    public void setpVarPrograma(String value) {        setNamedWhereClauseParam("pVarPrograma", value);    }}