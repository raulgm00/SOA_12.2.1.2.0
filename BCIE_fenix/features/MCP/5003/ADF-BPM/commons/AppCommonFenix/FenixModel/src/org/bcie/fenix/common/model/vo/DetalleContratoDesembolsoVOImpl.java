package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.commonbo.MontoType;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsobo.ContratoDesembolso;
import org.bcie.desembolsobo.EstimadoDesembolsoType;
import org.bcie.desembolsomo.ConsultarDesembolsoBPELRequestType;
import org.bcie.desembolsomo.ConsultarDesembolsoBPELResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DetalleContratoDesembolsoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 14 21:11:26 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DetalleContratoDesembolsoVOImpl extends ViewObjectImpl implements DetalleContratoDesembolsoVO {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(TccTerminoVOImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public DetalleContratoDesembolsoVOImpl() {
    }
    
    public void buscarDetalleContratoDesembolsoPorId(Long idContratoDesembolso){
        logger.warning("Entra buscarDetalleContratoDesembolsoPorId");
        logger.warning("idContratoDesembolso :"+idContratoDesembolso);
        Row row = null;
        ViewCriteria vc = null;
        try{
            vc = getViewCriteria("busquedaPorIdContratoDesembolso");
            vc.ensureVariableManager().setVariableValue("pIdContratoDesembolso", idContratoDesembolso);
            applyViewCriteria(vc);
            executeQuery();
            
            if(this.getEstimatedRowCount() > 0){
                logger.warning("Se encuentra row");
                row = first();
                setCurrentRow(row);
                
                getCurrentRow().setAttribute("MontoProgramadoMesVigente", obtenerMontoProgramadoMesVigente(idContratoDesembolso));
            }else{
                logger.warning("No se encontro row");
            }
            
        }catch(Exception e){
            logger.warning("Error buscarDetalleContratoDesembolsoPorId :", e);
        }finally{
            logger.warning("Se remueve criterio de busqueda");
            vc.getViewCriteriaManager().removeApplyViewCriteriaName("busquedaPorIdContratoDesembolso");
        }
        logger.warning("Fuera buscarDetalleContratoDesembolsoPorId");
    }
    
    private String getDesembolsoServiceWsdl() {
        FenixAMImpl fenixAM = (FenixAMImpl) getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);
        return wsdl;
    }
    
    private BigDecimal obtenerMontoProgramadoMesVigente(Long idContratoDesembolso) throws Exception {
        logger.warning("Entrando en consultarMontoProgramadoMesVigente");
        logger.warning("IdContrato: " + idContratoDesembolso);
        
        ContratoDesembolso contratoDesembolso = null;
        EstimadoDesembolsoType estimadoDesembolso = null;
        ConsultarDesembolsoBPELRequestType request = null;
        ConsultarDesembolsoBPELResponseType response = null;
        Boolean programado = null;
        BigDecimal montoProgramado = null;

        if (null == idContratoDesembolso) {
            logger.warning("Parametro idContrato requerido es NULL");
            return BigDecimal.ZERO;
        }
        
        
        String wsdl = getDesembolsoServiceWsdl();
        DesembolsoPTSOAP12BindingQSService desembolsoService = null;
        DesembolsoPT desembolsoPT = null;

        try {
            desembolsoService = IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();
            
            request = new ConsultarDesembolsoBPELRequestType();
            request.setIdDesembolso(idContratoDesembolso);
            
            java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_DESEMBOLSO);
            response = desembolsoPT.consultarDesembolso(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_DESEMBOLSO, horaInicio);
            
            if (null != response && null != response.getResultado()) {
                switch(response.getResultado().getResult()) {
                case OK:
                    if (null != response.getContratoDesembolso()) {
                        contratoDesembolso = response.getContratoDesembolso();
                        
                        programado = contratoDesembolso.isProgramado();

                        if (null != contratoDesembolso.getEstimadoDesembolso()) {
                            estimadoDesembolso = contratoDesembolso.getEstimadoDesembolso();
                            if (null != estimadoDesembolso.getFrecuencia()) {
                                if (contratoDesembolso.getMonto() != null) {
                                    for (MontoType montoType : contratoDesembolso.getMonto()) {
                                        if (montoType.getTipo().getDescripcionCorta().equalsIgnoreCase("PROGRAMADO")) {
                                            if (montoType.getImporte() != null) {
                                                montoProgramado = montoType.getImporte();
                                                break;
                                            } else {
                                                logger.warning("Inf, *Importante! El importe del monto programado es resuelto a NULL");
                                            }
                                        }
                                    }
                                } else {
                                    logger.warning("Inf, *Importante! El atributo Monto del objeto response es resuelto a NULL");
                                }
                            } else {
                                logger.warning("Objeto Frecuencia de servicio Consultar desembolso es NULL");
                            }
                        } else {
                            logger.warning("Objeto EstimadoDesembolso de servicio Consultar desembolso es NULL");
                        }
                    } else {
                        logger.warning("Objeto ContratoDesembolso() de servicio Consultar desembolso es NULL");
                    }
                    break;
                }
            }
            
        } catch (Exception e) {
            throw(e);
        }

        logger.warning("montoProgramado obtenido: " + montoProgramado);

        return montoProgramado;
    }
    
    /**
     * Returns the variable value for pIdContratoDesembolso.
     * @return variable value for pIdContratoDesembolso
     */
    public Long getpIdContratoDesembolso() {
        return (Long) ensureVariableManager().getVariableValue("pIdContratoDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pIdContratoDesembolso.
     * @param value value to bind as pIdContratoDesembolso
     */
    public void setpIdContratoDesembolso(Long value) {
        ensureVariableManager().setVariableValue("pIdContratoDesembolso", value);
    }
}

