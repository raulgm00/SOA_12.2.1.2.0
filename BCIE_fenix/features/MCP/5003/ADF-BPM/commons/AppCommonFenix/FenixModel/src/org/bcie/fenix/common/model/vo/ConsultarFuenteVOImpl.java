package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ConsultarFuenteVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 23 17:13:43 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarFuenteVOImpl extends ViewObjectImpl implements ConsultarFuenteVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultarFuenteVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean validarFuentesSinIdLineaPasiva(Long idLineaCredito){
        logger.warning("Inicia metodo validarFuentesSinIdLineaPasiva.");
        Boolean esValido = Boolean.FALSE;
        ViewCriteria vc = null;
        String idLineaPasiva = null;
        
        if(null == idLineaCredito){
            logger.warning("Parametor idLinePasiva requerido es NULL.");
            return null;
        }
        
        try{  
            logger.warning("Ejecutando criteria de busqueda de Fuentes.");
            vc = this.getViewCriteriaManager().getViewCriteria("ConsultarFuentePorIdLineaCreditoVC");
            vc.ensureVariableManager().setVariableValue("pIdLineaCredito", idLineaCredito);
            this.applyViewCriteria(vc);
            this.executeQuery();
        }catch(Exception e){
            logger.warning("ERROR al ejecutar el crietria ContratoDesembolsoVOCriteria.", e);
            return null;
        }
        
        logger.warning("Registros filtrados obtenidos: " + getEstimatedRowCount());    
        if(getEstimatedRowCount() > 0){
            for(Row row : getAllRowsInRange()){
                logger.warning("Evaluando registro.");
                idLineaPasiva = (String) row.getAttribute("IdLineaPasiva");
                if(null == idLineaPasiva || idLineaPasiva.equals("")){
                    logger.warning("Registro NO tiene IDLINEAPASIVA.");
                    esValido = Boolean.FALSE;
                    break;
                }else{
                    logger.warning("Fuene contiene IDLINEAPASIVA.");
                    esValido = Boolean.TRUE;
                }
            }
        }else{
            logger.warning("No se obtuvieron registros de Fuentes.");
            esValido = Boolean.TRUE;
        }
                    
        //Eliminamos el ViewCriteria
        this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarFuentePorIdLineaCreditoVC");
        logger.warning("Termina metodo validarFuentesSinIdLineaPasiva.");
        return esValido;
    }
    
    /**
     * Returns the variable value for pIdLineaCredito.
     * @return variable value for pIdLineaCredito
     */
    public Long getpIdLineaCredito() {
        return (Long) ensureVariableManager().getVariableValue("pIdLineaCredito");
    }

    /**
     * Sets <code>value</code> for variable pIdLineaCredito.
     * @param value value to bind as pIdLineaCredito
     */
    public void setpIdLineaCredito(Long value) {
        ensureVariableManager().setVariableValue("pIdLineaCredito", value);
    }
}

