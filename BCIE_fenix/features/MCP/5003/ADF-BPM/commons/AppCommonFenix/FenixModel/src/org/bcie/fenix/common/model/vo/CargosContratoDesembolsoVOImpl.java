package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.util.Date;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.comisionbo.Comision;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsobo.CargoType;
import org.bcie.desembolsobo.ContratoDesembolso;
import org.bcie.desembolsobo.ProductoDesembolsoType;
import org.bcie.desembolsomo.ConsultarCargoComisionRequestType;
import org.bcie.desembolsomo.ConsultarCargoComisionResponseType;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.CargosContratoDesembolsoVO;
import org.bcie.resultbo.Resultado;
import org.bcie.resultbo.SuccessType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 10 18:27:07 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CargosContratoDesembolsoVOImpl extends ViewObjectImpl implements CargosContratoDesembolsoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public CargosContratoDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    public Boolean consultarCargosWS(Long idDesembolso, String codigoExterno, Integer modalidad) {
        logger.warning("Inside consultarCargosWS.");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        logger.warning("idDesembolso " + idDesembolso);
        logger.warning("codigoExterno " + codigoExterno);
        
        //Se limpia VO.
        this.executeQuery();
        logger.warning("Se limpia tabla - Cargos por contrato de desembolso.");
        
        Boolean result = Boolean.TRUE;
        try {
            FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DESEMBOLSO);
            
            DesembolsoPTSOAP12BindingQSService desembolsoPTSOAP12BindingQSService = IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            DesembolsoPT desembolsoPT = desembolsoPTSOAP12BindingQSService.getDesembolsoPTSOAP12BindingQSPort();
            
            ConsultarCargoComisionRequestType request = new ConsultarCargoComisionRequestType();
            ContratoDesembolso contratoDesembolso = new ContratoDesembolso();
            contratoDesembolso.setIdDesembolso(idDesembolso);
            ProductoDesembolsoType productoDesembolsoType = new ProductoDesembolsoType();
            productoDesembolsoType.setCodExterno(codigoExterno);
            contratoDesembolso.setProducto(productoDesembolsoType);
            request.setDesembolso(contratoDesembolso);
            
            Date horaInicio = ModelUtils.logStartWS(logger, request, "consultarCargoComision");
            ConsultarCargoComisionResponseType response = desembolsoPT.consultarCargoComision(request);
            ModelUtils.logEndWS(logger, response, "consultarCargoComision", horaInicio);
            
            if (response != null) {
                Resultado resultado = response.getResultado();
                
                if(resultado != null) {
                    SuccessType successType = resultado.getResult();
                    
                    if (successType != null && successType.value()!= null && successType.value().equalsIgnoreCase("OK")) {
                        this.loadCargosContratoDesembolso(response.getDesembolso().getCargo(), idDesembolso, modalidad);
                    } else {
                        logger.warning("error successType " + successType);
                        result = Boolean.FALSE;
                    }
                } else {
                    logger.warning("error resultado");
                    result = Boolean.FALSE;
                }
            } else {
                logger.warning("error response");
                result = Boolean.FALSE;
            }
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, e.getMessage());
            result = Boolean.FALSE;
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia            
        logger.warning("*Inf, Termina metodo consultarCargosWS con una duracion de: "+tiempo+" segundos");
        return result;
    }
    
    private void loadCargosContratoDesembolso(List<CargoType> cargos, Long idDesembolso, Integer modalidad) {
        logger.warning("*Inf, Inicia metodo loadCargosContratoDesembolso");
      
        aplicarGuardado(idDesembolso);
        
        Boolean montoObtenidO=Boolean.FALSE;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        logger.warning("*inf, Numero de rows existentes en la Vo " + getEstimatedRowCount());
        logger.warning("*inf, Limpiando Vo ");
        this.executeQuery(); //se eliminan los row creados anteriormente para no duplicar registros       
        FenixGestorDesembolsosAMImpl fenixDesembolsoAMImpl =
            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
                
        RowSetIterator rsi = this.getRowSetIterator();        
        if (rsi != null) {
            logger.warning("*Inf, Numero de cargos recibidos " + cargos.size() +" se cargaran a la VO");
            int contador = 1;
            for (CargoType cargo : cargos) {   
                Row row = rsi.createRow();
                
                
               /* if(null!=cargo.getId()){
                        logger.warning("El registro "+contador+" de cargos recuperado tiene un Id : "+cargo.getId());
                    if(cargo.getId().compareTo(0L)!=0){
                            row.setAttribute(CargosContratoDesembolsoVORowImpl.ID, cargo.getId());
                        }
                }else{
                        logger.warning("El registro "+contador+" no tiene Id");
                    }
                */
                
                montoObtenidO=Boolean.FALSE;
                row.setAttribute(CargosContratoDesembolsoVORowImpl.IDCONTRATODESEMBOLSO, idDesembolso);// TODO preguntar el dato exacto
                row.setAttribute(CargosContratoDesembolsoVORowImpl.COMPONENTE, cargo.getCodigoExterno());
                row.setAttribute(CargosContratoDesembolsoVORowImpl.DESCRIPCION, cargo.getDescripcion());
               // if(null!=cargo.getMonto()){
                  //      row.setAttribute(CargosContratoDesembolsoVORowImpl.MONTOCARGO, cargo.getMonto().getImporte());        
                //} else{
                    Map obtuvoMonto=new HashMap();
                       obtuvoMonto= fenixDesembolsoAMImpl.getCargoDesemnolsoVO().obtenerMonto(idDesembolso, cargo.getCodigoExterno(), cargo.getDescripcion());
                    if((Boolean)obtuvoMonto.get("respuesta")){
                            row.setAttribute(CargosContratoDesembolsoVORowImpl.ID,(Long) obtuvoMonto.get("claveCargo"));
                            row.setAttribute(CargosContratoDesembolsoVORowImpl.MONTOCARGO,(BigDecimal) obtuvoMonto.get("monto"));
                            montoObtenidO=Boolean.TRUE;
                            logger.warning("El registro "+contador+" de cargos se le asignara el Id: "+obtuvoMonto.get("claveCargo"));
                        }
                    else{
                            row.setAttribute(CargosContratoDesembolsoVORowImpl.ID, null);
                            logger.warning("El registro "+contador+" de cargos no tiene un registro en Base se le asignara un id: 0");
                        }
                    //}
                row.setAttribute(CargosContratoDesembolsoVORowImpl.FECHAREGISTRO, new Date());
                row.setAttribute(CargosContratoDesembolsoVORowImpl.BANESTATUS, true);
                contador = contador +1;
                if(null!=modalidad){
                        if(modalidad.compareTo(1)==0 && montoObtenidO){
                                rsi.insertRow(row);
                            }
                        else{
                            if(modalidad.compareTo(1)!=0){
                                    rsi.insertRow(row);
                                }
                            }
                    }
                else{
                        rsi.insertRow(row);
                    }


            }
        }
        rsi.closeRowSetIterator();
        logger.warning("*Inf, Termina metodo loadCargosContratoDesembolso");
    }
    
    public Boolean aplicarGuardado(Long idContrato){
        setRangeSize(-1);
            FenixAMImpl fenixAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixGestorDesembolsosAMImpl fenixDesembolsoAMImpl =
                (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
           Boolean registrarCargo=Boolean.TRUE; 
        logger.warning("clave contrato " +idContrato);
        Boolean respuesta=Boolean.TRUE;
        
        if(getEstimatedRowCount() == 0){
            logger.warning("*Inf, No hay registros a en CargoContratoDesembolsoVo no se realizara commit");
            return respuesta;
            }
        
        
        Row[] cargosActivos= getAllRowsInRange();
        
        logger.warning("*Inf, numero de registros de  cargos : " +getEstimatedRowCount());
        logger.warning("*Inf, iterando sobre registros...");
        int contador = 1;
        for(Row row:cargosActivos){
            
                Map obtuvoMonto=new HashMap();
                   obtuvoMonto= fenixDesembolsoAMImpl.getCargoDesemnolsoVO().obtenerMonto(idContrato, (String)row.getAttribute("Componente"), (String)row.getAttribute("Descripcion"));
                
                logger.warning("*Inf, buscarndo id para el registro " +contador);
                
                if((Boolean)obtuvoMonto.get("respuesta")){
                        row.setAttribute(CargosContratoDesembolsoVORowImpl.ID,(Long) obtuvoMonto.get("claveCargo"));
                     /*
                         logger.warning("*Inf, el monto asignado al registro es  " +row.getAttribute("MontoCargo"));
                     if( row.getAttribute("MontoCargo") == null || ((Double)row.getAttribute("MontoCargo")).compareTo(0.00)==0)                        
                         row.setAttribute(CargosContratoDesembolsoVORowImpl.MONTOCARGO,(BigDecimal) obtuvoMonto.get("monto"));                           
                       */
                        logger.warning("El registro "+contador+" de cargos se le asignara el Id: "+obtuvoMonto.get("claveCargo"));
                    }
                else{
                        row.setAttribute(CargosContratoDesembolsoVORowImpl.ID, null);
                        logger.warning("El registro "+contador+" de cargos no tiene un registro en Base ");
                    }
                 

            if(null!= (Long)row.getAttribute("Id")){   
                    logger.warning("*Inf, el registro numero "+contador+ " tiene un id de cargo : "+row.getAttribute("Id"));
                if(null!= row.getAttribute("MontoCargo")){
                    if(((Double)row.getAttribute("MontoCargo")).compareTo(0.00)==0){
                            logger.warning("aplica eliminacion de registro");
                            registrarCargo=fenixDesembolsoAMImpl.getCargoDesemnolsoVO().modificarAgregarCargo((Long)row.getAttribute("Id"), 
                                                                                Boolean.FALSE, BigDecimal.ZERO, (String)row.getAttribute("Componente"), (String)row.getAttribute("Descripcion"), idContrato);
                        } else{
                            Double montoaplicado=(Double)row.getAttribute("MontoCargo");
                        String montoDato= Double.toString(montoaplicado);
                            BigDecimal aplicaMonto= new BigDecimal(montoDato);
                            registrarCargo=fenixDesembolsoAMImpl.getCargoDesemnolsoVO().modificarAgregarCargo((Long)row.getAttribute("Id"), 
                                                                                Boolean.FALSE, aplicaMonto, (String)row.getAttribute("Componente"), (String)row.getAttribute("Descripcion"), idContrato);
                        }
                
                }else{
                        logger.warning("aplica eliminacion de registro");
                        registrarCargo=fenixDesembolsoAMImpl.getCargoDesemnolsoVO().modificarAgregarCargo((Long)row.getAttribute("Id"), 
                                                                            Boolean.FALSE, BigDecimal.ZERO, (String)row.getAttribute("Componente"), (String)row.getAttribute("Descripcion"), idContrato);
                    }
                    logger.warning("registrarCargo contrato " +registrarCargo);
                } else{
                    logger.warning("*Inf, el registro numero "+contador+ " no tiene un id de cargo ");                                
                
                if(null!= row.getAttribute("MontoCargo")){
                        if(((Double)row.getAttribute("MontoCargo")).compareTo(0.00)==0){
                            logger.warning("No tiene monto no aplica registro");
                            }
                        else{
                                Double montoaplicado=(Double)row.getAttribute("MontoCargo");
                                String montoDato= Double.toString(montoaplicado);
                                BigDecimal aplicaMonto= new BigDecimal(montoDato);
                                // se crea registro
                                logger.warning("*Inf, se guardara en BD el registro de cargo num "+contador+ " que se muestra en pantalla ");
                                registrarCargo=fenixDesembolsoAMImpl.getCargoDesemnolsoVO().modificarAgregarCargo((Long)row.getAttribute("Id"), 
                                                                                    Boolean.TRUE, aplicaMonto, (String)row.getAttribute("Componente"), (String)row.getAttribute("Descripcion"), idContrato);
                                logger.warning("se creo el cargo contrato? " +registrarCargo);
                            }
                    }else{
                            logger.warning("No tiene monto no aplica registro");
                        }
                }
            contador = contador +1;
            }
            logger.warning("*Inf, Realizando commit en cargos...");
            try {
                logger.warning("Ejecuta primer commit");
                getDBTransaction().commit();
            } catch (Exception e) {
                try {
                    logger.warning("Ejecuta segundo commit");
                    this.getDBTransaction().commit();
                } catch (Exception ex) {
                    logger.severe("Error al realizar Commit", e);
                    respuesta = Boolean.FALSE;
                }
            }
            /* if (!respuesta) {
                try {
                    getDBTransaction().rollback();
                } catch (Exception ex) {
                    logger.severe("Error al realizar Rollback", ex);
                }
            } */
        return respuesta;
        }
    
    public Boolean guardarCargos(){
        logger.warning("Entra en guardarCargos");
        Boolean esGuardarCargos = Boolean.FALSE;
        Long idContrato = null;
        try{
            logger.warning("Numero de rows." + getEstimatedRowCount());
            Row row = this.first();
            if(null != row){
                if(null != row.getAttribute("IdContratoDesembolso")){
                    idContrato = (Long)row.getAttribute("IdContratoDesembolso");
                    esGuardarCargos = aplicarGuardado(idContrato);
                    logger.warning("Valor del contrato." + idContrato);
                }else{
                    logger.warning("El id de contrato es nulo.");
                }
            }else{
                logger.warning("No se recupero registro.");
            }
        }catch(Exception e){
            logger.warning("Error al guardar los cargos");
        }
        logger.warning("Datos guardados." + esGuardarCargos);
        return esGuardarCargos;
    }
    
    public Double recuperarTotalCargosDesembolso() {
        logger.warning("*Inf, inicia metodo recuperarTotalCargosDesembolso");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        Double totalCargos = null;

        if (getCurrentRow() != null) {
            totalCargos = (Double) getCurrentRow().getAttribute("Total");
            logger.warning("*Inf Monto Cargos recuperado del Current : " + totalCargos);
        } else {
            logger.warning("*Inf Important!, No se encontro un current en CargosContratoDesembolsoVO");
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("*Inf, termina metodo recuperarTotalCargosDesembolso con una duracion de: " + tiempo +
                       " segundos");
        return totalCargos;
    }
    
    
    
    
}

