package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.ComisionesNoPagadasVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Dec 15 12:13:25 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComisionesNoPagadasVOImpl extends ViewObjectImpl implements ComisionesNoPagadasVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ComisionesNoPagadasVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void comisionesNoPagadas(Row row) {
        logger.warning("inside comisionesNoPagadas.");
        
        Row rowComisiones = null;
        
        if(row.getAttribute("Id") != null){
            
            if(buscaDuplicado(row.getAttribute("Id"))) {
                logger.warning("Id de Comision ya existe. " + row.getAttribute("Id"));
            } else {
                rowComisiones = this.createRow();
                rowComisiones.setAttribute("Id", row.getAttribute("Id"));
                rowComisiones.setAttribute("Descripcion", row.getAttribute("Nombre"));
                rowComisiones.setAttribute("MontoComision", row.getAttribute("MontoComision"));
                rowComisiones.setAttribute("CodigoContrato", row.getAttribute("CodigoContrato"));
                rowComisiones.setAttribute("IdTcaEstadoTcc", row.getAttribute("IdTcaEstadoTcc"));
                rowComisiones.setAttribute("IdTcaSubEstadoTcc", row.getAttribute("IdTcaSubEstadoTcc"));
                this.insertRow(rowComisiones);
            }
        }
    }
    
    public Boolean buscaDuplicado(Object idComision) {
        logger.warning("inside buscaDuplicado.");
        
        Boolean result = Boolean.FALSE;
        Long idComisionIngresar = (Long) idComision;
        
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row rowIterator = iterator.next();
            
            Long idComisionIter = (Long) rowIterator.getAttribute("Id");
            
            if (idComisionIter.compareTo(idComisionIngresar) == 0) {
                result = Boolean.TRUE;
                logger.warning("result: " + result);
                return result;
            } else {
                result = Boolean.FALSE;
            }
        }
        iterator.closeRowSetIterator();
        
        logger.warning("result: " + result);
        return result;
    }
    
    public void limpiarComisionesNoPagadas(){
        logger.warning("inside limpiarComisionesNoPagadas.");
        this.clearCache();
    }
    
    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

