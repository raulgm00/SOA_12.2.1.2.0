package org.bcie.fenix.common.model.vo;

import java.util.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.TransferenciasConInstruccionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 21 13:57:34 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferenciasConInstruccionVOImpl extends ViewObjectImpl implements TransferenciasConInstruccionVO {
    
    private static ADFLogger logger = null;
    
    public TransferenciasConInstruccionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
 
 
    public void guardarDatosTransferencia(Row transferenciaRow){
      logger.warning("*Inf, Inicia metodo guardarDatosTransferencia");
       
        Long idTransferencia = (null == transferenciaRow.getAttribute("IdTransferencia")) ? null
                             : (Long)transferenciaRow.getAttribute("IdTransferencia");
        
        if(idTransferencia != null){
            Row transferenciaRecuperada =  recuperarTransferenciaById(idTransferencia);
            
            if(transferenciaRecuperada == null){
                
                
                nuevaTransferencia(transferenciaRow);
           
            }else{
                actualizarTransferencia(transferenciaRecuperada, transferenciaRow);
            }
        }else{
            logger.warning("*Error, Parametro idTransferencia resuelto a Null");            
        }
      logger.warning("*Inf, Termina metodo guardarDatosTransferencia");
    }
 

    public void nuevaTransferencia(Row transferenciaRow){                                                            
        logger.warning("*Inf, Inicia metodo nuevaTransferencia");
        try{
            NameValuePairs nvpTransferencia = new NameValuePairs();    
            nvpTransferencia.setAttribute("Id", transferenciaRow.getAttribute("IdTransferencia"));
            nvpTransferencia.setAttribute("IdContratoDesembolso", transferenciaRow.getAttribute("IdContrato"));            
            nvpTransferencia.setAttribute("MontoTransferencia", transferenciaRow.getAttribute("MontoTransferencia"));
            nvpTransferencia.setAttribute("ReferenciaMsj", transferenciaRow.getAttribute("RefMensaje"));
            nvpTransferencia.setAttribute("TipoOpcionBenef", transferenciaRow.getAttribute("TipoOpcionBeneficiario"));
            nvpTransferencia.setAttribute("NumeroCtaBenef", transferenciaRow.getAttribute("NumeroCuenteBeneficiario"));
            nvpTransferencia.setAttribute("IdentificadorBenef", transferenciaRow.getAttribute("IdentificadorBeneficiario"));
            nvpTransferencia.setAttribute("BeneficiarioBenef", transferenciaRow.getAttribute("NombreBeneficiario"));
            nvpTransferencia.setAttribute("DireccionBenef", transferenciaRow.getAttribute("DireccionBeneficiario"));
            nvpTransferencia.setAttribute("TipoOpcionBanBenef", transferenciaRow.getAttribute("TipoOpcionBancoBeneficiario"));
            nvpTransferencia.setAttribute("NumeroCtaBanBenef", transferenciaRow.getAttribute("NumeroCuentaBancoBeneficiario"));
            nvpTransferencia.setAttribute("IdentificadorBanBenef", transferenciaRow.getAttribute("IdentificadorBancoBeneficiario"));
            nvpTransferencia.setAttribute("BeneficiarioBanBenef", transferenciaRow.getAttribute("NombreBancoBeneficiario"));
            nvpTransferencia.setAttribute("DireccionBanBenef", transferenciaRow.getAttribute("DireccionBancoBeneficiario"));
            nvpTransferencia.setAttribute("TipoOpcionBanInter", transferenciaRow.getAttribute("TipoOpcionBancoIntermediario"));
            nvpTransferencia.setAttribute("NumeroCtaBanInter", transferenciaRow.getAttribute("NumeroCuentaBancoIntermediario"));
            nvpTransferencia.setAttribute("IdentificadorBanInter", transferenciaRow.getAttribute("IdentificadorBancoIntermediario"));
            nvpTransferencia.setAttribute("BeneficiarioBanInter",  transferenciaRow.getAttribute("NombreBancoIntermediario"));
            nvpTransferencia.setAttribute("DireccionBanInter", transferenciaRow.getAttribute("DireccionBancoIntermediario"));                    
            nvpTransferencia.setAttribute("EstadoInstruccion", "POR_VALIDAR");
            nvpTransferencia.setAttribute("TipoMensaje", transferenciaRow.getAttribute("TipoMensaje"));        
            nvpTransferencia.setAttribute("IdTcaTipoMoneda", transferenciaRow.getAttribute("IdTcaTipoMoneda"));
            nvpTransferencia.setAttribute("IdOperacion", transferenciaRow.getAttribute("IdOperacion"));        
            nvpTransferencia.setAttribute("FechaRegistro", new Date());
            nvpTransferencia.setAttribute("BanEstatus", new Integer(1));
            
            Row row = createAndInitRow(nvpTransferencia);
            insertRow(row);    
        }catch(Exception e){
            logger.warning("*Error al crear la nueva trasnferencia ->",e);
        }
        commitTransferencias();
        
        logger.warning("*Inf, Termina metodo nuevaTransferencia");
    }

    public void actualizarTransferencia(Row transferenciaActual, Row RowNuevosDatosTrans){                                                            
        logger.warning("*Inf, Inicia metodo actualizarTransferencia");
        
        transferenciaActual.setAttribute("IdContratoDesembolso", RowNuevosDatosTrans.getAttribute("IdContrato"));        
        transferenciaActual.setAttribute("MontoTransferencia", RowNuevosDatosTrans.getAttribute("MontoTransferencia"));
        transferenciaActual.setAttribute("ReferenciaMsj", RowNuevosDatosTrans.getAttribute("RefMensaje"));
        transferenciaActual.setAttribute("TipoOpcionBenef", RowNuevosDatosTrans.getAttribute("TipoOpcionBeneficiario"));
        transferenciaActual.setAttribute("NumeroCtaBenef", RowNuevosDatosTrans.getAttribute("NumeroCuenteBeneficiario"));
        transferenciaActual.setAttribute("IdentificadorBenef", RowNuevosDatosTrans.getAttribute("IdentificadorBeneficiario"));
        transferenciaActual.setAttribute("BeneficiarioBenef", RowNuevosDatosTrans.getAttribute("NombreBeneficiario"));
        transferenciaActual.setAttribute("DireccionBenef", RowNuevosDatosTrans.getAttribute("DireccionBeneficiario"));
        transferenciaActual.setAttribute("TipoOpcionBanBenef", RowNuevosDatosTrans.getAttribute("TipoOpcionBancoBeneficiario"));
        transferenciaActual.setAttribute("NumeroCtaBanBenef", RowNuevosDatosTrans.getAttribute("NumeroCuentaBancoBeneficiario"));
        transferenciaActual.setAttribute("IdentificadorBanBenef", RowNuevosDatosTrans.getAttribute("IdentificadorBancoBeneficiario"));
        transferenciaActual.setAttribute("BeneficiarioBanBenef", RowNuevosDatosTrans.getAttribute("NombreBancoBeneficiario"));
        transferenciaActual.setAttribute("DireccionBanBenef", RowNuevosDatosTrans.getAttribute("DireccionBancoBeneficiario"));
        transferenciaActual.setAttribute("TipoOpcionBanInter", RowNuevosDatosTrans.getAttribute("TipoOpcionBancoIntermediario"));
        transferenciaActual.setAttribute("NumeroCtaBanInter", RowNuevosDatosTrans.getAttribute("NumeroCuentaBancoIntermediario"));
        transferenciaActual.setAttribute("IdentificadorBanInter", RowNuevosDatosTrans.getAttribute("IdentificadorBancoIntermediario"));
        transferenciaActual.setAttribute("BeneficiarioBanInter",  RowNuevosDatosTrans.getAttribute("NombreBancoIntermediario"));
        transferenciaActual.setAttribute("DireccionBanInter", RowNuevosDatosTrans.getAttribute("DireccionBancoIntermediario"));
        transferenciaActual.setAttribute("EstadoInstruccion", RowNuevosDatosTrans.getAttribute("EstadoInstruccion"));
        transferenciaActual.setAttribute("TipoMensaje", RowNuevosDatosTrans.getAttribute("TipoMensaje"));   
          
        if(commitTransferencias()){
            Long idDesembolso = (null == RowNuevosDatosTrans.getAttribute("IdContrato")) ? null
                              : (Long)RowNuevosDatosTrans.getAttribute("IdContrato");
            
                if(idDesembolso != null){
                   recargarTablaTransferencias(idDesembolso);                   
                }else{
                   logger.warning("*Error, no se pudo cargar la tabla de transferencias idDesembolso resuelto a NULL"); 
                }
        }
        logger.warning("*Inf, Termina metodo actualizarTransferencia");
    }

    public void recargarTablaTransferencias(Long idContrato){
      logger.warning("*Inf, Inicia metodo recargarTablaTransferencias");
      
        FenixAMImpl fenixAMImpl = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
        gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        gestorDesembolsosAMImpl.getConsultaTransferenciasBanByDesembolso().recuperarDatos(idContrato);
        
      logger.warning("*Inf, Termina metodo recargarTablaTransferencias");
    }

    public void cargarCatalogoInstruccionesPago(Long idOperacion){
        
        FenixAMImpl fenixAMImpl = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
        gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        gestorDesembolsosAMImpl.getCatInstruccionesPagoValidadasVO().cargarTabla(idOperacion);
        
    }


    public Boolean commitTransferencias(){
      logger.warning("*Inf, Inicia el metodo commitTransferencias");
      Boolean respuesta = Boolean.FALSE;
       
          try{
              logger.warning("*Inf, Realizando commit...");
              getDBTransaction().commit();
              respuesta = Boolean.TRUE;
          }catch(Exception e){
              logger.warning("Error al realizar el commit ->",e);
              logger.warning("Reintentando commit...");
              
              try{
                  logger.warning("*Inf, Reintentando commit...");
                  getDBTransaction().commit();
                  respuesta = Boolean.TRUE;
              }catch(Exception ea){
                  logger.warning("Error al realizar el commit ->",ea);
                  JboException ex = new JboException("No se a podido Guardar la informacion: " +ea.getMessage().toString());
                  throw ex;
              }              
          }        
        
      logger.warning("*Inf, termina el metodo commitTransferencias");
      return respuesta;
    }

    public Row recuperarTransferenciaById(Long idTransferencia){
      logger.warning("*Inf, Inicia el metodo recuperarTransferenciaById :"+idTransferencia) ;  
        Row fila = null;
        ViewCriteria criteria = null;

        try {
            criteria = getViewCriteriaManager().getViewCriteria("getTransferenciaById");
            criteria.ensureVariableManager().setVariableValue("pIdTransferencia", idTransferencia);
            applyViewCriteria(criteria);
            executeQuery();

            if (getEstimatedRowCount() > 0) {                
                fila = first();
                logger.warning("Row recuperado para la transferencia ->" + fila.getAttribute("Id"));
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");                
            }

        } catch (Exception e) {
            logger.warning("*** Error al buscar id transferencia: idTransferencia  ->",e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("getTransferenciaById");    
            executeQuery();
        }

        logger.warning("*Inf, Termina el metodo recuperarTransferenciaById") ;  
        return fila;     
    }


    public Boolean transferenciaABanEstatusCero(Long idTransferencia){
      logger.warning("*Inf, Inicia el metodo TransferenciaABanEstatusCero para la transferencia ->"+idTransferencia) ;  
       Row filaRecuperada = recuperarTransferenciaById(idTransferencia);               
       Boolean respuesta = Boolean.FALSE;
       
       if(filaRecuperada != null){  
           filaRecuperada.setAttribute("BanEstatus", 0);
           if(commitTransferencias()){
                respuesta = Boolean.TRUE;               
            };
       }else{
          JboException ex = new JboException("No se a podido recuperar la trasnferencia con id: "+idTransferencia);
          throw ex;
        }
       
      logger.warning("*Inf, termina el metodo TransferenciaABanEstatusCero") ;    
      return respuesta;
    }




    /**
     * Returns the variable value for idTransferencia.
     * @return variable value for idTransferencia
     */
    public Long getpIdTransferencia() {
        return (Long) ensureVariableManager().getVariableValue("pIdTransferencia");
    }

    /**
     * Sets <code>value</code> for variable idTransferencia.
     * @param value value to bind as idTransferencia
     */
    public void setpIdTransferencia(Long value) {
        ensureVariableManager().setVariableValue("pIdTransferencia", value);
    }
}

