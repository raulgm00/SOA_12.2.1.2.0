package org.bcie.fenix.common.model.vo;

import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.DiasInhabilesDesembolsosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 11 18:32:03 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DiasInhabilesDesembolsosVOImpl extends ViewObjectImpl implements DiasInhabilesDesembolsosVO {
     
     private static ADFLogger logger = null;
     
    public DiasInhabilesDesembolsosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    public List obtenerDiasInhabilesByMoneda(String descripcionMoneda, Date fechaInicial, Date fechaFinal) {
        logger.warning("*Inf, Inicia metodo obtenerDiasInhabilesByMoneda");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        String fechaString = null;
        java.util.Date fecha = null;
        List<java.util.Date> result = new ArrayList<java.util.Date>();
        
        if(cargarDiasInHabilesVO(descripcionMoneda, fechaInicial, fechaFinal)){
            
                this.setRangeSize(-1);
                
                for(Row row:this.getAllRowsInRange()){
                    java.util.Date dia = (java.util.Date)row.getAttribute("Dia");
                    try {
                        fechaString = formatter.format(dia);
                        fecha = formatter.parse(fechaString);
                        result.add(fecha);
                    } catch (ParseException e) {
                        logger.severe("Error obtenerDiasInhabilesMoneda : ",e);
                    }
                }
                
                
                logger.warning("Tamaño de la lista de dias inhabiles : "+result.size());
                logger.warning("Fuera obtenerDiasInhabilesMoneda");
        }else{
                logger.warning("*Inf, Importante! No se recuperaron dias inhabiles");
                result = null;
        }
        
        
       
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia
        logger.warning("Inf, Termina metodo obtenerDiasInhabilesByMoneda con una duracion de: "+tiempo+" segundos");
        return (result);
    }


    public Boolean cargarDiasInHabilesVO(String descripcionMoneda, Date fechaInicial, Date fechaFinal){
        logger.warning("*Inf, Inicia metodo cargarDiasInHabilesVO");
        logger.warning("*Inf, parametros recibidos");
        logger.warning("*Inf, descripcionMoneda: "+descripcionMoneda);
        logger.warning("*Inf, fechaInicial: "+fechaInicial);
        logger.warning("*Inf, fechaFinal: "+fechaFinal);
        
        Boolean respuesta = Boolean.FALSE;
        
        if(descripcionMoneda == null || fechaInicial == null || fechaFinal == null){
            logger.warning("***Error, parametros requeridos resueltos a Null no se recuperaran los dias inhabiles ");            
        }else{
        
            setpCodigoMoneda(descripcionMoneda);
            setpFechaInicial(fechaInicial);
            setpFechaFinal(fechaFinal);
            
            executeQuery();
            logger.warning("*Inf, Numero de registros en la VO: "+getEstimatedRowCount());
            
            if(getEstimatedRowCount() >0)
                respuesta = Boolean.TRUE;
            
        }
        logger.warning("*Inf, Termina metodo cargarDiasInHabilesVO");
        return respuesta;
    }












    /**
     * Returns the bind variable value for pCodigoMoneda.
     * @return bind variable value for pCodigoMoneda
     */
    public String getpCodigoMoneda() {
        return (String) getNamedWhereClauseParam("pCodigoMoneda");
    }

    /**
     * Sets <code>value</code> for bind variable pCodigoMoneda.
     * @param value value to bind as pCodigoMoneda
     */
    public void setpCodigoMoneda(String value) {
        setNamedWhereClauseParam("pCodigoMoneda", value);
    }

    /**
     * Returns the bind variable value for pFechaInicial.
     * @return bind variable value for pFechaInicial
     */
    public Date getpFechaInicial() {
        return (Date) getNamedWhereClauseParam("pFechaInicial");
    }

    /**
     * Sets <code>value</code> for bind variable pFechaInicial.
     * @param value value to bind as pFechaInicial
     */
    public void setpFechaInicial(Date value) {
        setNamedWhereClauseParam("pFechaInicial", value);
    }

    /**
     * Returns the bind variable value for pFechaFinal.
     * @return bind variable value for pFechaFinal
     */
    public Date getpFechaFinal() {
        return (Date) getNamedWhereClauseParam("pFechaFinal");
    }

    /**
     * Sets <code>value</code> for bind variable pFechaFinal.
     * @param value value to bind as pFechaFinal
     */
    public void setpFechaFinal(Date value) {
        setNamedWhereClauseParam("pFechaFinal", value);
    }
}

