package org.bcie.fenix.common.model.vo;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.contratomo.ConsultarPlazoCondicionResponseType;
import org.bcie.terminobo.CatalogoTermino;
import org.bcie.terminobo.Termino;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 14 21:00:24 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegistrarFechaFormalizacionAprobacionVOImpl
  extends ViewObjectImpl
{
  public static final Long ID_CAT_TERMINO = new Long(1);
  
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(RegistrarFechaFormalizacionAprobacionVOImpl.class);
    
  /**
   * This is the default constructor (do not remove).
   */
  public RegistrarFechaFormalizacionAprobacionVOImpl()
  {
  }
  
  public Row inicializarRow()
  {
    this.clearCache();
    Row newRow = this.createRow();
    
    newRow.setAttribute(RegistrarDatosAprobacionVORowImpl.ID, 1);
    /* Por definicion siempre sera 1 Aprobacion*/
    newRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.TIPOFECHAINICIOID, new oracle.jbo.domain.Number(1));
    this.insertRow(newRow);
    setCurrentRow(newRow);
    return newRow;
  }

  public void cargarFechaAprobacion(ConsultarPlazoCondicionResponseType response,
                                    Row newFechaAprobacionRow)
  { 
      
    Termino termino = null;
    termino = getTerminoAprobacionFormalizacionWS(response);
    
    if(termino != null && 
       termino.getIdTermino() > 0){
        newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.ID, 1);
        //newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.TIPOFECHAINICIOID, plazoCondicionResponse.getIdTipoFechaInicio());
        /* Por definicion siempre sera 1 Aprobacion*/
        newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.TIPOFECHAINICIOID, new oracle.jbo.domain.Number(1));
        newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.PLAZO, termino.getPlazo());
        newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.TIPOPLAZOID, termino.getFrecuenciaPlazo().getId());
        newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.IDTERMINO, termino.getIdTermino());
        
        if(null != termino.getFechaInicio())
          newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.FECHAINICIO, termino.getFechaInicio().toGregorianCalendar().getTime());

        newFechaAprobacionRow.setAttribute(RegistrarFechaFormalizacionAprobacionVORowImpl.ESTADO, true);
    }else{
        logger.warning("No se obtuvo terminos que puedan cargar datos al Row de Termino en el Modelo para Actualizar TCC: " + termino);
    }
  }
    
    public Termino getTerminoAprobacionFormalizacionWS(ConsultarPlazoCondicionResponseType response){
      
        Termino termino = null;
      
        if(response != null){
            
            List<Termino> terminosList = null;
            terminosList = response.getListaTermino();
            if(terminosList != null &&
               terminosList.size() > 0){
                
                logger.warning("Cantidad de Terminos recibidos por WS: " + terminosList.size());
                
                boolean esCatTermino = false;
                
                CatalogoTermino catTerm = null;
                for(Termino terminoTmp : terminosList){
                    
                    catTerm = terminoTmp.getTipoTermino();
                    if(catTerm != null){
                        if(catTerm.getIdCatTermino() != null &&
                           ID_CAT_TERMINO.equals(catTerm.getIdCatTermino())){
                            esCatTermino = true;
                        }
                    }
                    
                    if(esCatTermino &&
                       terminoTmp.isEstado()){
                        termino = terminoTmp;
                        break;
                    }
                }
                
                if(!esCatTermino){
                    logger.severe("Error no se obtuvo terminos de Formalizacion");
                }
            }else{
                logger.warning("Error no se recibieron terminos");
            }
        }
      
        return termino;
    }
}

