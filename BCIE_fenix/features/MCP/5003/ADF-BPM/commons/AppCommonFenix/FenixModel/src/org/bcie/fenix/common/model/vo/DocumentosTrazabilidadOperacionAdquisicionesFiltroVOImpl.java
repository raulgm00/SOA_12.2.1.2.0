package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.DocumentosTrazabilidadOperacionAdquisicionesFiltroVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Feb 22 15:57:55 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentosTrazabilidadOperacionAdquisicionesFiltroVOImpl extends ViewObjectImpl implements DocumentosTrazabilidadOperacionAdquisicionesFiltroVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public DocumentosTrazabilidadOperacionAdquisicionesFiltroVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean cargarRowVo(Integer idTarea, Integer idProceso) {
        logger.warning("*** Inicia el metodo cargar Row DocumentosTrazabilidadOperacionAdquisicionesFiltroVO");
        Boolean respuestaCargarRowVo = Boolean.FALSE;
        
        try{
            logger.warning("Se recibe valor idTarea: " + idTarea);
            logger.warning("Se recibe valor idProceso: " + idProceso);
    
            if (this.getEstimatedRowCount() <= 0) {
    
                logger.warning("*** Creando Row para formulario");
    
                Row fila = null;
                fila = this.createRow();
                fila.setAttribute("IdDocumento", null);
                fila.setAttribute("IdTipoDocumento", null);
                fila.setAttribute("IdProcesoBpm", idProceso);
                fila.setAttribute("FechaIni", null);
                fila.setAttribute("FechaFin", null);
                fila.setAttribute("Documento", null);
                fila.setAttribute("pIdProceso", idProceso);
                fila.setAttribute("pIdTarea", idTarea);
                this.insertRow(fila);
                this.setCurrentRow(fila);
                respuestaCargarRowVo = Boolean.TRUE;
    
            } else {
                logger.warning("*** Ya existe una row para el formulario");
                respuestaCargarRowVo = Boolean.FALSE;
            }
        }catch(Exception e){
            logger.warning("Error al crear el Row del formulario... " + e.getClass() + ", " + e.getMessage());
            respuestaCargarRowVo = Boolean.FALSE;
        }
        logger.warning("valor a retornar respuestaCargarRowVo: " + respuestaCargarRowVo);
        logger.warning("*** Termina el metodo cargarRow en DocumentosTrazabilidadOperacionAdquisicionesFiltroVO");
        return respuestaCargarRowVo;
    }
    
    //    public Row filtrarDocTrazabilidadOp(Long id_documento, Integer id_tipo, Integer id_etapa,
    //                                         Date fechaIni, Date fechaFin){
    //        logger.log(ADFLogger.WARNING, "Inside filtrarDocTrazabilidadOp.");
    //        Row row_resultado = null;
    //
    //        try {
    //            ViewCriteria criteria = null;
    //            criteria=this.getViewCriteriaManager().getViewCriteria("DocumentosTrazabilidadOperacionVOCriteriaMultiple");
    //            criteria.ensureVariableManager().setVariableValue("varIdDocumento", id_documento);
    //            criteria.ensureVariableManager().setVariableValue("varIdProcesoBpm", id_etapa);
    //            criteria.ensureVariableManager().setVariableValue("varIdTipoDocumento", id_tipo);
    //            criteria.ensureVariableManager().setVariableValue("varfechaCargaFin", fechaFin);
    //            criteria.ensureVariableManager().setVariableValue("varfechaCargaInicial", fechaIni);
    //            this.applyViewCriteria(criteria);
    //            this.executeQuery();
    //
    //            logger.warning("Filas obtenidas: " + getEstimatedRowCount());
    //            if(getEstimatedRowCount() <= 0){
    //                logger.warning("No existe registro de Documento con id: " + id_documento);
    //            } else {
    //                    setCurrentRow(first());
    //                    Row row = getCurrentRow();
    //
    //                    logger.warning("Registro obtenido con id de documento: " + row.getAttribute("IdDocumento"));
    //                    row_resultado = row;
    //                }
    //
    //                logger.warning("Termina metodo filtrarDocTrazabilidadOp");
    //
    //
    //        }catch(Exception e){
    //            logger.log(ADFLogger.ERROR, "Error en inicioLAFT " + e.getClass() + ":" + e.getMessage());
    //
    //        } finally {
    //            //Siempre removemos el criterio de busqueda
    //            this.getViewCriteriaManager().removeApplyViewCriteriaName("DocumentosTrazabilidadOperacionVOCriteriaMultiple");
    //        }
    //        return row_resultado;
    //    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

