package org.bcie.fenix.view.gestordesembolsos;import java.io.Serializable;import javax.faces.event.ActionEvent;import oracle.adf.share.logging.ADFLogger;import oracle.binding.BindingContainer;import oracle.binding.OperationBinding;import org.bcie.fenix.common.utils.ADFUtils;import org.bcie.fenix.common.utils.JSFUtils;public class LiquidarContratoBean implements Serializable {    @SuppressWarnings("compatibility:-151179451113940970")    private static final long serialVersionUID = 1L;    public static ADFLogger logger = null;        private Long pIdDesembolso = null;    private Long pIdSolicitud = null;    private Integer pModoEjecucion = null;        private Boolean validaExisteIdDesembolso = Boolean.FALSE;        private String cuentaPuente = null;        private Boolean renderedModoEjecucion = Boolean.FALSE;        public LiquidarContratoBean() {        super();        if (logger == null) {            logger = ADFLogger.createADFLogger(LiquidarContratoBean.class);        }    }        public void cargarLiquidarContrato() {        logger.log(ADFLogger.WARNING, "Inside cargarLiquidarContrato");        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        BindingContainer bindings = ADFUtils.getBindingContainer();        try {            if (JSFUtils.resolveExpression("#{pageFlowScope.pIdDesembolso}") != null) {                pIdDesembolso = Long.valueOf(JSFUtils.resolveExpression("#{pageFlowScope.pIdDesembolso}").toString());            }            if (JSFUtils.resolveExpression("#{pageFlowScope.pModoEjecucion}") != null) {                pModoEjecucion =                    Integer.valueOf(JSFUtils.resolveExpression("#{pageFlowScope.pModoEjecucion}").toString());            }        } catch (Exception e) {            validaExisteIdDesembolso = Boolean.FALSE;            logger.log(ADFLogger.ERROR, "Error al obtener los parametros del task." + e);        }        logger.log(ADFLogger.WARNING, "Valor idDesembolso recibido. " + pIdDesembolso);        logger.log(ADFLogger.WARNING, "Valor modoEjecucion recibido. " + pModoEjecucion);        if (pIdDesembolso != null && pModoEjecucion != null) {            try {                OperationBinding operationBindingObtenerContrato =                    bindings.getOperationBinding("obtenerContratoDesembolsoById");                operationBindingObtenerContrato.getParamsMap().put("id", pIdDesembolso);                operationBindingObtenerContrato.execute();                validaExisteIdDesembolso = (Boolean) operationBindingObtenerContrato.getResult();                logger.warning("Valor obtenido de validaExisteIdDesembolso" + validaExisteIdDesembolso);                OperationBinding operationBindingObtenerCuentaPuente =                    bindings.getOperationBinding("getCuentaPuenteDesembolso");                operationBindingObtenerCuentaPuente.execute();                cuentaPuente = (String) operationBindingObtenerCuentaPuente.getResult();                logger.warning("Valor obtenido de cuenta puente. " + cuentaPuente);                if (pModoEjecucion == 1) {                    OperationBinding operationBindingLlenarFormularioGenerarFT05 =                        bindings.getOperationBinding("llenarFormularioGeneracionFT05ModoLectura");                    operationBindingLlenarFormularioGenerarFT05.getParamsMap().put("cuentaPuente", cuentaPuente);                    operationBindingLlenarFormularioGenerarFT05.execute();                    renderedModoEjecucion = Boolean.FALSE;                } else if (pModoEjecucion == 2) {                    OperationBinding operationBindingLlenarFormularioGenerarFT05 =                        bindings.getOperationBinding("llenarFormularioGeneracionFT05ModoLectura");                    operationBindingLlenarFormularioGenerarFT05.getParamsMap().put("cuentaPuente", cuentaPuente);                    operationBindingLlenarFormularioGenerarFT05.execute();                    renderedModoEjecucion = Boolean.TRUE;                } else {                    logger.warning("Modo de ejecucion no soportado... verificar el valor entrante para el modo de ejecucion");                }            } catch (Exception e) {                validaExisteIdDesembolso = Boolean.FALSE;                logger.log(ADFLogger.ERROR,                           "Error en obtenerContratoDesembolsoById." + e.getClass() + "." + e.getMessage());            }        } else {            logger.warning("Important! no se recibio un idDesembolso, no se realizara ninguna accion sobre el tab");        }        logger.log(ADFLogger.WARNING, "Valor de validaExisteIdDesembolso...." + validaExisteIdDesembolso);        //asignarAtributosPoridTarea();        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia        logger.warning("Termina metodo cargarLiquidarContrato con una duracion de: " + tiempo + " segundos");    }    public void setRenderedModoEjecucion(Boolean renderedModoEjecucion) {        this.renderedModoEjecucion = renderedModoEjecucion;    }    public Boolean getRenderedModoEjecucion() {        return renderedModoEjecucion;    }    public Long getPIdDesembolso() {        return pIdDesembolso;    }    public void setPIdDesembolso(Long pIdDesembolso) {        this.pIdDesembolso = pIdDesembolso;    }}