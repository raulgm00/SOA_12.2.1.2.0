package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.lineacreditoservice.LineaCredito;
import com.bcie.xmlns.lineacreditoservice.LineaCreditoPT;

import java.io.StringWriter;

import java.math.BigDecimal;

import java.math.BigInteger;
import java.math.RoundingMode;

import java.sql.CallableStatement;

import java.sql.SQLException;

import java.sql.Types;

import java.text.SimpleDateFormat;

import java.util.Date;
import java.util.GregorianCalendar;
import java.util.HashMap;
import java.util.Map;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBElement;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.namespace.QName;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowIterator;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_FALSE;
import org.bcie.fenix.common.model.vo.common.LineaCreditoVO;
import org.bcie.lineacreditomo.PropagarFuenteLCRequestType;
import org.bcie.lineacreditomo.PropagarFuenteLCResponseType;

import static org.bcie.fenix.common.model.FenixModelConstants.CONVERTIR_MILISEGUNDOS_SEGUNDOS;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.lineacreditomo.CrearLineaCreditoRequestType;
import org.bcie.lineacreditomo.CrearLineaCreditoResponseType;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Dec 11 18:29:57 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LineaCreditoVOImpl extends ViewObjectImpl implements LineaCreditoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * Definicion de procedimiento almacenado para la creacion de lineas de credito
     */
    public static final String CREAR_LINEA_CREDITO_SP = "SP_DUPLICAR_LINEA_CREDITO(?, ? , ?, ?, ?, ?)";

    /**
     * This is the default constructor (do not remove).
     */
    public LineaCreditoVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for contratoId.
     * @return bind variable value for contratoId
     */
    public Long getcontratoId() {
        return (Long) getNamedWhereClauseParam("contratoId");
    }

    /**
     * Sets <code>value</code> for bind variable contratoId.
     * @param value value to bind as contratoId
     */
    public void setcontratoId(Long value) {
        setNamedWhereClauseParam("contratoId", value);
    }
    
    public Boolean validarMontoTotalAsignacionesPorLinea() {
        
        logger.warning("Inicia validarMontoTotalAsignacionesPorLinea");
        
        // Validamos que las Asignaciones cubran el monto total de las Líneas de crédito
        Boolean esDatosCorrectos = Boolean.TRUE;
        RowSetIterator iteratorLinea = null;
        RowIterator iteratorFuente = null;
        LineaCreditoVORowImpl lineaCreditoRow = null;
        Row fuenteRow = null;
        BigDecimal montoTotalLinea = null;
        BigDecimal montoAsignado = null;
        BigDecimal montoTotalAsignaciones = null;
        
        // The recommended way to iterate a View Object is via a secondary RowSetIterator             
        iteratorLinea = this.createRowSetIterator(null);
        iteratorLinea.reset();
        
        while(iteratorLinea.hasNext()) {
            // 1) Obtenemos el Monto total por cada Línea de crédito
            lineaCreditoRow = (LineaCreditoVORowImpl)iteratorLinea.next();
            montoTotalLinea = (BigDecimal)lineaCreditoRow.getAttribute("MontoLinea");
            
            logger.warning("Linea: " + 
                           lineaCreditoRow.getId() + 
                           ". Id Flexcube: " + 
                           lineaCreditoRow.getIdFlexcube());
            
            if(montoTotalLinea != null){
                
                logger.warning("Monto Total de la Linea: " + montoTotalLinea);
                
                // 2) Verificamos si el monto de la Línea es el mismo que el total sus Asignaciones
                if(lineaCreditoRow.getFuenteVO() != null) {
                    
                    iteratorFuente = lineaCreditoRow.getFuenteVO();
                    iteratorFuente.reset(); // Moves the currency to the slot before the first row.
                    montoTotalAsignaciones = new BigDecimal(0);
                    
                    while(iteratorFuente.hasNext()){
                        fuenteRow = iteratorFuente.next();
                        Boolean banEstatus = 
                            ((Integer) fuenteRow.getAttribute("BanEstatus")) != null ? 
                            (((Integer) fuenteRow.getAttribute("BanEstatus")).equals(1) ? 
                            Boolean.TRUE : Boolean.FALSE) : Boolean.FALSE;
                        
                        if (banEstatus) {
                            montoAsignado = (BigDecimal)fuenteRow.getAttribute("MontoAsignado");
                            
                            if(montoAsignado != null)
                                montoTotalAsignaciones = montoTotalAsignaciones.add(montoAsignado);
                        }
                    }
                    
                    // Validación del Monto total
                    //Se modifica validacion conforme a la incidencia FNXII-4211, se especifica la validacion para diferencia dos escenarios
                    //Cuando el monto supera el monto asignado o no, antes solo se validaba que fueran iguales
                    if(montoTotalLinea.compareTo(montoTotalAsignaciones) > 0) {
                        // Si los montos no coinciden no se cumple la condición requerida
                        esDatosCorrectos = Boolean.FALSE;
                        
                        logger.warning("Monto de asignaciones: " + montoTotalAsignaciones);
                        logger.warning("El monto de la linea supera la sumatoria de montos de fuentes asignadas");
                        break;
                    }
                }
            }else{
                logger.warning("La linea no tiene monto");
            }
        }
        
        iteratorLinea.closeRowSetIterator(); 
        
        logger.warning("Finaliza validarMontoTotalAsignacionesPorLinea");
        return esDatosCorrectos;
    }
    
    /**
     *Se valida que cada línea de crédito no cuente con mas de dos fuentes sin fecha.
     * 
     * @return Boolean valida determnina si pasa o no la validación
     */
    public Boolean validarLineaCreditoNumeroFuentes() {
        Boolean valida = Boolean.TRUE;
        RowSetIterator iteratorLinea = null;
        RowIterator iteratorFuente = null;
        LineaCreditoVORowImpl lineaCreditoRow = null;
        Row fuenteRow = null;
        Date fechaObtenido = null;
        
        // The recommended way to iterate a View Object is via a secondary RowSetIterator             
        iteratorLinea = this.createRowSetIterator(null);
        iteratorLinea.reset();
        
        while(iteratorLinea.hasNext()) {
            lineaCreditoRow = (LineaCreditoVORowImpl)iteratorLinea.next();
            
            if(null != lineaCreditoRow){
                if(lineaCreditoRow.getFuenteVO() != null) {
                    iteratorFuente = lineaCreditoRow.getFuenteVO();
                    iteratorFuente.reset(); // Moves the currency to the slot before the first row.
                    int noFuentesSinFecha = 0;
                    
                    while(iteratorFuente.hasNext()){
                        fuenteRow = iteratorFuente.next();
                        Boolean banEstatus = ((Integer) fuenteRow.getAttribute("BanEstatus")) != null ? (((Integer) fuenteRow.getAttribute("BanEstatus")).equals(1) ? Boolean.TRUE : Boolean.FALSE) : Boolean.FALSE;
                        
                        if (banEstatus) {
                            fechaObtenido = (Date) fuenteRow.getAttribute("FechaObtenido");
                            
                            if(fechaObtenido == null) {
                                noFuentesSinFecha++;
                            }
                        }
                    }
                    if (noFuentesSinFecha > 1) {
                        valida = Boolean.FALSE;
                        break;
                    }
                }
            }
        }
        
        iteratorLinea.closeRowSetIterator(); 
        return valida;
    }
    
    public Map propagarFuente() {
        logger.warning("Inicia propagarFuente.");
        HashMap<String, PropagarFuenteLCResponseType> respuestaServicio = null;
        RowSetIterator iteratorLinea = null;
        LineaCreditoVORowImpl lineaCreditoRow = null;
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        String wsdl = fenixAM.getWsdl(IWsdlLocation.LINEA_CREDITO);
        
        LineaCredito lineaCredito = IWsdlLocation.Service.getInstance(LineaCredito.class, wsdl);
        LineaCreditoPT lineaCreditoPT = lineaCredito.getLineaCredito12Bnd();
        PropagarFuenteLCRequestType request = new PropagarFuenteLCRequestType();
        PropagarFuenteLCResponseType response = null;

        // The recommended way to iterate a View Object is via a secondary RowSetIterator             
        iteratorLinea = this.createRowSetIterator(null);
        iteratorLinea.reset();
        
        logger.warning("Cantidad de Lineas encontradas: " + getEstimatedRowCount());
        
        // Obtenemos el ID de cada línea de crédito y lo insertamos a la lista LineasCredito
        while(iteratorLinea.hasNext()) {
            lineaCreditoRow = (LineaCreditoVORowImpl)iteratorLinea.next();            
            request.getLineasCredito().add((Long)lineaCreditoRow.getAttribute("Id"));
        }
        
        logger.warning("Cantidad de lineas de credito agregadas: " + request.getLineasCredito().size());
        
        iteratorLinea.closeRowSetIterator(); 
        
        // Invocamos servicio
        if(request.getLineasCredito().size() > 0) {
            try{
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_PROPAGAR_FUENTE);
                response = lineaCreditoPT.propagarFuente(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_PROPAGAR_FUENTE, horaInicio);

                respuestaServicio = new HashMap<String, PropagarFuenteLCResponseType>();
                respuestaServicio.put("response", response);
                if(response != null &&
                   response.getResultado() != null &&
                   response.getResultado().getResult() != null){
                    logger.warning("Response. Result: " + response.getResultado().getResult());
                    
                    if(response.getResultado().getMessage() != null){
                        logger.warning("Response: Mensaje: " + response.getResultado().getMessage());
                    }
                }
                if(response != null &&
                   response.getResultado() != null &&
                   response.getResultado().getError() != null){
                    logger.warning("Response. Error Code: " + response.getResultado().getError().getErrorCode() +
                                   ". Error Mensaje: " + response.getResultado().getError().getErrorDescription());
                }
            }catch(Exception e){
                logger.log(ADFLogger.ERROR, e.getMessage());
                
                JboException ex = new JboException(e);
                ex.addToExceptions(new Exception("Error al propagar fuente, favor de intentar más tarde."));
                throw ex;
            }
        }
        
        logger.warning("Finaliza propagarFuente.");
        return respuestaServicio;
    }
    
    public StringWriter writeXMLRequest(Object request, Class requestClass) throws JAXBException {
        StringWriter writer = new StringWriter();
        JAXBContext context = JAXBContext.newInstance(requestClass);       
        Marshaller m = context.createMarshaller();
        m.marshal(new JAXBElement(new QName(requestClass.getName()), requestClass, request), writer);        
        return writer;
    }
    
    public void crearLineaCredito(String numeroLineaCredito,String descripcionLinea,BigDecimal montoLinea,
                                    Long idContrato) {
        logger.warning("Into crearLineaCredito.");
        
        //Asigna Id de Contrato a Variable Bind
        setcontratoId(idContrato);
        
        Row lineaCreditoRow = null;
        oracle.jbo.domain.Number idLineaCredito = null;
        NameValuePairs nvpLineaCredito = null;
        SequenceImpl seqLineaCredito = null;

        seqLineaCredito = new SequenceImpl("LINEA_CREDITO_SEQ", getDBTransaction());
        idLineaCredito = seqLineaCredito.getSequenceNumber();
        
        logger.warning("Id Nueva Linea: " + idLineaCredito);
        logger.warning("Numero Linea: " + numeroLineaCredito);
        logger.warning("Descripcion: " + descripcionLinea);
        logger.warning("Monto Linea: " + montoLinea);
        logger.warning("Id Contrato: " + idContrato);
        
        nvpLineaCredito = new NameValuePairs();
        nvpLineaCredito.setAttribute("Id", idLineaCredito);
        nvpLineaCredito.setAttribute("IdContrato", idContrato);
        nvpLineaCredito.setAttribute("NumeroLineaCredito", numeroLineaCredito);
        nvpLineaCredito.setAttribute("DescripcionLinea", descripcionLinea);
        nvpLineaCredito.setAttribute("MontoLinea", montoLinea);
        nvpLineaCredito.setAttribute("BanEstatus", BANESTATUS_TRUE);//default value 1
        nvpLineaCredito.setAttribute("FechaRegistro",new java.sql.Timestamp(System.currentTimeMillis()));
        
        lineaCreditoRow = this.createAndInitRow(nvpLineaCredito);
                
        getDBTransaction().commit();
        this.executeQuery();
        
        logger.warning("Finaliza crearLineaCredito.");
    }
    
    /**
     * Crea un registro de Linea de Credito considerando la creacion de otros elementos dependientes o requeridos 
     * a nivel negocio
     * @param numeroLineaCredito contiene numero de linea de credito
     * @param descripcionLinea contiene descripcion de la linea de credito
     * @param montoLinea contiene el monto de la linea de credito
     * @param idContrato contiene el id de contrato
     * @return devuelve valor Booleano, true si la creacion fue exitosa o false en caso contrario
     */
    public Boolean crearLineaCreditoSP(String numeroLineaCredito,String descripcionLinea,BigDecimal montoLinea, Long idContrato) {
    
        logger.warning("Inicia crearLineaCreditoSP");
        Boolean result = false;
        
        if(numeroLineaCredito != null &&
           descripcionLinea != null &&
           montoLinea != null &&
           idContrato != null){
            
            CallableStatement st = null;
            try{
                st = getDBTransaction().createCallableStatement(" BEGIN " + CREAR_LINEA_CREDITO_SP + "; END;", 0);    
            }catch(Exception e){
                logger.severe("Error al declarar el Objeto Statement del Procedimiento almacenado: " + 
                              CREAR_LINEA_CREDITO_SP, 
                              e);
            }
            
            if(st != null){

                try {
                    st.setString(1, numeroLineaCredito);
                    st.setString(2, descripcionLinea);
                    st.setBigDecimal(3, montoLinea);
                    st.setLong(4, idContrato);
                } catch (SQLException e) {
                    logger.severe("Error al asignar los valores de los parametros de entrada del Procedimiento almacenado");
                }
                
                try{
                    st.registerOutParameter(5, Types.NUMERIC);
                    st.registerOutParameter(6, Types.VARCHAR);
                }catch(SQLException e){
                    logger.severe("Error al asignar los atributos de los parametros de salida del Procedimiento almacenado");
                }

                try {
                    st.executeUpdate();
                } catch (SQLException e) {
                    logger.severe("Error al ejecutar Procedimiento almacenado", e);
                }
                
                Integer intCodResult = null;
                String strMsgResult = null;
                try {
                    intCodResult = st.getInt(5);
                    strMsgResult = st.getString(6);
                    
                    logger.warning("Codigo de Resultado: " + intCodResult);
                    logger.warning("Mensaje de Resultado: " + strMsgResult);
                    
                    if(intCodResult == 0){
                        result = true;
                        logger.severe("El Codigo de Resultado indica Exito");
                    }else{
                        logger.severe("El Codigo de Resultado indica Error");
                    }
                } catch (SQLException e) {
                    logger.severe("Error al obtener los parametros de salida del Procedimiento almacenado", e);
                }

                try{
                    st.close();
                }catch(Exception e){
                    logger.severe("Error al cerrar el Objeto Statement del Procedimiento almacenado: " + 
                                  CREAR_LINEA_CREDITO_SP, 
                                  e);
                }
            }
        }else{
            logger.severe("Parametros requeridos no recibidos");
        }
        
        logger.warning("Finaliza crearLineaCreditoSP");
        return result;
    }
    
    /**
     * Crea un registro de Linea de Credito por medio de Servicio SOA, soportado para Formalizacion e Implementacion PCT
     * @param numeroLineaCredito contiene numero de linea de credito
     * @param descripcionLinea contiene descripcion de la linea de credito
     * @param montoLinea contiene el monto de la linea de credito
     * @param idContrato contiene el id de contrato
     * @return devuelve valor Booleano, true si la creacion fue exitosa o false en caso contrario
     */
    public Boolean crearLineaCreditoWS(String numeroLineaCredito,String descripcionLinea,BigDecimal montoLinea, Long idContrato, Long idOperacion, Integer idTipoMonedaMontoLinea) {
    
        logger.warning("Inicia crearLineaCreditoWS");
        Boolean result = false;
        
        logger.warning("Numero de Linea: " + numeroLineaCredito);
        logger.warning("Descripcion Linea: " + descripcionLinea);
        logger.warning("Monto Linea: " + montoLinea);
        logger.warning("Id Contrato: " + idContrato);
        logger.warning("Id Operacion: " + idOperacion);
        
		logger.warning("idTipoMonedaMontoLinea: " + idTipoMonedaMontoLinea);
		
        if(numeroLineaCredito != null &&
           descripcionLinea != null &&
           montoLinea != null &&
           idContrato != null &&
           idOperacion != null &&
           idTipoMonedaMontoLinea != null){
            
            FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.LINEA_CREDITO);
            LineaCredito lineaCredito = IWsdlLocation.Service.getInstance(LineaCredito.class, wsdl);
            LineaCreditoPT lineaCreditoPT = lineaCredito.getLineaCredito12Bnd();
            
            CrearLineaCreditoRequestType request = new CrearLineaCreditoRequestType();
            request.setIdOperacion(idOperacion);
            
            org.bcie.lineacreditobo.LineaCredito lc = new org.bcie.lineacreditobo.LineaCredito();
            lc.setNumeroLineaCredito(numeroLineaCredito);
            lc.setDescripcion(descripcionLinea);
            lc.setMontoLinea(montoLinea);
            lc.setIdContrato(idContrato);
			lc.setIdTipoMonedaMontoLinea(BigInteger.valueOf(idTipoMonedaMontoLinea));
			
            request.getLineaCredito().add(lc);
            
            CrearLineaCreditoResponseType response = null;
            try{
                Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CREAR_LINEA_CREDITO);
                response = lineaCreditoPT.crearlineacredito(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CREAR_LINEA_CREDITO, horaInicio);
            }catch(Exception e){
                logger.severe("Error al consumir servicio Crear Linea de credito", e);
            }
            
            if(response != null){
                if(response.getResultado() != null &&
                   response.getResultado().getResult() != null &&
                   response.getResultado().getResult().toString().equalsIgnoreCase("OK")){
                    
                    logger.warning("Servicio responde OK");
                    result = true;
                    if(response.getLineaCredito() != null){
                        if(response.getLineaCredito().getIdLineaCredito() != null){
                            logger.warning("Servicio proporciona el Id de Linea: " + 
                                           response.getLineaCredito().getIdLineaCredito());
                        }
                    }else{
                        logger.warning("Servicio no devolvio informacion de la Linea de Credito");
                    }
                }else{
                    logger.severe("El servicio devuelve error");
                    if(response.getResultado() != null){
                        if(response.getResultado().getResult() != null){
                            
                            logger.severe("Resultado del servicio indicando error. " + 
                                          response.getResultado().getResult().toString());
                            if(response.getResultado().getError() != null){
                                logger.severe("Error del servicio. Code: " + response.getResultado().getError().getErrorCode() +
                                              " . Mensaje: " + response.getResultado().getError().getErrorDescription());
                            }
                            
                            if(response.getResultado().getMessage() != null){
                                logger.severe("Mensaje del servicio: " + response.getResultado().getMessage());    
                            }
                        }else{
                            logger.severe("Respuesta del servicio devuelve NULL en el objeto Result del objeto Resultado");
                        }
                    }else{
                        logger.severe("Respuesta del servicio devuelve NULL en el objeto Resultado");
                    }
                }
            }else{
                logger.severe("Error el Response del servicio es NULL");
            }
        }else{
            logger.severe("Parametros requeridos no recibidos");
        }
        
        logger.warning("Finaliza crearLineaCreditoWS. Retorna : " + result);
        return result;
    }
    
    public void modificarLineaCredito(Long idLineaCredito,String numeroLineaCredito,String descripcionLineaCredito,
                                                BigDecimal montoLineaCredito){
        logger.log(ADFLogger.TRACE, "Into modificarLineaCredito.");
        this.executeQuery();
        
        logger.warning("Numero Linea: " + numeroLineaCredito);
        logger.warning("Descripcion: " + descripcionLineaCredito);
        logger.warning("Monto Linea: " + montoLineaCredito);
        logger.warning("Id Linea: " + idLineaCredito);
        
        Row lineaCreditoRow = null;
        // Obtenemos row por Id
        lineaCreditoRow = this.getRow(new Key(new Object[] {idLineaCredito}));
        if(lineaCreditoRow != null) {
            // Asignación de atributos
            lineaCreditoRow.setAttribute("NumeroLineaCredito", numeroLineaCredito);
            lineaCreditoRow.setAttribute("DescripcionLinea", descripcionLineaCredito);
            lineaCreditoRow.setAttribute("MontoLinea", montoLineaCredito);
            getDBTransaction().commit();
        }
    }
    
    public Boolean modificarLineaCreditoPorContrato(Long idContrato, 
                                                    Long idLineaCredito, 
                                                    String numeroLineaCredito, 
                                                    String descripcionLineaCredito, 
                                                    BigDecimal montoLineaCredito){
        
        logger.warning("Inicia modificarLineaCredito.");
        
        Boolean exito = false;
        
        logger.warning("Asigna valor de Id Contrato: " + idContrato);
        setcontratoId(idContrato);
        
        logger.warning("Ejecuta Query");
        this.executeQuery();
        
        if(getEstimatedRowCount() > 0){
            
            Row lineaCreditoRow = null;
            
            logger.warning("Obtiene el Row por Id");
            // Obtenemos row por Id
            lineaCreditoRow = this.getRow(new Key(new Object[] {idLineaCredito}));
            if(lineaCreditoRow != null) {
                
                logger.warning("Numero Linea: " + numeroLineaCredito);
                logger.warning("Descripcion: " + descripcionLineaCredito);
                logger.warning("Monto Linea: " + montoLineaCredito);
                logger.warning("Id Linea: " + idLineaCredito);
                
                // Asignación de atributos
                lineaCreditoRow.setAttribute("NumeroLineaCredito", numeroLineaCredito);
                lineaCreditoRow.setAttribute("DescripcionLinea", descripcionLineaCredito);
                lineaCreditoRow.setAttribute("MontoLinea", montoLineaCredito);
                
                try{
                    getDBTransaction().commit();
                    exito = true;
                }catch(Exception e){
                    logger.severe("Error al hacer commit", e);
                    getDBTransaction().rollback();
                }
            }else{
                logger.severe("No se encontro Row que actualizar. Id Linea: " + idLineaCredito);
            }
        }else{
            logger.warning("No se encontraron registro en la consulta");
        }
        
        logger.warning("Finaliza modificarLineaCredito.");
        return exito;
    }
    
    public void eliminarLineaCredito(Long idLineaCredito){
        logger.log(ADFLogger.WARNING, "Into eliminarLineaCredito.");
        logger.log(ADFLogger.WARNING, "idLineaCredito: " + idLineaCredito);
        logger.log(ADFLogger.WARNING, "Cantidad de lineas antes de executeQuery : " + this.getEstimatedRowCount());
        this.executeQuery();
        logger.log(ADFLogger.WARNING, "Cantidad de lineas despues de executeQuery : " + this.getEstimatedRowCount());
        Row lineaCreditoRow = null;
        // Obtenemos row por Id
        logger.log(ADFLogger.WARNING, "Cantidad de lineas: " + this.getEstimatedRowCount() );
        lineaCreditoRow = this.getRow(new Key(new Object[] {idLineaCredito}));
        if(lineaCreditoRow != null) {
        // Asignación de atributo de baja
        logger.warning("Asigna BanEstatus como eliminado (cero).");
        lineaCreditoRow.setAttribute("BanEstatus", BANESTATUS_FALSE);
        getDBTransaction().commit();
        logger.log(ADFLogger.WARNING, "Se ejecuto Commit BanEstatus. "  );
        }
        logger.log(ADFLogger.WARNING, "End eliminarLineaCredito. "  );
    }

    @SuppressWarnings("unchecked")
    public Map obtenerFondoLinea(Long idLineaCredito){
        logger.warning("Inicia metodo obtenerFondoLinea");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        Map mapaDatosFondo = new HashMap();
        String idFondo = null;
        String descripcionFondo = null;
        BigDecimal montoDisponible = null;
        this.executeQuery();
        
        Row lineaCreditoRow = null;
        lineaCreditoRow = this.getRow(new Key(new Object[] {idLineaCredito}));
        
        if(null != lineaCreditoRow){
            try{
                idFondo = (String) lineaCreditoRow.getAttribute("Fondo");
            }catch(Exception e){
                logger.warning("Error al castear idFondo");
            }
            if(null != idFondo){
                logger.warning("IdFondo: " + idFondo);
            }else{
                logger.warning("El registro tiene Fondo NULL");
            }
            
            try{
                descripcionFondo = (String) lineaCreditoRow.getAttribute("DescripcionFondo");
            }catch(Exception e){
                logger.warning("Error al castear descripcionFondo");
            }
            if(null != descripcionFondo){
                logger.warning("DescripcionFondo: " + idFondo);
            }else{
                logger.warning("El registro tiene Descripcion de fondo NULL");
            }
            
            try{
                montoDisponible = new BigDecimal(lineaCreditoRow.getAttribute("MontoLinea").toString());
            }catch(Exception e){
                logger.warning("Error al obtener el monto de la linea.", e);
            }
            if(null != montoDisponible){
                logger.warning("MontoLinea: " + montoDisponible);
            }else{
                logger.warning("El registro tiene MontoLinea NULL");
            }
        }else{
            logger.warning("El row es NULL, no se encontró registro de Linea de credito: " + idLineaCredito);
        }
        
        mapaDatosFondo.put("idFondo", idFondo);
        mapaDatosFondo.put("descripcionFondo", descripcionFondo);
        mapaDatosFondo.put("montoDisponible", montoDisponible);
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo obtenerFondoLinea con una duracion de: "+tiempo+" segundos");
        return mapaDatosFondo;
    }
    
    public Boolean actualizarMontoAmpliacion(Long idLinea, BigDecimal montoAmpliacion){
        logger.warning("Entra en actualizarMontoAmpliacion.");
        Boolean actualizaMonto = Boolean.FALSE;
        try{
            ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("LineaCreditoVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varIdLineaCredito", idLinea);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            logger.warning("Numero de registros encontrados :" + this.getEstimatedRowCount());
            RowSetIterator rowsLineaCreditoVo = createRowSetIterator(null);
            rowsLineaCreditoVo.reset();
            
                while (rowsLineaCreditoVo.hasNext()) {
                    LineaCreditoVORowImpl rowL = (LineaCreditoVORowImpl) rowsLineaCreditoVo.next();
                    if(null != rowL.getNumeroLineaCredito()){
                        logger.warning("Numero linea de credito." + rowL.getNumeroLineaCredito()); 
                    }
                    logger.warning("monto de ampliacion :" + montoAmpliacion);
                    logger.warning("monto de ampliacion :" + montoAmpliacion.setScale(2, RoundingMode.FLOOR));
                    rowL.setAttribute("MontoAmpliacionLinea", montoAmpliacion.setScale(2, RoundingMode.FLOOR));
                    this.getDBTransaction().commit();
                    actualizaMonto = Boolean.TRUE;
                    logger.warning("Valor del monto actualizado :" + rowL.getAttribute("MontoAmpliacionLinea"));
                }
            rowsLineaCreditoVo.closeRowSetIterator();
        }catch(Exception e){
            this.getDBTransaction().rollback();
            logger.warning("Error al actualizar el monto de ampliacion.", e);
        }finally{
            this.getViewCriteriaManager().removeApplyViewCriteriaName("LineaCreditoVOCriteria");
            this.executeQuery();
        }
        return actualizaMonto;
    }
    
    
    public void filtrarLineasCreditoActivas(){
        logger.warning("Dentro de filtrarLineasCreditoActivas");
        ViewCriteria criteria = null;
        try{                                                                                        
            criteria = getViewCriteria("LineaCreditoVOActivas");                       
            this.applyViewCriteria(criteria);
            this.executeQuery();
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria LineaCreditoVOActivas : ",e);                                    
        }  
        logger.warning("Fuera de filtrarLineasCreditoActivas");
    }


    /**
     * Returns the variable value for varIdLineaCredito.
     * @return variable value for varIdLineaCredito
     */
    public Long getvarIdLineaCredito() {
        return (Long) ensureVariableManager().getVariableValue("varIdLineaCredito");
    }

    /**
     * Sets <code>value</code> for variable varIdLineaCredito.
     * @param value value to bind as varIdLineaCredito
     */
    public void setvarIdLineaCredito(Long value) {
        ensureVariableManager().setVariableValue("varIdLineaCredito", value);
    }
}

