package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.CalculoInteresesVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 05 13:52:20 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CalculoInteresesVOImpl extends ViewObjectImpl implements CalculoInteresesVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public CalculoInteresesVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row buscarCalculoInteresesPorId(Long id){
        logger.warning("Dentro de buscarCalculoInteresesPorId idCalculoInteres :"+id);
        Row row = null;
        ViewCriteria criteria = null;
        try{                                                    
            this.setvarIdCalculoIntereses(id);                                      
            criteria = getViewCriteria("CalculoInteresesPorId");                       
            this.applyViewCriteria(criteria);
            this.executeQuery();
            for(Row rowAux : this.getAllRowsInRange()){
                row = rowAux;
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria CalculoInteresesPorId : ",e);                                    
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("CalculoInteresesPorId");  
        }    
        logger.warning("Fuera de buscarCalculoInteresesPorId");
        return row;
    }
    
    public Boolean eliminarRowCalculoIntereses(Long id){
        logger.log(ADFLogger.WARNING, "Into eliminarRowCalculoIntereses.");
        Boolean resultado = null;
        Row calculoInteresesRow = null;
        calculoInteresesRow = this.buscarCalculoInteresesPorId(id);
        if(calculoInteresesRow != null) {
            calculoInteresesRow.remove();
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } else {
            logger.log(ADFLogger.WARNING, "No record found in CalculoInteresesVO with id : "+id);
            resultado = Boolean.FALSE;
        } 
        logger.log(ADFLogger.WARNING, "eliminarRowCalculoIntereses return :"+resultado);
        return resultado;
    }
    
    public Long insertarRowCalculoIntereses(Long idTrePrepagoContrato, String base, BigDecimal tasa, 
                                        Timestamp desde, Timestamp hasta, Integer dias,
                                        BigDecimal intereses) {
        
        logger.warning("INTO insertarRowCalculoIntereses.");
        
        Long idCalculoInteresesSeq = null;
        Row rowCalculoIntereses = null;
        
        oracle.jbo.domain.Number idCalculoIntereses = null;
        SequenceImpl sequenceCalculoIntereses = null;
        NameValuePairs nvpCalculoIntereses = null;
        
        try {
            sequenceCalculoIntereses = new SequenceImpl("CALCULO_INTERESES_SEQ", getDBTransaction());
            idCalculoIntereses = sequenceCalculoIntereses.getSequenceNumber();
            
            idCalculoInteresesSeq = idCalculoIntereses.longValue();
            
            nvpCalculoIntereses = new NameValuePairs();
            nvpCalculoIntereses.setAttribute("Id", idCalculoInteresesSeq);
            nvpCalculoIntereses.setAttribute("IdTrePrepagoContrato", idTrePrepagoContrato);
            nvpCalculoIntereses.setAttribute("Base", base);
            nvpCalculoIntereses.setAttribute("Tasa", tasa.setScale(5, RoundingMode.CEILING));
            nvpCalculoIntereses.setAttribute("Desde", desde);
            nvpCalculoIntereses.setAttribute("Hasta", hasta);
            nvpCalculoIntereses.setAttribute("Dias", dias);
            nvpCalculoIntereses.setAttribute("Intereses", intereses.setScale(2, RoundingMode.CEILING));
            
            rowCalculoIntereses = this.createAndInitRow(nvpCalculoIntereses);                                                        
            //getDBTransaction().commit();
        } catch (Exception e) {
            logger.warning("Error en insertarRowCalculoIntereses.", e);
            //getDBTransaction().rollback();
        }
        this.executeQuery();
        
        return idCalculoInteresesSeq;
    }

    /**
     * Returns the variable value for varIdCalculoIntereses.
     * @return variable value for varIdCalculoIntereses
     */
    public Long getvarIdCalculoIntereses() {
        return (Long) ensureVariableManager().getVariableValue("varIdCalculoIntereses");
    }

    /**
     * Sets <code>value</code> for variable varIdCalculoIntereses.
     * @param value value to bind as varIdCalculoIntereses
     */
    public void setvarIdCalculoIntereses(Long value) {
        ensureVariableManager().setVariableValue("varIdCalculoIntereses", value);
    }
}
