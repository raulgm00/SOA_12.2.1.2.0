package org.bcie.fenix.common.model.vo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.FuentesExternasPrepagoVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 05 18:10:00 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FuentesExternasPrepagoVOImpl extends ViewObjectImpl implements FuentesExternasPrepagoVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public FuentesExternasPrepagoVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void testFuentesExternasPrepago(){
        Map<String, Object> map = new HashMap<String, Object>();
        List<String> listaLineaCredito = new ArrayList<String>();
        listaLineaCredito.add("1");
        List<String> listaContratoDesembolso = new ArrayList<String>();
        listaContratoDesembolso.add("BHQLD02072720058");
    
        map.put("lineaCredito", listaLineaCredito);
        map.put("lineaContrato", listaContratoDesembolso);
        this.consultarFuentesExternas(map);
    
    }
    
    /**
     * Se crea metodo para obtener un Map con las listas de
     * Linea de credito y Contrato desembolso
     * @param listaIdContratoDesembolso y listaCodigoCobertura
     * @since 05/09/2016
     */
    public void consultarFuentesExternas(Map<String, Object> map) {
        logger.log(ADFLogger.WARNING, "INTO consultarFuentesExternas");
        this.executeEmptyRowSet();
        //List<String> listaLineaCreditoValidar = new ArrayList<String>();
        List<String> listaContratoDesembolsoValidar = new ArrayList<String>();
        //        if (null != map.get("lineaCredito")) {
        //            listaLineaCreditoValidar = (List<String>) map.get("lineaCredito");
        //        } else {
        //            logger.log(ADFLogger.WARNING, "La linea de credito del map es nulo.");
        //        }
        if (null != map.get("lineaContrato")) {
            listaContratoDesembolsoValidar = (List<String>) map.get("lineaContrato");
        } else {
            logger.log(ADFLogger.WARNING, "La linea del contrato del map es nulo.");
        }
        String contratoDesembolso = "CONTRATO_DESEMBOLSO IN (";
        //String lineaCredito = " AND CODIGO_LINEA_CREDITO IN (";
        int i = 0;
        //int j = 0;

        try {
            logger.log(ADFLogger.WARNING, "Valor de las listas." + listaContratoDesembolsoValidar);
            if (listaContratoDesembolsoValidar.size() == 0) {
                logger.log(ADFLogger.WARNING, "No existen valores en las listas,executeEmptyRowSet");
                this.executeEmptyRowSet();
                logger.log(ADFLogger.WARNING, "Ejecuta el executeEmptyRowSet.");
            } else {
                //List<String> listaLineaCredito = new ArrayList<String>();
                List<String> listaIdContratoDesembolso = new ArrayList<String>();
                //                if (null != map.get("lineaCredito")) {
                //                    listaLineaCredito = (List<String>) map.get("lineaCredito");
                //                } else {
                //
                //                }
                if (null != map.get("lineaContrato")) {
                    listaIdContratoDesembolso = (List<String>) map.get("lineaContrato");
                }

                if (null != listaIdContratoDesembolso && listaIdContratoDesembolso.size() > 0) {
                    for (String contrato : listaIdContratoDesembolso) {

                        if (i < (listaIdContratoDesembolso.size() - 1)) {
                            contratoDesembolso += "'" + contrato + "',";
                        } else {
                            contratoDesembolso += "'" + contrato + "'";
                        }
                        i++;
                    }
                    contratoDesembolso += ")";
                } else
                    contratoDesembolso += "'')";

                /* Se remueve filtro por CODIGO_LINEA_CREDITO.
                 *
                 * if (null != listaLineaCredito && listaLineaCredito.size() > 0) {
                    for (String linea : listaLineaCredito) {
                        if (j < (listaLineaCredito.size() - 1)) {
                            lineaCredito += "'" + linea + "',";
                        } else {
                            lineaCredito += "'" + linea + "'";
                        }
                        j++;
                    }
                    lineaCredito += ")";
                } else
                    lineaCredito += "'')";

                contratoDesembolso += lineaCredito; */

                logger.log(ADFLogger.WARNING, "Valor Clausula WHERE :" + contratoDesembolso);
                this.setWhereClause(contratoDesembolso);
                this.executeQuery();
                logger.warning("Cantidad de registros en FuentesExternasPrepagoVO :" + this.getEstimatedRowCount());
            }
            logger.log(ADFLogger.WARNING, "SQL :" + this.getQuery());
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error en consultarFuentesExternas ", e);
            this.executeEmptyRowSet();
            logger.log(ADFLogger.WARNING, "Finaliza manejo de exepcion.");
            
            JboException exception = new JboException("Error: " + e.getMessage());
            throw exception;
        }
    }

}

