package org.bcie.fenix.common.model.vo;

import org.bcie.fenix.common.model.vo.common.LimitesExcepcionVO;
import org.bcie.operacionmo.ConsultarLimitesOperacionRequestType;
import org.bcie.operacionmo.ConsultarLimitesOperacionResponseType;
import com.bcie.xmlns.operacionservice.Operacion12BndQSService;
import com.bcie.xmlns.operacionservice.Operacion12Port;

import java.sql.ResultSet;

import java.util.ArrayList;
import java.util.Date;

import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.atributobo.EntidadMinima;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.operacionbo.LimitesOperacion;
import org.bcie.resultbo.SuccessType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 06 18:10:22 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LimitesExcepcionVOImpl extends ViewObjectImpl implements LimitesExcepcionVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public LimitesExcepcionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public Map cargarLimites(Long idoperacion){
        logger.warning("Entra en cargarLimites");
        logger.warning("idoperacion :"+idoperacion);
        Map <String, Object> obtuvo =new HashMap<String, Object>();
        String respuesta=null;
        String mensaje=null;
        Row newLimite;
        NameValuePairs nVpDatos;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.OPERACION);
        executeQuery();
        
        Operacion12BndQSService operacion12BndQSService =
                IWsdlLocation.Service.getInstance(Operacion12BndQSService.class, wsdl);
        Operacion12Port operacion12Port = operacion12BndQSService.getOperacion12BndQSPort();
        
            ConsultarLimitesOperacionRequestType consultarLimitesOperacionRequest=new ConsultarLimitesOperacionRequestType();
            consultarLimitesOperacionRequest.setOperacion(idoperacion);
            Date horaInicio =
                ModelUtils.logStartWS(logger, consultarLimitesOperacionRequest, FenixModelConstants.WSC_CONSULTAR_LIMITES);
            
            ConsultarLimitesOperacionResponseType  consultarLimitesOperacionResponse= 
                operacion12Port.consultarLimitesOperacion(consultarLimitesOperacionRequest);
            ModelUtils.logEndWS(logger, consultarLimitesOperacionResponse, FenixModelConstants.WSC_CONSULTAR_LIMITES,
                                horaInicio);
            try{
            if(consultarLimitesOperacionResponse!=null && 
                consultarLimitesOperacionResponse.getResultado()!=null &&
                consultarLimitesOperacionResponse.getResultado().getResult()!=null){
                if (consultarLimitesOperacionResponse.getResultado().getResult().compareTo(SuccessType.OK) == 0) {
                    if (consultarLimitesOperacionResponse.getResultado().getMessage() != null) {
                        mensaje = consultarLimitesOperacionResponse.getResultado().getMessage();
                    }
                    if (consultarLimitesOperacionResponse.getDetalleLimiteOperacion() != null &&
                        consultarLimitesOperacionResponse.getDetalleLimiteOperacion().size() > 0) {
                        obtuvo.put("respuesta", Boolean.TRUE);
                        obtuvo.put("mensaje", mensaje);
                        List<LimitesOperacion> listaLimites =
                            consultarLimitesOperacionResponse.getDetalleLimiteOperacion();
                        logger.warning("Cantidad de limites encontrados:"+listaLimites.size());
                        for (LimitesOperacion entidad : listaLimites) {
                            logger.warning("idLimite: " + entidad.getId());
                            logger.warning("Descripcion: " + entidad.getDescripcion());
                            logger.warning("Status: " + entidad.getEstatus());
                            logger.warning("Porcentaje :"+entidad.getEsPorcentaje());
                            logger.warning("DifPorcentaje :"+entidad.getDifPorcentaje());
                            logger.warning("DifValor :"+entidad.getDifValor());
                            newLimite = null;
                            nVpDatos = new NameValuePairs();
                            if(entidad.getId() != null) {
                                nVpDatos.setAttribute("idLimite", entidad.getId());
                            }
                            if(entidad.getDescripcion() != null) {
                                nVpDatos.setAttribute("Descripcion", entidad.getDescripcion());
                            }
                            if(entidad.getEstatus() != null){
                                nVpDatos.setAttribute("Status",entidad.getEstatus());
                            }
                            if(entidad.getEsPorcentaje() != null){
                                nVpDatos.setAttribute("Porcentaje",entidad.getEsPorcentaje());
                            }
                            if(entidad.getDifPorcentaje() != null){
                                nVpDatos.setAttribute("DifPorcentaje",entidad.getDifPorcentaje());
                            }
                            if(entidad.getDifValor()!= null){
                                nVpDatos.setAttribute("DifValor",entidad.getDifValor());
                            }
                            
                            nVpDatos.setAttribute("Mensaje", mensaje);
                            
                            newLimite = createAndInitRow(nVpDatos);
                            insertRow(newLimite);
                            /*
                                                    if(entidad.isEstatus()!=null){
                                                        nVpDatos.setAttribute("Status", entidad.isEstatus());
                                                        }
                                                    else{
                                                        //nVpDatos.setAttribute("Status", Boolean.FALSE);
                                                        }
                                                    */
                        }
                    } else {
                        logger.warning("No se obtuvo el detalle limite de la operacion.");
                    }

                } else {
                    if (consultarLimitesOperacionResponse.getResultado().getMessage() != null) {
                        respuesta = consultarLimitesOperacionResponse.getResultado().getMessage();
                        obtuvo.put("respuesta", Boolean.FALSE);
                        obtuvo.put("mensaje", respuesta);
                        //throw new Exception(respuesta);
                        /*
                                        newLimite = null;
                                        nVpDatos = new NameValuePairs();
                                        nVpDatos.setAttribute("idLimite", 18L);
                                        nVpDatos.setAttribute("Descripcion", "Prueba");
                                        nVpDatos.setAttribute("Status", Boolean.TRUE);
                                        nVpDatos.setAttribute("Mensaje", respuesta);
                                        newLimite = createAndInitRow(nVpDatos);
                                        insertRow(newLimite);
                                        */
                    }

                }
            }else{
                logger.warning("No se obtuvo respuesta del servicio.");
                throw new Exception("Error, No se obtuvo respuesta del servicio.");
            }
            }catch(Exception e){
                logger.warning("Error en cargarLimites.", e);
                JboException ex = new JboException(e);
                throw ex;
            }
        logger.warning("Fuera de cargarLimites");
        return obtuvo;
        }
    

}

