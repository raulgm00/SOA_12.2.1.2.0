package org.bcie.fenix.common.model.vo;

import com.bcie.crearactualizarbitacoradocumento.CrearActualizarBitacoraDocumento;
import com.bcie.crearactualizarbitacoradocumento.CrearActualizarBitacoraDocumentoSOAP12BindingQSService;
import com.bcie.xmlns.documentoservice.Documento12BndQSService;
import com.bcie.xmlns.documentoservice.DocumentoPT;

import java.io.StringWriter;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;

import java.util.HashMap;
import java.util.List;

import java.util.Map;

import java.util.Objects;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.crearactualizarbitacoradocumentobo.BitacoraDocumento;
import org.bcie.crearactualizarbitacoradocumentomo.CrearActualizarBitacoraDocumentoRequest;
import org.bcie.crearactualizarbitacoradocumentomo.CrearActualizarBitacoraDocumentoResponse;
import org.bcie.documentobo.Documento;
import org.bcie.documentobo.ListaDocumentos;
import org.bcie.documentomo.CargarDocumentoRequestType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.DocumentosAdjuntadosVO;

import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 27 10:43:24 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentosAdjuntadosVOImpl extends ViewObjectImpl implements DocumentosAdjuntadosVO {
    
    private static ADFLogger logger = null;
    
    
    /**
     * This is the default constructor (do not remove).
     */
    public DocumentosAdjuntadosVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public void limpiarCacheDocumentosAdjuntadosVO() {
        long startTime = System.currentTimeMillis();                    
        startTime = System.currentTimeMillis();
        logger.warning("Tiempo de inicio de documentos: "
                 + startTime);
        // Limpia el cache de la VO para que no se quede con los datos de otro id operación
        this.clearCache();
    }
    
    public void cargarDocumentos(){        
        Documento12BndQSService documento12BndQSService = null;
        DocumentoPT documentoPT = null;
        CargarDocumentoRequestType request = null;
        ListaDocumentos listaDocumentos = null;
        Documento documento = null;
        StringWriter xmlEntrada = null;
        FenixAMImpl fenixAM = null;
        Long idOperacion = null;
        Integer idTarea = null;
        
        try{
            SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date horaInicio = new GregorianCalendar().getTime();
            int numDocAdjunto = 0; // Documentos con un archivo adjunto
            int numDocJustificados = 0; // Documentos de tipo Justificación (i.e. que no tienen un IdAdjunto)
            
            // The recommended way to iterate a View Object is via a secondary RowSetIterator             
            RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();
                                    
            // Iteramos en todos los rows para llenar valores de número documentos que enviarán al servicio y 
            // de documentos de tipo Justificación que se les actualizará su acción a Sincronizado.
            while (iterator.hasNext()) {
                Row row = iterator.next();
                idOperacion = (Long)row.getAttribute("IdOperacion");
                idTarea = (Integer)row.getAttribute("IdTareaBpm");
                
                if(row.getAttribute("IdAdjunto") != null)                     
                    numDocAdjunto++;
                else
                    numDocJustificados++;
            }
            
            logger.log(ADFLogger.WARNING, "Inside cargarDocumentos. Hora de inicio: " + dateFormat.format(horaInicio.getTime()) +
                                          ". IdOperacion: " + idOperacion + ". IdTareaBpm: " + idTarea +
                                          ". RowCount: " + iterator.getRowCount() + ". numDocAdjunto: " + numDocAdjunto +
                                          ". numDocJustificados: " + numDocJustificados);
            
            if((numDocAdjunto >0) || (numDocJustificados >0)) {
                
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                
                // Documentos que se van al servicio cargarDocumento.
                if(numDocAdjunto > 0) {
                    
                    request = new CargarDocumentoRequestType();
                    listaDocumentos = new ListaDocumentos();
                    request.setDocumentos(listaDocumentos);
                    
                    // Iteramos de nuevo en el rowset
                    iterator.reset();
                    while (iterator.hasNext()) {
                        Row row = iterator.next();
                        
                        if(row.getAttribute("IdAdjunto") != null) { // Verificamos que no se manden ids null al servicio
                            documento = new Documento();
                            documento.setIdAdjunto((Long)row.getAttribute("IdAdjunto"));
                            request.getDocumentos().getDocumento().add(documento);
                        }
                    }
                                
                    String wsdl = fenixAM.getWsdl(IWsdlLocation.DOCUMENTO); // Creando proxy
                    documento12BndQSService = IWsdlLocation.Service.getInstance(Documento12BndQSService.class, wsdl);
                    documentoPT = documento12BndQSService.getDocumento12BndQSPort();
                    
                    logger.log(ADFLogger.WARNING, "Start invocando Servicio - Cargar Documento-");
                        xmlEntrada = fenixAM.writeXMLRequest(request, request.getClass());
                        logger.log(ADFLogger.WARNING, xmlEntrada.toString());
                        
                    documentoPT.cargarDocumento(request); // Esta operación es one way, no tiene response
                }
                
                // Documentos Justificados, se les cambia en BD su acción a Sincronizado.
                if(numDocJustificados > 0) {
                    
                    // Iteramos de nuevo en el rowset
                    iterator.reset();
                    while (iterator.hasNext()) {
                        Row row = iterator.next();
                        
                        if(row.getAttribute("IdAdjunto") == null) {
                            Long idDocumento = (Long)row.getAttribute("IdDocumento");
                            fenixAM.getDocumentoVO().
                                actualizarAccionDocumento(idDocumento, FenixModelConstants.TIPO_ACCION_SINCRONIZADO);
                        }
                    }    
                }
            }
            
            iterator.closeRowSetIterator();
        } catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en cargarDocumentos " + e.getClass() + ":" + e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al cargar los documentos, favor de intentar más tarde."));
            throw ex;
        }
    }
    
    //Metodo utilizado en boton Enviar Documento (Documentos de tipo Justificacion no se toman en cuenta).
    public Map enviarDocumentoOnBase(String usuario) {
        logger.warning("Inside enviarDocumentoOnBase.");
        
        Documento12BndQSService documento12BndQSService = null;
        DocumentoPT documentoPT = null;
        CargarDocumentoRequestType request = null;
        ListaDocumentos listaDocumentos = null;
        Documento documento = null;
        StringWriter xmlEntrada = null;
        FenixAMImpl fenixAM = null;
        Long idOperacion = null;
        Integer idTarea = null;
        Boolean enviarDoc = Boolean.FALSE;
        Long idDocumento = null;
        
        Map<Long, String> adjuntosName = new HashMap<Long, String>();
        
        try{
            SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date horaInicio = new GregorianCalendar().getTime();
            int numDocAdjunto = 0; // Documentos con un archivo adjunto
            int numDocAEnviar = 0; // Documentos con un archivo adjunto
            
            // The recommended way to iterate a View Object is via a secondary RowSetIterator             
            RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();
                                    
            // Iteramos en todos los rows para llenar valores de número documentos que enviarán al servicio y 
            // de documentos de tipo Justificación que se les actualizará su acción a Sincronizado.
            while (iterator.hasNext()) {
                Row row = iterator.next();
                idOperacion = (Long)row.getAttribute("IdOperacion");
                idTarea = (Integer)row.getAttribute("IdTareaBpm");
                
                if(row.getAttribute("IdAdjunto") != null) {                    
                    numDocAdjunto++;
                }
                
                //Si el estado del documento es diferente de EN_PROCESO se envia en request.
                if (row.getAttribute("Estado") != null) {
                    if (row.getAttribute("Estado").toString().equalsIgnoreCase("EN_PROCESO")) {
                        logger.warning("Documento EN_PROCESO: " + row.getAttribute("Filename"));
                    } else {
                        numDocAEnviar++;
                    }
                } else {
                    numDocAEnviar++;
                }
            }
            
            logger.log(ADFLogger.WARNING, "Inside cargarDocumentos. Hora de inicio: " + dateFormat.format(horaInicio.getTime()) +
                                          ". IdOperacion: " + idOperacion + ". IdTareaBpm: " + idTarea +
                                          ". RowCount: " + iterator.getRowCount() + ". numDocAdjunto: " + numDocAdjunto +
                                          ". numDocAEnviar: " + numDocAEnviar);
            
            // Documentos que se van al servicio cargarDocumento.
            if ((numDocAdjunto > 0) && (numDocAEnviar > 0)) {

                fenixAM = (FenixAMImpl) this.getRootApplicationModule();

                request = new CargarDocumentoRequestType();
                listaDocumentos = new ListaDocumentos();
                request.setDocumentos(listaDocumentos);

                // Iteramos de nuevo en el rowset
                iterator.reset();
                while (iterator.hasNext()) {
                    Row row = iterator.next();
                    enviarDoc = Boolean.FALSE;
                    
                    if (row.getAttribute("IdAdjunto") != null) { // Verificamos que no se manden ids null al servicio
                        
                        //Si el estado del documento es diferente de EN_PROCESO se envia en request.
                        if (row.getAttribute("Estado") != null) {
                            if (row.getAttribute("Estado").toString().equalsIgnoreCase("EN_PROCESO")) {
                                
                            } else {
                                enviarDoc = Boolean.TRUE;
                            }
                        } else {
                            enviarDoc = Boolean.TRUE;
                        }
                        
                        if (enviarDoc) {
                            documento = new Documento();
                            documento.setIdAdjunto((Long) row.getAttribute("IdAdjunto"));
                            idDocumento = (Long)row.getAttribute("IdDocumento");
                            request.getDocumentos().getDocumento().add(documento);
                            /*
                            crearRegistroBitacoraDocumento(idDocumento, usuario, idTarea);*/
                            //crear bitacora directamente a BD
                            crearRegistroTbiDocumentoPorDB(idDocumento, usuario, idTarea);
                                                                                
                            //Se agregan a mapa documentos enviados en request
                            adjuntosName.put((Long) row.getAttribute("IdDocumento"), (String) row.getAttribute("Filename"));
                        }
                    }
                }

                String wsdl = fenixAM.getWsdl(IWsdlLocation.DOCUMENTO); // Creando proxy
                documento12BndQSService = IWsdlLocation.Service.getInstance(Documento12BndQSService.class, wsdl);
                documentoPT = documento12BndQSService.getDocumento12BndQSPort();

                logger.log(ADFLogger.WARNING, "Start invocando Servicio - Cargar Documento-");
                xmlEntrada = fenixAM.writeXMLRequest(request, request.getClass());
                logger.log(ADFLogger.WARNING, xmlEntrada.toString());

                documentoPT.cargarDocumento(request); // Esta operación es one way, no tiene response
            }
            
            iterator.closeRowSetIterator();
            
        } catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en cargarDocumentos " + e.getClass() + ":" + e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al cargar los documentos, favor de intentar más tarde."));
            throw ex;
        }
        
        return adjuntosName;
    }

    private void crearRegistroBitacoraDocumento(Long idDocumento, String usuario, Integer idTarea) {
        logger.warning("Entra en crearRegistroBitacoraDocumento");
        logger.warning("idDocumento : " + idDocumento);

        FenixAMImpl fenixAM = null;

        String wsdl = null;
        CrearActualizarBitacoraDocumentoSOAP12BindingQSService crearActualizarBitacoraDocumentoSOAP12BindingQSService =
            null;
        CrearActualizarBitacoraDocumento crearActualizarBitacoraDocumento = null;
        CrearActualizarBitacoraDocumentoRequest request = null;
        CrearActualizarBitacoraDocumentoResponse response = null;
        BitacoraDocumento bitacoraDocumento = null;
        
        GregorianCalendar fecha = null;
        XMLGregorianCalendar fechaRegistro = null;
        Long idTareaBpm = null;
        Date horaInicio = null;
        try{

            fecha = new GregorianCalendar();
            fechaRegistro = DatatypeFactory.newInstance().newXMLGregorianCalendar(fecha);
            logger.warning("fechaRegistro : " + fechaRegistro);
            idTareaBpm = idTarea.longValue();
            
            fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            wsdl = fenixAM.getWsdl(IWsdlLocation.CREAR_ACTUALIZAR_BIT_DOC);

            crearActualizarBitacoraDocumentoSOAP12BindingQSService =
                IWsdlLocation.Service.getInstance(CrearActualizarBitacoraDocumentoSOAP12BindingQSService.class, wsdl);
            ;
            crearActualizarBitacoraDocumento =
                crearActualizarBitacoraDocumentoSOAP12BindingQSService.getCrearActualizarBitacoraDocumentoSOAP12BindingQSPort();

            request = new CrearActualizarBitacoraDocumentoRequest();
            bitacoraDocumento = new BitacoraDocumento();
            bitacoraDocumento.setIdDocumento(idDocumento);
            
            if(null != usuario)
                bitacoraDocumento.setUsuario(usuario);
            
            bitacoraDocumento.setIdTarea(idTareaBpm);
            bitacoraDocumento.setEstado("EN_PROCESO");
            bitacoraDocumento.setDescripcion("EN_PROCESO : ");
            bitacoraDocumento.setEstatus(Boolean.TRUE);
            bitacoraDocumento.setFechaRegistro(fechaRegistro);
            bitacoraDocumento.setRegistroActivo(Boolean.TRUE);

            request.setBitacoraDocumentoInput(bitacoraDocumento);
            
            horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CREAR_ACTUALIZAR_BIT_DOC);
            response = crearActualizarBitacoraDocumento.crearActualizarBitacoraDocumento(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CREAR_ACTUALIZAR_BIT_DOC, horaInicio);
            
            if(null != response && null != response.getResult() && null != response.getResult().getResult()){
                switch(response.getResult().getResult()){
                case OK:
                    logger.warning("Se creo el registro en la bitacora correctamente");
                    if(null != response.getResult().getMessage()){
                        logger.warning("Respuesta :" + response.getResult().getMessage());
                    }
                    break;
                case ERROR:
                    logger.warning("Error al crear el registro en la bitacora.");
                    String msj = response.getResult().getError().getErrorDescription();
                    logger.warning("Error:  " + msj);
                    break;
                }

            }else{
                logger.warning("No se recibió respuesta del servicio.");

            }
            
        }catch (Exception e){
            logger.warning("Error en crearRegistroBitacoraDocumento.", e);
        }
    }

    //Metodo que devuelve Map con lista de documentos actuales que cuentan con idAdjunto
    public Map currentDocuments() {
        logger.warning("Inside currentDocuments.");

        Map<Long, String> adjuntosMap = new HashMap<Long, String>();

        // The recommended way to iterate a View Object is via a RowSetIterator
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();

        // Iteramos en todos los rows para almacenar solo los documentos que cuentan con idAdjunto
        while (iterator.hasNext()) {
            Row row = iterator.next();

            if(row.getAttribute("IdAdjunto") != null) {
                adjuntosMap.put((Long) row.getAttribute("IdDocumento"), (String) row.getAttribute("Filename"));
                logger.warning(row.getAttribute("IdDocumento") + " : " + row.getAttribute("Filename"));
            }
        }
        
        iterator.closeRowSetIterator();
        
        return adjuntosMap;
    }
    
    public Boolean verificarEstadoDocumento() {
        logger.warning("Inside verificarEstadoDocumento.");

        Boolean result = Boolean.FALSE;

        // The recommended way to iterate a View Object is via a RowSetIterator
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();

        while (iterator.hasNext()) {
            Row row = iterator.next();

            if (row.getAttribute("Estado") != null) {
                if (row.getAttribute("Estado").toString().equalsIgnoreCase("EN_PROCESO") ||
                    row.getAttribute("Estado").toString().equalsIgnoreCase("ERROR")) {
                    result = Boolean.TRUE;
                    break;
                }
            }
        }

        iterator.closeRowSetIterator();

        logger.warning("verificarEstadoDocumento: " + result);
        return result;
    }
    
    
    public void crearRegistroTbiDocumentoPorDB(Long idDocumento, String usuario, Integer idTarea) {
        logger.warning("Dentro crearRegistroTbiDocumentoPorDB");
        logger.warning("idDocumento : " + idDocumento);
        logger.warning("usuario :"+usuario);
        logger.warning("idTarea :"+idTarea);
        //declaracion de variables
        FenixAMImpl fenixAM = null;
        Boolean resultado = null;

        try{
            //se obtiene la instancia de AM
            fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            //se ejecuta el metodo para insertar
            resultado =fenixAM.getTbiDocumentoVO().crearRegistroTbiDocumento(idDocumento, idTarea, usuario, usuario,
                                                                                null, "EN_PROCESO",new Integer("0"),
                                                                                    new Integer("1"),new Integer("1"), "EN_PROCESO : ");
            logger.warning("resultado de insertar bitacora del idDocumento:"+idDocumento +" es :"+resultado);
        }catch (Exception e){
            logger.severe("Error en crearRegistroTbiDocumentoPorDB", e);
        }
        
        logger.warning("Fuera crearRegistroTbiDocumentoPorDB");
    }
    
    public void refreshDocumentosAdjuntadosAction() {
        logger.warning("Inside refreshDocumentosAdjuntadosAction.");
        
        this.executeQuery();
    }
    
    /**
     * Returns the bind variable value for operacionId.
     * @return bind variable value for operacionId
     */
    public Number getoperacionId() {
        return (Number) getNamedWhereClauseParam("operacionId");
    }

    /**
     * Sets <code>value</code> for bind variable operacionId.
     * @param value value to bind as operacionId
     */
    public void setoperacionId(Number value) {
        logger.log(ADFLogger.TRACE, "Inside setoperacionId: " + value);
        setNamedWhereClauseParam("operacionId", value);
    }

    /**
     * Returns the bind variable value for idTarea.
     * @return bind variable value for idTarea
     */
    public Number getidTarea() {
        return (Number) getNamedWhereClauseParam("idTarea");
    }

    /**
     * Sets <code>value</code> for bind variable idTarea.
     * @param value value to bind as idTarea
     */
    public void setidTarea(Number value) {
        setNamedWhereClauseParam("idTarea", value);
    }

    /**
     * Returns the bind variable value for numeroSerieDocumento.
     * @return bind variable value for numeroSerieDocumento
     */
    public Number getnumeroSerieDocumento() {
        return (Number) getNamedWhereClauseParam("numeroSerieDocumento");
    }

    /**
     * Sets <code>value</code> for bind variable numeroSerieDocumento.
     * @param value value to bind as numeroSerieDocumento
     */
    public void setnumeroSerieDocumento(Number value) {
        setNamedWhereClauseParam("numeroSerieDocumento", value);
    }
    
    
    /**
     * [KB: 15525]
     * Verifica que exista un documento adjunto con el codigo externo pasado por param.
     * @param codExterno Obligatorio. Código externo del documento a verificar (TCA_DOCUMENTO.COD_EXTERNO).
     * @return Verdadero si y solo si dentro de los documentos adjuntos existe uno con el código externo pasado como param.
     */
    public Boolean existeDocumentoAdjuntoConCodigoExterno(String codExterno){
        logger.warning("Dentro de verificarDocumentoAdjunto");
        Objects.requireNonNull(codExterno);

        Boolean encontrado = Boolean.FALSE;
        // The recommended way to iterate a View Object is via a secondary RowSetIterator
        RowSetIterator iterator = null;
        try {
            logger.warning("Creando iterador secundario");
            iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();

            logger.warning("Iterando docs adjuntados buscando DocCodExterno = {0}", codExterno);
            while (iterator.hasNext()) {
                Row row = iterator.next();
                String docCodExterno = (String) row.getAttribute("DocCodExterno");
                if (codExterno.equalsIgnoreCase(docCodExterno)) {
                    logger.warning("Documento adjuntado encontrado con el mismo DocCodExterno");
                    encontrado = Boolean.TRUE;
                    break;
                }
            }
            logger.warning("Finaliza iteracion de docs adjuntados");
        } finally {
            if (iterator != null) {
                iterator.closeRowSetIterator();
            }
        }

        return encontrado;
    }
}

