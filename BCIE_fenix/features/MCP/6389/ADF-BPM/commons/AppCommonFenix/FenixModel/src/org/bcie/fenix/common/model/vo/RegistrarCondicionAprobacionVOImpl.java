package org.bcie.fenix.common.model.vo;

import java.util.ArrayList;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Array;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.condicionbo.CategoriaCondicion;
import org.bcie.condicionbo.Condicion;
import org.bcie.condicionbo.ObservacionCondicion;
import org.bcie.contratomo.ConsultarPlazoCondicionResponseType;
import org.bcie.fenix.common.model.am.FenixAMImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Dec 14 18:43:25 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegistrarCondicionAprobacionVOImpl
  extends ViewObjectImpl
{
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(RegistrarCondicionAprobacionVOImpl.class);
    
  /**
   * This is the default constructor (do not remove).
   */
  public RegistrarCondicionAprobacionVOImpl()
  {
  }
  
  public void agregarCondicion(Integer piId, Integer idTareaBpm)
  {
    RegistrarCondicionAprobacionVORowImpl newRow = (RegistrarCondicionAprobacionVORowImpl) this.createRow();
    
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.ID, piId);
    /*Por definicion siempre seran del tipo 1 Evento*/
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.TIPOCONTROLID, new oracle.jbo.domain.Number(1));
    
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDTAREABPM, idTareaBpm);
    
    this.insertRow(newRow);
    this.setCurrentRow(newRow);
  }
  
  public Boolean eliminarComision(Integer piId)
  {
    logger.warning("Id de Registro a Eliminar: " + piId);
    Row row = null;
    Boolean esRegistroActivo = Boolean.FALSE;
    try{
        row = obtenerRowCondicion(piId);    
    }catch(Exception e){
        logger.severe("Error al buscar el registro por Id", e);
    }
    
    if(null != row.getAttribute("IdCondicion")){
        esRegistroActivo = Boolean.TRUE;
    }
    
    if(row != null){
        logger.warning("Registro encontrado");
        this.setCurrentRow(row);
        this.removeCurrentRow();   
        if(getEstimatedRowCount() > 0){
            logger.warning("Existen mas registros, se asigna el primer registro como current row: " + first());
            setCurrentRow(first());
        }
    }else{
        logger.warning("Registro no encontrado");
    }
    return esRegistroActivo;
  }
  
  public Row obtenerRowCondicion(Integer piId)
  {
    return this.getRow((new Key(new Object[]{piId})));
  }

  public void cargarCondiciones(ConsultarPlazoCondicionResponseType plazoCondicionResponse, Integer idTareaBpm)
  {
    if(null!= plazoCondicionResponse.getListaCondicion())
    {
      int i = 1;
      for(Condicion condicion: plazoCondicionResponse.getListaCondicion())
      {
        agregarRowCondicion(condicion, i, idTareaBpm);
        i++;
      }
      setCurrentRow(first());
    }
  }

  private void agregarRowCondicion(Condicion condicion, Integer piId, Integer idTareaBpm)
  {
    RegistrarCondicionAprobacionVORowImpl newRow = (RegistrarCondicionAprobacionVORowImpl) this.createRow();
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.ID, piId);
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDCONDICION, condicion.getIdCondicion());
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.NOMBRE, condicion.getNombre());
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.DESCRIPCION, condicion.getDescripcion());
    
    logger.warning("El Id de Tipo de Control que proviene de WS es: " + condicion.getTipoCondicion());
    logger.warning("Se asigna por defecto el Id de Tipo Control 1 " +
        "correspondiente a Evento para la tarea de Actualizar TCC del Proceso de Aprobacion");
    //Se asigna por defecto el tipo de control evento
    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.TIPOCONTROLID, new oracle.jbo.domain.Number(1));    

    newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.PLAZO, condicion.getPlazo());
    
    ObservacionCondicion observaciones = null;
    if(condicion.getObservaciones() != null &&
       condicion.getObservaciones().size() > 0){
        
        for(ObservacionCondicion observacionesTmp : condicion.getObservaciones()){
            if(observacionesTmp.isEsPrincipal()){
                observaciones = observacionesTmp;
                break;
            }
        }
        
        if(observaciones == null){
            logger.warning("No se encontro observacion principal");
        }
        
        if(observaciones != null){
            if(observaciones.getId() > 0){
                newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDOBSERVACION, new Number(observaciones.getId()));
            }
            
            if(observaciones.getObservacion() != null){
                newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.OBSERVACIONES, observaciones.getObservacion().trim()); 
            }
        }
    }

    if(condicion.getFrecuenciaPlazo() != null){
        newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.TIPOPLAZOID, condicion.getFrecuenciaPlazo().getId());    
    }
    
    if(null != condicion.getFechaFinal())
      newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.FECHAFINAL, condicion.getFechaFinal().toGregorianCalendar().getTime());
    
    List<Number> categoriasCondList = null;
    if(condicion.getCategoriaCondicion() != null &&
       condicion.getCategoriaCondicion().size() > 0){
        
        for(CategoriaCondicion cat : condicion.getCategoriaCondicion()){
            
            if(cat != null &&
               cat.getId() > 0){
                if(categoriasCondList == null){
                    categoriasCondList = new ArrayList<Number>();
                }
                categoriasCondList.add(new Number(cat.getId()));
            }
        }
        
        if(categoriasCondList != null){
            newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDCATEGORIACONDICIONLIST, new Array(categoriasCondList));
            obtenerDescCategorias(newRow);
        }
    }
    
    List<Number> eventosCondList = null;
    if(condicion.getEventoCondicion() != null &&
       condicion.getEventoCondicion().size() > 0){
        
        for(Catalogo evento : condicion.getEventoCondicion()){
            if(evento != null &&
               evento.getId() > 0){
                if(eventosCondList == null){
                    eventosCondList = new ArrayList<Number>();
                }
                eventosCondList.add(new Number(evento.getId()));
            }
        }
        
        if(eventosCondList != null){
            newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDEVENTOCONDICIONLIST, new Array(eventosCondList));
            obtenerDescEventos(newRow);
        }
    }
    
    if(idTareaBpm != null){
        newRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDTAREABPM, idTareaBpm);    
    }
    
    this.insertRow(newRow);
  }

  public void restablecerValoresComision(Integer piId, Row poCondicionRow)
  {
    
    RegistrarCondicionAprobacionVORowImpl currentRow = (RegistrarCondicionAprobacionVORowImpl) this.obtenerRowCondicion(piId);
    
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDCONDICION, poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.IDCONDICION));
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.NOMBRE,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.NOMBRE));
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.DESCRIPCION,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.DESCRIPCION));
    
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.TIPOCONTROLID,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.TIPOCONTROLID));
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.PLAZO,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.PLAZO));
    
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.OBSERVACIONES,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.OBSERVACIONES));
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDOBSERVACION,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.IDOBSERVACION));
    
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDCATEGORIACONDICIONLIST,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.IDCATEGORIACONDICIONLIST));
    obtenerDescCategorias(currentRow);
    
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDEVENTOCONDICIONLIST,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.IDEVENTOCONDICIONLIST));
    obtenerDescEventos(currentRow);
      
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDTAREABPM,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.IDTAREABPM));
    
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.TIPOPLAZOID,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.TIPOPLAZOID));
    currentRow.setAttribute(RegistrarCondicionAprobacionVORowImpl.FECHAFINAL,  poCondicionRow.getAttribute(RegistrarCondicionAprobacionActionsVORowImpl.FECHAFINAL));
    
    setCurrentRow(currentRow);
  }

    @SuppressWarnings("unchecked")
    public void asignarIdCategoriaCondicionList(Row rowCondicion,
                                                List<Number> pCategoriaCondList){
      
      if(rowCondicion != null){
          Array array = null;
          try{
              array = new Array(pCategoriaCondList);
              rowCondicion.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDCATEGORIACONDICIONLIST, array);    
          }catch(Exception e){
              logger.severe("Error al asignar lista de categoria de condiciones", e);
          }
          
          obtenerDescCategorias(rowCondicion);
      }else{
          logger.severe("Error el registro de Condicion es NULL");
      }
  }

    @SuppressWarnings("unchecked")
    public void obtenerDescCategorias(Row rowCondicion){
        Array array = null;
        array = (Array) rowCondicion.getAttribute(RegistrarCondicionAprobacionVORowImpl.IDCATEGORIACONDICIONLIST);
        if(array != null){
          
          FenixAMImpl am = (FenixAMImpl) getApplicationModule();
          if(am != null){
              
              List<String> descCategoriasList = null;
              try{
                  RowSetIterator iter = am.getTcaCategoriaCondicionVO().createRowSetIterator(null);
                  if(iter != null){
                      for(Number id : ((List<Number>)array.getList())){
                          TcaCategoriaCondicionVORowImpl rowCatCond = null;
                          iter.reset();
                          while(iter.hasNext()){
                              rowCatCond = (TcaCategoriaCondicionVORowImpl) iter.next();
                              if(rowCatCond.getId().equals(id)){
                                  if(descCategoriasList == null){
                                      descCategoriasList = new ArrayList<String>();
                                  }
                                  descCategoriasList.add(rowCatCond.getDescripcion());
                              }
                          }
                      }
                      iter.closeRowSetIterator();
                  }
              }catch(Exception e){
                  logger.severe("Error al iterar y obtener las descripciones de la categoria condicion", e);
              }
              
              if(descCategoriasList != null){
                  rowCondicion.setAttribute(RegistrarCondicionAprobacionVORowImpl.DESCCATEGORIASTMP, 
                                            descCategoriasList.toString());
              }
          }
        }
    }

    public void asignarIdEventoCondicionList(Row rowCondicion,
                                             List<Number> pEventosCondList){
        
        if(rowCondicion != null){
            Array array = null;
            try{
                array = new Array(pEventosCondList);
                rowCondicion.setAttribute(RegistrarCondicionAprobacionVORowImpl.IDEVENTOCONDICIONLIST, array);    
            }catch(Exception e){
                logger.severe("Error al asignar lista de eventos de condiciones", e);
            }
            
            obtenerDescEventos(rowCondicion);
        }else{
            logger.severe("Error el registro de Condicion es NULL");
        }
    }

    @SuppressWarnings("unchecked")
    public void obtenerDescEventos(Row rowCondicion){
        Array array = null;
        array = (Array) rowCondicion.getAttribute(RegistrarCondicionAprobacionVORowImpl.IDEVENTOCONDICIONLIST);
        if(array != null){
          
          FenixAMImpl am = (FenixAMImpl) getApplicationModule();
          if(am != null){
              
              List<String> descEventosList = null;
              try{
                  RowSetIterator iter = am.getTcaEventoCondicionLOV().createRowSetIterator(null);
                  if(iter != null){
                      for(Number id : ((List<Number>)array.getList())){
                          TcaEventoCondicionLOVRowImpl rowEveCond = null;
                          iter.reset();
                          while(iter.hasNext()){
                              rowEveCond = (TcaEventoCondicionLOVRowImpl) iter.next();
                              if(rowEveCond.getTecId().equals(id)){
                                  if(descEventosList == null){
                                      descEventosList = new ArrayList<String>();
                                  }
                                  descEventosList.add(rowEveCond.getTecDescripcion());
                              }
                          }
                      }
                      iter.closeRowSetIterator();
                  }
              }catch(Exception e){
                  logger.severe("Error al iterar y obtener las descripciones de la categoria condicion", e);
              }
              
              if(descEventosList != null){
                  rowCondicion.setAttribute(RegistrarCondicionAprobacionVORowImpl.DESCEVENTOSTMP, 
                                            descEventosList.toString());
              }
          }
        }
    }
}

