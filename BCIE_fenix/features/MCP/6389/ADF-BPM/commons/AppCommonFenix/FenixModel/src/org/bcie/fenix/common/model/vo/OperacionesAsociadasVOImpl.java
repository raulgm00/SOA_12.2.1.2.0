package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.OperacionesAsociadasVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Sep 12 12:39:37 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OperacionesAsociadasVOImpl extends ViewObjectImpl implements OperacionesAsociadasVO {
    /**
     * This is the default constructor (do not remove).
     */
    public OperacionesAsociadasVOImpl() {
    }
    
    
    public void asociarOperaciones(Row row){
        
        Row rowOpAsociadas = null;
        
        if(row.getAttribute("IdOperacion") != null){
            
            // Filtramos el VO por IdOperacion para verificar que no se inserte más de una vez una operación
            Row[] operacionesAsociadas = this.getFilteredRows("IdOperacion", row.getAttribute("IdOperacion"));
            
            if(operacionesAsociadas.length == 0){
            
                rowOpAsociadas = this.createRow();
                rowOpAsociadas.setAttribute("IdOperacion", row.getAttribute("IdOperacion"));
                rowOpAsociadas.setAttribute("Nombre", row.getAttribute("Nombre"));
                rowOpAsociadas.setAttribute("Razonsocial", row.getAttribute("Razonsocial"));
                rowOpAsociadas.setAttribute("Nombrepais", row.getAttribute("Nombrepais"));
                this.insertRow(rowOpAsociadas);
            }
        }
    }
    
    public void limpiarAsociarOperaciones(){
        this.clearCache();
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

