package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import java.util.Date;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.comisionbo.Comision;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsobo.ContratoDesembolso;
import org.bcie.desembolsobo.ProductoDesembolsoType;
import org.bcie.desembolsomo.ConsultarCargoComisionRequestType;
import org.bcie.desembolsomo.ConsultarCargoComisionResponseType;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ComisionesOtrosCargos;
import org.bcie.resultbo.Resultado;
import org.bcie.resultbo.SuccessType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 12 18:45:54 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComisionesOtrosCargosImpl extends ViewObjectImpl implements ComisionesOtrosCargos {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ComisionesOtrosCargosImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    public Boolean consultarDesembolsosWS(Long idDesembolso, String codigoExterno) {
        logger.warning("Inside consultarDesembolsosWS.");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        Boolean result = Boolean.TRUE;
        
        logger.warning("idDesembolso " + idDesembolso);
        logger.warning("codigoExterno " + codigoExterno);
        
        if(idDesembolso != null &&
           codigoExterno != null){
            
            //Se limpia VO.
            this.executeQuery();
            logger.warning("Se limpia tabla - Comisiones y otros cargos.");
            
            try {
                FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DESEMBOLSO);
                
                DesembolsoPTSOAP12BindingQSService desembolsoPTSOAP12BindingQSService = IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
                DesembolsoPT desembolsoPT = desembolsoPTSOAP12BindingQSService.getDesembolsoPTSOAP12BindingQSPort();
                
                ConsultarCargoComisionRequestType request = new ConsultarCargoComisionRequestType();
                ContratoDesembolso contratoDesembolso = new ContratoDesembolso();
                contratoDesembolso.setIdDesembolso(idDesembolso);
                ProductoDesembolsoType productoDesembolsoType = new ProductoDesembolsoType();
                productoDesembolsoType.setCodExterno(codigoExterno);
                contratoDesembolso.setProducto(productoDesembolsoType);
                request.setDesembolso(contratoDesembolso);
                
                Date horaInicio = ModelUtils.logStartWS(logger, request, "consultarCargoComision");
                ConsultarCargoComisionResponseType response = desembolsoPT.consultarCargoComision(request);
                ModelUtils.logEndWS(logger, response, "consultarCargoComision", horaInicio);
                
                if (response != null) {
                    Resultado resultado = response.getResultado();
                    
                    if(resultado != null) {
                        SuccessType successType = resultado.getResult();
                        
                        if (successType != null && successType.value()!= null && successType.value().equalsIgnoreCase("OK")) {
                            this.loadComisionesOtrosCargos(response.getDesembolso().getComision());
                        } else {
                            logger.warning("error successType " + successType);
                            result = Boolean.FALSE;
                        }
                    } else {
                        logger.warning("error resultado");
                        result = Boolean.FALSE;
                    }
                } else {
                    logger.warning("error response");
                    result = Boolean.FALSE;
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, e.getMessage());
                result = Boolean.FALSE;
            }
        }else{
            logger.warning("Parametros de entrada insuficientes para consumir el servicio de consultarCargoComision");
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia            
        logger.warning("*Inf, Termina metodo consultarDesembolsosWS con una duracion de: "+tiempo+" segundos");
        return result;
    }
    
    private void loadComisionesOtrosCargos(List<Comision> comisiones) {
        logger.warning("inside");
        RowSetIterator rsi = this.getRowSetIterator();
        
        if (rsi != null) {
            logger.warning("cargando comisiones al table... " + comisiones);
            for (Comision comision : comisiones) {
                Row row = rsi.createRow();
                row.setAttribute(ComisionesOtrosCargosRowImpl.CODIGOBHQ, comision.getCodigoContrato());
                row.setAttribute(ComisionesOtrosCargosRowImpl.DESCRIPCIONCARGOCOMISION, comision.getDescripcion());
                //row.setAttribute(ComisionesOtrosCargosRowImpl.PORCENTAJE, comision.get); TODO Preguntar la propiedad correcta
                row.setAttribute(ComisionesOtrosCargosRowImpl.MONTO, comision.getMontoComision() != null ? comision.getMontoComision().doubleValue() : new Double(0));
                rsi.insertRow(row);
            }
        }
        rsi.closeRowSetIterator();
        logger.warning("saliendo");
    }
}

