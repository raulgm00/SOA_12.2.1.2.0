package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.TcaTipoMonedaVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 15 12:14:20 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TcaTipoMonedaVOImpl extends ViewObjectImpl implements TcaTipoMonedaVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TcaTipoMonedaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public String obtenerDescripcionMoneda(Integer idTipoMoneda){
        logger.warning("Inicia metodo obtenerDescripcionMoneda");
        String descripcionMoneda = null;
        Row row = null;
        
        if(null == idTipoMoneda){
            logger.warning("Parametro idTipoMoneda requerido es NULL");
            return descripcionMoneda;
        }
        
        logger.warning("IdTipoMoneda: " + idTipoMoneda);
        executeQuery();
        
        row = getRow(new Key(new Object[]{idTipoMoneda}));
        if(null != row){
            try{
                descripcionMoneda = (String) row.getAttribute("DescripcionCorta");
            }catch(Exception e){
                logger.warning("ERROR al obtener descripcion de moneda ", e);
            }
        }else{
            logger.warning("Objeto Row es NULL. No se encontro ningun registro con idTipoMoneda: " + idTipoMoneda);
        }
        
        logger.warning("DescripcionMoneda: " + descripcionMoneda);
        logger.warning("Termina metodo obtenerDescripcionMoneda");
        return descripcionMoneda;
    }
    
    public String obtenerCodigoExternoMoneda(Integer idTipoMoneda){
        logger.warning("Inicia metodo obtenerCodigoExternoMoneda");
        String codigoExterno = null;
        Row row = null;
        
        if(null == idTipoMoneda){
            logger.warning("Parametro idTipoMoneda requerido es NULL");
            return codigoExterno;
        }
        
        logger.warning("IdTipoMoneda: " + idTipoMoneda);
        executeQuery();
        
        row = getRow(new Key(new Object[]{idTipoMoneda}));
        if(null != row){
            try{
                codigoExterno = (String) row.getAttribute("CodExterno");
            }catch(Exception e){
                logger.warning("ERROR al obtener CodExterno de moneda ", e);
            }
        }else{
            logger.warning("Objeto Row es NULL. No se encontro ningun registro con idTipoMoneda: " + idTipoMoneda);
        }
        
        logger.warning("codigoExterno: " + codigoExterno);
        logger.warning("Termina metodo obtenerCodigoExternoMoneda");
        return codigoExterno;
    }
    
    public Integer obtenerIdTcaTipoMoneda(String descripcionCorta){
        logger.warning("Entra en obtenerIdTcaTipoMoneda");
        Integer idTcaTipoMoneda = null;
        
            try {
                ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("TcaTipoMonedaVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varDescripcionCorta", descripcionCorta);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                RowSetIterator rowsTipoMoneda = createRowSetIterator(null);
                rowsTipoMoneda.reset();

                    while (rowsTipoMoneda.hasNext()) {
                        TcaTipoMonedaVORowImpl rowL = (TcaTipoMonedaVORowImpl) rowsTipoMoneda.next();
                            if(null != rowL.getAttribute("Id")){
                                idTcaTipoMoneda = (Integer)rowL.getAttribute("Id");
                            }else{
                                logger.warning("Error al obtener el Id");
                            }
                    } 
                rowsTipoMoneda.closeRowSetIterator();
        }catch(Exception e){
            logger.warning("Error en obtenerIdTcaTipoMoneda", e);
        }
        logger.warning("Valor Id :" + idTcaTipoMoneda);
        return idTcaTipoMoneda;
    }

    /**
     * Returns the variable value for varDescripcionCorta.
     * @return variable value for varDescripcionCorta
     */
    public String getvarDescripcionCorta() {
        return (String) ensureVariableManager().getVariableValue("varDescripcionCorta");
    }

    /**
     * Sets <code>value</code> for variable varDescripcionCorta.
     * @param value value to bind as varDescripcionCorta
     */
    public void setvarDescripcionCorta(String value) {
        ensureVariableManager().setVariableValue("varDescripcionCorta", value);
    }
}

