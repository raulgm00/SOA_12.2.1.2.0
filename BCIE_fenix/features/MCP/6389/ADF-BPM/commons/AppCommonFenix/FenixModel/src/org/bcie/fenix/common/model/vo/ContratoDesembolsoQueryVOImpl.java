package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.ContratoDesembolsoQueryVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Aug 09 12:56:03 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratoDesembolsoQueryVOImpl extends ViewObjectImpl implements ContratoDesembolsoQueryVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContratoDesembolsoQueryVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row obtenerContratoPorId(Long idContrato){
        logger.warning("Inicia metodo obtenerContratoPorId.");      
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        
        Row row = null;
        ViewCriteria criteria = null;
        
        if(null == idContrato){
            logger.warning("El idContrato es NULL");
            return row;
        }
        
        executeQuery();
        try{  
            logger.warning("Ejecutando criteria de busqueda de contrato.");
            criteria = this.getViewCriteriaManager().getViewCriteria("ContratoDesembolsoPorIdVC");
            criteria.ensureVariableManager().setVariableValue("pIdContratoDesembolso", idContrato);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        
            logger.warning("Registros de contratos encontrados: " + getEstimatedRowCount());
            if(getEstimatedRowCount() > 0){
                row = first();
            }
        }catch(Exception e){
            logger.warning("ERROR al ejecutar el crietria ContratoDesembolsoPorIdVC.", e);
        }finally{
            //Eliminamos el ViewCriteria
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratoDesembolsoPorIdVC");
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo recuperarPrimerContrato con una duracion de: "+tiempo+" segundos");
        return row;
    }

    public BigDecimal obtenerMontoDesembolsarContrato(Long idContrato) {
        logger.warning("Inicia metodo obtenerMontoDesembolsarContrato");
        BigDecimal montoDesembolsar = null;
        Row row = null;

        row = obtenerContratoPorId(idContrato);

        if (null != row) {
            Integer idEstado = null;
            try {
                idEstado = (Integer) row.getAttribute("IdTcaEstado");
            } catch (Exception e) {
                logger.warning("No se pudo obtener el idEstado del contrato");
            }
            logger.warning("Estado del contrato: " + idEstado);

            if (null != idEstado) {
                logger.warning("Evaluando el estado del contrato");
                if (!idEstado.equals(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESESTIMADO)) {
                    if (null != row.getAttribute("MontoDesembolsar")) {
                        logger.warning("Obteniendo el monto a desembolsar del contrato");
                        try {
                            montoDesembolsar = (BigDecimal) row.getAttribute("MontoDesembolsar");
                        } catch (Exception e) {
                            logger.warning("No se pudo obtener el monto a desembolsar");
                        }
                    } else {
                        logger.warning("EL contrato no tiene monto a desembolsar");
                    }
                } else {
                    logger.warning("El contrato esta DESESTIMADO.");
                }
            } else {
                logger.warning("El estado del contrato es NULL");
            }
        } else {
            logger.warning("No existe registro de contrato con id: " + idContrato);
        }

        logger.warning("Termina metodo obtenerMontoDesembolsarContrato");
        return montoDesembolsar;
    }

    public String obtencionPrograma(Long idContrato) {
        String respuesta = null;
        Row row = null;
        logger.log(ADFLogger.WARNING, "Inside obtencionPrograma");
        logger.warning("idContrato: desembolso " + idContrato);
        if (null != idContrato) {
            try {
                // 1) Asignamos valor de retorno
                row = obtenerContratoPorId(idContrato);
                if(null != row){
                    if (null != row.getAttribute("ProgramaOperacion")) {
                        logger.warning("ProgramaOperacion: " + String.valueOf(row.getAttribute("ProgramaOperacion")));
                        respuesta = (String) row.getAttribute("ProgramaOperacion");
                    } else {
                        logger.warning("Los valores de ProgramaOperacion se encuentran vacios");
                    }
                }else{
                    logger.warning("No se recupero ningun Row.");
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
            }
        } else {
            logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
        }
        logger.warning("Termina obtencionPrograma");
        logger.warning("Valor que retorna es: " + respuesta);
        return respuesta;
    }
    
    public Boolean obtenerContratoDesembolsoById(Long id) {
        logger.log(ADFLogger.WARNING, "INTO  obtenerContratoDesembolsoById : ");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        Integer contador = 0;
        Boolean respuesta = Boolean.FALSE;
        ViewCriteria criteria =  null;
        
        try {
            if (id == null) {
                respuesta = Boolean.FALSE;
                logger.warning("Ingresa al if... id Contrato_Desembolso es null");
            } else {
                logger.warning("Ingresa al else... se comienza con la busqueda por id del Contrato_Desembolso");
                criteria = this.getViewCriteriaManager().getViewCriteria("ContratoDesembolsoPorIdVC");
                criteria.ensureVariableManager().setVariableValue("pIdContratoDesembolso", id);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsConsultarContratoDesembolsoVo = createRowSetIterator(null);
                rowsConsultarContratoDesembolsoVo.reset();
                while (rowsConsultarContratoDesembolsoVo.hasNext()) {
                    Row rowL = rowsConsultarContratoDesembolsoVo.next();
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);

                try {
                    if (contador > 0)
                        respuesta = Boolean.TRUE;
                    else
                        respuesta = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsConsultarContratoDesembolsoVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerContratoDesembolsoById " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarContratoDesembolsoCriteriaById");
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.log(ADFLogger.WARNING,"Termina  obtenerContratoDesembolsoById con una duracion de: " + tiempo + " segundos");
        return respuesta;
    }

    /**
     * Returns the variable value for pIdContratoDesembolso.
     * @return variable value for pIdContratoDesembolso
     */
    public Long getpIdContratoDesembolso() {
        return (Long) ensureVariableManager().getVariableValue("pIdContratoDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pIdContratoDesembolso.
     * @param value value to bind as pIdContratoDesembolso
     */
    public void setpIdContratoDesembolso(Long value) {
        ensureVariableManager().setVariableValue("pIdContratoDesembolso", value);
    }
}

