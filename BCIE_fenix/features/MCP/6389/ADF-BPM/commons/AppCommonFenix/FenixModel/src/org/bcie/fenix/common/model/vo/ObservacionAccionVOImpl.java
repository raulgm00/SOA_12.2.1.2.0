package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ObservacionAccionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 16 18:20:23 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ObservacionAccionVOImpl extends ViewObjectImpl implements ObservacionAccionVO {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ObservacionAccionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varIdAccion.
     * @return bind variable value for varIdAccion
     */
    public Long getvarIdAccion() {
        return (Long) getNamedWhereClauseParam("varIdAccion");
    }

    /**
     * Sets <code>value</code> for bind variable varIdAccion.
     * @param value value to bind as varIdAccion
     */
    public void setvarIdAccion(Long value) {
        setNamedWhereClauseParam("varIdAccion", value);
    }
    
    public oracle.jbo.domain.Number crearObservacion(Long idAccion, String login, String nombre,Integer rolBpm, String observacion, Integer tarea){
        logger.warning("Inicia metodo crearObservacion");
        
        Row observacionRow = null;
        oracle.jbo.domain.Number idObservacionAccion = null;
        NameValuePairs nvpObservacion = null;
        SequenceImpl seqObservacion = null;
        Integer ban=1;
        
        logger.warning("Validando parametros obligatorios.");
        if(null == idAccion || 
           null == login || 
           null == nombre || 
           null == observacion || 
           null == tarea){
            logger.warning("Parametros requeridos son nulos.");
            logger.warning("idAccion: " + idAccion);
            logger.warning("login: " + login);
            logger.warning("Nombre: " + nombre);
            logger.warning("Observacion: " + observacion);
            logger.warning("Tarea: " + tarea);
            return idObservacionAccion;
        }
        
        seqObservacion = new SequenceImpl("OBSERVACION_ACCION_SEQ", getDBTransaction());
        idObservacionAccion = seqObservacion.getSequenceNumber();
        nvpObservacion = new NameValuePairs();
        nvpObservacion.setAttribute("Id", idObservacionAccion);
        nvpObservacion.setAttribute("Observacion", observacion);
        nvpObservacion.setAttribute("IdTcaRolBpm", rolBpm);
        nvpObservacion.setAttribute("IdTcaTareaBpm", tarea);
        nvpObservacion.setAttribute("LoginUsuario", login);
        nvpObservacion.setAttribute("NombreUsuario", nombre);
        nvpObservacion.setAttribute("BanEstatus", ban);
        nvpObservacion.setAttribute("IdAccion", idAccion);
        nvpObservacion.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            
        observacionRow = this.createAndInitRow(nvpObservacion); 
        try{
            logger.warning("Se ejecuta primer commit");
            getDBTransaction().commit(); 
            logger.warning("IdSeguiminto"+ Integer.parseInt(observacionRow.getAttribute("Id").toString()));           
        }catch(Exception e){
            logger.severe("Error al ejecutar el COMMIT",e);
            try{
                logger.warning("Se ejecuta segundo commit");
                getDBTransaction().commit(); 
            }catch(Exception ex){
                logger.severe("Error al ejecutar segundo COMMIT",ex);
                getDBTransaction().rollback();
                idObservacionAccion = null;
            }
        }
            
        logger.warning("Termina metodo crearObservacion");
        return idObservacionAccion;
    }
    
    public void cargarObservacionesAccion(Long idAccion){
        logger.warning("Inicia metodo cargarObservacionesAccion");
        
        if(null == idAccion){
            logger.warning("IdAccion es NULL");
            return;
        }
        
        setvarIdAccion(idAccion);
        
        executeQuery();
        
        logger.warning("Inicia metodo cargarObservacionesAccion");
    }
}

