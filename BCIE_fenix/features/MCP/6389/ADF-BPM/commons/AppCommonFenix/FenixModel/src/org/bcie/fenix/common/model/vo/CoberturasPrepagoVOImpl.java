package org.bcie.fenix.common.model.vo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.ViewCriteria;

import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.CoberturasPrepagoVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Aug 30 18:03:23 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CoberturasPrepagoVOImpl extends ViewObjectImpl implements CoberturasPrepagoVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public CoberturasPrepagoVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    public void testConsultarCoberturas(){
        Map<String, Object> map = new HashMap<String, Object>();
//        List<String> listaLineaCredito = new ArrayList<String>();
//        listaLineaCredito.add("BHQLD01090560003");
        List<String> listaContratoDesembolso = new ArrayList<String>();
        listaContratoDesembolso.add("BHQLD34080600006");
        
        //map.put("lineaCredito", listaLineaCredito);
        map.put("lineaContrato", listaContratoDesembolso);
        this.consultarCoberturas(map);
    
    }
    
    /**
     * Se crea metodo para obtener un Map con las listas de
     * Linea de credito y Contrato desembolso
     * @param map
     * @since 02/09/2016
     */
    public void consultarCoberturas(Map<String, Object> map) {
        logger.log(ADFLogger.WARNING, "INTO consultarCoberturas");
        long identificador = System.currentTimeMillis();
        //List<String> listaLineaCreditoValidar = new ArrayList<String>();
        this.executeEmptyRowSet();
        List<String> listaContratoDesembolsoValidar = new ArrayList<String>();
        //        if (null != map.get("lineaCredito")) {
        //            listaLineaCreditoValidar = (List<String>) map.get("lineaCredito");
        //        } else {
        //            logger.log(ADFLogger.WARNING, "La lista de linea de credito es nula");
        //        }
        if (null != map.get("lineaContrato")) {
            listaContratoDesembolsoValidar = (List<String>) map.get("lineaContrato");
        } else {
            logger.log(ADFLogger.WARNING, identificador + ": La lista de linea contrato es nula.");
        }
        String contratoDesembolso = "CONTRATO_DESEMBOLSO IN (";
        //String lineaCredito = " AND CODIGO_LINEA_CREDITO IN (";
        int i = 0;
        //int j = 0;

        try {
            logger.log(ADFLogger.WARNING, identificador + ": Valor de las listas." + listaContratoDesembolsoValidar);
            if (listaContratoDesembolsoValidar.size() == 0) {
                logger.log(ADFLogger.WARNING, identificador + ": No existen valores en las listas,executeEmptyRowSet");
                this.executeEmptyRowSet();
                logger.log(ADFLogger.WARNING, identificador + ": Ejecuta el executeEmptyRowSet.");
            } else {
                //List<String> listaLineaCredito = new ArrayList<String>();
                List<String> listaIdContratoDesembolso = new ArrayList<String>();
                //                    if(null != map.get("lineaCredito")){
                //                        listaLineaCredito = (List<String>)map.get("lineaCredito");
                //                    }else{
                //                        logger.log(ADFLogger.WARNING, "Linea credito nulo.");
                //                    }
                if (null != map.get("lineaContrato")) {
                    listaIdContratoDesembolso = (List<String>) map.get("lineaContrato");
                } else {
                    logger.log(ADFLogger.WARNING, identificador + ": Linea de contrato es nulo.");
                }
                if (null != listaContratoDesembolsoValidar && listaContratoDesembolsoValidar.size() > 0) {
                    for (String contrato : listaContratoDesembolsoValidar) {

                        if (i < (listaContratoDesembolsoValidar.size() - 1)) {
                            contratoDesembolso += "'" + contrato + "',";
                        } else {
                            contratoDesembolso += "'" + contrato + "'";
                        }
                        i++;
                    }
                    contratoDesembolso += ")";
                } else {
                    contratoDesembolso += "'')";
                }

                /* Se remueve filtro por CODIGO_LINEA_CREDITO.
         *
         * if(null != listaLineaCredito && listaLineaCredito.size() > 0){
        for(String linea : listaLineaCredito){
            if (j < (listaLineaCredito.size() - 1)) {
                lineaCredito += "'" + linea + "',";
            }else{
                lineaCredito += "'" + linea + "'";
            }
            j++;
        }
        lineaCredito += ")";
        }else{
                lineaCredito += "'')";
        }

        contratoDesembolso += lineaCredito; */

                logger.log(ADFLogger.WARNING, identificador + ": Valor Clausula WHERE :" + contratoDesembolso);
                this.setWhereClause(contratoDesembolso);
                logger.log(ADFLogger.WARNING, identificador + ": Posterior a setWhereClause.");
                this.executeQuery();
                logger.log(ADFLogger.WARNING, identificador + ": Posterior a executeQuery.");
                logger.warning(identificador + ": Cantidad de registros en FuentesExternasPrepagoVO :" + this.getEstimatedRowCount());

            }
            logger.log(ADFLogger.WARNING, identificador + ": SQL :" + this.getQuery());

        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error en consultarCoberturas.", e);
            this.executeEmptyRowSet();
            logger.log(ADFLogger.WARNING, identificador + ": Finaliza manejo de excepcion.");
            
            JboException exception = new JboException("Error: " + e.getMessage());
            throw exception;
        }
    }


    /**
     * Returns the variable value for pContratoDesembolso.
     * @return variable value for pContratoDesembolso
     */
    public String getpContratoDesembolso() {
        return (String) ensureVariableManager().getVariableValue("pContratoDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pContratoDesembolso.
     * @param value value to bind as pContratoDesembolso
     */
    public void setpContratoDesembolso(String value) {
        ensureVariableManager().setVariableValue("pContratoDesembolso", value);
    }
    
    public void obtenerCoberturasPorContrato(String contratoDesembolso) {
        logger.warning("Inicia metodo obtenerCoberturasPorContrato");
        executeQuery(); //se vuelve a cargar la VO ya que anteriormente se removio el criteria pero no se volio a cargar la vo
        
        try{
            ViewCriteria asociadasVOCriteria =
                getViewCriteriaManager().getViewCriteria("CoberturasPrepagoVOCriteriaPorContrato");
            asociadasVOCriteria.ensureVariableManager().setVariableValue("pContratoDesembolso", contratoDesembolso);
    
            applyViewCriteria(asociadasVOCriteria);
        }catch(Exception e){
            logger.warning("Error al aplicar criteria-> ",e);
        }
                
        executeQuery();//se ejecuta el Query ya con el criteria aplicado        
        logger.warning("numero de contrartos encontrados para :"+contratoDesembolso+" ->"+getEstimatedRowCount());        
        removeApplyViewCriteriaName("CoberturasPrepagoVOCriteriaPorContrato");
        
        logger.warning("termina metodo obtenerCoberturasPorContrato");
    }
    
    public Boolean validarCoberturasExistentesPorContrato(){
        logger.warning("Inicia metodo validarCoberturasExistentesPorContrato.");
        Boolean resultado = Boolean.FALSE;
        String contratoFlexcube = null;
        Row contratoRow = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAM = (FenixGestorDesembolsosAMImpl) getApplicationModule();        
        
        executeQuery(); //se vuelve a cargar la VO ya que anteriormente se removio el criteria pero no se volio a cargar la vo
        
        try{
            contratoRow = gestorDesembolsosAM.getCrearActualizarContratoDesembolsoVO().getCurrentRow();
        }catch(Exception e){
            logger.warning("Error al obtener el CurrentRow del contrato.", e);
        }
        
        if(null != contratoRow){
            contratoFlexcube = (String) contratoRow.getAttribute("ContratoFlexcube");
        }else{
            logger.warning("No existe CurrentRow.");
        }
        
        logger.warning("ContratoFlexcube: " + contratoFlexcube);
        if(null == contratoFlexcube){
            return resultado;
        }
        
        try{
            ViewCriteria asociadasVOCriteria =
                getViewCriteriaManager().getViewCriteria("CoberturasPrepagoVOCriteriaPorContrato");
            asociadasVOCriteria.ensureVariableManager().setVariableValue("pContratoDesembolso", contratoFlexcube);
        
            applyViewCriteria(asociadasVOCriteria);
        }catch(Exception e){
            logger.warning("Error al aplicar criteria-> ",e);
        }
                
        executeQuery();//se ejecuta el Query ya con el criteria aplicado        
        logger.warning("numero de contrartos encontrados para :"+contratoFlexcube+" ->"+getEstimatedRowCount());
        if(getEstimatedRowCount() > 0){
            resultado = Boolean.TRUE;
        }
        removeApplyViewCriteriaName("CoberturasPrepagoVOCriteriaPorContrato");
        
        logger.warning("Termina metodo validarCoberturasExistentesPorContrato.");
        return resultado;
    }
}

