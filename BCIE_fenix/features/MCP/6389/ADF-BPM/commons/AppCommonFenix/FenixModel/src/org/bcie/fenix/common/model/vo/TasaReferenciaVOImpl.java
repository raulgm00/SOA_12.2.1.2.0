package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.comisionservice.Comision;
import com.bcie.xmlns.comisionservice.ComisionPT;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.comisionmo.ConsultarFechaCargoRequestType;
import org.bcie.comisionmo.ConsultarFechaCargoResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.TasaReferenciaVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 18 02:37:10 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TasaReferenciaVOImpl extends ViewObjectImpl implements TasaReferenciaVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TasaReferenciaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varCodigoMoneda.
     * @return bind variable value for varCodigoMoneda
     */
    public String getvarCodigoMoneda() {
        return (String) getNamedWhereClauseParam("varCodigoMoneda");
    }

    /**
     * Sets <code>value</code> for bind variable varCodigoMoneda.
     * @param value value to bind as varCodigoMoneda
     */
    public void setvarCodigoMoneda(String value) {
        logger.warning("inside setvarCodigoMoneda.");
        logger.warning("value: " + value);
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio =
            System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        logger.warning("tiempo inicia metodo: " + TInicio);
        if (value != null) {
            setNamedWhereClauseParam("varCodigoMoneda", value);
            this.executeQuery();
        }
        TFin =
            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("tiempo fin metodo: " + TFin);
        logger.warning("Numero de rows obtenidos :" + this.getRowCount() + " con una duracion de: " + tiempo +
                       " segundos");
    }

    /**
     * Returns the variable value for varCodigoTasa.
     * @return variable value for varCodigoTasa
     */
    public String getvarCodigoTasa() {
        return (String) ensureVariableManager().getVariableValue("varCodigoTasa");
    }

    /**
     * Sets <code>value</code> for variable varCodigoTasa.
     * @param value value to bind as varCodigoTasa
     */
    public void setvarCodigoTasa(String value) {
        ensureVariableManager().setVariableValue("varCodigoTasa", value);
    }
    
    public String obtenerDescripcionTasaReferencia(String codigo){
        logger.warning("Dentro de obtenerDescripcionTasaReferencia codigo: " + codigo);
        
        //variable Map que se va retornar
        String descripcionTasaReferencia = null;
        //variables temporales que se recuperan del criterio de busqueda
        
        try {
            ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("TasaReferenciaVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varCodigoTasa", codigo);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            if(null != this.getRowAtRangeIndex(0)){
                Row rowTasaReferenciaVO = this.getRowAtRangeIndex(0);
                
                descripcionTasaReferencia = (String) rowTasaReferenciaVO.getAttribute("CodigoTasaReferencia");
                
            } else{
                logger.log(ADFLogger.WARNING, "Criterio de busqueda vacio, con el codigo: " + codigo);
            }
            
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en consultar.", ex);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("TasaReferenciaVOCriteria");
        }
        logger.warning("descripcionTasaReferencia: " + descripcionTasaReferencia);
        
        return descripcionTasaReferencia;
    }

    public Map obtenerDatosTasaReferencia(String descripcionTasa) {
        logger.warning("inside obtenerDatosTasaReferencia.");
        Map<String, Object> result = new HashMap<String, Object>();
        String descripcionTasaRow = null;
        
        if(null == descripcionTasa){
            logger.warning("Parametro descripcionTasa requerido es NULL.");
            return result;
        }
        
        if(this.getEstimatedRowCount() > 0){
            
            for(Row rowConsultarTasaReferenciaVO : getAllRowsInRange()){
                try{
                    descripcionTasaRow = (String) rowConsultarTasaReferenciaVO.getAttribute("CodigoTasaReferencia");
                }catch(Exception e){
                    logger.warning("ERROR al castear CodigoTasaReferencia.", e);
                }
                if(descripcionTasaRow.equals(descripcionTasa)){
                    logger.warning("ValorActual: " + rowConsultarTasaReferenciaVO.getAttribute("ValorActual"));
                    logger.warning("Codigo: " + rowConsultarTasaReferenciaVO.getAttribute("Codigo"));
                    
                    result.put("ValorActual", rowConsultarTasaReferenciaVO.getAttribute("ValorActual"));
                    result.put("Codigo", rowConsultarTasaReferenciaVO.getAttribute("Codigo"));
                }
            }
            
        } else{
            logger.warning("El row ConsultarTasaReferenciaVO es NULL");
        }
        
        return (result);
    }
    
    public Map obtenerDatosTasaReferencia2(String descripcionTasa, String moneda) {
        logger.warning("inside obtenerDatosTasaReferencia.");
        Map<String, Object> result = new HashMap<String, Object>();
        String descripcionTasaRow = null;
        
        if(null == descripcionTasa){
            logger.warning("Parametro descripcionTasa requerido es NULL.");
            return result;
        }
        if(null!=moneda){
            setvarCodigoMoneda(moneda);
            this.executeQuery();
            this.setRangeSize(-1);
        if(this.getEstimatedRowCount() > 0){
            
            for(Row rowConsultarTasaReferenciaVO : getAllRowsInRange()){
                try{
                    descripcionTasaRow = (String) rowConsultarTasaReferenciaVO.getAttribute("CodigoTasaReferencia");
                }catch(Exception e){
                    logger.warning("ERROR al castear CodigoTasaReferencia.", e);
                }
                if(descripcionTasaRow.equals(descripcionTasa)){
                    logger.warning("ValorActual: " + rowConsultarTasaReferenciaVO.getAttribute("ValorActual"));
                    logger.warning("Codigo: " + rowConsultarTasaReferenciaVO.getAttribute("Codigo"));
                    
                    result.put("ValorActual", rowConsultarTasaReferenciaVO.getAttribute("ValorActual"));
                    result.put("Codigo", rowConsultarTasaReferenciaVO.getAttribute("Codigo"));
                }
            }
            
        } else{
            logger.warning("El row ConsultarTasaReferenciaVO es NULL");
        }
        }
        return (result);
    }
    
    public List cargarLista(String nombre, String moneda){
        logger.warning("Inicia metodo cargar lista ");
        List <String> resultado=new ArrayList<String>();
        String nombreObtenido=null;
        logger.warning("metodo idTasa nombre: " + nombre);
        Row row=null;
        ViewCriteria criteriaByClienteInstanciaProceso = null;
        if(null!=moneda){
            setvarCodigoMoneda(moneda);
            this.executeQuery();
                logger.warning("registros encontrados: " + this.getEstimatedRowCount());
            if(null!= nombre){
                    criteriaByClienteInstanciaProceso=this.getViewCriteriaManager().getViewCriteria("TasaDescripcionVOCriteria");
                     criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varCodigoTasa", nombre);
                     
                    this.applyViewCriteria(criteriaByClienteInstanciaProceso);
                    this.executeQuery();
                    logger.warning("registros encontrados con el view criteria: " + this.getEstimatedRowCount());
                    // 2) Asignamos valor de retorno
                    if(this.getEstimatedRowCount() > 0) {
                        RowSetIterator rowsTasas = createRowSetIterator(null);
                        rowsTasas.reset();
                        
                        while (rowsTasas.hasNext()) {
                            TasaReferenciaVORowImpl tasaReferenciaVORowImpl=(TasaReferenciaVORowImpl) rowsTasas.next();
                            logger.warning("Tasa obtenida: "+tasaReferenciaVORowImpl.getAttribute("CodigoTasaReferencia"));
                            if(null!=tasaReferenciaVORowImpl.getAttribute("CodigoTasaReferencia")){
                                nombreObtenido=(String)tasaReferenciaVORowImpl.getAttribute("CodigoTasaReferencia");
                                resultado.add(nombreObtenido);
                                }
                            // Removemos criteria del VO
                            this.getViewCriteriaManager().removeApplyViewCriteriaName("TasaDescripcionVOCriteria");
                        }
                        rowsTasas.closeRowSetIterator();
                    }
                }
            }
        logger.warning("Termina metodo cargar lista ");
        
    return resultado;
    }
    
    public BigDecimal obtenerValorTasaActual(){
        logger.warning("Entra en obtenerValorTasaActual");
        BigDecimal valorTasa = null;
        try{
            if(null != this.getRowAtRangeIndex(0)){
                Row rowTasaReferenciaVO = this.getRowAtRangeIndex(0);
                
                valorTasa = (BigDecimal) rowTasaReferenciaVO.getAttribute("ValorActual");
                
            } else{
                logger.warning("No se obtuvo el row con el codigo");
            }
        }catch(Exception e){
            logger.warning("Error en obtenerValorTasaActual.", e);
        }
        logger.warning("Valor de la tasa actual : " + valorTasa);
        return valorTasa;
    }
    
    
    
    public Map obtenerValorTasaReferencia(String descripcionTasa, Timestamp fechaEfectiva) {
        logger.warning("Inicia metodo obtenerValorTasaReferencia");
        logger.warning("descripcionTasa: "+descripcionTasa+" fechaEfectiva: "+fechaEfectiva);
        Map<String, Object> result = new HashMap<String, Object>();
        String descripcionTasaRow = null;
        Row fila = null;
        
        if(fechaEfectiva == null){
              fechaEfectiva = obtenerFechaFlex();
        }
        
        fila = getTasaReferenciaOnAfter(descripcionTasa,fechaEfectiva);
      
        if(fila == null){
          fila = getTasaReferenciaOnBefore(descripcionTasa,fechaEfectiva);
        }  

         
        
        
        if(fila != null){
            logger.warning("fechaEfectiva: " + fila.getAttribute("FechaEfectiva"));
            logger.warning("ValorActual: " + fila.getAttribute("ValorActual"));
            logger.warning("Codigo: " + fila.getAttribute("Codigo"));
            result.put("ValorActual", fila.getAttribute("ValorActual"));
            result.put("Codigo", fila.getAttribute("Codigo"));
         }else{
             logger.warning("Importante! no se encontraron registros para el valor de tasa de referencia");
         }
        
        return (result);
    }


    public Row getTasaReferenciaOnAfter(String descripcionTasa, Timestamp fechaEfectiva){
        
        Row fila = null;
        
        try{
            logger.warning("Aplicando criteria getTasaReferenciaOnAfter");
             ViewCriteria criteriaByTasaReferenciaOnAfter = null;
             criteriaByTasaReferenciaOnAfter=this.getViewCriteriaManager().getViewCriteria("getTasaReferenciaOnAfter");
             criteriaByTasaReferenciaOnAfter.ensureVariableManager().setVariableValue("varDescripcion", descripcionTasa);
             criteriaByTasaReferenciaOnAfter.ensureVariableManager().setVariableValue("varFechaEfectiva", fechaEfectiva);
             this.applyViewCriteria(criteriaByTasaReferenciaOnAfter);
             this.executeQuery();  
            
            logger.warning("Numero de elementos encontrados: "+getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0)
                fila = first();
            
         
        } catch (Exception ex) {
            logger.warning("Error al aplicar el criteria getTasaReferenciaOnAfter.", ex);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("TasaReferenciaVOCriteria");
        }
        
        return fila;
    }
    
    
    public Row getTasaReferenciaOnBefore(String descripcionTasa, Timestamp fechaEfectiva){
        
        Row fila = null;
        
        try{
            logger.warning("Aplicando criteria getTasaReferenciaOnBefore");
            ViewCriteria criteriaByTasaReferenciaOnBefore = null;
            criteriaByTasaReferenciaOnBefore=this.getViewCriteriaManager().getViewCriteria("getTasaReferenciaOnBefore");
            criteriaByTasaReferenciaOnBefore.ensureVariableManager().setVariableValue("varDescripcion", descripcionTasa);
            criteriaByTasaReferenciaOnBefore.ensureVariableManager().setVariableValue("varFechaEfectiva", fechaEfectiva);
            this.applyViewCriteria(criteriaByTasaReferenciaOnBefore);
            this.executeQuery(); 
            
            logger.warning("Numero de elementos encontrados: "+getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0)
                fila = first();
            
         
        } catch (Exception ex) {
            logger.warning("Error al aplicar el criteria getTasaReferenciaOnAfter.", ex);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("TasaReferenciaVOCriteria");
        }
        
        return fila;
    }

    public Timestamp obtenerFechaFlex(){
        logger.warning("*Inf, inicia metodo obtenerFechaFlex");
         Timestamp fechaFlex = null;

            FenixAMImpl fenixAM = null;
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();            
            String wsdl = fenixAM.getWsdl(IWsdlLocation.COMISION );
            
            Comision comision = IWsdlLocation.Service.getInstance(Comision.class, wsdl);
            ComisionPT comisionPT = comision.getComision12Bnd();
            logger.warning("*Inf, creado variables de tipo request y response");
            ConsultarFechaCargoRequestType request = new ConsultarFechaCargoRequestType();
            ConsultarFechaCargoResponseType response = null;
            request.setIdComision(0);
            
            try{
                java.util.Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_FECHA_CARGO);
                response = comisionPT.consultarFechaCargo(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_FECHA_CARGO, horaInicio);
            }catch(Exception e){
                logger.warning("***Error al ejecutar el sevicio de ConsultarFechaCargo : ", e);
            }
            
            if(null != response){
                if(response.getResultado() != null){
                     if(response.getResultado().getResult().value() == "OK"){
                          logger.warning("Respuesta del servicio OK. ");
                           
                            if(response.getFechaCargo() != null ){
                                 XMLGregorianCalendar xcal = response.getFechaCargo();
                                 
                                 try{                                                                        
                                      fechaFlex = new Timestamp(xcal.toGregorianCalendar().getTimeInMillis());
                                     logger.warning("*Inf, fechaFlex recuperado del servicio : "+fechaFlex);
                                 }catch(Exception e){
                                     logger.warning("***Error, fallo al convertir fecha a Timestamp : "+e);
                                 }

                             }else{
                                logger.warning("***Error, response.getFechaCargo() es resuelto a null ");
                             }                                                    
                     }else{
                             logger.warning("***Error, getResult().value() : "+response.getResultado().getResult().value() );
                         }
                }else{
                        logger.warning("***Error, response.getResultado()  es resuelto a null");
                    }
            }else{
                    logger.warning("***Error, El response es resuelto a null");
                }
            
        logger.warning("Inf, termina metodo obtenerFechaFlex");
        return fechaFlex;
        }
 
    /**
     * Returns the variable value for varFechaEfectivva.
     * @return variable value for varFechaEfectivva
     */
    public Timestamp getvarFechaEfectiva() {
        return (Timestamp) ensureVariableManager().getVariableValue("varFechaEfectiva");
    }

    /**
     * Sets <code>value</code> for variable varFechaEfectivva.
     * @param value value to bind as varFechaEfectivva
     */
    public void setvarFechaEfectiva(Timestamp value) {
        ensureVariableManager().setVariableValue("varFechaEfectiva", value);
    }

    /**
     * Returns the variable value for varDescripcion.
     * @return variable value for varDescripcion
     */
    public String getvarDescripcion() {
        return (String) ensureVariableManager().getVariableValue("varDescripcion");
    }

    /**
     * Sets <code>value</code> for variable varDescripcion.
     * @param value value to bind as varDescripcion
     */
    public void setvarDescripcion(String value) {
        ensureVariableManager().setVariableValue("varDescripcion", value);
    }
}
