package org.bcie.fenix.common.model.eo;import java.sql.Timestamp;import oracle.jbo.AttributeList;import oracle.jbo.Key;import oracle.jbo.domain.BlobDomain;import oracle.jbo.server.EntityDefImpl;import oracle.jbo.server.EntityImpl;import oracle.jbo.server.TransactionEvent;// ---------------------------------------------------------------------// ---    File generated by Oracle ADF Business Components Design Time.// ---    Mon Oct 24 16:38:13 CDT 2016// ---    Custom code may be added to this class.// ---    Warning: Do not modify method signatures of generated methods.// ---------------------------------------------------------------------public class AdjuntoDocumentoEOImpl extends EntityImpl {    /**     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.     */    public enum AttributesEnum {        Id,        IdDocumentoCalendario,        Filename,        MimeType,        Content,        FechaRegistro,        DocumentoCalendarioEO;        private static AttributesEnum[] vals = null;        private static final int firstIndex = 0;        public int index() {            return AttributesEnum.firstIndex() + ordinal();        }        public static final int firstIndex() {            return firstIndex;        }        public static int count() {            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;        }        public static final AttributesEnum[] staticValues() {            if (vals == null) {                vals = AttributesEnum.values();            }            return vals;        }    }    public static final int ID = AttributesEnum.Id.index();    public static final int IDDOCUMENTOCALENDARIO = AttributesEnum.IdDocumentoCalendario.index();    public static final int FILENAME = AttributesEnum.Filename.index();    public static final int MIMETYPE = AttributesEnum.MimeType.index();    public static final int CONTENT = AttributesEnum.Content.index();    public static final int FECHAREGISTRO = AttributesEnum.FechaRegistro.index();    public static final int DOCUMENTOCALENDARIOEO = AttributesEnum.DocumentoCalendarioEO.index();    /**     * This is the default constructor (do not remove).     */    public AdjuntoDocumentoEOImpl() {    }    /**     * Gets the attribute value for Id, using the alias name Id.     * @return the value of Id     */    public Long getId() {        return (Long) getAttributeInternal(ID);    }    /**     * Sets <code>value</code> as the attribute value for Id.     * @param value value to set the Id     */    public void setId(Long value) {        setAttributeInternal(ID, value);    }    /**     * Gets the attribute value for IdDocumentoCalendario, using the alias name IdDocumentoCalendario.     * @return the value of IdDocumentoCalendario     */    public Long getIdDocumentoCalendario() {        return (Long) getAttributeInternal(IDDOCUMENTOCALENDARIO);    }    /**     * Sets <code>value</code> as the attribute value for IdDocumentoCalendario.     * @param value value to set the IdDocumentoCalendario     */    public void setIdDocumentoCalendario(Long value) {        setAttributeInternal(IDDOCUMENTOCALENDARIO, value);    }    /**     * Gets the attribute value for Filename, using the alias name Filename.     * @return the value of Filename     */    public String getFilename() {        return (String) getAttributeInternal(FILENAME);    }    /**     * Sets <code>value</code> as the attribute value for Filename.     * @param value value to set the Filename     */    public void setFilename(String value) {        setAttributeInternal(FILENAME, value);    }    /**     * Gets the attribute value for MimeType, using the alias name MimeType.     * @return the value of MimeType     */    public String getMimeType() {        return (String) getAttributeInternal(MIMETYPE);    }    /**     * Sets <code>value</code> as the attribute value for MimeType.     * @param value value to set the MimeType     */    public void setMimeType(String value) {        setAttributeInternal(MIMETYPE, value);    }    /**     * Gets the attribute value for Content, using the alias name Content.     * @return the value of Content     */    public BlobDomain getContent() {        return (BlobDomain) getAttributeInternal(CONTENT);    }    /**     * Sets <code>value</code> as the attribute value for Content.     * @param value value to set the Content     */    public void setContent(BlobDomain value) {        setAttributeInternal(CONTENT, value);    }    /**     * Gets the attribute value for FechaRegistro, using the alias name FechaRegistro.     * @return the value of FechaRegistro     */    public Timestamp getFechaRegistro() {        return (Timestamp) getAttributeInternal(FECHAREGISTRO);    }    /**     * Sets <code>value</code> as the attribute value for FechaRegistro.     * @param value value to set the FechaRegistro     */    public void setFechaRegistro(Timestamp value) {        setAttributeInternal(FECHAREGISTRO, value);    }    /**     * @return the associated entity DocumentoCalendarioEOImpl.     */    public DocumentoCalendarioEOImpl getDocumentoCalendarioEO() {        return (DocumentoCalendarioEOImpl) getAttributeInternal(DOCUMENTOCALENDARIOEO);    }    /**     * Sets <code>value</code> as the associated entity DocumentoCalendarioEOImpl.     */    public void setDocumentoCalendarioEO(DocumentoCalendarioEOImpl value) {        setAttributeInternal(DOCUMENTOCALENDARIOEO, value);    }    /**     * @param id key constituent     * @return a Key object based on given key constituents.     */    public static Key createPrimaryKey(Long id) {        return new Key(new Object[] { id });    }    /**     * @return the definition object for this instance class.     */    public static synchronized EntityDefImpl getDefinitionObject() {        return EntityDefImpl.findDefObject("org.bcie.fenix.common.model.eo.AdjuntoDocumentoEO");    }    /**     * Add attribute defaulting logic in this method.     * @param attributeList list of attribute names/values to initialize the row     */    protected void create(AttributeList attributeList) {        super.create(attributeList);    }    /**     * Add entity remove logic in this method.     */    public void remove() {        super.remove();    }    /**     * Add locking logic here.     */    public void lock() {        super.lock();    }    /**     * Custom DML update/insert/delete logic here.     * @param operation the operation type     * @param e the transaction event     */    protected void doDML(int operation, TransactionEvent e) {        super.doDML(operation, e);    }}