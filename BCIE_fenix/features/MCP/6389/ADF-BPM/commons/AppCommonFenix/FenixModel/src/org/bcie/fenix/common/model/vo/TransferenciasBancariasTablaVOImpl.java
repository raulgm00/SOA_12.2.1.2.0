package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TransferenciasBancariasTablaVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 08 16:14:15 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferenciasBancariasTablaVOImpl extends ViewObjectImpl implements TransferenciasBancariasTablaVO {

    private static ADFLogger logger = null;

    public TransferenciasBancariasTablaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for pIdcontrato.
     * @return bind variable value for pIdcontrato
     */
    public Row iniciarTablaTansacciones(Long idContrato) {
        logger.warning("inicia metodo iniciarTablaTansacciones");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        Row fila = null;

        if (idContrato != null) {
            setpIdcontrato(idContrato);
            logger.warning("seteando idContrato como where clause ->" + idContrato);
            executeQuery();

            logger.warning("*Inf, Numero de transferencias asociadas al contrato ->" + getEstimatedRowCount());

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                fila = getCurrentRow();
                logger.warning("*Inf, se establece como current en tabla la transferencia: " +
                               getCurrentRow().getAttribute("IdTransferencia"));
            } else {
                logger.warning("*Inf, Important! No hay transferencias asociadas al contrato ->" + idContrato);
            }
        } else {
            logger.warning("*Inf, Important! idContratoDesembolso resuelto a null, no se recargara la tabla");
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("*Inf, Termina metodo iniciarTablaTansacciones con una duracion de: " + tiempo + " segundos");
        return fila;
    }

    public Row iniciarConsolidadas(Long idContrato) {
        logger.warning("inicia metodo iniciarTablaTansacciones");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        Row fila = null;

        if (idContrato != null) {
            setpIdcontrato(idContrato);
            logger.warning("seteando idContrato como where clause ->" + idContrato);
            ViewCriteria criteria = null;
            logger.warning("*Inf ,numero de transferencias actualmente: " + getEstimatedRowCount());
            criteria = getViewCriteriaManager().getViewCriteria("TransferenciasBancariasTablaVOCriteria");
            applyViewCriteria(criteria);
            executeQuery();

            logger.warning("*Inf, Numero de transferencias asociadas al contrato ->" + getEstimatedRowCount());

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                fila = getCurrentRow();
                logger.warning("*Inf, se establece como current en tabla la transferencia: " +
                               getCurrentRow().getAttribute("IdTransferencia"));
            } else {
                logger.warning("*Inf, Important! No hay transferencias asociadas al contrato ->" + idContrato);
            }
        } else {
            logger.warning("*Inf, Important! idContratoDesembolso resuelto a null, no se recargara la tabla");
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("*Inf, Termina metodo iniciarTablaTansacciones con una duracion de: " + tiempo + " segundos");
        return fila;
    }
    
    public void refrescarTabla(){
            executeQuery();          
        }
    
    public Row refrescarTablaPorEliminado(){          
            Row fila = null;
             logger.warning("Inicia metodo refrescarTablaPorEliminado");
             executeQuery(); 
             if(getEstimatedRowCount() >0 ){
                 setCurrentRow(first()); 
                 fila = getCurrentRow();
             }
        return fila;
        }
 
   public BigDecimal recuperarMontoTotalTransferencias() {
        logger.warning("Inicia metodo recuperarMontoTotalTransferencias");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        BigDecimal montoTotalTransferencias = null;
        Row fila = null;
        if (getEstimatedRowCount() > 0) {
            setCurrentRow(first());
            fila = getCurrentRow();
            montoTotalTransferencias = (BigDecimal) fila.getAttribute("MontoTotal");
            logger.warning("MontoTotalTransferencias recuperado ->" + montoTotalTransferencias);
        } else {
            logger.warning("*** Error no hay un transferencias en trasnsferenciasBancariasTabla");
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.warning("Termina metodo recuperarMontoTotalTransferencias con una duracion de: " + tiempo + " segundos");
        return montoTotalTransferencias;
    }

    public Long getpIdcontrato() {
        return (Long) getNamedWhereClauseParam("pIdcontrato");
    }

    /**
     * Sets <code>value</code> for bind variable pIdcontrato.
     * @param value value to bind as pIdcontrato
     */
    public void setpIdcontrato(Long value) {
        setNamedWhereClauseParam("pIdcontrato", value);      
    }
}

