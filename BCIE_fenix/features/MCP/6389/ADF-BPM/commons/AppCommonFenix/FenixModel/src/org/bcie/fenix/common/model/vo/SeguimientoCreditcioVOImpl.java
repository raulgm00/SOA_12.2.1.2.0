package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.text.SimpleDateFormat;

import java.util.Calendar;
import java.util.Date;

import java.util.GregorianCalendar;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixSeguimientoCrediticioAMImpl;
import org.bcie.fenix.common.model.vo.common.SeguimientoCreditcioVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 20 11:43:38 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SeguimientoCreditcioVOImpl extends ViewObjectImpl implements SeguimientoCreditcioVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public SeguimientoCreditcioVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varIdCliente.
     * @return variable value for varIdCliente
     */
    public Long getvarIdCliente() {
        return (Long) ensureVariableManager().getVariableValue("varIdCliente");
    }

    /**
     * Sets <code>value</code> for variable varIdCliente.
     * @param value value to bind as varIdCliente
     */
    public void setvarIdCliente(Long value) {
        ensureVariableManager().setVariableValue("varIdCliente", value);
    }

    /**
     * Returns the variable value for vasInstancia.
     * @return variable value for vasInstancia
     */
    public Long getvarInstancia() {
        return (Long) ensureVariableManager().getVariableValue("varInstancia");
    }

    /**
     * Sets <code>value</code> for variable vasInstancia.
     * @param value value to bind as vasInstancia
     */
    public void setvarInstancia(Long value) {
        ensureVariableManager().setVariableValue("varInstancia", value);
    }
    
    public Integer getIdSeguimientoCredicio(Long idCliente, String instancia, String tipoInicio, String nombreUsuario,
                                            String login, Integer scrVigente, Integer perspectivaVigente,
                                            Integer codigoTarea, Long idFlujo) {
        logger.log(ADFLogger.WARNING, "Inside getIdSeguimientoCredicio.");
        logger.warning("idCliente: " + idCliente);
        logger.warning("instancia: " + instancia);
        logger.warning("tipoInicio: " + tipoInicio);
        logger.warning("nombreUsuario: " + nombreUsuario);
        logger.warning("login: " + login);
        logger.warning("scrVigente: " + scrVigente);
        logger.warning("perspectivaVigente: " + perspectivaVigente);
        logger.warning("codigoTarea: " + codigoTarea);
        logger.warning("idFlujo: " + idFlujo);
        
        Row seguimientoRow = null;
        Row seguimientoRow2 = null;
        Integer scrUltimo = 0;
        java.sql.Timestamp fechaUltimoRegistro = null;
        java.sql.Timestamp fechaRegistro = null;
        java.sql.Timestamp fechaUltimoCambio = null;
        Integer perspectivaUltimo = 0;
        Integer estadoDeteriorado = 4;
        Integer estadoActual = 0;
        Integer estadoSCRVigente = 2;
        Integer total = 0;
            Long idUltimoSeguimiento = null;
        Integer estadoSCRAplicar = null;
        FenixAMImpl fenixAMImpl = null;

        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixSeguimientoCrediticioAMImpl seguimientoCrediticioAMImpl =
            (FenixSeguimientoCrediticioAMImpl) fenixAMImpl.getFenixSeguimientoCrediticioAM();

        switch (tipoInicio) {
        case FenixModelConstants.TIPO_INICIO_NORMAL:
            idUltimoSeguimiento = seguimientoCrediticioAMImpl.getRevisionesSCRVO().obtenerRegistro(idCliente);
            break;

        default: //RETORNO
            seguimientoCrediticioAMImpl.getRevisionesSCRVO().obtenerRegistro(idCliente);
            idUltimoSeguimiento = obtenerRegistroRetorno(idCliente);
            break;
        }

        fechaUltimoRegistro = seguimientoCrediticioAMImpl.getRevisionesSCRVO().obtenerFecha();
        fechaUltimoCambio =
            seguimientoCrediticioAMImpl.getUltimoSeguimientoVO().obtenerRegistro(idCliente, scrVigente,
                                                                                 perspectivaVigente);

        logger.warning("idUltimoSeguimiento: " + idUltimoSeguimiento);
        logger.warning("fechaUltimoCambio: " + fechaUltimoCambio);
        logger.warning("fechaUltimoRegistro: " + fechaUltimoRegistro);
        
        if (null != idCliente && null != idFlujo) {
            seguimientoRow = getSeguimientoInstanciaCliente(idFlujo, idCliente);
        }
        
        // 2) Si no existe un row bajo ese criterio, creamos uno nuevo
        if (seguimientoRow == null) {
            switch (tipoInicio) {
            case FenixModelConstants.TIPO_INICIO_NORMAL:
                logger.warning("Inicio Norma creacion de seguimiento");
                if (null != codigoTarea) {
                    if (codigoTarea.compareTo(FenixModelConstants.TAREA_REALIZAR_CALIFICACION) == 0) {
                        seguimientoRow =
                            crearSeguimientoCrediticio(idCliente, instancia, nombreUsuario, login, scrVigente,
                                                       perspectivaVigente, tipoInicio, estadoSCRVigente,
                                                       fechaUltimoRegistro, fechaUltimoCambio, idFlujo);
                    } else {
                        logger.warning("No se obtuvo los datos del registro de seguimiento");
                    }
                } else {
                    logger.warning("No se obtuvo los datos del registro de seguimiento");
                }


                break;

                /*
                case FenixModelConstants.TIPO_INICIO_ARGUMENTACION:
                    seguimientoRow= this.getRow(new Key(new Object[] { idUltimoSeguimiento }));
                    setCurrentRow(seguimientoRow);
                    break;
                case FenixModelConstants.TIPO_INICIO_RETORNO:
                    seguimientoRow= this.getRow(new Key(new Object[] { idUltimoSeguimiento }));
                    setCurrentRow(seguimientoRow);
                    break;
                case FenixModelConstants.TIPO_INICIO_SUSPENSO:
                    seguimientoRow= this.getRow(new Key(new Object[] { idUltimoSeguimiento }));
                    setCurrentRow(seguimientoRow);
                    break;
*/
            default:
                logger.warning("inicioOtros busqueda de seguimiento");
                if (idUltimoSeguimiento != null) {
                    seguimientoRow = getSeguimientoId(idUltimoSeguimiento);

                    if (null != seguimientoRow) {
                        scrUltimo = (Integer) seguimientoRow.getAttribute("IdTcaScr");
                        perspectivaUltimo = (Integer) seguimientoRow.getAttribute("IdTcaPerspectiva");
                        estadoActual = (Integer) seguimientoRow.getAttribute("IdTcaEstadoScr");
                        fechaRegistro = (java.sql.Timestamp) seguimientoRow.getAttribute("FechaRegistro");
                        seguimientoRow.setAttribute("InstanciaProceso", instancia);

                    }
                    logger.warning("seguimientoRow: " + seguimientoRow);
                    logger.warning("Scr ingresado: " + scrVigente);
                    logger.warning("Scr obtenido: " + scrUltimo);
                    logger.warning("Perspectiva ingresado: " + perspectivaVigente);
                    logger.warning("Perspectiva obtenido: " + perspectivaUltimo);
                    logger.warning("Estado obtenido: " + estadoActual);
                    logger.warning("fechaRegistro: " + fechaRegistro);
                    logger.warning("fechaUltimoRegistro: " + fechaUltimoRegistro);

                    if (null != fechaUltimoRegistro) {
                        seguimientoRow.setAttribute("FechaUltimoRegistro", fechaUltimoRegistro);
                        Date fechaActual = new Date();
                        logger.warning("fechaActual: " + fechaActual);
                        Integer comparacion1 = 0;
                        Integer comparacion2 = 0;
                        comparacion1 = ultimoCambio(fechaActual, fechaRegistro);
                        if (null != fechaUltimoCambio) {
                            comparacion2 = ultimoCambio(fechaRegistro, fechaUltimoCambio);
                        }
                        if (null != comparacion1 && null != comparacion2) {
                            total = comparacion1 + comparacion2;
                            if (null != total && total != 0) {
                                seguimientoRow.setAttribute("Meses", total);
                            }
                        } else {
                            total = comparacion1;
                            if (null != total && total != 0) {
                                seguimientoRow.setAttribute("Meses", total);
                            }
                        }
                    } else {
                        Date fechaActual = new Date();
                        logger.warning("fechaActual: " + fechaActual);
                        Integer status = (Integer) seguimientoRow.getAttribute("BanEstatus");
                        logger.warning("status: " + status);
                        Integer comparacion1 = 0;
                        fechaRegistro = (java.sql.Timestamp) seguimientoRow.getAttribute("FechaRegistro");
                        comparacion1 = ultimoCambio(fechaActual, fechaRegistro);
                        total = comparacion1;
                        seguimientoRow.setAttribute("FechaUltimoRegistro", fechaRegistro);
                        if (null != total && total != 0) {
                            seguimientoRow.setAttribute("Meses", total);
                        }


                    }
                    if (null != estadoActual) {
                        if (estadoDeteriorado.compareTo(estadoActual) == 0) {
                            seguimientoRow.setAttribute("EsDeterioro", true);
                        } else {
                            seguimientoRow.setAttribute("EsDeterioro", false);
                        }
                    }
                    if (null != scrVigente) {
                        if (null != scrUltimo) {
                            if (scrUltimo.compareTo(scrVigente) == 0) {
                                seguimientoRow.setAttribute("CambiarSCR", false);
                            } else {
                                seguimientoRow.setAttribute("CambiarSCR", true);
                            }
                        } else {
                            seguimientoRow.setAttribute("CambiarSCR", false);
                        }
                    } else {
                        if (null != scrUltimo) {
                            seguimientoRow.setAttribute("CambiarSCR", true);
                        } else {
                            seguimientoRow.setAttribute("CambiarSCR", false);
                        }
                    }
                    if (null != perspectivaVigente) {
                        if (null != perspectivaUltimo) {
                            if (perspectivaUltimo.compareTo(perspectivaVigente) == 0) {
                                seguimientoRow.setAttribute("CambiarPerspectiva", false);
                            } else {
                                seguimientoRow.setAttribute("CambiarPerspectiva", true);

                            }
                        } else {
                            seguimientoRow.setAttribute("CambiarPerspectiva", false);
                        }

                    } else {
                        if (null != perspectivaUltimo) {
                            seguimientoRow.setAttribute("CambiarPerspectiva", true);
                        } else {
                            seguimientoRow.setAttribute("CambiarPerspectiva", false);
                        }
                    }
                    switch (tipoInicio) {
                    case FenixModelConstants.TIPO_INICIO_SUSPENSO:
                        estadoSCRAplicar = FenixModelConstants.ID_ESTADO_SCR_SUSPENSO;
                        seguimientoRow.setAttribute("IdTcaEstadoScr", estadoSCRAplicar);
                        break;
                    case FenixModelConstants.TIPO_INICIO_ARGUMENTACION:
                        estadoSCRAplicar = FenixModelConstants.ID_ESTADO_SCR_ARGUMENTACION;
                        seguimientoRow.setAttribute("IdTcaEstadoScr", estadoSCRAplicar);
                        break;

                    default: //RETORNO
                        break;
                    }

                    setCurrentRow(seguimientoRow);
                } else {
                    logger.log(ADFLogger.TRACE, "Inside getIdSeguimientoCredicio.");                    
                    if (null != codigoTarea) {
                        if (codigoTarea.compareTo(FenixModelConstants.TAREA_REALIZAR_CALIFICACION) == 0) {
                            seguimientoRow =
                                crearSeguimientoCrediticio(idCliente, instancia, nombreUsuario, login, scrVigente,
                                                           perspectivaVigente, tipoInicio, estadoSCRVigente,
                                                           fechaUltimoRegistro, fechaUltimoCambio, idFlujo);
                        } else {
                            logger.warning("No se obtuvo los datos del registro de seguimiento");
                        }
                    } else {
                        logger.warning("No se obtuvo los datos del registro de seguimiento");
                    }
                }
                setCurrentRow(seguimientoRow);
                //         logger.warning("IdSeguiminto"+ (Integer)seguimientoRow.getAttribute("Id"));
                break;
            }

        } else {
            logger.warning("busqueda de seguimiento");
            scrUltimo = (Integer) seguimientoRow.getAttribute("IdTcaScr");
            perspectivaUltimo = (Integer) seguimientoRow.getAttribute("IdTcaPerspectiva");
            estadoActual = (Integer) seguimientoRow.getAttribute("IdTcaEstadoScr");
            fechaRegistro = (java.sql.Timestamp) seguimientoRow.getAttribute("FechaRegistro");

            logger.warning("Scr ingresado: " + scrVigente);
            logger.warning("Scr obtenido: " + scrUltimo);
            logger.warning("Perspectiva ingresado: " + perspectivaVigente);
            logger.warning("Perspectiva obtenido: " + perspectivaUltimo);
            logger.warning("Estado obtenido: " + estadoActual);
            logger.warning("fechaRegistro: " + fechaRegistro);
            logger.warning("fechaUltimoRegistro: " + fechaUltimoRegistro);


            Date fechaActual = new Date();
            logger.warning("fechaActual: " + fechaActual);
            Integer comparacion1 = 0;
            fechaRegistro = (java.sql.Timestamp) seguimientoRow.getAttribute("FechaRegistro");
            comparacion1 = ultimoCambio(fechaActual, fechaRegistro);
            total = comparacion1;
            Integer status = (Integer) seguimientoRow.getAttribute("BanEstatus");
            logger.warning("status: " + status);
            seguimientoRow.setAttribute("FechaUltimoRegistro", fechaRegistro);

            if (null != total && total != 0) {
                seguimientoRow.setAttribute("Meses", total);
            }


            if (null != estadoActual) {
                if (estadoDeteriorado.compareTo(estadoActual) == 0) {
                    seguimientoRow.setAttribute("EsDeterioro", true);
                } else {
                    seguimientoRow.setAttribute("EsDeterioro", false);
                }
            }

            if (null != scrVigente) {
                if (null != scrUltimo) {
                    if (scrUltimo.compareTo(scrVigente) == 0) {
                        seguimientoRow.setAttribute("CambiarSCR", false);
                    } else {
                        seguimientoRow.setAttribute("CambiarSCR", true);
                    }
                } else {
                    seguimientoRow.setAttribute("CambiarSCR", false);
                }
            } else {
                if (null != scrUltimo) {
                    seguimientoRow.setAttribute("CambiarSCR", true);
                } else {
                    seguimientoRow.setAttribute("CambiarSCR", false);
                }
            }
            if (null != perspectivaVigente) {
                if (null != perspectivaUltimo) {
                    if (perspectivaUltimo.compareTo(perspectivaVigente) == 0) {
                        seguimientoRow.setAttribute("CambiarPerspectiva", false);
                    } else {
                        seguimientoRow.setAttribute("CambiarPerspectiva", true);

                    }
                } else {
                    seguimientoRow.setAttribute("CambiarPerspectiva", false);
                }

            } else {
                if (null != perspectivaUltimo) {
                    seguimientoRow.setAttribute("CambiarPerspectiva", true);
                } else {
                    seguimientoRow.setAttribute("CambiarPerspectiva", false);
                }
            }
            switch (tipoInicio) {
            case FenixModelConstants.TIPO_INICIO_SUSPENSO:
                estadoSCRAplicar = FenixModelConstants.ID_ESTADO_SCR_SUSPENSO;
                seguimientoRow.setAttribute("IdTcaEstadoScr", estadoSCRAplicar);
                break;
            case FenixModelConstants.TIPO_INICIO_ARGUMENTACION:
                estadoSCRAplicar = FenixModelConstants.ID_ESTADO_SCR_ARGUMENTACION;
                seguimientoRow.setAttribute("IdTcaEstadoScr", estadoSCRAplicar);
                break;

            default: //RETORNO
                break;
            }
            setCurrentRow(seguimientoRow);
            //    logger.warning("IdSeguiminto"+ (Integer)seguimientoRow.getAttribute("Id"));
        }


        // 3) Asignamos valor de retorno
        //return (seguimientoRow != null ? (Integer)seguimientoRow.getAttribute("Id") : null);
        return null;
    }
    
    private Integer ultimoCambio(Date fechaRegistro,Date ultimaFecha){
        Integer resultado=null;
            SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy"); 
            SimpleDateFormat formato2 = new SimpleDateFormat("dd/MM/yyyy");
            
            String fecha = formato.format(fechaRegistro); 
            String[] fechaHoy = fecha.split("/"); 
            
            String fecha2 = formato2.format(ultimaFecha); 
            String[] fechaHoy2 = fecha2.split("/"); 
        
            Integer dia = Integer.parseInt(fechaHoy[0]); 
            Integer mes = Integer.parseInt(fechaHoy[1]); 
            Integer anio = Integer.parseInt(fechaHoy[2]); 

            Integer dia2 = Integer.parseInt(fechaHoy2[0]); 
            Integer mes2 = Integer.parseInt(fechaHoy2[1]); 
            Integer anio2 = Integer.parseInt(fechaHoy2[2]); 

           Calendar firstDate = new GregorianCalendar(anio, mes, dia);
           Calendar secondDate = new GregorianCalendar(anio2, mes2, dia2);
           int months= (firstDate.get(Calendar.YEAR) - secondDate.get(Calendar.YEAR)) * 12 
                       +(firstDate.get(Calendar.MONTH)- secondDate.get(Calendar.MONTH)) + 
                       (firstDate.get(Calendar.DAY_OF_MONTH) >= secondDate.get(Calendar.DAY_OF_MONTH)? 0: -1); 
                        resultado= months;
        return resultado;
        }
        
    private Row getSeguimientoInstanciaCliente(Long idFlujo, Long idCliente) {
            logger.log(ADFLogger.WARNING, "Inside getSeguimientoInstanciaCliente.");
            Row seguimientoRow = null;
            ViewCriteria criteriaByClienteInstanciaProceso = null;
            if((idFlujo != null) && (idCliente != null)) {
                   criteriaByClienteInstanciaProceso=this.getViewCriteriaManager().getViewCriteria("SeguimientoCreditcioVOCriteria");
                    criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varIdCliente", idCliente);
                    criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varInstancia", idFlujo);
                    
                    this.applyViewCriteria(criteriaByClienteInstanciaProceso);
                    this.executeQuery();
                    
                    // 2) Asignamos valor de retorno
                    if(this.getEstimatedRowCount() > 0) {
                    seguimientoRow = this.getRowAtRangeIndex(0);
                    
                    // Removemos criteria del VO
                    this.getViewCriteriaManager().removeApplyViewCriteriaName("SeguimientoCreditcioVOCriteria");
                    
                    // Re-ejecutamos el query 
                   // this.executeQuery();
                    }
                    }
        return seguimientoRow;
        }
    
    private Row getSeguimientoId(Long idSeguimiento) {
            logger.log(ADFLogger.TRACE, "Inside getSeguimientoInstanciaCliente.");
            Row seguimientoRow = null;
            ViewCriteria criteriaByClienteInstanciaProceso = null;
            if(idSeguimiento != null) {
                   criteriaByClienteInstanciaProceso=this.getViewCriteriaManager().getViewCriteria("SeguimientoCreditcioVOCriteria1");
                    criteriaByClienteInstanciaProceso.ensureVariableManager().setVariableValue("varIdSeguimiento", idSeguimiento);
                    
                    this.applyViewCriteria(criteriaByClienteInstanciaProceso);
                    this.executeQuery();
                    
                    // 2) Asignamos valor de retorno
                    if(this.getEstimatedRowCount() > 0) {
                    seguimientoRow = this.getRowAtRangeIndex(0);
                    
                    // Removemos criteria del VO
                    this.getViewCriteriaManager().removeApplyViewCriteriaName("SeguimientoCreditcioVOCriteria1");
                    
                    // Re-ejecutamos el query 
                   // this.executeQuery();
                    }
                    }
        return seguimientoRow;
        }
    
    public String obtenerNombre(String login){
        String respuesta=null;
        Map<String, Object> servicioLogin=null;
            
        FenixAMImpl fenixAMImpl= null;
        fenixAMImpl= (FenixAMImpl) this.getRootApplicationModule();
        
        if(null!=login){
            respuesta = login;
            servicioLogin=fenixAMImpl.consultarAtributosUsuario(login);
            if(null!=servicioLogin){
                if(null!=servicioLogin.get("nombreUsuario")){
                     respuesta=(String)servicioLogin.get("nombreUsuario");
                    }
                }
            }
        return respuesta;
        }
    
    private Row crearSeguimientoCrediticio(Long idCliente, String instanciaProceso, 
                                           String nombreUsuario, String login, Integer scrVigente, 
                                           Integer perspectivaVigente, String tipoInicio, Integer estadoSCR, 
                                            java.sql.Timestamp fechaUltimoRegistro, java.sql.Timestamp fechaUltimoCambio, Long idFlujo) {
        logger.log(ADFLogger.TRACE, "Inside crearSeguimientoCrediticio.");
        Map<String, Object> servicioLogin=null;
        
            FenixAMImpl fenixAMImpl= null;
            fenixAMImpl= (FenixAMImpl) this.getRootApplicationModule();
           // servicioLogin=fenixAMImpl.consultarAtributosUsuario(login);
          //  String nombreCompleto=(String) servicioLogin.get("nombreUsuario");
            
          //  logger.warning("Nombre"+ nombreCompleto);
        
        // Creamos una nuevO SEGUIMIENTO CREDITCIO asignado a un CLIENTE e InstanciaProceso
        Row seguimientoRow = null;
        oracle.jbo.domain.Number idSeguimientoCredicitio = null;
        SeguimientoCreditcioVORowImpl nvpSeguimiento = (SeguimientoCreditcioVORowImpl) this.createRow();
        SequenceImpl seqSeguimiento = null;
        Integer ban=0;
        
        java.sql.Timestamp tiempo=new java.sql.Timestamp(System.currentTimeMillis());

        seqSeguimiento = new SequenceImpl("SEGUIMIENTO_CREDITICIO_SEQ", getDBTransaction());
        idSeguimientoCredicitio = seqSeguimiento.getSequenceNumber();
        String tipoRev="PERIODICA";
        String tipoInicio2="NORMAL";
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.BANESTATUS, ban);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.FECHAREGISTRO, tiempo);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.ID, idSeguimientoCredicitio);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.IDCLIENTE, idCliente);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.INSTANCIAPROCESO, instanciaProceso);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.TIPOINICIO, tipoInicio);
      //  nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.TIPOREVISION, tipoRev);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.IDTCAESTADOSCR, estadoSCR);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.IDFLUJO, idFlujo);
        
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.IDTCASCR, scrVigente);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.IDTCAPERSPECTIVA, perspectivaVigente);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.LOGINUSUARIO, login);
        
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.FECHAULTIMOCAMBIO, tiempo);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.LOGINUSUARIOULTIMOCAMBIO, login);
       
        
            nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.NOMBREUSUARIO, nombreUsuario);
            nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.NOMBREUSUARIOULTIMOCAMBIO, nombreUsuario);
            /*
        if(null!=nombreCompleto){
                nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.NOMBREUSUARIO, nombreCompleto);
                nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.NOMBREUSUARIOULTIMOCAMBIO, nombreCompleto);
            }
        else{
                nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.NOMBREUSUARIO, nombreUsuario);
                nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.NOMBREUSUARIOULTIMOCAMBIO, nombreUsuario);

            }
              nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.CAMBIOPERSPECTIVA, Boolean.FALSE);
              nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.CAMBIOSCR, Boolean.FALSE);
        */
           

        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.CAMBIARPERSPECTIVA, Boolean.FALSE);
        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.CAMBIARSCR, Boolean.FALSE);
        String nuevo="Nuevo";
        Integer meses=0;
        if(null!= fechaUltimoRegistro){
            nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.FECHAULTIMOREGISTRO, fechaUltimoRegistro);
            }
        else{
            //    nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.FECHAULTIMOREGISTRO, new java.sql.Timestamp(System.currentTimeMillis()));

            }
        if(null!=fechaUltimoCambio){
                Date fechaActual=new Date();
                meses=ultimoCambio(fechaActual, fechaUltimoCambio);
            }
        if(null!= meses && meses!=0){
                nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.MESES, meses);
            }

        nvpSeguimiento.setAttribute(SeguimientoCreditcioVORowImpl.ESTADOSEGUIMIENTO, nuevo);
        nvpSeguimiento.setNewRowState(Row.STATUS_INITIALIZED);
        
        insertRow(nvpSeguimiento);           
        seguimientoRow=nvpSeguimiento;
        //getDBTransaction().commit();
        logger.warning("IdSeguiminto"+ (Long)nvpSeguimiento.getAttribute("Id"));
        setCurrentRow(nvpSeguimiento);
        return nvpSeguimiento;
        }
    
    public Boolean actualizarSeguimiento(){
        logger.warning("Entra en actualizarSeguimiento.");
        Boolean finaliza=Boolean.TRUE;
        java.sql.Timestamp tiempo=new java.sql.Timestamp(System.currentTimeMillis());
        Row row=getCurrentRow();
        if(null!=row){
            row.setAttribute("FechaUltimoCambio", tiempo);
        }else{
            logger.warning("No se recupera el currentRow.");
        }
            try{
                getDBTransaction().commit();
            }catch(Exception e){
                e.printStackTrace();
                logger.severe("Error al realizar Commit", e);
                finaliza = Boolean.FALSE;
            }
            if(!finaliza){
                    try{
                        getDBTransaction().rollback();    
                    }catch(Exception ex){
                        logger.severe("Error al realizar Rollback", ex);
                    }
                }
        
        return finaliza;
        }
    
    public void actualizarSCRRecomendado(Long idSeguimiento, Integer idTcaScr) {
        logger.warning("Into actualizarSCRRecomendado.");
        logger.warning("value idSeguimiento : " + idSeguimiento);
        logger.warning("value idTcaScr : " + idTcaScr);

        Row seguimientoRow = null;
        seguimientoRow = getSeguimientoId(idSeguimiento); //this.getRow(new Key(new Object[] { idSeguimiento }));

        if (seguimientoRow != null) {

            seguimientoRow.setAttribute(SeguimientoCreditcioVORowImpl.IDTCASCR, idTcaScr);
           // getDBTransaction().commit();
        } else {
            logger.log(ADFLogger.WARNING, "No record found in PrepagoVo with idSeguimiento : " + idSeguimiento);
        }
    }
    
    public void actualizarBanEstatusSCRAprobado(Long idSeguimiento) {
        logger.warning("Into actualizarBanEstatusSCRAprobado.");
        logger.warning("value idSeguimiento : " + idSeguimiento);

        Row seguimientoRow = null;
        seguimientoRow = getSeguimientoId(idSeguimiento); //this.getRow(new Key(new Object[] { idSeguimiento }));
        
        Integer BAN_ESTATUS_ACTIVO = 1;
        
        if (seguimientoRow != null) {

            seguimientoRow.setAttribute(SeguimientoCreditcioVORowImpl.BANESTATUS, BAN_ESTATUS_ACTIVO);
           // getDBTransaction().commit();
        } else {
            logger.log(ADFLogger.WARNING, "No record found in PrepagoVo with idSeguimiento : " + idSeguimiento);
        }
    }
    
    /**
     * Returns the variable value for varIdSeguimiento.
     * @return variable value for varIdSeguimiento
     */
    public Integer getvarIdSeguimiento() {
        return (Integer) ensureVariableManager().getVariableValue("varIdSeguimiento");
    }

    /**
     * Sets <code>value</code> for variable varIdSeguimiento.
     * @param value value to bind as varIdSeguimiento
     */
    public void setvarIdSeguimiento(Integer value) {
        ensureVariableManager().setVariableValue("varIdSeguimiento", value);
    }
    
    public Long obtenerRegistroRetorno(Long idCliente){
        Long idSeguimiento = null;
        
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixSeguimientoCrediticioAMImpl fenixSegAMImpl = 
            (FenixSeguimientoCrediticioAMImpl)fenixAMImpl.getFenixSeguimientoCrediticioAM();
        
        //Consultamos ultimo registro
        fenixSegAMImpl.getSeguimientoCrediticioRetornoVO().setWhereParams(idCliente);
        
        //Obtenemos registro
        if(fenixSegAMImpl.getSeguimientoCrediticioRetornoVO().getEstimatedRowCount()>0){
            Row seguimientoRow = (Row)fenixSegAMImpl.getSeguimientoCrediticioRetornoVO().getRowAtRangeIndex(0);
            
            if (null != seguimientoRow) {
                if (null != seguimientoRow.getAttribute("Id")) {
                    idSeguimiento = (Long)seguimientoRow.getAttribute("Id");
                }
            } 
        }
        
        return idSeguimiento;
    }
    
    public Boolean eliminarSeguimiento(){
        Boolean resultado=Boolean.FALSE;
            SeguimientoCreditcioVORowImpl nvpSeguimiento = (SeguimientoCreditcioVORowImpl) getCurrentRow();
            logger.warning("id seguimiento a eliminar: " + nvpSeguimiento.getAttribute("Id"));
            removeCurrentRow();

            try{
                getDBTransaction().commit();
                resultado=Boolean.TRUE;
            }catch(Exception e){
                e.printStackTrace();
                logger.severe("Error al realizar Commit", e);
            }
            if(!resultado){
                    try{
                        getDBTransaction().rollback();    
                    }catch(Exception ex){
                        logger.severe("Error al realizar Rollback", ex);
                    }
                }
            executeQuery();
        return resultado;
        }
    
    public Integer getRowState(){
    SeguimientoCreditcioVORowImpl row = (SeguimientoCreditcioVORowImpl) getCurrentRow();
    Integer intState = row.getRowState();
    return intState;
    }
    
    public void actualizarSCRCliente(Long idCliente, String nombre, String login){
            logger.warning("Inicia metodo actualizarSCRCliente.");
            logger.warning("idCliente: " + idCliente);
            logger.warning("nombre: " + nombre);
            logger.warning("login: " + login);            
            Long idSeguimientoCre = null;
             
            java.sql.Timestamp tiempo=new java.sql.Timestamp(System.currentTimeMillis());            
            Row seguimientoRow = null;
           
           /* 
            if(getCurrentRow() == null){
                logger.warning(" no se pudo recuperar el Current de SeguimientoCrediticioVO");
                logger.warning("Recuperando row mediante iCliente e instancia proceso...");
                            
                FenixAMImpl fenixAMImpl = null;
                fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                idSeguimientoCre = fenixAMImpl.getSeguimientoCrediticioAprobacionVO().getIdCurrent();
              
                setCurrentById(idSeguimientoCre);
            }
            */
            
            if(getCurrentRow() != null){
                
                seguimientoRow = getCurrentRow();
               
                if(null!=seguimientoRow.getAttribute("IdCliente")){
                    if(idCliente.compareTo((Long)seguimientoRow.getAttribute("IdCliente"))==0){
                        
                        seguimientoRow.setAttribute("NombreUsuarioUltimoCambio", nombre);
                        seguimientoRow.setAttribute("LoginUsuarioUltimoCambio", login);
                        seguimientoRow.setAttribute("FechaUltimoCambio", tiempo);                           
                        
                        }else{
                           logger.warning("Error el idCliente recibido "+idCliente+" no es igual al idCurrent: "+seguimientoRow.getAttribute("IdCliente")+"");
                        }
                }else{
                    logger.warning("Error el idCliente del row es resuleto a null ");
                }
            }else{
                logger.warning("no se recupero un current en segimiento crediticio no se actualizara el SCR Cliente");
            }  
           
            logger.warning("termina metodo actualizarSCRCliente.");                                                   
        }
    
    
    public void setCurrentById(Long idSeguimientoCre){
        logger.warning("Inicia metodo setCurrentById");
        logger.warning("idSeguimientoCrediticio a actualizar : "+idSeguimientoCre);
        
        Row fila = null;
        ViewCriteria criteria = null;

        if(null == idSeguimientoCre){
            logger.warning("Error parametros requeridos resueltos a null no se buscara Row");
        }else{
                    
                try {
                    criteria = getViewCriteriaManager().getViewCriteria("buscarRegistroByIdVC");
                    criteria.ensureVariableManager().setVariableValue("idSeguimientoCre", idSeguimientoCre);                   
                    applyViewCriteria(criteria);
                    executeQuery();
        
                    if (getEstimatedRowCount() > 0) {                
                        fila = first();
                        setCurrentRow(fila);
                        logger.warning("Row recuperado de seguimiento crediticio ->" + fila.getAttribute("Id"));
                    } else {
                        logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");                
                    }
        
                } catch (Exception e) {
                    logger.warning("*** Error al buscar por idSeguimiento cre: "+idSeguimientoCre+" ->", e);
                } finally {
                    getViewCriteriaManager().removeApplyViewCriteriaName("buscarRegistroByIdVC");
                }
        }
     
        
        logger.warning("termina metodo setCurrentById");
    }


    /**
     * Returns the variable value for idSeguimientoCre.
     * @return variable value for idSeguimientoCre
     */
    public Long getidSeguimientoCre() {
        return (Long) ensureVariableManager().getVariableValue("idSeguimientoCre");
    }

    /**
     * Sets <code>value</code> for variable idSeguimientoCre.
     * @param value value to bind as idSeguimientoCre
     */
    public void setidSeguimientoCre(Long value) {
        ensureVariableManager().setVariableValue("idSeguimientoCre", value);
    }
}

