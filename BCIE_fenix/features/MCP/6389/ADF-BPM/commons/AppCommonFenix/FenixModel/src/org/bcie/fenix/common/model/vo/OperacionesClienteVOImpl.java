package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.clienteservice.Cliente12BndQSService;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.clientebo.EntidadMinimaOperacion;
import org.bcie.clientemo.ConsultarClienteResponseType;
import org.bcie.clientemo.ConsultarClientesByIdClienteRequestType;
import org.bcie.contratobo.Contrato;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.OperacionesClienteVO;
import org.bcie.lineacreditobo.Flexcube;
import org.bcie.lineacreditobo.LineaCredito;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Jan 10 10:49:42 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OperacionesClienteVOImpl extends ViewObjectImpl implements OperacionesClienteVO {
    private static ADFLogger logger = null;
    private static Boolean flagOperacionesRelacionadas;
    private static Boolean infoMora;
    private static Boolean infoDeterioro;
    private FenixAMImpl fenixAM;

    /**
     * This is the default constructor (do not remove).
     */
    public OperacionesClienteVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
        
    }

    /**
     * @autor Damacio Cordoba Medina
     * @since 11/01/2016
     * Método utilizado crear un registro en la vista OperacionesClienteVO
     */
    public Row crearOperacion(){
       //logger.log(ADFLogger.WARNING, "Inside crearOperacion");
       Row row = this.createRow();
       this.insertRowAtRangeIndex(0, row); // Insertamos row en VO
       this.setCurrentRow(row); // Asignamos nuevo row como current
       return row;
    }
    
    /**
     * Mapear valores del response a OperacionesClienteVO
     * @param List<EntidadMinimaOperacion> 
     * @since 08/07/2016
     * @by Gabriel Niño Rosales
     */
    public void mappingConsultarOperacionesRelaccionadasByIdCliente(List<EntidadMinimaOperacion> operaciones){
        try{
            logger.warning("Dentro mappingConsultarOperacionesRelaccionadasByIdCliente");
            logger.warning("cantidad de operaciones :"+operaciones.size());
            Row rowOperacionesClienteVO = null;
        for (EntidadMinimaOperacion operacion : operaciones){
            rowOperacionesClienteVO = createRow();
            
            //id operacion
            if(0 <= operacion.getIdOperacion()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.IDOPERACION,operacion.getIdOperacion());
            }
            //cliente (nombre)
            if(null != operacion.getCliente()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.CLIENTE,operacion.getCliente());
            }
            //estado
            if(null != operacion.getEstado()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.ESTADO,operacion.getEstado());
            }
            //etapa
            if(null != operacion.getEtapa()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.ETAPA,operacion.getEtapa());
            }
            //nombre
            if(null != operacion.getNombre()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.NOMBRE,operacion.getNombre());
            }
            //pais
            if(null != operacion.getPais()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.PAIS,operacion.getPais());
            }
            //SCR
            if(null != operacion.getSCR()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.IDSCR,operacion.getSCR().getId());
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.IDSCRANTERIOR,operacion.getSCR().getId());
            }
            //producto
            if(null != operacion.getProducto()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.PRODUCTO,operacion.getProducto());
            }
            //responsable
            if(null != operacion.getResponsable()){
                rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.RESPONSABLE,operacion.getResponsable());
            }
            this.insertRow(rowOperacionesClienteVO);
            this.setCurrentRow(rowOperacionesClienteVO);
            
            
        }
            logger.log(ADFLogger.WARNING,"Successful mappingConsultarOperacionesRelaccionadasByIdCliente in OperacionesClienteVOImpl");
        }catch(Exception e){
            logger.severe("Error en mappingConsultarOperacionesRelaccionadasByIdCliente :"+e);
            JboException ex = new JboException(e);
            throw ex;
        }
        
        logger.warning("Fuera mappingConsultarOperacionesRelaccionadasByIdCliente");
    }
    
    public Boolean obtenerOperacionesRelacionadas(){
        logger.log(ADFLogger.WARNING,"Into obtenerOperacionesRelacionadas in OperacionesClienteVOImpl");
        try{
            this.getAllRowsInRange();
            logger.warning("Numero de Operaciones del cliente : " + this.getAllRowsInRange());
            if(this.getRowCount() == 0){
                flagOperacionesRelacionadas = Boolean.FALSE;
            }else{
                flagOperacionesRelacionadas = Boolean.TRUE;
            }
        }catch(Exception e){
            e.getStackTrace();
        }
        logger.warning("Valor de retorno flagOperacionesRelacionadas : " + flagOperacionesRelacionadas);
        return flagOperacionesRelacionadas;
    }
    
    public void consultarOperacionesByIdCliente(long idCliente,Boolean esSeguimientoCrediticio){
        try{
            logger.warning("Dentro consultarOperacionesByIdCliente");
            logger.warning("idCliente :"+idCliente);
            logger.warning("esSeguimientoCrediticio :"+esSeguimientoCrediticio);
            
            this.executeQuery();
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.CLIENTE);
            Cliente12BndQSService cliente12BndQSService = null;
            cliente12BndQSService =  IWsdlLocation.Service.getInstance(Cliente12BndQSService.class, wsdl);
            ConsultarClientesByIdClienteRequestType request = new ConsultarClientesByIdClienteRequestType();
            request.setIdCliente(idCliente);
            infoMora = Boolean.FALSE;
            request.setInfoDeterioro(infoMora);
            infoDeterioro = Boolean.FALSE;
            request.setInfoMora(infoDeterioro);
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_CLIENTE);
            ConsultarClienteResponseType response = null;
            response = cliente12BndQSService.getCliente12BndQSPort().consultarByIdCliente(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_CLIENTE, horaInicio);
            if(response != null && null != response.getCliente() && 0 < response.getCliente().size()){
                //this.mappingConsultarClienteByIdCliente(response.getCliente().get(0));
                if(null == esSeguimientoCrediticio || Boolean.FALSE == esSeguimientoCrediticio || false == esSeguimientoCrediticio){
                    logger.warning("Mapping de operaciones relacionadas normal");
                    this.mappingConsultarOperacionesRelaccionadasByIdCliente(response.getOperaciones());
                }else if(Boolean.TRUE == esSeguimientoCrediticio || true == esSeguimientoCrediticio){
                    logger.warning("Mapping de operaciones relacionadas para seguimiento crediticio");
                    this.mappingConsultarOperacionesRelaccionadasByIdClienteSegCrediticio(response.getOperaciones());
                }
            }else{
                logger.log(ADFLogger.WARNING,"ConsultarClienteResponseType Cliente is  null, no mapping information.");
            }
        }catch(Exception e){
            logger.severe("Error al consumir y procesar servicio de Consultar Cliente por Id", e);
            JboException ex = new JboException(e);
            throw ex;
        } 
        logger.warning("Fuera consultarOperacionesByIdCliente");
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
    
    
    /**
     * Mapear valores del response a OperacionesClienteVO filtrando operaciones para el proceso de seguimiento crediticio FNXII-7318
     * @param List<EntidadMinimaOperacion> 
     * @since 19/07/2018
     * @by Gabriel Niño Rosales
     */
    public void mappingConsultarOperacionesRelaccionadasByIdClienteSegCrediticio(List<EntidadMinimaOperacion> operaciones){
        try{
            logger.warning("Dentro mappingConsultarOperacionesRelaccionadasByIdClienteSegCrediticio");
            logger.warning("cantidad de operaciones :"+operaciones.size());
            Row rowOperacionesClienteVO = null;
            List<String> listaNumeroLinea = null;
            String listaNumeroLineaStr = null;
            this.executeQuery();
            
        for (EntidadMinimaOperacion operacion : operaciones){
            //si cumple estas condiciones se agregan al row
            if(esValidaOperacion(operacion.getIdOperacion())){
            
                rowOperacionesClienteVO = createRow();
                //id operacion
                if(0 <= operacion.getIdOperacion()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.IDOPERACION,operacion.getIdOperacion());
                }
                //lista de lineas de credito
                listaNumeroLinea = new ArrayList<String>();
                listaNumeroLineaStr = "";
                listaNumeroLinea = obtenerListaLineaCredito(operacion.getIdOperacion());
                
                if(null != listaNumeroLinea){
                    int cont = 0;
                    for(String numeroLinea : listaNumeroLinea){
                        if(cont == 0){
                            listaNumeroLineaStr = numeroLinea;
                            cont++;
                        }else{
                            listaNumeroLineaStr =  listaNumeroLineaStr + ","+numeroLinea;
                            cont++;
                        }
                    }
                    
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.LISTANUMEROLINEA,
                                                            listaNumeroLineaStr);
                    
                }else{
                    logger.warning("Lista de lineas de credito es null");
                }
                    
                //cliente (nombre)
                if(null != operacion.getCliente()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.CLIENTE,operacion.getCliente());
                }
                //estado
                if(null != operacion.getEstado()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.ESTADO,operacion.getEstado());
                }
                //etapa
                if(null != operacion.getEtapa()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.ETAPA,operacion.getEtapa());
                }
                //nombre
                if(null != operacion.getNombre()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.NOMBRE,operacion.getNombre());
                }
                //pais
                if(null != operacion.getPais()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.PAIS,operacion.getPais());
                }
                //SCR
                if(null != operacion.getSCR()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.IDSCR,operacion.getSCR().getId());
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.IDSCRANTERIOR,operacion.getSCR().getId());
                }
                //producto
                if(null != operacion.getProducto()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.PRODUCTO,operacion.getProducto());
                }
                //responsable
                if(null != operacion.getResponsable()){
                    rowOperacionesClienteVO.setAttribute(OperacionesClienteVORowImpl.RESPONSABLE,operacion.getResponsable());
                }
                this.insertRow(rowOperacionesClienteVO);
                this.setCurrentRow(rowOperacionesClienteVO);
            }else{
                logger.warning("No cumplio las condiciones no se agrega el row con el idOperacion :"+operacion.getIdOperacion());
            }
        }
            logger.log(ADFLogger.WARNING,"Successful mappingConsultarOperacionesRelaccionadasByIdCliente in OperacionesClienteVOImpl");
        }catch(Exception e){
            logger.severe("Error en mappingConsultarOperacionesRelaccionadasByIdClienteSegCrediticio :"+e);
            JboException ex = new JboException(e);
            throw ex;
        }
        
        logger.warning("Fuera mappingConsultarOperacionesRelaccionadasByIdClienteSegCrediticio");
    }
    
    public Boolean esValidaOperacion(Long idOperacion){
        logger.warning("Dentro esValidaOperacion");
        logger.warning("idOperacion :"+idOperacion);
        Boolean esValidaOperacion = null;
        ProcesoOperacionVOImpl procesoOperacionVO = null;
        Boolean esAnalisisFinalizado = null;
        Boolean existeAprobacionFormalizacion = null;
        Boolean validoMontoAndFechaVencimiento = null;
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        procesoOperacionVO = fenixAM.getProcesoOperacionVO();
        //Para considerar una operación valida deberá cumplir con los siguientes criterios:
        //1. La operación deberá contar con su proceso de análisis concluido
        esAnalisisFinalizado = procesoOperacionVO.existeProcesoFinalizadoAnalisis(idOperacion, new Integer(3));
        logger.warning("esAnalisisFinalizado :"+esAnalisisFinalizado);
        existeAprobacionFormalizacion = procesoOperacionVO.existeTareaAprobacionFormalizacion(idOperacion);
        logger.warning("existeAprobacionFormalizacion :"+existeAprobacionFormalizacion);
        //Si la operacion cuenta con un proceso de aprobacion validar la siguiente condcion, si no omitir operacion
        if(esAnalisisFinalizado && existeAprobacionFormalizacion){
            //2. Las Líneas de Crédito (Préstamos o Líneas de Crédito Globales) deberán tener disponible y saldo
            //así como estar vigentes (con fecha de vencimiento mayor al día de hoy).
            validoMontoAndFechaVencimiento = procesoOperacionVO.validarMontoAndFechaVencimiento(idOperacion);
            logger.warning("validoMontoAndFechaVencimiento :"+validoMontoAndFechaVencimiento);
            if(esAnalisisFinalizado && existeAprobacionFormalizacion && validoMontoAndFechaVencimiento){
                logger.warning("idOperacion :"+idOperacion+" es valida");
                esValidaOperacion = Boolean.TRUE;
            }else{
                logger.warning("idOperacion :"+idOperacion+" es no es valida, no debe mostrarse");
                esValidaOperacion = Boolean.FALSE;
            }
        
        }else{
            if(!esAnalisisFinalizado)
                logger.warning("Si la operacion no cuenta con el proceso de analisis finalizado omitir operacion");
            if(!existeAprobacionFormalizacion)
                logger.warning("Si la operacion no cuenta con un proceso de aprobacion omitir la operacion");
            esValidaOperacion = Boolean.FALSE;
        }
        
        logger.warning("Fuera esValidaOperacion,return :"+esValidaOperacion);
        return esValidaOperacion;
    }
    
    public List<String> obtenerListaLineaCredito(Long idOperacion){
        logger.warning("Dentro de obtenerListaLineaCredito");
        logger.warning("idOperacion: "+ idOperacion);
        List<String> listaNumeroLinea = null;
        
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        
        String wsdl = fenixAM.getWsdl(IWsdlLocation.LINEA_CREDITO);

        listaNumeroLinea = new ArrayList<String>();
        
        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService = 
            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
                        lineaCredito12BndQSService.getLineaCredito12Bnd();

        try {
            logger.log(ADFLogger.WARNING, ">HNWS lineaCreditoPT.toString()" + lineaCreditoPT.toString());
            org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType request =
                            new org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType();
            //se agrega los parametros al request idOperacion e instanciaProceso
            request.setIdOperacion(idOperacion);
            
    
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);
                org.bcie.lineacreditomo.ConsultarLineaCreditoResponseType response =
                        lineaCreditoPT.consultarLineaCredito(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);

            if(response.getClienteContrato().size() == 0){
                logger.warning("No existen contratos con idOperacion :"+idOperacion);
            }else{
                
                for(Contrato contrato : response.getClienteContrato()){
                    List<LineaCredito>  lineasCredito = contrato.getLineaCredito();

                    for(LineaCredito linea : lineasCredito){
                    if(null != linea.getNumeroLineaCredito()){
                        listaNumeroLinea.add(linea.getNumeroLineaCredito());
                    }else{
                        logger.warning("numero de linea de credito null"); 
                    }
                    
                }//cierra linea

                }//cierra contrato       
                
            }//else para cuando se tienen registros    
                   
        }catch(Exception e){
            logger.severe("Error en validarMontoAndFechaVencimiento :"+e);
        }
        logger.warning("Fuera de obtenerListaLineaCredito");
        return listaNumeroLinea;
    }
}

