package org.bcie.fenix.common.model.vo;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ComisionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 16 21:05:46 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ComisionVOImpl extends ViewObjectImpl implements ComisionVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ComisionVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void agregarComision(Long idBaseCalculo, Long idFrecuencia, Long idTipoComision, String baseCalculo,
                                String tipoFrecuencia, String frecuencia, String codigoComision, String porcentaje, 
                                String tipoComision) {
        // Creamos row
        Row row = this.createRow();
        row.setAttribute("Id", Integer.valueOf(this.getRowCount() + 1));
        
        // Asignación de atributos
        row = mappingRow(row, null, idBaseCalculo, idFrecuencia, idTipoComision, baseCalculo, tipoFrecuencia, frecuencia, 
                         codigoComision, porcentaje, tipoComision);
        
        // Insertamos row al final de la tabla
        this.last();
        this.next();
        this.insertRow(row);
    }
    
    public void modificarComision(Integer id, Long idComision, Long idBaseCalculo, Long idFrecuencia, Long idTipoComision, 
                                  String baseCalculo, String tipoFrecuencia, String frecuencia, String codigoComision, 
                                  String porcentaje, String tipoComision) {
        logger.log(ADFLogger.TRACE, "Inside modificarComision.");
        Row comisionRow = null;
        
        // Obtenemos row por Id
        comisionRow = this.getRow(new Key(new Object[] {id}));
        
        // Modificamos datos
        if(comisionRow != null) {
            comisionRow = mappingRow(comisionRow, idComision, idBaseCalculo, idFrecuencia, idTipoComision, baseCalculo, 
                                     tipoFrecuencia, frecuencia, codigoComision, porcentaje, tipoComision);
        }
    }
    
    public void eliminarComision(Integer id) {
        logger.log(ADFLogger.TRACE, "Inside eliminarComision.");
        
        // Obtenemos y eliminamos row por Id
        if((id != null) && (this.getRow(new Key(new Object[] {id})) != null))
            this.getRow(new Key(new Object[] {id})).remove();
    }
    
    public void eliminarComisionAgregados(List idsComisionesEliminadas) {
        logger.log(ADFLogger.TRACE, "Inside eliminarVencimientoAgregados.");
        for(Object idComision : idsComisionesEliminadas) {
            Long idComisionLong = (Long)idComision;
            Row[] rowVencimiento =this.getFilteredRows("IdComision",idComisionLong);
            for (Row row : rowVencimiento) {
                this.setCurrentRow(row);
                this.removeCurrentRow();
            }
        }
    }
    
    public void agregarComisionesEliminadas(List idsComisionesEliminadas) {
        logger.log(ADFLogger.TRACE, "Inside agregarComisionesEliminadas.");
        
        // Insertamos en el VO las comisiones eliminadas, con Estado en false
        for(Object idComision : idsComisionesEliminadas) {
            
            // Creamos row
            Row row = this.createRow();
            row.setAttribute("Id", Integer.valueOf(this.getRowCount() + 1));
            row.setAttribute("IdComision", idComision);
            row.setAttribute("Estado", Boolean.FALSE);
                        
            // Insertamos row al final de la tabla
            this.last();
            this.next();
            this.insertRow(row); 
        }      
    }
    
    private Row mappingRow(Row row, Long idComision, Long idBaseCalculo, Long idFrecuencia, Long idTipoComision,  
                           String baseCalculo, String tipoFrecuencia, String frecuencia, String codigoComision, 
                           String porcentaje, String tipoComision) {
        
        logger.log(ADFLogger.WARNING, "inside agregarComision/modificarComision");
        logger.log(ADFLogger.WARNING, "BaseCalculo: "+baseCalculo);
        logger.log(ADFLogger.WARNING, "TipoFrecuencia: "+ tipoFrecuencia);
        logger.log(ADFLogger.WARNING, "Frecuencia: "+ frecuencia);
        logger.log(ADFLogger.WARNING, "IdBaseCalculo: "+ idBaseCalculo);
        logger.log(ADFLogger.WARNING, "IdComision: "+ idComision);
        logger.log(ADFLogger.WARNING, "IdFrecuencia: "+ idFrecuencia);
        logger.log(ADFLogger.WARNING, "IdTipoComision: "+ idTipoComision);
        logger.log(ADFLogger.WARNING, "CodigoComision: "+ codigoComision);
        logger.log(ADFLogger.WARNING, "Porcentaje: "+ porcentaje);
        logger.log(ADFLogger.WARNING, "TipoComision: "+ tipoComision);
        // Asignación de atributos
        row.setAttribute("BaseCalculo", baseCalculo);
        row.setAttribute("TipoFrecuencia", tipoFrecuencia);
        row.setAttribute("Frecuencia", frecuencia);
        row.setAttribute("IdBaseCalculo", idBaseCalculo);
        row.setAttribute("IdComision", idComision);
        row.setAttribute("IdFrecuencia", idFrecuencia);
        row.setAttribute("IdTipoComision", idTipoComision);
        row.setAttribute("CodigoComision", codigoComision);
        row.setAttribute("Porcentaje", porcentaje);
        row.setAttribute("TipoComision", tipoComision);
        row.setAttribute("Estado", Boolean.TRUE); // Estado es true por default para modificar y agregar.
        
        return row;
    }
    
    /**
     * [KB:14513]
     * Inserta una copia (al final) de los datos de la comision encontrados en base de datos en este objeto de memoria.
     * @param rowComisionLC Comision encontrada en base de datos.
     * @return Fila recién ingresada a esta VO.
     */
    public Row insertCopyOf(ComisionesLineaCreditoVORowImpl rowComisionLC) {
        // Creamos row
        Row row = this.createRow();
        row.setAttribute("Id", Integer.valueOf(this.getRowCount() + 1));

        // Asignación de atributos
        String frecStr = rowComisionLC.getFrecuencia() != null ? String.valueOf(rowComisionLC.getFrecuencia()) : null;
        row =
            mappingRow(row, rowComisionLC.getId(), rowComisionLC.getIdBaseCalculo(),
                       rowComisionLC.getIdTipoFrecuencia(), rowComisionLC.getIdTipoComision(),
                       rowComisionLC.getBaseCalculo(), rowComisionLC.getTipoFrecuencia(), frecStr,
                       rowComisionLC.getCodigoComision(), rowComisionLC.getPorcentaje() + "%",
                       rowComisionLC.getTipoComision());

        // Insertamos row al final de la tabla
        this.last();
        this.next();
        this.insertRow(row);

        return row;
    }
}

