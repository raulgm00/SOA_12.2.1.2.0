package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.ConsultarTreSolicitudLineaCreditoVO;
import org.bcie.terminobo.Termino;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 18 16:19:25 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarTreSolicitudLineaCreditoVOImpl extends ViewObjectImpl implements ConsultarTreSolicitudLineaCreditoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultarTreSolicitudLineaCreditoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean buscarRegistrosSolicitudValidarContratosDesembolsados(Long idSolicitud){
        logger.warning("Inicia metodo buscarRegistrosSolicitudValidarContratosDesembolsados.");
        Boolean existeDesembolso = Boolean.FALSE;
        ViewCriteria vc = null;
        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
        
        if(null == idSolicitud){
            logger.warning("Parametro idSolicitud requerido es NULL");
            return null;
        }
        
        try{
            logger.warning("Ejecutando criteria de busqueda de registros de solicitud: " + idSolicitud);
            vc = this.getViewCriteriaManager().getViewCriteria("ConsultarTreSolicitudLineaPorIdSolicitudVC");
            vc.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);
            this.applyViewCriteria(vc);
            this.executeQuery();
        }catch(Exception e){
            logger.warning("ERROR al ejecutar el crietria ConsultarTerminoOperacionTcaTerminoVC.", e);
            //Eliminamos el ViewCriteria
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarTreSolicitudLineaPorIdSolicitudVC");
            return null;
        }
        
        logger.warning("Registros encontrados para la solicitud: " + getEstimatedRowCount());
        if(getEstimatedRowCount() > 0){
            setRangeSize(-1);
            Long idContrato = null;
            Row[] rowArray = getAllRowsInRange();
            for(Row row : rowArray){
                try{
                    idContrato = (Long) row.getAttribute("IdContratoDesembolso");
                }catch(Exception e){
                    logger.warning("ERROR al recuperar idContrato de TreSolicitudLineaCredito: ", e);
                    existeDesembolso = null;
                    break;
                }
                
                logger.warning("Contrato a evaluar: " + idContrato);
                existeDesembolso = 
                    fenixAmImpl.getConsultarContratosDesembolsoQueryVO().validarExisteContratoPorEstado(idContrato, FenixModelConstants.ESTADO_CONTRATO_DESEMBOLSO_DESEMBOLSADO);
                
                logger.warning("Existe desembolso: " + existeDesembolso);
                if(null != existeDesembolso){
                    if(existeDesembolso){
                        logger.warning("La solicitud contiene un contrato en estado DESEMBOLSADO.");
                        break;
                    }
                }else{
                    logger.warning("Hubo un error al validar la existencia de contratos desembolsados.");
                    break;
                }
            }
        }
        
        //Eliminamos el ViewCriteria
        this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarTreSolicitudLineaPorIdSolicitudVC");
        logger.warning("Termina metodo buscarRegistrosSolicitudValidarContratosDesembolsados.");
        return existeDesembolso;
    }

    /**
     * Returns the variable value for pIdSolicitud.
     * @return variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("pIdSolicitud", value);
    }
}

