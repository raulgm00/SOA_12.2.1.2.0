package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.sql.Timestamp;

import java.util.Date;

import java.util.GregorianCalendar;

import java.util.List;
import java.util.Map;

import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.commonbo.MontoType;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsomo.ConsultarSaldoRequestType;
import org.bcie.desembolsomo.ConsultarSaldoResponseType;
import org.bcie.desembolsomo.EnvioGastoBPELRequestType;
import org.bcie.desembolsomo.EnvioGastoBPELResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.FormularioGeneracionFT05VO;
import org.bcie.resultbo.Resultado;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 24 09:59:06 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FormularioGeneracionFT05VOImpl extends ViewObjectImpl implements FormularioGeneracionFT05VO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    private static final String WS_ERROR_VALUE= "ERROR";
    private static final String DESCRIPCION_CORTA_SALDO = "SALDO";
    
    public FormularioGeneracionFT05VOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowFormularioGeneracionFT05ModoLectura(Long id, String contratoFlexcube, 
                                                    String cuentaCliente, String bhqTransferenciaFt05, 
                                                    Timestamp fechaEfectiva, Timestamp fechaEfectivaFt05,
                                                    String cuentaPuente, Long idTransferenciaFT05){
        logger.log(ADFLogger.WARNING, "INTO crearRowFormularioGeneracionFT05ModoLectura y / o escritura.");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
        
        this.clearCache();
        Row row = this.createRow();
        try{
            row.setAttribute(FormularioGeneracionFT05VORowImpl.ID, id);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.CONTRATOFLEXCUBE, contratoFlexcube);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.CUENTACLIENTE, cuentaCliente);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.FECHAEFECTIVA, fechaEfectiva);
            if(null!=fechaEfectivaFt05){
                row.setAttribute(FormularioGeneracionFT05VORowImpl.FECHAEFECTIVAFT05, fechaEfectivaFt05);
                }
            if(null!=bhqTransferenciaFt05){
            row.setAttribute(FormularioGeneracionFT05VORowImpl.BHQTRANSFERENCIAFT05, bhqTransferenciaFt05);
                }

            row.setAttribute(FormularioGeneracionFT05VORowImpl.CUENTAPUENTE, cuentaPuente);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.IDTRANSFERENCIAFT05, idTransferenciaFT05);
            
            row.setNewRowState(Row.STATUS_INITIALIZED);
            
            this.insertRowAtRangeIndex(0, row); 
            this.setCurrentRow(row); // Se asigna row como current (Fila actual)
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormularioGeneracionFT05ModoLectura." + e.getClass() + e.getMessage());
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/ 1000; //Calculamos los milisegundos de diferencia
        logger.log(ADFLogger.WARNING, "Termina crearRowFormularioGeneracionFT05ModoLectura y / o escritura con una duracion de: "+tiempo+" segundos");
    }
    
    public void crearRowFormularioGeneracionFT05ModoGenerar(Long id, String contratoFlexcube, 
                                                    String cuentaCliente, Timestamp fechaEfectiva,
                                                    String cuentaPuente){
        logger.log(ADFLogger.TRACE, "INTO crearRowFormularioGeneracionFT05ModoGenerar.");
        this.clearCache();
        Row row = this.createRow();
        try{
            row.setAttribute(FormularioGeneracionFT05VORowImpl.ID, id);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.CONTRATOFLEXCUBE, contratoFlexcube);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.CUENTACLIENTE, cuentaCliente);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.FECHAEFECTIVA, fechaEfectiva);
            row.setAttribute(FormularioGeneracionFT05VORowImpl.CUENTAPUENTE, cuentaPuente);
            
            row.setNewRowState(Row.STATUS_INITIALIZED);
            
            this.insertRowAtRangeIndex(0, row); 
            this.setCurrentRow(row); // Se asigna row como current (Fila actual)
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en crearRowFormularioGeneracionFT05ModoGenerar." + e.getClass() + e.getMessage());
        }
    }
    
    public Boolean generarFT05Desembolso(Long idContratoDesembolso, String contratoFlexcube, Timestamp fechaEfectiva, 
                                         String cuentaPuente, String cuentaCliente){
        logger.warning("Inicia metodo generarFT05Desembolso");
        
        //logger.warning("paso 1");
        Boolean resultado = Boolean.FALSE;
        EnvioGastoBPELRequestType request = null;
        EnvioGastoBPELResponseType response = null;
        FenixAMImpl fenixAMImpl = null;
        
        Long idDesembolso = null;
        String BHQTransferenciaFT05 = null;
        Timestamp fechaEfectivaFT05 = null;
        Long idTransferenciaFT05 = null;
        
        try{
            //logger.warning("paso 2");
            Resultado result = null;
            fenixAMImpl = (FenixAMImpl)this.getRootApplicationModule();
            
            //logger.warning("paso 3");
            //Service declaration
            String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DESEMBOLSO);
            DesembolsoPTSOAP12BindingQSService service = 
                IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            DesembolsoPT port = service.getDesembolsoPTSOAP12BindingQSPort();
            
            //logger.warning("paso 4");
            //Request declaration
            request = new EnvioGastoBPELRequestType();
            request.setIdDesembolso(idContratoDesembolso);
            
            //logger.warning("paso 5");
            //Service execution             
            Date horaInicioService =
                ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_LIQUIDAR_CONTRATO);
            response = port.liquidarContrato(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_LIQUIDAR_CONTRATO, horaInicioService);
            result = response.getResultado();
            
            //logger.warning("paso 6");
            if(result.getResult() == null || 
               (result.getResult()!=null && result.getResult().value().equalsIgnoreCase(WS_ERROR_VALUE))){
                logger.log(ADFLogger.WARNING, "Error al generar FT05");                
                //throw new Exception(result.getMessage());
                resultado = Boolean.FALSE;
            }else{
                //logger.warning("Revisar las salidas del servicio");
                try{
                    //logger.warning("paso 7");
                    //idDesembolso = response.getTransferenciaFT05().getIdDesembolso();   se comenta por la incidencia FNXII- 5634
                    //idTransferenciaFT05 = response.getTransferenciaFT05().getIdTransferenciaFT05();   se comenta por la incidencia FNXII- 5634
                    BHQTransferenciaFT05 = response.getTransferenciaFT05().getIdFacturador();
                    //logger.warning("paso 8");
                    logger.warning("idDesembolso obtenido del servicio: " + response.getTransferenciaFT05().getIdDesembolso());
                    logger.warning("idTransferenciaFT05 obtenido del servicio: " + response.getTransferenciaFT05().getIdTransferenciaFT05());
                    logger.warning("BHQTransferenciaFT05 obtenido del servicio: " + BHQTransferenciaFT05);
                    resultado = Boolean.TRUE;
                    //logger.warning("paso 9");
                }
                catch(Exception e){
                    logger.warning("Error al obtener idDesembolso, idTransferenciaFT05, BHQTransferenciaFT05" + e.getClass() + e.getMessage());
                }
//                se comenta debido por la incidencia FNXII- 5634
//                try{
//                    //logger.warning("paso 10");
//                    //fechaEfectivaFT05 = response.getTransferenciaFT05().getFechaEfectiva();
//                    fechaEfectivaFT05 = this.convertXmlGregorianCalendarToTimestamp(response.getTransferenciaFT05().getFechaEfectiva());
//                }
//                catch(Exception e){
//                    logger.warning("Error al obtener y convertir fechaEfectivaFT05 del servicio" + e.getClass() + e.getMessage());
//                }
//                try{
//                    //logger.warning("paso 11");
//                    if(idContratoDesembolso == idDesembolso)
//                    {
//                        //logger.warning("paso 12");    
//                        this.clearCache();
//                        Row newRow = this.getCurrentRow();
//                        //logger.warning("paso 13");
//                        if(idDesembolso!=null)
//                            newRow.setAttribute("Id", idDesembolso);
//                        if(contratoFlexcube!=null)
//                            newRow.setAttribute("ContratoFlexcube", contratoFlexcube);
//                        if(fechaEfectiva!=null)
//                            newRow.setAttribute("FechaEfectiva", fechaEfectiva);
//                        if(cuentaPuente!=null)
//                            newRow.setAttribute("CuentaPuente", cuentaPuente);
//                        if(cuentaCliente!=null)
//                            newRow.setAttribute("CuentaCliente", cuentaCliente);
//                        if(BHQTransferenciaFT05!=null)
//                            newRow.setAttribute("BhqTransferenciaFt05", BHQTransferenciaFT05);
//                        if(fechaEfectivaFT05!=null)
//                            newRow.setAttribute("FechaEfectivaFt05", fechaEfectivaFT05);
//                        if(idTransferenciaFT05!=null)
//                            newRow.setAttribute("IdTransferenciaFT05", idTransferenciaFT05);
//                        //logger.warning("paso 14");
//                        logger.warning("Nueva fila insertada en la VO");
//                        logger.warning("IdDesembolso: " + newRow.getAttribute("Id"));
//                        logger.warning("ContratoFlexcube: " + newRow.getAttribute("ContratoFlexcube"));
//                        logger.warning("FechaEfectiva: " + newRow.getAttribute("FechaEfectiva"));
//                        logger.warning("CuentaPuente: " + newRow.getAttribute("CuentaPuente"));
//                        logger.warning("CuentaCliente: " + newRow.getAttribute("CuentaCliente"));
//                        logger.warning("BhqTransferenciaFt05: " + newRow.getAttribute("BhqTransferenciaFt05"));
//                        logger.warning("FechaEfectivaFt05: " + newRow.getAttribute("FechaEfectivaFt05"));
//                        logger.warning("IdTransferenciaFT05: " + newRow.getAttribute("IdTransferenciaFT05"));
//                        //logger.warning("paso 15");
//                        this.insertRowAtRangeIndex(0, newRow);
//                        this.setCurrentRow(newRow);
//                        resultado = Boolean.TRUE;
//                        //logger.warning("paso 16");
//                    }
//                    else{
//                        logger.warning("Error, idContratoDesembolso recibido - idDesembolso obtenido no coinciden");
//                    }
//                }
//                catch(Exception e)
//                {
//                    logger.warning("Error al ingresar los valores del servicio en la VO" + e.getClass() + e.getMessage());
//                }
            }
            
        }
        catch(Exception e) 
        {
             logger.log(ADFLogger.WARNING, "Excepcion al generar FT05 " + e.getClass() + e.getMessage());
             JboException ex = new JboException(e);
             throw ex;
        }
        
        logger.warning("Termina metodo generarFT05Desembolso");
        return resultado;
    }

    public Boolean validarSaldoContratoDesembolso(Long idContratoDesembolso) {
        logger.entering(this.getClass().getName(), "validarSaldoContratoDesembolso");
        Boolean respuestaValidarSaldo = Boolean.FALSE;
        ConsultarSaldoRequestType request = null;
        ConsultarSaldoResponseType response = null;
        FenixAMImpl fenixAM = null;
        int contador=0;

        try {
            Resultado result = null;
            fenixAM = (FenixAMImpl) this.getRootApplicationModule();

            //Service declaration
            String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);
            DesembolsoPTSOAP12BindingQSService service =
                IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            DesembolsoPT port = service.getDesembolsoPTSOAP12BindingQSPort();

            //Request declaration
            request = new ConsultarSaldoRequestType();
            request.setIdDesembolso(idContratoDesembolso);
            logger.warning("Consulta de saldo de idContratoDesembolso: " + request.getIdDesembolso());
            //Service execution
            Date horaInicioService =
                ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_SALDO_CONTRATO_DESEMBOLSO);
            response = port.consultarSaldo(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_SALDO_CONTRATO_DESEMBOLSO,
                                horaInicioService);
            result = response.getResultado();

            if (result.getResult() == null ||
                (result.getResult() != null && result.getResult().value().equalsIgnoreCase(WS_ERROR_VALUE))) {
                logger.log(ADFLogger.WARNING, "Error al consultar saldo contrato desembolso");
                respuestaValidarSaldo = Boolean.FALSE;
            } else {
                List<MontoType> listaMontosContrato = response.getContratoDesembolso().getMonto();
                BigDecimal montoTotalDesembolsado = new BigDecimal(0);
                for (MontoType monto : listaMontosContrato) {
                    if (null != monto.getTipo()){
                        if(null != monto.getTipo().getDescripcionCorta()){
                                logger.warning("Monto descripcion: " + monto.getTipo().getDescripcionCorta());
                                logger.warning("Monto total actual: " + montoTotalDesembolsado);
                                if (monto.getTipo().getDescripcionCorta().equalsIgnoreCase(DESCRIPCION_CORTA_SALDO)) {
                                    if (null != monto.getImporte()) {
                                        contador=contador+1;
                                        logger.warning("Monto o saldo: " + monto.getImporte());
                                       montoTotalDesembolsado = montoTotalDesembolsado.add(monto.getImporte());
                                        logger.warning("Monto total actual sumad: " + montoTotalDesembolsado);
                                    } else {
                                        logger.warning("El valor del importe es NULL");
                                    }
                                }
                                else{
                                        logger.warning("El valor de la descripcion no coincide");
                                    }
                            }
                        else{
                                logger.warning("El valor de la descripcion corta  es NULL");
                            }
                    } else {
                        logger.warning("El TIPO monto  es NULL");
                    }


                }
                logger.log(ADFLogger.WARNING, "Monto total final: " + montoTotalDesembolsado);
                if ((montoTotalDesembolsado.compareTo(new BigDecimal(0)) == 0) && contador > 0){
                    respuestaValidarSaldo = Boolean.TRUE;
                }
                else{
                    if(contador==0){
                            logger.severe("Tipo monto saldo no recibido"); 
                        }
                    
                        respuestaValidarSaldo = Boolean.FALSE;
                    }
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Excepcion al validar Saldo contrato desembolso" + e);
            respuestaValidarSaldo = Boolean.FALSE;
        }
        logger.exiting(this.getClass().getName(), "validarSaldoContratoDesembolso");
        return respuestaValidarSaldo;
    }
    
    /**
     * Convierte de XMLGregorianCalendar a Timestamp
     * 
     * @param xgc XMLGregorianCalendar
     * @return timestamp Timestamp
     */
    private Timestamp convertXmlGregorianCalendarToTimestamp(XMLGregorianCalendar xgc) {
        Timestamp timestamp = null;
        if (xgc != null) {
            if (xgc.toGregorianCalendar() != null) {
                try {
                    timestamp = new Timestamp(xgc.toGregorianCalendar().getTimeInMillis());
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR, "timestamp " + e.getMessage());
                }
            } else {
                logger.log(ADFLogger.WARNING, "xgc.toGregorianCalendar() NULL");
            }
        } else {
            logger.log(ADFLogger.WARNING, "xgc NULL");
        }
        return timestamp;
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

