package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.am.common.FenixImplementacionPctAM;
import org.bcie.fenix.common.model.vo.common.LoteImplementacionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 13:16:29 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LoteImplementacionVOImpl extends ViewObjectImpl implements LoteImplementacionVO {
    private static ADFLogger logger = null;
    
    private final static Integer idTcaResultadoNuevo = Integer.valueOf(5);   //Valor del Catalogo TcaResultadoProceso = Nuevo 
    private final static Integer idTcaResultadoAdjudicado = Integer.valueOf(1);   //Valor del Catalogo TcaResultadoProceso = Nuevo 

    /**
     * This is the default constructor (do not remove).
     */
    public LoteImplementacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public Long agregarLoteImplementacion(Long idImplementacion, String nombreLote, BigDecimal montoPresupuestado,
                                          Integer idTcaTipoMoneda, Integer idTcaResultadoProceso) {
        logger.log(ADFLogger.TRACE, "Inside agregarLoteImplementacion.");
        logger.warning("Inicia metodo agregarLoteImplementacion");

        oracle.jbo.domain.Number idLoteImplementacion = null;
        NameValuePairs nvpLotesImplementacion = null;
        SequenceImpl seqLotesImplementacion = null;
        logger.warning("Continua porceso agregarLoteImplementacion 1");

        seqLotesImplementacion = new SequenceImpl("LOTE_IMPLEMENTACION_SEQ", getDBTransaction());
        idLoteImplementacion = seqLotesImplementacion.getSequenceNumber();

        logger.warning("Continua porceso agregarLoteImplementacion 2");
        nvpLotesImplementacion = new NameValuePairs();
        nvpLotesImplementacion.setAttribute("Id", idLoteImplementacion);
        nvpLotesImplementacion.setAttribute("IdImplementacion", idImplementacion);
        nvpLotesImplementacion.setAttribute("NombreLote", nombreLote);
        nvpLotesImplementacion.setAttribute("MontoPresupuestado", montoPresupuestado);
        nvpLotesImplementacion.setAttribute("IdTcaTipoMoneda", idTcaTipoMoneda);
        nvpLotesImplementacion.setAttribute("IdTcaResultadoProceso", idTcaResultadoProceso);
        nvpLotesImplementacion.setAttribute("BanEstatus", 1);
        logger.warning("Id--->" + idLoteImplementacion);
        logger.warning("IdImplementacion--->" + idImplementacion);
        logger.warning("NombreLote--->" + nombreLote);
        logger.warning("MontoPresupuestado--->" + montoPresupuestado);
        logger.warning("IdTcaTipoMoneda--->" + idTcaTipoMoneda);
        logger.warning("IdTcaResultadoProceso--->" + idTcaResultadoProceso);
        logger.warning("BanStatus--->" + 1);
        logger.warning("Continua proceso agregarLoteImplementacion 3");

        this.createAndInitRow(nvpLotesImplementacion);
        logger.warning("Continua proceso agregarLoteImplementacion 4");

        getDBTransaction().commit();
        logger.warning("Continua proceso agregarLoteImplementacion 5 (se hace commit a la VO)");
        Long idLote = null;
        try {
            idLote = Long.parseLong(idLoteImplementacion.toString());
            logger.warning("Id lote implementacion retornado--->" + idLote);
        } catch (Exception ex) {
            idLote = null;
            logger.warning("Error al retornar el Id lote implementacion--->(valor: " + idLote + ")");
        }

        Boolean respuesta = actualizarMonedaLotesImplementacion(idImplementacion, idTcaTipoMoneda);
        logger.warning("Respuesta obtenida al actualizar el idTcaTipoMoneda: " + respuesta);
        logger.warning("Finaliza metodo agregarLoteImplementacion");

        return idLote;
    }


    public Long agregarLoteGestionarProcesContrat(Long idImplementacion) {
        logger.warning("*Inf, Inicia agregarLoteImplementacion.");   
        
        String nombreLote = null;
        BigDecimal montoPresupuestado = null;
        Long idLoteImplementacionLong = null;
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl implementacionAM = null;
        Row filaFormularioImpPCT = null;
        
        
        if(idImplementacion == null){
            logger.warning("Error parametro idImplementacion es requerido");
            return null;
        }
        
        try{
            implementacionAM = (FenixImplementacionPctAMImpl)fenixAMImpl.getFenixImplementacionPctAM();                 
        }catch(Exception e){
            logger.warning("Error al instanciar FenixImplementacionPctAM->",e);
            new JboException("Ha ocurrido un error ->"+e.getMessage());
        }
        
         filaFormularioImpPCT = implementacionAM.getFormularioImplementacionPctVO().obtenerCurrentEnFormularioImplementacionVO();
        
        
                 nombreLote = (filaFormularioImpPCT.getAttribute("NombreAdquisicion")== null)
                            ? null : (String)filaFormularioImpPCT.getAttribute("NombreAdquisicion");
         
         montoPresupuestado = (filaFormularioImpPCT.getAttribute("MontoPresupuestado") == null) 
                            ? null : (BigDecimal)filaFormularioImpPCT.getAttribute("MontoPresupuestado");
          

        oracle.jbo.domain.Number idLoteImplementacion = null;
        NameValuePairs nvpLotesImplementacion = null;
        SequenceImpl seqLotesImplementacion = null;        
        seqLotesImplementacion = new SequenceImpl("LOTE_IMPLEMENTACION_SEQ", getDBTransaction());
        idLoteImplementacion = seqLotesImplementacion.getSequenceNumber();

        logger.warning("Id--->" + idLoteImplementacion);
        logger.warning("IdImplementacion--->" + idImplementacion);
        logger.warning("NombreLote--->" + nombreLote);
        logger.warning("MontoPresupuestado--->" + montoPresupuestado);
        
        nvpLotesImplementacion = new NameValuePairs();
        nvpLotesImplementacion.setAttribute("Id", idLoteImplementacion);
        nvpLotesImplementacion.setAttribute("IdImplementacion", idImplementacion);
        nvpLotesImplementacion.setAttribute("NombreLote", nombreLote);
        nvpLotesImplementacion.setAttribute("MontoPresupuestado", montoPresupuestado);
        nvpLotesImplementacion.setAttribute("BanEstatus", 1);
                                
        this.createAndInitRow(nvpLotesImplementacion);
        
        try{ 
            getDBTransaction().commit();
            idLoteImplementacionLong = new Long(idLoteImplementacion.toString());
        }catch(Exception e){
            idLoteImplementacionLong = null;
            logger.warning("Ha ocurrido un error al guardar el lote implementacion ->", e);
            throw new JboException("Error al guardar el lote implementacion");            
        }
                       
        logger.warning("*Inf, termina metodo agregarLoteImplementacion");
        return idLoteImplementacionLong;
    }




    public Boolean obtenerLotesByIdImplementacion(Long idImplementacion) {

        logger.log(ADFLogger.WARNING, "INTO  obtenerLotesImplementacionByIdImplementacion : ");
        Integer contador = 0;
        Boolean validaImplementacion = Boolean.FALSE;

        try {
            if (idImplementacion == null) {
                validaImplementacion = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
                rowsLoteImplementacionVo.reset();
                while (rowsLoteImplementacionVo.hasNext()) {
                    LoteImplementacionVORowImpl rowL = (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);

                try {
                    if (contador > 0)
                        validaImplementacion = Boolean.TRUE;
                    else
                        validaImplementacion = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsLoteImplementacionVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerImplementacionByIdImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionVOCriteria");
        }

        return validaImplementacion;
    }
    
    public Boolean obtenerLotesByIdImplementacionInicioProceso(Long idImplementacion) {

        logger.log(ADFLogger.WARNING, "INTO  obtenerLotesByIdImplementacionSinInicioProceso : ");
        Integer contador = 0;
        Boolean validaImplementacion = Boolean.FALSE;

        try {
            if (idImplementacion == null) {
                validaImplementacion = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
                rowsLoteImplementacionVo.reset();
                while (rowsLoteImplementacionVo.hasNext()) {
                    LoteImplementacionVORowImpl rowL = (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
                    if(null == rowL.getAttribute("EnProceso")){
                        contador++;
                    }else{
                        logger.warning("El lote se encuentra en un proceso activo o ya ha finalizado un proceso");
                        logger.warning("Estado del proceso : " + rowL.getAttribute("EnProceso"));
                    }
                }
                logger.warning("Numero de rows: " + contador);

                try {
                    if (contador > 0)
                        validaImplementacion = Boolean.TRUE;
                    else
                        validaImplementacion = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsLoteImplementacionVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerLotesByIdImplementacionSinInicioProceso " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionVOCriteria");
        }

        return validaImplementacion;
    }

    public void eliminarLoteImplementacion(Long idLoteImplementacion) {
        logger.log(ADFLogger.TRACE, "Inside eliminarLoteImplementacion.");

        Row filaRecuperada = null;
        ViewCriteria criteria = null;

        logger.warning("idLoteImplementacion recibido---->" + idLoteImplementacion);

        if (idLoteImplementacion == null) {
            logger.warning("*** El parametro idLoteImplementacion es requerido para eliminar el registro");
        }
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionByIdVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varId", idLoteImplementacion);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("Metodo eliminarConcursanteImplementacion------Ingresa al If");
                filaRecuperada.remove();
                logger.warning("Metodo eliminarConcursanteImplementacion------Aplica row.remove");
                getDBTransaction().commit();
                logger.warning("Metodo eliminarConcursanteImplementacion------Hace el commit");
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionByIdVOCriteria");
                executeQuery();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionByIdVOCriteria");
        }

        logger.warning("*** Termina metodo eliminarLoteImplementacion");
    }

    public Boolean actualizarLoteImplementacion(Long idLote, String nombreLote, BigDecimal montoPresupuestado,
                                                Integer idTcaTipoMoneda) {
        Boolean resultado = Boolean.TRUE;
        Row filaRecuperada = null;
        ViewCriteria criteria = null;
        Long idImplementacion = Long.valueOf(0);

        logger.warning("IdLote recibido: " + idLote);
        logger.warning("nombreLote recibido: " + nombreLote);
        logger.warning("montoPresupuestado recibido: " + montoPresupuestado);
        logger.warning("idTcaTipoMoneda recibido: " + idTcaTipoMoneda);

        if (idLote == null) {
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return null;
        }
        try {
            criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionByIdVOCriteria");
            criteria.ensureVariableManager().setVariableValue("varId", idLote);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (getEstimatedRowCount() > 0) {
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                logger.warning("IdLote: " + idLote);
                logger.warning("Valor anterior nombreLote: " + filaRecuperada.getAttribute("NombreLote"));
                logger.warning("Valor anterior montoPresupuestado: " +
                               filaRecuperada.getAttribute("MontoPresupuestado"));
                logger.warning("Valor anterior idTcaTipoMoneda: " + filaRecuperada.getAttribute("IdTcaTipoMoneda"));
                idImplementacion = Long.valueOf(filaRecuperada.getAttribute("IdImplementacion").toString());
                if (null != nombreLote && null != montoPresupuestado && null != idTcaTipoMoneda) {
                    filaRecuperada.setAttribute("NombreLote", nombreLote);
                    filaRecuperada.setAttribute("MontoPresupuestado", montoPresupuestado);
                    filaRecuperada.setAttribute("IdTcaTipoMoneda", idTcaTipoMoneda);
                    try {
                        getDBTransaction().commit();
                        logger.warning("Se hace commit a la DB");
                    } catch (Exception e) {
                        logger.log(ADFLogger.ERROR,
                                   "Error al intentar guardar en el metodo actualizarLoteImplementacion ->: " +
                                   e.getMessage());
                        getDBTransaction().rollback();
                        resultado = Boolean.FALSE;
                    }
                } else {
                    logger.warning("Se reciben valores como null");
                    resultado = Boolean.FALSE;
                }
            } else {
                logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");
                getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionByIdVOCriteria");
                resultado = Boolean.FALSE;
                executeQuery();
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionByIdVOCriteria");
        }
        
        if(idImplementacion>0){
            Boolean respuesta = actualizarMonedaLotesImplementacion(idImplementacion, idTcaTipoMoneda);
            logger.warning("Respuesta obtenida al actualizar el idTcaTipoMoneda: " + respuesta);
        }
        else{
            logger.warning("No hay coincidencias en la busqueda... no se actualiza el campo moneda...");
        }

        logger.warning("*** Termina metodo actualizarLoteImplementacion");

        return resultado;
    }

    public BigDecimal obtenerSumaMontosPresupuestadosByIdImplementacion(Long idImplementacion) {

        logger.log(ADFLogger.WARNING, "INTO  obtenerSumaMontosPresupuestadosByIdImplementacion : ");
        BigDecimal sumaTotalMontosPresupuestados = BigDecimal.valueOf(0);
        BigDecimal montosPresupuestado = BigDecimal.valueOf(0);

        try {
            if (idImplementacion == null) {
                sumaTotalMontosPresupuestados = BigDecimal.valueOf(0);
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
                rowsLoteImplementacionVo.reset();
                while (rowsLoteImplementacionVo.hasNext()) {
                    LoteImplementacionVORowImpl rowL = (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
                    Integer idTcaResultadoProceso = rowL.getIdTcaResultadoProceso();
                    if(idTcaResultadoProceso.equals(idTcaResultadoNuevo) || idTcaResultadoProceso.equals(idTcaResultadoAdjudicado)){
                        montosPresupuestado = rowL.getMontoPresupuestado();
                        sumaTotalMontosPresupuestados = sumaTotalMontosPresupuestados.add(montosPresupuestado);
                    }
                }
                logger.warning("Suma total de todos los lotes: " + sumaTotalMontosPresupuestados);
                rowsLoteImplementacionVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerSumaMontosPresupuestadosByIdImplementacion " + ex.getClass() + ":" +
                       ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionVOCriteria");
        }

        return sumaTotalMontosPresupuestados;
    }

    public void setValoresInicializarLoteImplementacion(Long id) {

        logger.warning("Entra id: " + id);
        setvarId(id);
        this.executeQuery();
        logger.warning("Numero de rows obtenidos :" + this.getRowCount());
        //logger.warning("paso 1");
        RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
        rowsLoteImplementacionVo.reset();
        //logger.warning("paso 2");
        while (rowsLoteImplementacionVo.hasNext()) {
            //logger.warning("ingresa while");
            LoteImplementacionVORowImpl rowL = (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
            //logger.warning("Valor Id: " + rowL.getAttribute("Id"));
            if (null != rowL.getAttribute("Id")) {
                Long idRecuperado = Long.parseLong(rowL.getAttribute("Id").toString());
                //logger.warning("Valor Id recuperado: " + idRecuperado);
                //logger.warning("Valor Id ingresado: " + id);
                if (idRecuperado.longValue() == id.longValue()) {
                    logger.warning("Row con id " + id + " se establece como currentRow");
                    this.setCurrentRow(rowL);
                    break;
                } else {
                    //logger.warning("id no coincide");
                }
            }
        }
        rowsLoteImplementacionVo.closeRowSetIterator();
        //logger.warning("paso 4");
        logger.warning("finaliza metodo setValoresInicializarLoteImplementacion");
    }

    public Boolean actualizarIdTcaResultadoProceso(Long idLoteImplementacion, Integer idTcaResultadoProceso) {
        Boolean resultado = Boolean.TRUE;

        try {
            if (null != idLoteImplementacion) {
                Row row = getRow(new Key(new Object[] { idLoteImplementacion }));
                if (null != row) {
                    logger.warning("IdLoteImplementacion: " + idLoteImplementacion);
                    logger.warning("Valor anterior Id Tca Resultado Proceso: " +
                                   row.getAttribute("IdTcaResultadoProceso"));
                    if (null != idTcaResultadoProceso) {
                        /*String tipoProceso = null;
                        switch(idTcaResultadoProceso){
                            case 1:
                                tipoProceso = "Adjudicado";
                            break;
                            case 2:
                                tipoProceso = "Anulado";
                            break;
                            case 3:
                                tipoProceso = "Desierto";
                            break;
                            case 4:
                                tipoProceso = "Fracasado";
                            break;
                            default:
                                tipoProceso = null;
                            break;
                        }
                        row.setAttribute("TipoProceso", tipoProceso);*/
                        row.setAttribute("IdTcaResultadoProceso", idTcaResultadoProceso);
                        try {
                            getDBTransaction().commit();
                            logger.warning("Se hace commit a la DB");
                            logger.warning("Valor nuevo para Id Tca Resultado Proceso: " +
                                           row.getAttribute("IdTcaResultadoProceso"));
                        } catch (Exception e) {
                            logger.log(ADFLogger.ERROR,
                                       "Error al intentar guardar los datos Inicio Adquisicion ->: " + e.getMessage());
                            getDBTransaction().rollback();
                            resultado = Boolean.FALSE;
                        }
                    } else {
                        logger.warning("Dato Registrar Resultado Adquisicion es null");
                        resultado = Boolean.FALSE;
                    }
                } else {
                    logger.warning("IdLoteImplementacion: " + idLoteImplementacion + " rowKey no disponible");
                    resultado = Boolean.FALSE;
                }
            } else {
                logger.warning("IdLoteImplementacion es null");
                resultado = Boolean.FALSE;
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en actualizarIdTcaResultadoProceso " + ex.getClass() + ":" + ex.getMessage());
        }

        return resultado;
    }

    public void setValoresInicializarLotes(Long idImplementacion) {

        logger.warning("Entra idImplementacion: " + idImplementacion);
        setvarIdImplementacion(idImplementacion);
        this.executeQuery();
        logger.warning("Numero de rows obtenidos :" + this.getRowCount());

        FenixAMImpl fenixAM = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl fenixImplementacionPct =
            (FenixImplementacionPctAMImpl) fenixAM.getFenixImplementacionPctAM();

        Integer contador = 0;
        Long id = null;
        String nombreLote = null;
        BigDecimal montoPresupuestado = null;
        Integer idTcaTipoMoneda = null;
        Integer numeroLote = 1;
        Integer idTcaResultadoProceso = null;

        try {
            if (idImplementacion == null) {
                logger.warning("idImplementacion es null");
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                //logger.warning("paso 1");
                if (getEstimatedRowCount() > 0) {
                    //logger.warning("paso 2");
                    setCurrentRow(first());
                    if (getEstimatedRowCount() == 1) {
                        //logger.warning("paso 3 getEstimatedRowCount()==1");
                        Row fila = getCurrentRow();

                        if (null != fila.getAttribute("Id")) {
                            id = (Long) fila.getAttribute("Id");
                        }
                        if (null != fila.getAttribute("NombreLote")) {
                            nombreLote = (String) fila.getAttribute("NombreLote");
                        }
                        if (null != fila.getAttribute("MontoPresupuestado")) {
                            montoPresupuestado = (BigDecimal) fila.getAttribute("MontoPresupuestado");
                        }
                        if (null != fila.getAttribute("IdTcaTipoMoneda")) {
                            idTcaTipoMoneda = (Integer) fila.getAttribute("IdTcaTipoMoneda");
                        }
                        if (null != fila.getAttribute("IdTcaResultadoProceso")) {
                            idTcaResultadoProceso = (Integer) fila.getAttribute("IdTcaResultadoProceso");
                        }
                        
                        fenixImplementacionPct.getFormularioLoteImplementacionVO().crearRowFormLoteImplementacion(id,
                                                                                                                  nombreLote,
                                                                                                                  montoPresupuestado,
                                                                                                                  idTcaTipoMoneda,
                                                                                                                  numeroLote,
                                                                                                                  idTcaResultadoProceso);
                    } else if (getEstimatedRowCount() > 1) {
                        //logger.warning("paso 3 getEstimatedRowCount()>1");
                        RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
                        rowsLoteImplementacionVo.reset();
                        while (rowsLoteImplementacionVo.hasNext()) {
                            LoteImplementacionVORowImpl rowL =
                                (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
                            id = rowL.getId();
                            nombreLote = rowL.getNombreLote();
                            montoPresupuestado = rowL.getMontoPresupuestado();
                            idTcaTipoMoneda = rowL.getIdTcaTipoMoneda();
                            idTcaResultadoProceso = rowL.getIdTcaResultadoProceso();
                            
                            fenixImplementacionPct.getFormularioLoteImplementacionVO().crearRowFormLoteImplementacion(id,
                                                                                                                      nombreLote,
                                                                                                                      montoPresupuestado,
                                                                                                                      idTcaTipoMoneda, 
                                                                                                                      numeroLote,
                                                                                                                      idTcaResultadoProceso);
                            //logger.warning("Se inserta row Lote");

                            contador++;
                            numeroLote++;
                        }
                        logger.warning("Numero de rows: " + contador);
                        rowsLoteImplementacionVo.closeRowSetIterator();
                    }
                } else {
                    logger.warning("No hay ningun registro");
                }
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en setValoresInicializarLotes " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionVOCriteria");
        }

        //logger.warning("paso 4");
        logger.warning("finaliza metodo setValoresInicializarLotes");
    }

    public Boolean actualizarFechaOrdenInicio(Long idLoteImplementacion, Timestamp fechaOrdenInicio) {
        logger.log(ADFLogger.WARNING, "Entra en actualizarFechaOrdenInicio");
        logger.log(ADFLogger.WARNING, "Valor del lote :" + idLoteImplementacion);
        logger.log(ADFLogger.WARNING, "fecha orden de inicio :" + fechaOrdenInicio);
        Boolean valida = Boolean.FALSE;
        try {
            logger.log(ADFLogger.WARNING, "Numero de registros:" + getEstimatedRowCount());
            
            Row rowloteImplementacion = null;
            rowloteImplementacion = this.getRow(new Key(new Object[] { idLoteImplementacion }));
            logger.log(ADFLogger.WARNING,
                       "Valor ID de cargo prepago." + idLoteImplementacion + "Numero de rows.." + this.getRowCount());
            if (null != rowloteImplementacion) {
                //rowloteImplementacion.setAttribute("FechaOrdenInicio", fechaOrdenIncio);
                rowloteImplementacion.setAttribute("FechaOrdenInicio", fechaOrdenInicio);
                valida = Boolean.TRUE;
            } else {
                logger.log(ADFLogger.WARNING, "No se encontro algun row con Id de lote");
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error al actualizzar la fecha orden de inicio." + e);
        }

        logger.log(ADFLogger.WARNING, "valida:" + valida);
        logger.log(ADFLogger.WARNING, "Saliendo de actualizarFechaOrdenInicio");
        return valida;
    }

    public Boolean actualizarMonedaLotesImplementacion(Long idImplementacion, Integer idTcaTipoMoneda) {
        logger.log(ADFLogger.WARNING, "INTO  actualizarMonedaLotesImplementacion...");
        Boolean respuesta = Boolean.FALSE;
        Integer contador = Integer.valueOf(0);

        try {
            if (idImplementacion == null) {
                respuesta = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("LoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varIdImplementacion", idImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
                rowsLoteImplementacionVo.reset();
                while (rowsLoteImplementacionVo.hasNext()) {
                    LoteImplementacionVORowImpl rowL = (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
                    //logger.warning("idLote: " + rowL.getId());
                    //logger.warning("Valor anterior idTipoMoneda: " + rowL.getIdTcaTipoMoneda());
                    rowL.setIdTcaTipoMoneda(idTcaTipoMoneda);
                    getDBTransaction().commit();
                    //logger.warning("Valor nuevo idTipoMoneda: " + rowL.getIdTcaTipoMoneda());
                    contador++;
                }
                respuesta = Boolean.TRUE;
                logger.warning("Numero de rows actualizados: " + contador);
                rowsLoteImplementacionVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en actualizarMonedaLotesImplementacion " + ex);
            respuesta = Boolean.FALSE;
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("LoteImplementacionVOCriteria");
        }
        logger.log(ADFLogger.WARNING, "Finaliza  actualizarMonedaLotesImplementacion...");
        return respuesta;
    }
    
    public Long obtenerIdImplementacionByIdLoteImplementacion(Long idLoteImplementacion) {

        logger.log(ADFLogger.WARNING, "INTO  obtenerIdImplementacionByIdLoteImplementacion : ");
        Integer contador = 0;
        Long idImplementacion = Long.parseLong("0");

        try {
            if (idLoteImplementacion == null) {
                logger.warning("No se recibe un valor idLoteImplementacion, se retorna con valor en 0");                
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("IdImplementacionByIdLoteImplementacionVOCriteria");
                criteria.ensureVariableManager().setVariableValue("varId", idLoteImplementacion);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsLoteImplementacionVo = createRowSetIterator(null);
                rowsLoteImplementacionVo.reset();
                while (rowsLoteImplementacionVo.hasNext()) {
                    LoteImplementacionVORowImpl rowL = (LoteImplementacionVORowImpl) rowsLoteImplementacionVo.next();
                    idImplementacion = (Long)rowL.getAttribute("IdImplementacion");
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);
                if(contador==0)
                    logger.warning("No se encontro en la busqueda el idImplementacion, se retorna valor 0");
                rowsLoteImplementacionVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerImplementacionByIdImplementacion " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ImplementacionVOCriteria");
        }
        
        logger.warning("Valor a retornar idImplementacion: " + idImplementacion);
        logger.warning("Finaliza metodo obtenerIdImplementacionByIdLoteImplementacion");

        return idImplementacion;
    }

    /**
     * Returns the variable value for varIdImplementacion.
     * @return variable value for varIdImplementacion
     */
    public Long getvarIdImplementacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdImplementacion");
    }

    /**
     * Sets <code>value</code> for variable varIdImplementacion.
     * @param value value to bind as varIdImplementacion
     */
    public void setvarIdImplementacion(Long value) {
        ensureVariableManager().setVariableValue("varIdImplementacion", value);
    }

    /**
     * Returns the variable value for pIdImplementacion.
     * @return variable value for pIdImplementacion
     */
    public Long getpIdImplementacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdImplementacion");
    }

    /**
     * Sets <code>value</code> for variable pIdImplementacion.
     * @param value value to bind as pIdImplementacion
     */
    public void setpIdImplementacion(Long value) {
        ensureVariableManager().setVariableValue("pIdImplementacion", value);
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }


}

