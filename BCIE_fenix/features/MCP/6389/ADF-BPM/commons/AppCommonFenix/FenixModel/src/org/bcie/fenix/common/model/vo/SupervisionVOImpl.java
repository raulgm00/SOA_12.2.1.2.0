package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.SupervisionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jul 25 20:09:45 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SupervisionVOImpl extends ViewObjectImpl implements SupervisionVO {
    
    private static ADFLogger logger = null;
    
    public static final String COLOR_CALIFICACION_OPTIMO = "background-color:#17A5FC; color:Black;";
    public static final String COLOR_CALIFICACION_ESTANDAR = "background-color:#26BE0B; color:Black;";
    public static final String COLOR_CALIFICACION_ACEPTABLE = "background-color:#3AFC17; color:Black;";
    public static final String COLOR_CALIFICACION_CON_DEFICIENCIAS ="background-color:#FAFE02; color:Black;";
    public static final String COLOR_CALIFICACION_DETERIORADO = "background-color:#FE8D02; color:Black; ";
    public static final String COLOR_CALIFICACION_CRITICO = "background-color:#F20317; color:White;";
    
    /**
     * This is the default constructor (do not remove).
     */
    public SupervisionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varIdOperacion.
     * @return variable value for varIdOperacion
     */
    public Long getvarIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("varIdOperacion", value);
    }

    /**
     * Returns the variable value for varInstanciaProceso.
     * @return variable value for varInstanciaProceso
     */
    public String getvarInstanciaProceso() {
        return (String) ensureVariableManager().getVariableValue("varInstanciaProceso");
    }

    /**
     * Sets <code>value</code> for variable varInstanciaProceso.
     * @param value value to bind as varInstanciaProceso
     */
    public void setvarInstanciaProceso(String value) {
        ensureVariableManager().setVariableValue("varInstanciaProceso", value);
    }
    
    public Long getIdSupervision(Long codigoOperacion, String instanciaProceso, String loginUsuario) {
        logger.log(ADFLogger.WARNING, "Inside getIdSupervision.");
        
        Row supervisionRow = null;
        Integer idTcaSct = null;
        String colorCalificacion = null;
        Map<String, Object> responseMap = null;
        
        responseMap = consultarDatosUsuario(loginUsuario);
        
        String nombreUsuario = (String) responseMap.get("nombreUsuario");

        if ((codigoOperacion != null) && (instanciaProceso != null)) {
            supervisionRow = getSupervisionInstanciaOperacion(codigoOperacion, instanciaProceso);
            
            if (supervisionRow == null) {
                supervisionRow = crearSupervision(codigoOperacion, instanciaProceso, loginUsuario, nombreUsuario);
                this.executeQuery();
                supervisionRow = null;
                supervisionRow = getSupervisionInstanciaOperacion(codigoOperacion, instanciaProceso);
                supervisionRow.setAttribute("ColorCalificacion", colorCalificacion);
                //setCurrentRow(supervisionRow);
            } else {
                idTcaSct = (Integer) supervisionRow.getAttribute("IdTcaSct");
                if (idTcaSct != null) {
                    colorCalificacion = colocarColorCalificacion(idTcaSct);    
                    supervisionRow.setAttribute("ColorCalificacion", colorCalificacion);
                }
            }
            setCurrentRow(supervisionRow);
            //logger.warning("IdSupervision" + (Long)supervisionRow.getAttribute("Id"));
        }
        //return (supervisionRow != null ? (Long)supervisionRow.getAttribute("Id") : null);
        
        return null;
    }
    
    private Row getSupervisionInstanciaOperacion(Long codigoOperacion, String instanciaProceso) {
        logger.log(ADFLogger.TRACE, "Inside getSupervisionInstanciaOperacion.");
        
        Row supervisionRow = null;
        ViewCriteria criteriaByOperacionInstanciaProceso = null;
        
        if ((codigoOperacion != null) && (instanciaProceso != null)) {
            criteriaByOperacionInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("SupervisionVOCriteria");
            criteriaByOperacionInstanciaProceso.ensureVariableManager().setVariableValue("varIdOperacion", codigoOperacion);
            criteriaByOperacionInstanciaProceso.ensureVariableManager().setVariableValue("varInstanciaProceso", instanciaProceso);
            
            this.applyViewCriteria(criteriaByOperacionInstanciaProceso);
            this.executeQuery();
            
            if (this.getEstimatedRangePageCount() > 0) {
                supervisionRow = this.getRowAtRangeIndex(0);
                
                this.getViewCriteriaManager().removeApplyViewCriteriaName("SupervisionVOCriteria");
            }
        }
        return supervisionRow;
    }
    
    private Row crearSupervision(Long codigoOperacion, String instanciaProceso, String loginUsuario, String nombreUsuario) {
        logger.log(ADFLogger.WARNING, "Inside crearSupervision.");
        logger.log(ADFLogger.WARNING, "loginUsuario: " + loginUsuario);
        logger.log(ADFLogger.WARNING, "nombreUsuario: " + nombreUsuario);
        
        Row supervisionRow = null;
        oracle.jbo.domain.Number idSupervision = null;
        NameValuePairs nvpSupervision = null;
        SequenceImpl seqSupervision = null;
        Integer ban = 0;
        Integer esProyectoOperacion = 0;
        String tipoActualizacion = "Supervisión BCIE";
        
        seqSupervision = new SequenceImpl("SUPERVISION_SEQ", getDBTransaction());
        idSupervision = seqSupervision.getSequenceNumber();
        
        nvpSupervision = new NameValuePairs();
        /* nvpSupervision.setAttribute("AvanceFinanciero", null);
        nvpSupervision.setAttribute("AvanceFisico", null);
        nvpSupervision.setAttribute("CalificacionFinal", null);
        nvpSupervision.setAttribute("FechaAvance", null);
        nvpSupervision.setAttribute("FechaVisita", null);
        nvpSupervision.setAttribute("IdTcaSct", null); */
        nvpSupervision.setAttribute("BanEstatus", ban);
        nvpSupervision.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
        nvpSupervision.setAttribute("FechaInforme", new java.sql.Timestamp(System.currentTimeMillis())); 
        nvpSupervision.setAttribute("EsProyectoEnOperacion", esProyectoOperacion);
        nvpSupervision.setAttribute("Id", idSupervision);
        nvpSupervision.setAttribute("IdOperacion", codigoOperacion);
        nvpSupervision.setAttribute("InstanciaProceso", instanciaProceso);
        nvpSupervision.setAttribute("TipoActualizacion", tipoActualizacion);
        nvpSupervision.setAttribute("LoginUsuario", loginUsuario);
        nvpSupervision.setAttribute("NombreUsuario", nombreUsuario);
        //nvpSupervision.setAttribute("LoginUsuarioUltimoCambio", loginUsuario);
        //nvpSupervision.setAttribute("NombreUsuarioUltimoCambio", nombreUsuario);
        //nvpSupervision.setAttribute("FechaUltimoCambio", new java.sql.Timestamp(System.currentTimeMillis()));
        
        supervisionRow = this.createAndInitRow(nvpSupervision);
        getDBTransaction().commit();
        logger.warning("IdSupervision" + (Long)supervisionRow.getAttribute("Id"));
        setCurrentRow(supervisionRow);
                                
        return supervisionRow;
    }
    
    public Boolean actualizarSupervision() {
        logger.log(ADFLogger.TRACE, "Inside actualizarSupervision.");
        
        Boolean finaliza = Boolean.TRUE;
        
        try {
            getDBTransaction().commit();
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error al realizar Commit", e);
            finaliza = Boolean.FALSE;
        }
        
        if (!finaliza) {
            try {
                getDBTransaction().rollback();
            } catch (Exception ex) {
                logger.severe("Error al realizar Rollback", ex);
            }
        }
        return finaliza;
    }
    
    public Boolean actualizarSupervision(String loginUsuario, Boolean esRetorno) {
        logger.log(ADFLogger.TRACE, "Inside actualizarSupervision.");
        logger.warning("loginUsuario: " + loginUsuario);
        logger.warning("esRetorno: " + esRetorno);
        
        Boolean finaliza = Boolean.TRUE;
        Integer entityState = getRowState();
        
        logger.warning("entityState: " + entityState);
        
        if ((entityState.compareTo(2) == 0) && esRetorno) {
            logger.warning("Se ha realizado modificación, se actualizaran valores de usuario.");
            
            Map<String, Object> responseMap = null;
            Row rowSupervision = getCurrentRow();
            
            responseMap = consultarDatosUsuario(loginUsuario);
            String nombreUsuario = (String) responseMap.get("nombreUsuario");
            
            rowSupervision.setAttribute("LoginUsuarioUltimoCambio", loginUsuario);
            rowSupervision.setAttribute("NombreUsuarioUltimoCambio", nombreUsuario);
            rowSupervision.setAttribute("FechaUltimoCambio", new java.sql.Timestamp(System.currentTimeMillis()));
            
            finaliza = actualizarSupervision();
        }
        
        if (!esRetorno) {
            Map<String, Object> responseMap = null;
            Row rowSupervision = getCurrentRow();
            
            responseMap = consultarDatosUsuario(loginUsuario);
            String nombreUsuario = (String) responseMap.get("nombreUsuario");
            
            rowSupervision.setAttribute("LoginUsuarioUltimoCambio", loginUsuario);
            rowSupervision.setAttribute("NombreUsuarioUltimoCambio", nombreUsuario);
            rowSupervision.setAttribute("FechaUltimoCambio", new java.sql.Timestamp(System.currentTimeMillis()));
            
            finaliza = actualizarSupervision();   
        }
        
        return finaliza;
    }
    
    public String colocarColorCalificacion(Integer idSCT) {
        logger.warning("inside colocarCalificacionColor");
        String color = null;

        switch (idSCT) {
            case 1: 
                color = COLOR_CALIFICACION_OPTIMO;         
                break;
            case 2: case 3: case 4:
                color = COLOR_CALIFICACION_ESTANDAR;
                break;
            case 5: case 6: case 7:
                color = COLOR_CALIFICACION_ACEPTABLE;
                break;
            case 8: case 9: case 10:
                color = COLOR_CALIFICACION_CON_DEFICIENCIAS;
                break;
            case 11: case 12: case 13:
                color = COLOR_CALIFICACION_DETERIORADO;
                break;
            case 14:
                color = COLOR_CALIFICACION_CRITICO;
                break;
            default:
                break;
        }
        
        return (color);
    }
    
    public Boolean actualizarSupervision(Long id, BigDecimal avanceFisico, BigDecimal avanceFinanciero,
                                         java.sql.Timestamp fechaAvance, String loginUsuario, Integer proyectoOperacion) {
        logger.warning("Inside actualizarSupervision.");

        Boolean resultado = Boolean.TRUE;
        String nombreUsuario = null;
        Map<String, Object> responseMap = null;

        try {
            if (null != id) {
                Row row = getRow(new Key(new Object[] { id }));
                if (null != row) {
                    logger.warning("Id: " + id);
                    logger.warning("Valor anterior avanceFisico: " + row.getAttribute("AvanceFisico"));
                    logger.warning("Valor anterior avanceFinanciero: " + row.getAttribute("AvanceFinanciero"));
                    logger.warning("Valor anterior fechaAvance: " + row.getAttribute("FechaAvance"));
                    logger.warning("Valor anterior esProyectoEnOperacion: " + row.getAttribute("EsProyectoEnOperacion"));
                    
                    BigDecimal avanceFisicoOld = (BigDecimal) row.getAttribute("AvanceFisico");
                    BigDecimal avanceFinancieroOld = (BigDecimal) row.getAttribute("AvanceFinanciero");
                    java.sql.Timestamp fechaAvanceOld = (java.sql.Timestamp) row.getAttribute("FechaAvance");
                    Integer proyectoOperacionOld = (Integer) row.getAttribute("EsProyectoEnOperacion");
                    
                    if (proyectoOperacion.compareTo(1) == 0) {
                        if (fechaAvance != null) {
                            if (fechaAvanceOld.compareTo(fechaAvance) != 0 ||
                                proyectoOperacionOld.compareTo(proyectoOperacion) != 0) {
                                
                                logger.warning("Valores diferentes se actualizaran datos de Usuario.");
                                
                                responseMap = consultarDatosUsuario(loginUsuario);
                                nombreUsuario = (String) responseMap.get("nombreUsuario");

                                logger.warning("LoginUsuarioUltimoCambio: " + loginUsuario);
                                logger.warning("NombreUsuarioUltimoCambio: " + nombreUsuario);
                                
                                row.setAttribute("AvanceFisico", avanceFisico);
                                row.setAttribute("AvanceFinanciero", avanceFinanciero);
                                row.setAttribute("FechaAvance", fechaAvance);
                                row.setAttribute("EsProyectoEnOperacion", proyectoOperacion);
                                row.setAttribute("LoginUsuarioUltimoCambio", loginUsuario);
                                row.setAttribute("NombreUsuarioUltimoCambio", nombreUsuario);
                                row.setAttribute("FechaUltimoCambio", new java.sql.Timestamp(System.currentTimeMillis()));
                                
                                try {
                                    getDBTransaction().commit();
                                    logger.warning("Se hace commint a la DB");
                                } catch (Exception e) {
                                    logger.log(ADFLogger.ERROR,
                                               "Error al intentar guardar la datos de la supervision ->: " + e.getMessage());
                                    getDBTransaction().rollback();
                                    resultado = Boolean.FALSE;
                                }
                            }    
                        } else {
                            logger.warning("Datos supervision es null");
                            resultado = Boolean.FALSE;
                        }
                    } else {
                        
                        avanceFisicoOld = avanceFisicoOld != null ? avanceFisicoOld : BigDecimal.ZERO;
                        avanceFinancieroOld = avanceFinancieroOld != null ? avanceFinancieroOld : BigDecimal.ZERO;
                        
                        if (null != avanceFisico && null != avanceFinanciero && null != fechaAvance) {
                            
                            if (avanceFisicoOld.compareTo(avanceFisico) != 0 ||
                                avanceFinancieroOld.compareTo(avanceFinanciero) != 0 ||
                                fechaAvanceOld.compareTo(fechaAvance) != 0 ||
                                proyectoOperacionOld.compareTo(proyectoOperacion) != 0) {
                                
                                logger.warning("Valores diferentes se actualizaran datos de Usuario.");
                                
                                responseMap = consultarDatosUsuario(loginUsuario);
                                nombreUsuario = (String) responseMap.get("nombreUsuario");

                                logger.warning("LoginUsuarioUltimoCambio: " + loginUsuario);
                                logger.warning("NombreUsuarioUltimoCambio: " + nombreUsuario);
                                
                                row.setAttribute("AvanceFisico", avanceFisico);
                                row.setAttribute("AvanceFinanciero", avanceFinanciero);
                                row.setAttribute("FechaAvance", fechaAvance);
                                row.setAttribute("EsProyectoEnOperacion", proyectoOperacion);
                                row.setAttribute("LoginUsuarioUltimoCambio", loginUsuario);
                                row.setAttribute("NombreUsuarioUltimoCambio", nombreUsuario);
                                row.setAttribute("FechaUltimoCambio", new java.sql.Timestamp(System.currentTimeMillis()));
                                
                                try {
                                    getDBTransaction().commit();
                                    logger.warning("Se hace commint a la DB");
                                } catch (Exception e) {
                                    logger.log(ADFLogger.ERROR,
                                               "Error al intentar guardar la datos de la supervision ->: " + e.getMessage());
                                    getDBTransaction().rollback();
                                    resultado = Boolean.FALSE;
                                }
                            }                        
                        } else {
                            logger.warning("Datos supervision es null");
                            resultado = Boolean.FALSE;
                        }   
                    }
                } else {
                    logger.warning("Id: " + id + " no encontrado en DB");
                    resultado = Boolean.FALSE;
                }
            } else {
                logger.warning("Id es null");
                resultado = Boolean.FALSE;
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en actualizarSupervision " + ex.getClass() + ":" + ex.getMessage());
        }

        return resultado;
    }
    
    public Map consultarDatosUsuario(String loginUsuario) {
        logger.warning("Inside consultarDatosUsuario.");
        
        FenixAMImpl fenixAMImpl= null;
        Map<String, Object> responseMap = null;
        
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        responseMap = fenixAMImpl.consultarAtributosUsuario(loginUsuario);
        
        return responseMap;
    }
    
    public Boolean eliminarSupervision() {
        logger.warning("Inside eliminarSupervision.");
        
        Boolean resultado = Boolean.FALSE;
        
        SupervisionVORowImpl rowSupervision = (SupervisionVORowImpl) getCurrentRow();
        
        logger.warning("Id Supervision a eliminar: " + rowSupervision.getAttribute("Id"));
        
        removeCurrentRow();

        try {
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } catch (Exception e) {
            e.printStackTrace();
            logger.severe("Error al realizar Commit", e);
        }
        if (!resultado) {
            try {
                getDBTransaction().rollback();
            } catch (Exception ex) {
                logger.severe("Error al realizar Rollback", ex);
            }
        }
        
        executeQuery();
        
        return resultado;
    }
    
    /*
    2-Modified
    0-New
    1-Unmodified
    -1-Initialized*/
    public Integer getRowState() {
        SupervisionVORowImpl rowSupervision = (SupervisionVORowImpl) getCurrentRow();
        Integer intState = rowSupervision.getRowState();
        return intState;
    }
}