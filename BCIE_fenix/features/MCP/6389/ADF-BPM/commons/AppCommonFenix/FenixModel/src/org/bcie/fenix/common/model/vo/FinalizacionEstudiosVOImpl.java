package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.vo.common.FinalizacionEstudiosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Dec 06 11:04:01 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FinalizacionEstudiosVOImpl extends ViewObjectImpl implements FinalizacionEstudiosVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public FinalizacionEstudiosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row obtenerDatosFinalizacionEstudiosOperacion(Long idOperacion){
        logger.warning("Inicia metodo obtenerDatosFinalizacionEstudiosOperacion");
        FenixAMImpl fenixAM = null;
        Map datosOperacion = new HashMap();
        Integer esFactible = null;
        Integer idTipoTasa = null;
        String codigoTasaReferencia = null;
        oracle.jbo.domain.Number valorTasa = null;
        oracle.jbo.domain.Number valorSpread = null;
        oracle.jbo.domain.Number tasaTotal = null;
        Date fechaFinalizacionEstudios = null;
        Integer idTipoMoneda = null;
        String descripcionMoneda = null;
        Row row = null;
        String descripcionTasa = null;
        FenixImplementacionPctAMImpl implementacionPctAM =
            (FenixImplementacionPctAMImpl) getApplicationModule();
        
        if(null == idOperacion){
            logger.warning("Parametro idOperacion es NULL.");
            return row;
        }
        
        try{
            fenixAM = (FenixAMImpl) getRootApplicationModule();
        }catch(Exception e){
            logger.warning("No se pudo obtener la instancia de FenixAMImpl.");
        }
        
        if(null != fenixAM){
            datosOperacion = fenixAM.getActualizarOperacionVO().obtenerTasaFechaFinalizacionEstudios(idOperacion);
            
            if(null != datosOperacion.get("esFactible")){
                try{
                    esFactible = (Integer) datosOperacion.get("esFactible");
                }catch(Exception e){
                    logger.warning("No se pudo recuperar el valor esFactible del mapa.");
                }
            }
            
            if(null != datosOperacion.get("idTipoTasa")){
                try{
                    idTipoTasa = (Integer) datosOperacion.get("idTipoTasa");
                }catch(Exception e){
                    logger.warning("No se pudo recuperar el valor idTipoTasa del mapa.");
                }
            }
            
            if(null != datosOperacion.get("codigoTasaReferencia")){
                try{
                    codigoTasaReferencia = (String) datosOperacion.get("codigoTasaReferencia");
                }catch(Exception e){
                    logger.warning("No se pudo recuperar el valor codigoTasaReferencia del mapa.");
                }
            }
            
            if(null != datosOperacion.get("valorTasa")){
                try{
                    valorTasa = (oracle.jbo.domain.Number) datosOperacion.get("valorTasa");
                }catch(Exception e){
                    logger.warning("No se pudo recuperar el valorTasa del mapa.");
                }
            }
            
            if(null != datosOperacion.get("valorSpread")){
                try{
                    valorSpread = (oracle.jbo.domain.Number) datosOperacion.get("valorSpread");
                }catch(Exception e){
                    logger.warning("No se pudo recuperar el valorSpread del mapa.");
                }
            }
            
            if(null != datosOperacion.get("fechaFinalizacionEstudios")){
                try{
                    fechaFinalizacionEstudios = (Date) datosOperacion.get("fechaFinalizacionEstudios");
                }catch(Exception e){
                    logger.warning("No se pudo recuperar la fecha de finalizacion de estudios del mapa.");
                }
            }
            
            idTipoMoneda = fenixAM.getTccTerminoVO().obtenerTipoMonedaMontoFormalizado(idOperacion);
            if(null != idTipoMoneda){
                descripcionMoneda = fenixAM.getTcaTipoMonedaVO().obtenerDescripcionMoneda(idTipoMoneda);
            }else{
                logger.warning("IdTipoMoneda es NULL. No se pudo recuperar la descripcion de la moneda del monto Formalizado.");
            }
            
            if(null != descripcionMoneda){
                implementacionPctAM.getVcaTasaDesembolsoFlexcubeVO().filtrarPorCodigoMoneda(descripcionMoneda);
            }else{
                logger.warning("descripcionMoneda es NULL. No se pudo cargar la Vista de tasas desembolsos flexcube.");
            }
        }else{
            logger.warning("Instancia de FenixAMImpl es NULL.");
        }
        
        descripcionTasa = implementacionPctAM.getVcaTasaDesembolsoFlexcubeVO().obtenerDescripcionTasa(codigoTasaReferencia);
        
        crearRegistro(idOperacion);
        
        row = getCurrentRow();
        
        tasaTotal = sumarTasaSpread(valorTasa, valorSpread);
        
        if(null != row){
            row.setAttribute("EsFactible", esFactible);
            row.setAttribute("IdTipoTasa", idTipoTasa);
            row.setAttribute("CodigoTasaReferencia", codigoTasaReferencia);
            row.setAttribute("Tasa", valorTasa);
            row.setAttribute("Spread", valorSpread);
            row.setAttribute("TasaTotal", tasaTotal);
            row.setAttribute("FechaFinalizacionEstudios", fechaFinalizacionEstudios);
            row.setAttribute("DescripcionMoneda", descripcionMoneda);
            row.setAttribute("CodTasRef", descripcionTasa);
        }else{
            logger.warning("El row es NULL");
        }
        
        logger.warning("Termina metodo obtenerDatosFinalizacionEstudiosOperacion");
        return row;
    }
    
    public void crearRegistro(Long idOperacion){
        logger.warning("Inicia metodo crearRegistro");
        Row row = null;
        
        row = this.createRow();
        row.setAttribute("IdOperacion", idOperacion);
        insertRow(row);
        setCurrentRow(row);
        
        logger.warning("Termina metodo crearRegistro");
    }
    
    public oracle.jbo.domain.Number sumarTasaSpread(oracle.jbo.domain.Number valorTasa, oracle.jbo.domain.Number valorSpread){
        logger.warning("Inicia metodo sumarTasaSpread");
        oracle.jbo.domain.Number sumaTotal = null;
        
        logger.warning("ValorTasa: " + valorTasa + ", ValorSpread: " + valorSpread);
        if(null == valorTasa && null == valorSpread){
            logger.warning("Parametros requeridos son NULL.");
            return sumaTotal;
        }
        
        try{
            if(null != valorSpread && null != valorTasa){
                sumaTotal = valorTasa.add(valorSpread);
            }else{
                if(null != valorTasa){
                    sumaTotal = valorTasa;
                }
                if(null != valorSpread){
                    sumaTotal = valorSpread;
                }
            }
        }catch(Exception e){
            logger.warning("No se pudo realizar la suma de la tasa y el spread.", e);
        }
        
        logger.warning("Suma total: " + sumaTotal);
        logger.warning("Termina metodo sumarTasaSpread");
        return sumaTotal;
    }
}

