package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.BlobDomain;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.vo.common.MemoriaProcesoBpmVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Apr 11 16:01:12 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class MemoriaProcesoBpmVOImpl extends ViewObjectImpl implements MemoriaProcesoBpmVO {
    
    private static ADFLogger logger = null;
    public static final String CRITERIA_BY_OP_PROC_TAREA = "MemoriaProcesoBpmVOCriteriaByOpProcTarea";
    
    /**
     * This is the default constructor (do not remove).
     */
    public MemoriaProcesoBpmVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varIdOperacion.
     * @return variable value for varIdOperacion
     */
    public Long getvarIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("varIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable varIdOperacion.
     * @param value value to bind as varIdOperacion
     */
    public void setvarIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("varIdOperacion", value);
    }

    /**
     * Returns the variable value for varInstanciaProceso.
     * @return variable value for varInstanciaProceso
     */
    public String getvarInstanciaProceso() {
        return (String) ensureVariableManager().getVariableValue("varInstanciaProceso");
    }

    /**
     * Sets <code>value</code> for variable varInstanciaProceso.
     * @param value value to bind as varInstanciaProceso
     */
    public void setvarInstanciaProceso(String value) {
        ensureVariableManager().setVariableValue("varInstanciaProceso", value);
    }

    /**
     * Returns the variable value for varIdTareaBpm.
     * @return variable value for varIdTareaBpm
     */
    public Integer getvarIdTareaBpm() {
        return (Integer) ensureVariableManager().getVariableValue("varIdTareaBpm");
    }

    /**
     * Sets <code>value</code> for variable varIdTareaBpm.
     * @param value value to bind as varIdTareaBpm
     */
    public void setvarIdTareaBpm(Integer value) {
        ensureVariableManager().setVariableValue("varIdTareaBpm", value);
    }
    
    public BlobDomain getEstadoTareaByOpProcTarea(Long idOperacion, String instanciaProceso, Integer idTareaBpm) {
        logger.log(ADFLogger.WARNING, "Inside getEstadoTareaByOpProcTarea. idOperacion: " + idOperacion 
                                      + ". instanciaProceso: " + instanciaProceso + ". idTareaBpm: " + idTareaBpm);
        Long idByOpProcTarea = null;
        BlobDomain estadoTarea = null;
        
        // Obtenemos id de Row
        idByOpProcTarea = getIdByOpProcTarea(idOperacion, instanciaProceso, idTareaBpm);

        // Obtenemos Row y asignamos EstadoTarea
        if(idByOpProcTarea != null) {
            
            estadoTarea = (BlobDomain)this.getRow(new Key(new Object[] {idByOpProcTarea})).getAttribute("EstadoTarea");
        }
        
        return estadoTarea;
    }
        
    public void guardarEstadoTarea(Long idOperacion, String instanciaProceso, Integer idTareaBpm, BlobDomain estadoTarea) {
        logger.log(ADFLogger.WARNING, "Inside guardarEstadoTarea. idOperacion: " + idOperacion  + ". instanciaProceso: " 
                                      + instanciaProceso + ". idTareaBpm: " + idTareaBpm);
        Long idByOpProcTarea = null;
        oracle.jbo.domain.Number idMemoriaProcesoBpm = null;
        NameValuePairs nvpMemoriaProcesoBpm = null;
        SequenceImpl seqMemoriaProcesoBpm = null;
        
        // Asignación de variables
        idByOpProcTarea = getIdByOpProcTarea(idOperacion, instanciaProceso, idTareaBpm);
        
        // Verificamos si ya existe un registro para esa Operación / InstanciaProceso / Tarea
        if(idByOpProcTarea != null) {
            
            // Si existe lo actualizamos
            this.getRow(new Key(new Object[] {idByOpProcTarea})).setAttribute("EstadoTarea", estadoTarea);
        }
        else{
            // Sino, lo creamos
            seqMemoriaProcesoBpm = new SequenceImpl("MEMORIA_PROCESO_BPM_SEQ", getDBTransaction());
            idMemoriaProcesoBpm = seqMemoriaProcesoBpm.getSequenceNumber();
            
            nvpMemoriaProcesoBpm = new NameValuePairs();
            nvpMemoriaProcesoBpm.setAttribute("Id", idMemoriaProcesoBpm);
            nvpMemoriaProcesoBpm.setAttribute("IdOperacion", idOperacion);
            nvpMemoriaProcesoBpm.setAttribute("InstanciaProceso", instanciaProceso);
            nvpMemoriaProcesoBpm.setAttribute("IdTcaTareaBpm", idTareaBpm);
            nvpMemoriaProcesoBpm.setAttribute("EstadoTarea", estadoTarea);
            nvpMemoriaProcesoBpm.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            nvpMemoriaProcesoBpm.setAttribute("BanEstatus", BANESTATUS_TRUE);
            
            this.createAndInitRow(nvpMemoriaProcesoBpm);
        }
        
        // Commit a BD
        getDBTransaction().commit();
    }
    
    /**
     * Elimina de BD, tabla MEMORIA_PROCESO_BPM, el registro para una Operación/InstanciaProceso/Tarea específico.
     * @param idOperacion
     * @param instanciaProceso
     * @param idTareaBpm
     * 
     * @author Francisco Cuevas Pineda 
     * @since 20/abril/2016
     */
    public void eliminarEstadoTarea(Long idOperacion, String instanciaProceso, Integer idTareaBpm) {
        logger.log(ADFLogger.WARNING, "Inside eliminarEstadoTarea. idOperacion: " + idOperacion  + ". instanciaProceso: " 
                                      + instanciaProceso + ". idTareaBpm: " + idTareaBpm);
        Long idByOpProcTarea = null;
        
        // Asignación de variables
        idByOpProcTarea = getIdByOpProcTarea(idOperacion, instanciaProceso, idTareaBpm);
        
        // Si existe un registro para esa Operación / InstanciaProceso / Tarea, lo eliminamos
        if(idByOpProcTarea != null) {
            
            this.getRow(new Key(new Object[] {idByOpProcTarea})).remove();
            getDBTransaction().commit(); // Commit a BD
        }
    }
    
    private Long getIdByOpProcTarea(Long idOperacion, String instanciaProceso, Integer idTareaBpm) {
        Long idByOpProcTarea = null;
        ViewCriteria criteriaByOpProcTarea = null;
        
        if(idOperacion != null && instanciaProceso != null && idTareaBpm != null) {
            
            // 1) Filtramos VO
            criteriaByOpProcTarea = 
                this.getViewCriteriaManager().getViewCriteria(CRITERIA_BY_OP_PROC_TAREA);
            setvarIdOperacion(idOperacion);
            setvarInstanciaProceso(instanciaProceso);
            setvarIdTareaBpm(idTareaBpm);
            
            this.applyViewCriteria(criteriaByOpProcTarea);
            this.executeQuery();
            
            // 2) Asignamos valor de retorno
            if(this.getEstimatedRowCount() > 0) {
                idByOpProcTarea = (Long)this.getRowAtRangeIndex(0).getAttribute("Id");
                
                // Removemos criteria del VO
                this.getViewCriteriaManager().removeApplyViewCriteriaName(CRITERIA_BY_OP_PROC_TAREA);
                
                // Re-ejecutamos el query 
                this.executeQuery();
            }
        }
        
        return idByOpProcTarea;
    }
}

