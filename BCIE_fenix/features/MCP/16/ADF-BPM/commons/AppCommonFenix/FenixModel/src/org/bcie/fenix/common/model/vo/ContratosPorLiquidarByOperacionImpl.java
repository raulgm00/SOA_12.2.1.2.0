package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.vo.common.ContratosPorLiquidarByOperacion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 06 18:32:27 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratosPorLiquidarByOperacionImpl extends ViewObjectImpl implements ContratosPorLiquidarByOperacion {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public ContratosPorLiquidarByOperacionImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    public Boolean actualizaDesembolsoLiquidar(Integer estadoAnterior, Integer estadoNuevo) {
        logger.log(ADFLogger.WARNING, "Into actualizaDesembolso.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl implementacionPctAM =
            (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();
        Boolean respuesta = Boolean.FALSE;
        Boolean actualizo = Boolean.FALSE;
        Integer estadoContrato = null;
        Long idContrato = null;
        this.setRangeSize(-1);
        logger.warning("Elementos encontrados: " + this.getEstimatedRowCount());
        if (this.getEstimatedRowCount() > 0) {
            for (Row desembolsoRow : this.getAllRowsInRange()) {
                estadoContrato = null;
                idContrato = null;
                if (null != desembolsoRow.getAttribute("Id")) {
                    idContrato = (Long) desembolsoRow.getAttribute("Id");
                }
                if (null != desembolsoRow.getAttribute("IdEstado")) {
                    estadoContrato = (Integer) desembolsoRow.getAttribute("IdEstado");
                }
                if (null != estadoContrato) {
                    if (estadoContrato.compareTo(estadoAnterior) == 0) {
                        if (null != idContrato) {
                            actualizo =
                                implementacionPctAM.getContratoDesembolsoVO().estadoImplementacionDesembolso(idContrato,
                                                                                                             estadoNuevo);
                            logger.warning("Actualizo registro: " + actualizo + " para el id de contrato: " +
                                           idContrato);
                        }
                    }
                }
            }
            respuesta = implementacionPctAM.getContratoDesembolsoVO().commitDesembolso();
        }

        logger.warning("respuestaFinal: " + respuesta);
        return respuesta;
    }
    
    public Row[] recuperarContratosPorLiquidar(Long idOperacion, Long idSolicitud) {
        logger.warning("Inf, inicia metodo recuperarContratosPorLiquidar");

        if (idOperacion == null) {
            logger.warning("parametro idOperacion null no se iniciara la busqueda de contratos");
            return null;
        }

        Row[] contratosArray = null;
        int contador = 0;

        setpIdOperacion(idOperacion);
        executeQuery();

        Long rowCount = (getEstimatedRowCount() > 0) ? getEstimatedRowCount() : null;

        if (null != rowCount) {
            int numContratos = rowCount.intValue();

            contratosArray = new Row[numContratos];

            RowSetIterator iteratorContrato = null;

            ContratosPorLiquidarByOperacionRowImpl ContratoDesembolsoRow = null;
            iteratorContrato = this.createRowSetIterator(null);
            iteratorContrato.reset();

            while (iteratorContrato.hasNext()) {
                logger.warning("Inf, inicia el iterador");
                ContratoDesembolsoRow = (ContratosPorLiquidarByOperacionRowImpl) iteratorContrato.next();
                logger.warning("Inf, contrado con id : " + ContratoDesembolsoRow.getAttribute("Id"));
                contratosArray[contador] = ContratoDesembolsoRow;
                contador = contador + 1;
            }
            iteratorContrato.closeRowSetIterator();
        }

        logger.warning("Inf, termina metodo recuperarContratosPorLiquidar");
        return contratosArray;
    }
    
    public Integer obtenerContratosPorLiquidar(Long idOperacion) {
        logger.warning("Inf, inicia metodo obtenerContratosPorLiquidar");

        if (idOperacion == null) {
            logger.warning("parametro idOperacion null no se iniciara la busqueda de contratos");
            return null;
        }

        Row[] contratosArray = null;
        int contador = 0;

        setpIdOperacion(idOperacion);
        executeQuery();

        Long rowCount = (getEstimatedRowCount() > 0) ? getEstimatedRowCount() : null;

        if (null != rowCount) {
            int numContratos = rowCount.intValue();

            contratosArray = new Row[numContratos];

            RowSetIterator iteratorContrato = null;

            ContratosPorLiquidarByOperacionRowImpl ContratoDesembolsoRow = null;
            iteratorContrato = this.createRowSetIterator(null);
            iteratorContrato.reset();

            while (iteratorContrato.hasNext()) {
                logger.warning("Inf, inicia el iterador");
                ContratoDesembolsoRow = (ContratosPorLiquidarByOperacionRowImpl) iteratorContrato.next();
                logger.warning("Inf, contrado con id : " + ContratoDesembolsoRow.getAttribute("Id"));
                logger.warning("Inf, contrado con Estado : " + ContratoDesembolsoRow.getAttribute("Estado"));
                if (ContratoDesembolsoRow.getAttribute("Estado") != null) {
                    String estado = ContratoDesembolsoRow.getAttribute("Estado").toString();
                    if (estado.compareTo("Por liquidar") == 0) {
                        contratosArray[contador] = ContratoDesembolsoRow;
                        contador = contador + 1;
                    }
                }
            }
            logger.warning("Contador contratos en estado Por Liquidar: " + contador);
            iteratorContrato.closeRowSetIterator();
        }

        logger.warning("Inf, termina metodo obtenerContratosPorLiquidar");
        return contador;
    }


    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        setNamedWhereClauseParam("pIdOperacion", value);
    }


}

