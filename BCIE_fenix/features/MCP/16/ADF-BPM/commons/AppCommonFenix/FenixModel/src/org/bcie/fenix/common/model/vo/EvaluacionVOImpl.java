package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.evaluacionservice.Evaluacion12BndQSService;
import com.bcie.xmlns.evaluacionservice.EvaluacionPT;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.util.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.evaluacionmo.DuplicarEvaluacionResponseType;
import org.bcie.evaluacionmo.EnviarEvaluacionRequestType;
import org.bcie.evaluacionmo.EnviarEvaluacionResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.EvaluacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 09 12:46:21 CDT 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EvaluacionVOImpl extends ViewObjectImpl implements EvaluacionVO {
    /**
     * This is the default constructor (do not remove).
     */

    public static ADFLogger logger = null;

    public EvaluacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public Boolean validarEstadoEvaluacion() {
        logger.warning("Entra en validarEstadoEvaluacion");
        Boolean estado = Boolean.TRUE;
        String valor = null;
        int contador = 0;
        RowSetIterator rowsEvaluacion = createRowSetIterator(null);
        rowsEvaluacion.reset();
        while (rowsEvaluacion.hasNext()) {
            EvaluacionVORowImpl rowL = (EvaluacionVORowImpl) rowsEvaluacion.next();
            if (null != rowL.getAttribute("Estado")) {
                valor = (String) rowL.getAttribute("Estado");
                if (valor.equalsIgnoreCase("V")) {
                    logger.warning("Evaluacion validada" + valor);
                } else {
                    contador++;
                }
            } else {
                logger.warning("El estado es nulo.");
            }
        }
        rowsEvaluacion.closeRowSetIterator();

        if (contador > 0) {
            estado = Boolean.FALSE;
        }
        logger.warning("Valor de retorno" + estado);
        return estado;
    }

    public void eliminarCuestionario() {
        logger.log(ADFLogger.WARNING, "Entra en eliminarCuestionario.");
        Row row = this.getCurrentRow();
        logger.log(ADFLogger.WARNING, "Valor de la evaluacion" + row.getAttribute("idEvaluacion"));
        try {
            row.remove();
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error en eliminarCuestionario." + e.getClass() + e.getMessage());
        }
    }

    public Boolean validarCalificacionEvaluacion() {
        logger.warning("Entra en validarCalificacionEvaluacion");
        Boolean validarCalificacion = Boolean.TRUE;
        BigDecimal valor = null;
        BigDecimal calif = new BigDecimal("100");
        int contador = 0;
        String valorStr = null;
        logger.log(ADFLogger.WARNING, "numero de rows encontrados" + getEstimatedRowCount());
        RowSetIterator rowsEvaluacion = createRowSetIterator(null);
        rowsEvaluacion.reset();
        if (getEstimatedRowCount() > 1) {
            while (rowsEvaluacion.hasNext()) {
                logger.log(ADFLogger.WARNING, "Ejecuta while para obtener la calificaion.");
                EvaluacionVORowImpl rowL = (EvaluacionVORowImpl) rowsEvaluacion.next();
                //                if(null != rowL.getAttribute("Estado")){
                //                    valorStr = (String)rowL.getAttribute("Estado");
                //                    if(valorStr.equalsIgnoreCase("V")){
                //                        logger.warning("Evaluacion validada" + valor);
                //                    }else{
                if (null != rowL.getAttribute("Calificacion")) {
                    valor = (BigDecimal) rowL.getAttribute("Calificacion");
                    logger.warning("Evaluacion invalida: calificacion mayor a 100. El valor es: " + valor);
                } else {
                    logger.warning("La Calificacion es nulo.");
                    validarCalificacion = Boolean.FALSE;
                    break;
                }
                contador++;
                //                    }
                //                }else{
                //                    logger.warning("El estado es nulo.");
                //                }
            }
            rowsEvaluacion.closeRowSetIterator();
        } else {
            logger.log(ADFLogger.WARNING, "El numero de row es menor que 3 por lo tanto no se ingresa calificacion.");
        }
        logger.warning("Valor de retorno" + validarCalificacion);
        return validarCalificacion;
    }
    
    public Boolean validarCalificacionDuplicada() {
        logger.warning("Entra en validarCalificacionDuplicada");
        
        Boolean validarCalificacion = Boolean.TRUE;
        BigDecimal valor = null;
        BigDecimal calif = new BigDecimal("100");
        int contador = 0;
        String valorStr = null;
        
        logger.log(ADFLogger.WARNING, "numero de rows encontrados" + getEstimatedRowCount());
        RowSetIterator rowsEvaluacion = createRowSetIterator(null);
        rowsEvaluacion.reset();
        
        if (getEstimatedRowCount() > 1) {
            while (rowsEvaluacion.hasNext()) {
                logger.log(ADFLogger.WARNING, "Ejecuta while para obtener la calificaion.");
                EvaluacionVORowImpl rowL = (EvaluacionVORowImpl) rowsEvaluacion.next();
                //                if(null != rowL.getAttribute("Estado")){
                //                    valorStr = (String)rowL.getAttribute("Estado");
                //                    if(valorStr.equalsIgnoreCase("V")){
                //                        logger.warning("Evaluacion validada" + valor);
                //                    }else{
                if (rowL.getAttribute("idEvaluacionOrigen") != null) {
                    if (null != rowL.getAttribute("Calificacion")) {
                        valor = (BigDecimal) rowL.getAttribute("Calificacion");
                        logger.warning("Evaluacion invalida: calificacion mayor a 100. El valor es: " + valor);
                    } else {
                        logger.warning("La Calificacion es nulo.");
                        validarCalificacion = Boolean.FALSE;
                        break;
                    }
                    contador++;   
                } else {
                    logger.warning("Cuestionario Original, no se valida.");
                }
                //                    }
                //                }else{
                //                    logger.warning("El estado es nulo.");
                //                }
            }
            rowsEvaluacion.closeRowSetIterator();
        } else {
            logger.log(ADFLogger.WARNING, "El numero de row es menor que 3 por lo tanto no se ingresa calificacion.");
        }
        logger.warning("Valor de retorno" + validarCalificacion);
        return validarCalificacion;
    }

    public Boolean validarValorEvaluacion() {
        logger.warning("Entra en validarValorEvaluacion");
        Boolean validarValor = Boolean.TRUE;
        int contador = 0;
        String valor = null;
        logger.log(ADFLogger.WARNING, "numero de rows encontrados" + getEstimatedRowCount());
        RowSetIterator rowsEvaluacion = createRowSetIterator(null);
        rowsEvaluacion.reset();

        while (rowsEvaluacion.hasNext()) {
            logger.log(ADFLogger.WARNING, "Ejecuta while para obtener el valor.");
            EvaluacionVORowImpl rowL = (EvaluacionVORowImpl) rowsEvaluacion.next();
            if(null != rowL.getAttribute("idEvaluacionOrigen")){
                if (null != rowL.getAttribute("valor") && !rowL.getAttribute("valor").toString().trim().isEmpty()) {
                    valor = (String) rowL.getAttribute("valor");
                    logger.warning("El valor es: " + valor);
                } else {
                    logger.warning("El campo valor es nulo, se termina el ciclo.");
                    validarValor = Boolean.FALSE;
                    break;
                } 
                    contador++;
                }else{
                    logger.warning("El cuestionario original no se valida.");
                }
        }
        rowsEvaluacion.closeRowSetIterator();

        logger.warning("Valor de retorno" + validarValor);
        return validarValor;
    }
    
    public Boolean bloqueoPreguntasPorEvaluacion(String loginUsuario){
        logger.warning("Entra en bloqueoPreguntasPorEvaluacion.");
        Boolean esBloqueo = Boolean.FALSE;
        RowSetIterator iterator = null;
        try{
            logger.warning("Numero de registros : " + this.getEstimatedRowCount());
            if(this.getEstimatedRowCount() > 0){
                iterator = this.createRowSetIterator(null);
                iterator.reset();
                
                while(iterator.hasNext()){
                    EvaluacionVORowImpl rowImpl = (EvaluacionVORowImpl)iterator.next();
                    
                    logger.warning("idEvaluacion : " + rowImpl.getidEvaluacion());
                    logger.warning("codigoExterno : " + rowImpl.getcodigoExterno());
                    logger.warning("version : " + rowImpl.getversion());
                    logger.warning("nombreUsuario : " + rowImpl.getnombreUsuario());
                    
                    esBloqueo = invocaServicioBloquearPreguntas(rowImpl, loginUsuario);
                    
                    if(!esBloqueo){
                        logger.warning("Error al bloquear las preguntas de la evaluacion : " + rowImpl.getidEvaluacion());
                        break;
                    }
                }
                iterator.closeRowSetIterator();
            }else{
                logger.warning("No se obtuvieron evaluaciones.");
            }
        }catch(Exception e){
            logger.warning("Error en bloqueoPreguntasPorEvaluacion.", e);
        }
        return esBloqueo;
    }
    
    private Boolean invocaServicioBloquearPreguntas(EvaluacionVORowImpl rowImpl, String loginUsuario){
        logger.warning("Entra en invocaServicioBloquearPreguntas");
        Boolean bloqueado = Boolean.FALSE;
        BigDecimal idEvaluacion = null;
        BigDecimal codExterno = null;
        BigDecimal version = null;
        FenixAMImpl fenixAM = null;
        EnviarEvaluacionRequestType request = null;
        EnviarEvaluacionResponseType response = null;
        try{
            idEvaluacion = rowImpl.getidEvaluacion().bigDecimalValue();
            if(null != rowImpl.getcodigoExterno()){
                try{
                    codExterno = new BigDecimal(rowImpl.getcodigoExterno());
                }catch(Exception e){
                    logger.severe("ERROR cast codigoExterno :"+e);
                }
            }else{
                logger.severe("codigoExerno es nulo");
            }
            version = rowImpl.getversion().bigDecimalValue();
            
            fenixAM = (FenixAMImpl)this.getRootApplicationModule();
            String wsdl = fenixAM.getWsdl(IWsdlLocation.EVALUACION);

            Evaluacion12BndQSService evaluacion12BndQSService = IWsdlLocation.Service.getInstance(Evaluacion12BndQSService.class, wsdl);
            EvaluacionPT evaluacion = evaluacion12BndQSService.getEvaluacion12BndQSPort();
            response = new EnviarEvaluacionResponseType();
            request = new EnviarEvaluacionRequestType();
            request.setIdEvaluacion(idEvaluacion);
            request.setIdCuestionario(codExterno);
            request.setVersion(version);
            request.setLoginUsuario(loginUsuario);
            
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_BLOQUEAR_PREGUNTAS);
            response = evaluacion.enviarEvaluacion(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_BLOQUEAR_PREGUNTAS, horaInicio);
            
            if(null != response &&
               null != response.getResultado() &&
               null != response.getResultado().getResult()){
                switch (response.getResultado().getResult()) {
                case OK:
                    logger.warning("La respuesta del servicio es correcta.");
                    if (null != response.getResultado().getMessage()) {
                        logger.warning("Respuesta :" + response.getResultado().getMessage());
                    }
                    bloqueado = Boolean.TRUE;
                    break;
                case ERROR:
                    logger.warning("Se obtuvo ERROR en la respuesta del servicio.");
                    String msj = response.getResultado().getMessage();
                    logger.warning("Mensaje : " + msj);
                    break;
                }

            }else{
                logger.warning("No se obtuvo respuesta del servicio.");
            }
        }catch(Exception e){
           logger.warning("Error en invocaServicioBloquearPreguntas.", e); 
        }
        return bloqueado;
    }
}

