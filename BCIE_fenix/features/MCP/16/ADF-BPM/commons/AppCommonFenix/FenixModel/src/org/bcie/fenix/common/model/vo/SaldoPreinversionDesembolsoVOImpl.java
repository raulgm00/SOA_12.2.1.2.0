package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.SaldoPreinversionDesembolsoVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Feb 28 13:54:50 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SaldoPreinversionDesembolsoVOImpl extends ViewObjectImpl implements SaldoPreinversionDesembolsoVO {
    
    private static ADFLogger logger = null;
    
    public SaldoPreinversionDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
    
    public String crearNuevoRegistro(Long idOperacion, Long idDesembolso, BigDecimal montoPreinversion, BigDecimal tasainteres, BigDecimal montoTotal){
        logger.warning("*Inf, Inicia metodo crearNuevoRegistro");
            String error = "";
            
            try{
                oracle.jbo.domain.Number idPreinversion = null;
                SequenceImpl seqPreinversion = null;
                seqPreinversion = new SequenceImpl("SALDO_PREINV_DESEMBOLSO_SEQ", getDBTransaction());
                idPreinversion = seqPreinversion.getSequenceNumber();
    
                Long idPreinversionLong = new Long(idPreinversion.longValue());           
                logger.warning("*Inf, crenado registro con Id: "+idPreinversion);         
             
                Row fila = null; 
                fila = createRow();
                fila.setAttribute("Id", idPreinversionLong );
                fila.setAttribute("CodigoPreinversion", idOperacion);
                fila.setAttribute("IdContratoDesembolso", idDesembolso);
                fila.setAttribute("Monto", montoPreinversion);
                fila.setAttribute("TasaInteres", tasainteres);
                fila.setAttribute("MontoTotal", montoTotal);
                fila.setAttribute("FechaRegistro", new Timestamp(System.currentTimeMillis()));
                fila.setAttribute("BanEstatus", 1);
                insertRow(fila);
            }catch(Exception e){
                    error =" Error -> "+e;
                    logger.warning("Error -> "+e);
                }
              error = error +""+(String)commit();
         
        logger.warning("*Inf, Termina metodo crearNuevoRegistro");
        return error;
        }
    
    
    
    public String commit(){
        String error = "";
        logger.warning("*Inf, Inicia metodo commit");
            try{
                getDBTransaction().commit();                
            }catch (Exception e) {
                
                logger.log(ADFLogger.WARNING, "Error al realizar el commit ->: "+e.getMessage());
                logger.log(ADFLogger.WARNING, "Reintentando commit...");
                
                try {
                    getDBTransaction().commit();                
                } catch (Exception ex) {
                    logger.log(ADFLogger.ERROR, "Error al realizar el commit ->: " + ex);
                    error =  " Error al guardar ->: " + ex;                    
                }                
               
            }
         logger.warning("*Inf, Termina metodo commit");
         return error;
        }
    
    public String commitPreinversion(){
        String error = "";
        logger.warning("*Inf, Inicia metodo commit");
            try {
                getDBTransaction().commit();                
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "ERROR al realizar el commit en SaldoPreinversionDesembolsoVOImpl ->: "+e.getMessage());
                logger.log(ADFLogger.WARNING, "Reintentando Commit...");
                try {
                    getDBTransaction().commit();                
                } catch (Exception ea) {
                    logger.log(ADFLogger.ERROR, "ERROR al realizar el commit en SaldoPreinversionDesembolsoVOImpl ->: ", ea);
                    error =  " Error al guardar ->: " + ea;
                }
            }
         logger.warning("*Inf, Termina metodo commit");
         return error;
        }
    
    
    public String actualizarRegistro(Row fila, BigDecimal montoPreinversion, BigDecimal tasainteres, BigDecimal montoTotal){
       logger.warning("*Inf, Inicia metodo actualizarRegistro");
        String error = "";
        
        try{
          fila.setAttribute("Monto", montoPreinversion);
          fila.setAttribute("TasaInteres", tasainteres);
          fila.setAttribute("MontoTotal", montoTotal);
        }catch(Exception e){
                error = " Error al actualizar registro: "+e;       
            }
        
        error = error + ""+(String)commitPreinversion();

       logger.warning("*Inf, Termina metodo actualizarRegistro");
       return error;
    }
    
    
    public String actualizarABanEstatusCero(Row fila){
       logger.warning("*Inf, Inicia metodo actualizarABanEstatusCero");
        String error = "";
        
        try{
          
          fila.setAttribute("BanEstatus", 0);          
        
        }catch(Exception e){
                error = " Error al actualizar registro: "+e;       
            }
        
        error = error + ""+(String)commit();

       logger.warning("*Inf, Termina metodo actualizarABanEstatusCero");
       return error;
    }
    

    public String recuperarRegistro(Long idOperacion, Long idDesembolso, BigDecimal montoPreinversion, BigDecimal tasainteres, BigDecimal montoTotal, String operacion){
        logger.warning("*Inf, Inicia metodo recuperarRegistro");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio
            
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        String error = "";
        
        logger.warning("*Inf, idOperacion: "+idOperacion);
        logger.warning("*Inf, idDesembolso: "+idDesembolso);
        
        if(idOperacion == null || idDesembolso == null){
            logger.warning("***Error, parametros idOperacion, idDesembolso son requeridos");            
            return null;
          }            
        try{      
            
            criteria = getViewCriteriaManager().getViewCriteria("BuscarRegistroByIdOperacionAndIdDesembolsoVC");
            criteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
            criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idDesembolso);
            applyViewCriteria(criteria);
            executeQuery();
            
            logger.warning("*Inf, Numero de registros encontrados: "+getEstimatedRowCount());
            
            if(getEstimatedRowCount() > 0){                              
                filaRecuperada = first();
                logger.warning("idpreinversion recuperado ->"+filaRecuperada.getAttribute("Id"));  
                logger.warning("*Inf, actualizando registro... ");
                
                if(operacion.equalsIgnoreCase("eliminar")){
                       error =  actualizarABanEstatusCero(filaRecuperada);
                }else{
                    error = (String)actualizarRegistro(filaRecuperada, montoPreinversion, tasainteres, montoTotal);
                 }
                
            }else{
                 logger.warning("*Inf, Important! No se encontro registro creando nuevo registro...");
                  error = (String)crearNuevoRegistro(idOperacion, idDesembolso, montoPreinversion, tasainteres, montoTotal);
                }
            
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al Buscar registro de preinversion  ->" + e); 
            error = " Error al Buscar registro de preinversion: "+e;
        }finally{
           getViewCriteriaManager().removeApplyViewCriteriaName("BuscarRegistroByIdOperacionAndIdDesembolsoVC");          
           executeQuery();
        }
        
        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio)/1000; //Calculamos los milisegundos de diferencia            
        logger.warning("*Inf, Termina metodo recuperarRegistro con una duracion de: "+tiempo+" segundos");    
        return error;
    }


   
   

    /**
     * Returns the variable value for pIdOperacion.
     * @return variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }

    /**
     * Returns the variable value for pIdDesembolso.
     * @return variable value for pIdDesembolso
     */
    public Long getpIdDesembolso() {
        return (Long) ensureVariableManager().getVariableValue("pIdDesembolso");
    }

    /**
     * Sets <code>value</code> for variable pIdDesembolso.
     * @param value value to bind as pIdDesembolso
     */
    public void setpIdDesembolso(Long value) {
        ensureVariableManager().setVariableValue("pIdDesembolso", value);
    }
}

