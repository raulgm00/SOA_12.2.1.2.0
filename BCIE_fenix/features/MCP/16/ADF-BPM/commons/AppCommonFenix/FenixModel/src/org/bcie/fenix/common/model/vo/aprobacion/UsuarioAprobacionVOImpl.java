package org.bcie.fenix.common.model.vo.aprobacion;

import com.bcie.xmlns.usuarioservice.Usuario12BndQSService;
import com.bcie.xmlns.usuarioservice.UsuarioPT;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAprobacionAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.usuariobo.ListaNombres;
import org.bcie.usuariobo.ListaUsuarios;
import org.bcie.usuariobo.Usuario;
import org.bcie.usuariomo.ConsultarAtributosUsuarioRequestType;
import org.bcie.usuariomo.ConsultarAtributosUsuarioResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Sep 22 16:16:39 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UsuarioAprobacionVOImpl extends ViewObjectImpl {
    
    private static ADFLogger logger = ADFLogger.createADFLogger(UsuarioAprobacionVOImpl.class);
        
    /**
     * This is the default constructor (do not remove).
     */
    public UsuarioAprobacionVOImpl() {
    }
    
    public boolean configurarUsuariosPorRoles(HashMap listaRoles) {
        boolean cargaExitosa = Boolean.FALSE;
        
        obtenerUsuariosPorRoles(listaRoles);
        
        return cargaExitosa;
    }
    
    public List<String> obtenerUsuariosPorRoles(HashMap listaRoles) {
        logger.warning("Entrando en obtenerUsuariosPorRoles");
        
        UsuarioPT usuarioPT = UsuarioPT();
        ConsultarAtributosUsuarioRequestType request = ConsultarAtributosUsuarioRequest(listaRoles);
        ConsultarAtributosUsuarioResponseType response = new ConsultarAtributosUsuarioResponseType();
        
        try {
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_GERENTE_PAIS);
            response = usuarioPT.consultarAtributosUsuario(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_GERENTE_PAIS, horaInicio);
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error al obtener el gerente de pais", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al obtener lo atributos del usuario. Intentelo más tarde."));
            throw ex;
        }
        logger.warning("gerente de pais: " + mapeoGerentePaisResponse(response).toString());
        return mapeoGerentePaisResponse(response);
    }
    
    private ConsultarAtributosUsuarioRequestType ConsultarAtributosUsuarioRequest(HashMap listaRoles) {
        ConsultarAtributosUsuarioRequestType request = new ConsultarAtributosUsuarioRequestType();

        ListaNombres listaNombres = new ListaNombres();

        Iterator it = listaRoles.entrySet().iterator();
        while (it.hasNext()) {
            Map.Entry pair = (Map.Entry) it.next();

            try {
                String usuario = pair.getKey().toString();
                logger.warning(usuario);
                //it.remove(); // avoids a ConcurrentModificationException
                listaNombres.getNombreUsuario().add(usuario);
            } catch (Exception e) {
                logger.warning("Error al reguperar el rol", e);
            }
        }

        request.setListaNombres(listaNombres);

        return request;
    }
    
    private UsuarioPT UsuarioPT() {
        FenixAprobacionAMImpl fenixAprobacionAM = (FenixAprobacionAMImpl) getRootApplicationModule();
        String wsdl = fenixAprobacionAM.getWsdl(IWsdlLocation.USUARIO);

        Usuario12BndQSService usuario12BndQSService =
            IWsdlLocation.Service.getInstance(Usuario12BndQSService.class, wsdl);
        UsuarioPT usuarioPT = usuario12BndQSService.getUsuario12BndQSPort();

        return usuarioPT;
    }
    
    private List<String> mapeoGerentePaisResponse(ConsultarAtributosUsuarioResponseType response) {
        ListaUsuarios usuarios = new ListaUsuarios();
        List<String> listaGerentesPais = new ArrayList<>();

        if (response.getResultado().getResult().value().equalsIgnoreCase("OK")) {
            usuarios = response.getListaUsuarios();
            for (Usuario usuario : usuarios.getUsuario()) {
                listaGerentesPais.add(usuario.getManager());
            }
        }
        
        return listaGerentesPais;
    }
}

