package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.vo.common.TrePrepagoContratoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Sep 01 13:38:36 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TrePrepagoContratoVOImpl extends ViewObjectImpl implements TrePrepagoContratoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    
    public TrePrepagoContratoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row buscarTrePrepagoContratoPorId(Long id){
        logger.warning("Dentro de buscarTrePrepagoContratoPorId idTrePrepagoContrato :"+id);
        Row row = null;
        ViewCriteria criteria = null;
        try{                                                    
            this.setvarIdTrePrepagoContrato(id);                                   
            criteria = getViewCriteria("TrePrepagoContratoPorId");                       
            this.applyViewCriteria(criteria);
            this.executeQuery();
            for(Row rowAux : this.getAllRowsInRange()){
                row = rowAux;
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria TrePrepagoContratoPorId : ",e);                                    
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("TrePrepagoContratoPorId");  
        }    
        logger.warning("Fuera de buscarTrePrepagoContratoPorId");
        return row;
    }
    
    public Boolean eliminarRowTrePrepagoContrato(Long id){
        logger.log(ADFLogger.WARNING, "Into eliminarRowTrePrepagoContrato.");
        Boolean resultado = null;
        Row trePrepagoContratoRow = null;
        trePrepagoContratoRow = this.buscarTrePrepagoContratoPorId(id);
        if(trePrepagoContratoRow != null) {
            trePrepagoContratoRow.remove();
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } else {
            logger.log(ADFLogger.WARNING, "No record found in TrePrepagoContratoVO with id : "+id);
            resultado = Boolean.FALSE;
        } 
        logger.log(ADFLogger.WARNING, "eliminarRowTrePrepagoContrato return :"+resultado);
        return resultado;
    }
    
    public Long crearTrePrepagoContrato(BigDecimal capitalNoVencido,Integer esPagoTotal,Timestamp fechaProximoPago,
                                            Long idContrato,Long idPrepago,Integer idTcaTipoMoneda,
                                                BigDecimal montoPrepago,String contratoFlexcube) {
        logger.log(ADFLogger.WARNING, "Into crearTrePrepagoContrato.");
        logger.log(ADFLogger.WARNING, "value capitalNoVencido : "+capitalNoVencido);
        logger.log(ADFLogger.WARNING, "value esPagoTotal : "+esPagoTotal);
        logger.log(ADFLogger.WARNING, "value fechaProximoPago : "+fechaProximoPago);
        logger.log(ADFLogger.WARNING, "value idContrato : "+idContrato);
        logger.log(ADFLogger.WARNING, "value idPrepago : "+idPrepago);
        logger.log(ADFLogger.WARNING, "value idTcaTipoMoneda : "+idTcaTipoMoneda);
        logger.log(ADFLogger.WARNING, "value montoPrepago : "+montoPrepago);
        logger.log(ADFLogger.WARNING, "value contratoFlexcube : "+contratoFlexcube);
        
        Row trePrepagoContratoRow = null;
        oracle.jbo.domain.Number idTrePrepagoContrato = null;
        SequenceImpl sequenceTrePrepagoContrato = null;
        NameValuePairs nvpTrePrepagoContrato = null;
        try{
            if(esPagoTotal != 1){
                if(null != capitalNoVencido && null != montoPrepago){
                    if(capitalNoVencido.compareTo(montoPrepago) == 0){
                        logger.warning("Los montos son iguales, es un pago total");
                        esPagoTotal = 1;
                    }else{
                        logger.warning("Los montos no son iguales, No es un pago total.");
                    }
                }else{
                    logger.warning("Algun valor es nulo, no es un pago total.");
                }
            }else{
                logger.warning("Es un pago total.");
            }
        //Obtener la secuencia de la tabla "TRE_PREPAGO_CONTRATO"
        sequenceTrePrepagoContrato = new SequenceImpl("TRE_PREPAGO_CONTRATO_SEQ", getDBTransaction());
        idTrePrepagoContrato = sequenceTrePrepagoContrato.getSequenceNumber();
        nvpTrePrepagoContrato = new NameValuePairs();
        nvpTrePrepagoContrato.setAttribute("Id",idTrePrepagoContrato.longValue());
        nvpTrePrepagoContrato.setAttribute("CapitalNoVencido",capitalNoVencido.setScale(2, RoundingMode.FLOOR));
        nvpTrePrepagoContrato.setAttribute("EsPagoTotal",esPagoTotal);
        nvpTrePrepagoContrato.setAttribute("FechaProximoPago",fechaProximoPago);
        nvpTrePrepagoContrato.setAttribute("IdContrato",idContrato);
        nvpTrePrepagoContrato.setAttribute("IdPrepago",idPrepago);
        nvpTrePrepagoContrato.setAttribute("IdTcaTipoMoneda",idTcaTipoMoneda);
        nvpTrePrepagoContrato.setAttribute("MontoPrepago",montoPrepago.setScale(2, RoundingMode.FLOOR));
        nvpTrePrepagoContrato.setAttribute("ContratoFlexcube",contratoFlexcube);
        
        trePrepagoContratoRow = this.createAndInitRow(nvpTrePrepagoContrato);
                
        getDBTransaction().commit();
        
        }catch(Exception e){
            logger.log(ADFLogger.ERROR, "Exception in crearTrePrepagoContrato.", e);
            getDBTransaction().rollback();
            return null;
        }
        //ejecutar query
        this.executeQuery();
        return idTrePrepagoContrato.longValue();

    }

    /**
     * Returns the variable value for VarIdPrepago.
     * @return variable value for VarIdPrepago
     */
    public Long getVarIdPrepago() {
        return (Long) ensureVariableManager().getVariableValue("VarIdPrepago");
    }

    /**
     * Sets <code>value</code> for variable VarIdPrepago.
     * @param value value to bind as VarIdPrepago
     */
    public void setVarIdPrepago(Long value) {
        ensureVariableManager().setVariableValue("VarIdPrepago", value);
    }

    /**
     * Returns the variable value for varIdTrePrepagoContrato.
     * @return variable value for varIdTrePrepagoContrato
     */
    public Long getvarIdTrePrepagoContrato() {
        return (Long) ensureVariableManager().getVariableValue("varIdTrePrepagoContrato");
    }

    /**
     * Sets <code>value</code> for variable varIdTrePrepagoContrato.
     * @param value value to bind as varIdTrePrepagoContrato
     */
    public void setvarIdTrePrepagoContrato(Long value) {
        ensureVariableManager().setVariableValue("varIdTrePrepagoContrato", value);
    }
}

