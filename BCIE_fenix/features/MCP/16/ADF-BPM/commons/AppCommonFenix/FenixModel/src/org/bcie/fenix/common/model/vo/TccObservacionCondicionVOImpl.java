package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.util.Calendar;

import oracle.adf.share.ADFContext;
import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TccObservacionCondicionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 18 12:05:36 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TccObservacionCondicionVOImpl extends ViewObjectImpl implements TccObservacionCondicionVO {
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(TccObservacionCondicionVOImpl.class);
    
    /**
     * Define nombre de view criteria para buscar observaciones principales
     */
    public static final String BUSCAR_PRINCIPAL_VC = "BuscarPrincipalVC";
    
    /**
     * Define el valor bandera para indicar que la observacion es principal
     */
    public static final Integer ID_ES_PRINCIPAL = 1;
    
    /**
     * Define el valor bandera para indicar que la observacion no es principal
     */
    public static final Integer ID_NO_PRINCIPAL = 0;
    
    /**
     * Define el valor bandera de registro activo
     */
    public static final Integer BAN_ESTATUS_ACTIVO = 1;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TccObservacionCondicionVOImpl() {
    }
    
    /**
     * Ejecuta la busqueda de Observacion Principal de Condicion aplicando View Criteria
     */
    public void buscarPrincipal(){
        
        logger.entering(TccObservacionCondicionVOImpl.class.getName(), 
                        "buscarPrincipal");
        
        ViewCriteria vc = null;
        try{
            vc = getViewCriteria(BUSCAR_PRINCIPAL_VC);
            applyViewCriteria(vc);
            executeQuery();
            setCurrentRow(first());
        }catch(Exception e){
            logger.severe("Error en la ejecucion del view criteria: " + BUSCAR_PRINCIPAL_VC, e);
        }
        
        logger.exiting(TccObservacionCondicionVOImpl.class.getName(), 
                       "buscarPrincipal");
    }
    
    /**
     * Crea un nuevo registro de Observacion Condicion
     * @param observacion contiene la descripcion de la observacion
     * @param idCondicion contiene id de condicion
     * @param idTareaBpm contiene id de tarea BPM
     * @param esPrincipal define indicador de observacion principal
     * @return devuelve valor booleano, true si el proceso fue exitoso o false en caso contrario
     */
    public boolean crearRegistro(String observacion,
                                 Long idCondicion,
                                 Integer idTareaBpm,
                                 boolean esPrincipal){
        
        logger.entering(TccObservacionCondicionVOImpl.class.getName(), 
                        "crearRegistro", 
                        new Object[]{observacion, idCondicion});
        
        boolean exito = false;
        boolean esValido = true;
        
        logger.warning("Parametro Observacion: " + observacion);
        logger.warning("Parametro Id Condicion: " + idCondicion);
        logger.warning("Parametro Id Tarea BPM: " + idTareaBpm);
        logger.warning("Parametro Es Principal: " + esPrincipal);
        
        if(idCondicion == null ||
           observacion == null ||
           idTareaBpm == null){
            logger.severe("Parametros obligatorios no recibidos");
            return exito;
        }
        
        TccObservacionCondicionVORowImpl rowObservacion = null;
        SequenceImpl sqObservacion = null;
        String usuarioLogin = null;
        String nombreUsuario = null;
        Timestamp fechaRegistro = null;
        
        try{
            usuarioLogin = ADFContext.getCurrent().getSecurityContext().getUserName();    
        }catch(Exception e){
            logger.severe("Error al obtener el login de Usuario", e);
        }
        
        try{
            nombreUsuario = ADFContext.getCurrent().getSecurityContext().getUserProfile().getDisplayName();
            if(nombreUsuario == null ||
               "".equals(nombreUsuario)){
                nombreUsuario = ADFContext.getCurrent().getSecurityContext().getUserProfile().getName();
            }
        }catch(Exception e){
            logger.severe("Error al obtener el Nombre de Usuario", e);
        }
        
        Calendar cal = null;
        try{
            cal = Calendar.getInstance();
            fechaRegistro = new Timestamp(cal.getTime().getTime());    
        }catch(Exception e){
            logger.severe("Error al obtener la fecha actual del Sistema", e);
        }
        
        try{
            sqObservacion = new SequenceImpl("OBSERVACION_CONDICION_SEQ", getDBTransaction());    
        }catch(Exception e){
            logger.severe("Error al obtener la secuencia de la Observacion Condicion", e);
        }
        
        logger.warning("Atributo Usuario Login: " + usuarioLogin); 
        logger.warning("Atributo Nombre de Usuario: " + nombreUsuario);
        
        //Valida campos requeridos
        if(usuarioLogin == null ||
           nombreUsuario == null ||
           sqObservacion == null ||
           fechaRegistro == null){
            logger.severe("Error al obtener atributos obligatorios");
            esValido = false;
        }
        
        //Verifica validacion de atributos requeridos
        if(esValido){
            
            try{
                rowObservacion = (TccObservacionCondicionVORowImpl) createRow();    
            }catch(Exception e){
                logger.severe("Error al crear el registro de Observacion Condicion", e);
            }
            
            logger.warning("Asigna valores al registro de Observacion Condicion");
            rowObservacion.setId(sqObservacion.getSequenceNumber().longValue());
            rowObservacion.setObservacion(observacion);
            rowObservacion.setBanEstatus(BAN_ESTATUS_ACTIVO);
            
            if(esPrincipal){
                rowObservacion.setEsPrincipal(ID_ES_PRINCIPAL);    
            }else{
                rowObservacion.setEsPrincipal(ID_NO_PRINCIPAL);    
            }
            
            rowObservacion.setNombreUsuario(nombreUsuario);
            rowObservacion.setLoginUsuario(usuarioLogin);
            rowObservacion.setIdCondicion(idCondicion);
            rowObservacion.setIdTcaTareaBpm(idTareaBpm);
            rowObservacion.setFechaRegistro(fechaRegistro);
            rowObservacion.setNewRowState(Row.STATUS_NEW);
            
            logger.warning("Inserta Registro");
            insertRow(rowObservacion);
            logger.warning("Asigna Nuevo Registro como Registro Actual");
            setCurrentRow(rowObservacion);
            exito = true;
        }
        
        logger.exiting(TccObservacionCondicionVOImpl.class.getName(), 
                       "crearRegistro", 
                       exito);
        return exito;
    }
    
    /**
     * Actualiza el registro actual de Observacion Condicion
     * @param observacion contiene descripcion de la observacion
     * @param idTareaBpm contiene id de tarea BPM
     * @return devuelve valor booleano, true si el proceso es exitoso o false en caso contrario
     */
    public boolean actualizarRegistro(String observacion,
                                      Integer idTareaBpm){
        
        logger.entering(TccObservacionCondicionVOImpl.class.getName(), 
                        "actualizarRegistro",
                        new Object[]{observacion, idTareaBpm});
        
        boolean exito = false;
        
        logger.warning("Parametro Observacion: " + observacion);
        logger.warning("Parametro Id Tarea BPM: " + idTareaBpm);
        
        if(idTareaBpm == null){
            logger.severe("idTareaBpm no recibido");
            return exito;
        }
        
        TccObservacionCondicionVORowImpl rowObservacion = 
            (TccObservacionCondicionVORowImpl) getCurrentRow();
        
        if(rowObservacion != null){
            
            String usuarioLogin = null;
            String nombreUsuario = null;
            
            try{
                usuarioLogin = ADFContext.getCurrent().getSecurityContext().getUserName();    
            }catch(Exception e){
                logger.severe("Error al obtener el login de Usuario", e);
            }
            
            try{
                nombreUsuario = ADFContext.getCurrent().getSecurityContext().getUserProfile().getDisplayName();
                if(nombreUsuario == null ||
                   "".equals(nombreUsuario)){
                    nombreUsuario = ADFContext.getCurrent().getSecurityContext().getUserProfile().getName();
                }
            }catch(Exception e){
                logger.severe("Error al obtener el Nombre de Usuario", e);
            }
           
            logger.warning("Atributo Usuario Login: " + usuarioLogin); 
            logger.warning("Atributo Nombre de Usuario: " + nombreUsuario);
            
            //Valida campos requeridos
            if(usuarioLogin == null ||
               nombreUsuario == null){
                logger.severe("Error al obtener atributos obligatorios");
            }else{
                if(null != observacion && !observacion.trim().equals("")){
                    logger.warning("Actualizando registro de ObservacionPrincipal de la condicion");
                    rowObservacion.setObservacion(observacion);
                    rowObservacion.setIdTcaTareaBpm(idTareaBpm);
                    rowObservacion.setLoginUsuario(usuarioLogin);
                    rowObservacion.setNombreUsuario(nombreUsuario);
                } else {
                    logger.warning("Eliminando registro de ObservacionPrincipal de la condicion");
                    rowObservacion.remove();
                }
                exito = true;
            }
        }else{
            logger.severe("Error no se obtuvo el registro actual");
        }
        
        logger.exiting(TccObservacionCondicionVOImpl.class.getName(), 
                       "actualizarRegistro", 
                       exito);
        return exito;
    }
}

