package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.vo.common.PrepagoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 29 12:56:59 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class PrepagoVOImpl extends ViewObjectImpl implements PrepagoVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public PrepagoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean actualizarPrepago(BigDecimal montoPrepago,Timestamp fechaRenovacion,Integer idTcaTipoCaptura,
                                        Long idPrepago,Timestamp fechaSolicitud,Integer idTcaTipoResolucion,
                                            Timestamp fechaPrepago,Integer idTcaTipoPrepago,Integer idTcaTipoMoneda){
        logger.log(ADFLogger.WARNING, "Into actualizarPrepago.");
        
        logger.log(ADFLogger.WARNING, "idPrepago : "+idPrepago);
        logger.log(ADFLogger.WARNING, "montoPrepago : "+montoPrepago);
        logger.log(ADFLogger.WARNING, "fechaRenovacion : "+fechaRenovacion);
        logger.log(ADFLogger.WARNING, "idTcaTipoCaptura : "+idTcaTipoCaptura);
        //se agregan nuevos atributos para atender la incidencia "FNXII-4848"
        logger.warning("fechaSolicitud : "+fechaSolicitud);
        logger.warning("idTcaTipoResolucion : "+idTcaTipoResolucion);
        logger.warning("fechaPrepago : "+fechaPrepago);
        logger.warning("idTcaTipoPrepago : "+idTcaTipoPrepago);
        logger.warning("idTcaTipoMoneda : "+idTcaTipoMoneda);
        Boolean resultado = null;
        
        Row prepagoRow = null;        
        ViewCriteria criteria = null;
        
        try{      
            criteria =this.getViewCriteriaManager().getViewCriteria("PrepagoVOCriteriaByIdPrepago");
            criteria.ensureVariableManager().setVariableValue("idPrepago", idPrepago);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        
            if(getEstimatedRowCount() > 0) {               
                setCurrentRow(first());
                prepagoRow = getCurrentRow();
                
                prepagoRow.setAttribute(PrepagoVORowImpl.MONTOPREPAGO,montoPrepago);
                prepagoRow.setAttribute(PrepagoVORowImpl.FECHARENOVACION,fechaRenovacion);
                prepagoRow.setAttribute(PrepagoVORowImpl.IDTCATIPOCAPTURA,idTcaTipoCaptura);
                //se agregan nuevos atributos para atender la incidencia "FNXII-4848"
                prepagoRow.setAttribute(PrepagoVORowImpl.FECHASOLICITUD,fechaSolicitud);
                prepagoRow.setAttribute(PrepagoVORowImpl.IDTCATIPORESOLUCION,idTcaTipoResolucion);
                prepagoRow.setAttribute(PrepagoVORowImpl.FECHAPREPAGO,fechaPrepago);
                prepagoRow.setAttribute(PrepagoVORowImpl.IDTCATIPOPREPAGO,idTcaTipoPrepago);
                prepagoRow.setAttribute(PrepagoVORowImpl.IDTCATIPOMONEDA,idTcaTipoMoneda);
                //TO DO 
                getDBTransaction().commit();
                //retorna true
                resultado = Boolean.TRUE;
                
            } else {
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
            }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e);     
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("PrepagoVOCriteriaByIdPrepago");
            executeQuery();              
        }
        
        return resultado;
        
    }

    public Long crearPrepago(Timestamp fechaSolicitud, Timestamp fechaPrepago,BigDecimal montoPrepago,
                                Timestamp fechaRenovacion,Integer idTcaTipoResolucion, Integer idTcaTipoPrepago,
                                    Integer idTcaTipoCaptura,Integer idTcaTipoMoneda,Long idObservacion) {
        logger.log(ADFLogger.WARNING, "Into crearPrepago.");
        logger.log(ADFLogger.WARNING, "value fechaSolicitud : "+fechaSolicitud);
        logger.log(ADFLogger.WARNING, "value fechaPrepago : "+fechaPrepago);
        logger.log(ADFLogger.WARNING, "value montoPrepago : "+montoPrepago);
        logger.log(ADFLogger.WARNING, "value fechaRenovacion : "+fechaRenovacion);
        logger.log(ADFLogger.WARNING, "value idTcaTipoResolucion : "+idTcaTipoResolucion);
        logger.log(ADFLogger.WARNING, "value idTcaTipoPrepago : "+idTcaTipoPrepago);
        logger.log(ADFLogger.WARNING, "value idTcaTipoCaptura : "+idTcaTipoCaptura);
        logger.log(ADFLogger.WARNING, "value idTcaTipoMoneda : "+idTcaTipoMoneda);
        logger.log(ADFLogger.WARNING, "value idObservacion : "+idObservacion);
        
        Row prepagoRow = null;
        oracle.jbo.domain.Number idPrepago = null;
        SequenceImpl sequencePrepago = null;
        NameValuePairs nvpPrepago = null;
        try{
        //Obtener la secuencia de la tabla "PREPAGO"
        sequencePrepago = new SequenceImpl("PREPAGO_SEQ", getDBTransaction());
        idPrepago = sequencePrepago.getSequenceNumber();
        nvpPrepago = new NameValuePairs();
        nvpPrepago.setAttribute("Id",idPrepago.longValue());
        nvpPrepago.setAttribute("FechaSolicitud",fechaSolicitud);
        nvpPrepago.setAttribute("FechaPrepago",fechaPrepago);
        nvpPrepago.setAttribute("MontoPrepago",montoPrepago);
        nvpPrepago.setAttribute("FechaRenovacion",fechaRenovacion);
        nvpPrepago.setAttribute("IdTcaTipoResolucion",idTcaTipoResolucion);
        nvpPrepago.setAttribute("IdTcaTipoPrepago",idTcaTipoPrepago);
        nvpPrepago.setAttribute("IdTcaTipoCaptura",idTcaTipoCaptura);
        nvpPrepago.setAttribute("IdTcaTipoMoneda",idTcaTipoMoneda);
        nvpPrepago.setAttribute("IdObservacion",idObservacion);
        nvpPrepago.setAttribute("BanEstatus", BANESTATUS_TRUE);//default value 1
        nvpPrepago.setAttribute("FechaRegistro",new java.sql.Timestamp(System.currentTimeMillis()));
        
        prepagoRow = this.createAndInitRow(nvpPrepago);
                
        getDBTransaction().commit();
        }catch(Exception e){
            logger.severe("Exception in crearPrepago : ",e);
            getDBTransaction().rollback();
            return null;
        }
        //ejecutar query
        this.executeQuery();
        logger.warning("crearPrepago return : "+idPrepago);
        return idPrepago.longValue();

    }
    
    public void actualizarFechaPrepago(Long idPrepago, Timestamp fechaPrepago) {
        logger.warning("Into actualizarFechaPrepago.");
        logger.warning("value idPrepago : " + idPrepago);
        logger.warning("value fechaPrepago : " + fechaPrepago);
        
        Row prepagoRow = null;        
        ViewCriteria criteria = null;
        
        try{      
            criteria =this.getViewCriteriaManager().getViewCriteria("PrepagoVOCriteriaByIdPrepago");
            criteria.ensureVariableManager().setVariableValue("idPrepago", idPrepago);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        
            if(getEstimatedRowCount() > 0) {               
                setCurrentRow(first());
                prepagoRow = getCurrentRow();
                
                prepagoRow.setAttribute(PrepagoVORowImpl.FECHAPREPAGO, fechaPrepago);
                getDBTransaction().commit();
                
            } else {
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
            }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e);     
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("PrepagoVOCriteriaByIdPrepago");
            executeQuery();              
        }
    }

    /**
     * Returns the variable value for idPrepago.
     * @return variable value for idPrepago
     */
    public Long getidPrepago() {
        return (Long) ensureVariableManager().getVariableValue("idPrepago");
    }

    /**
     * Sets <code>value</code> for variable idPrepago.
     * @param value value to bind as idPrepago
     */
    public void setidPrepago(Long value) {
        ensureVariableManager().setVariableValue("idPrepago", value);
    }
}

