package org.bcie.fenix.common.model.vo;

import com.bcie.crearactualizarbitacoradocumento.CrearActualizarBitacoraDocumento;
import com.bcie.crearactualizarbitacoradocumento.CrearActualizarBitacoraDocumentoSOAP12BindingQSService;
import com.bcie.xmlns.documentoservice.Documento12BndQSService;
import com.bcie.xmlns.documentoservice.DocumentoPT;

import com.bcie.xmlns.operacionservice.Operacion12BndQSService;

import java.io.StringWriter;

import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;

import java.util.HashMap;
import java.util.List;

import java.util.Map;

import javax.xml.datatype.DatatypeFactory;
import javax.xml.datatype.XMLGregorianCalendar;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.crearactualizarbitacoradocumentobo.BitacoraDocumento;
import org.bcie.crearactualizarbitacoradocumentomo.CrearActualizarBitacoraDocumentoRequest;
import org.bcie.crearactualizarbitacoradocumentomo.CrearActualizarBitacoraDocumentoResponse;
import org.bcie.documentobo.Documento;
import org.bcie.documentobo.ListaDocumentos;
import org.bcie.documentomo.CargarDocumentoRequestType;
import org.bcie.documentomo.EliminarDocumentosFenixRequestType;
import org.bcie.documentomo.EliminarDocumentosFenixResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import static org.bcie.fenix.common.model.FenixModelConstants.CONVERTIR_MILISEGUNDOS_SEGUNDOS;
import static org.bcie.fenix.common.model.FenixModelConstants.RANGE_SIZE_ALL;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DocumentosAdjuntadosClientesVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jun 22 16:50:09 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentosAdjuntadosClientesVOImpl extends ViewObjectImpl implements DocumentosAdjuntadosClientesVO {
    
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public DocumentosAdjuntadosClientesVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void limpiarCacheDocumentosAdjuntadosClientesVO() {
        
        // Limpia el cache de la VO para que no se quede con los datos de otro id cliente
        this.clearCache();
    }
    
    /**
     * cargarDocumentosCliente
     * Metodo que invoca el servicio web "cargarDocumento" para subir los documentos adjuntados en el
     * GestorDocumentosCliente a onBase
     * @param Not params , obtiene el "idAdjunto" de iterador de "DocumentosAdjuntadosClientesVO"
     * @since 10/08/2016
     * @by Gabriel Niño Rosales
     */ 
    public void cargarDocumentosCliente(){    
        logger.log(ADFLogger.WARNING,"Into cargarDocumentosCliente.");
        Documento12BndQSService documento12BndQSService = null;
        DocumentoPT documentoPT = null;
        CargarDocumentoRequestType request = null;
        ListaDocumentos listaDocumentos = null;
        Documento documento = null;
        StringWriter xmlEntrada = null;
        FenixAMImpl fenixAM = null;
        Long idCliente = null;
        Integer idTarea = null;
        
        try{
            SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date horaInicio = new GregorianCalendar().getTime();
            int numDocAdjunto = 0; // Documentos con un archivo adjunto
            int numDocJustificados = 0; // Documentos de tipo Justificación (i.e. que no tienen un IdAdjunto)
            
            // The recommended way to iterate a View Object is via a secondary RowSetIterator             
            RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();
            logger.log(ADFLogger.WARNING,"Count rows to documentosAdjuntosClientesVO is :."+iterator.getRowCount());            
            // Iteramos en todos los rows para llenar valores de número documentos que enviarán al servicio y 
            // de documentos de tipo Justificación que se les actualizará su acción a Sincronizado.
            while (iterator.hasNext()) {
                Row row = iterator.next();
                idCliente = (Long)row.getAttribute("IdCliente");
                idTarea = (Integer)row.getAttribute("IdTareaBpm");
                
                if(row.getAttribute("IdAdjunto") != null)                     
                    numDocAdjunto++;
                else
                    numDocJustificados++;
            }
            
            logger.log(ADFLogger.WARNING, "Inside cargarDocumentos. Hora de inicio: " + dateFormat.format(horaInicio.getTime()) +
                                          ". IdCliente: " + idCliente + ". IdTareaBpm: " + idTarea +
                                          ". RowCount: " + iterator.getRowCount() + ". numDocAdjunto: " + numDocAdjunto +
                                          ". numDocJustificados: " + numDocJustificados);
            
            if((numDocAdjunto >0) || (numDocJustificados >0)) {
                
                fenixAM = (FenixAMImpl)this.getRootApplicationModule();
                
                // Documentos que se van al servicio cargarDocumento.
                if(numDocAdjunto > 0) {
                    
                    request = new CargarDocumentoRequestType();
                    listaDocumentos = new ListaDocumentos();
                    request.setDocumentos(listaDocumentos);
                    
                    // Iteramos de nuevo en el rowset
                    iterator.reset();
                    while (iterator.hasNext()) {
                        Row row = iterator.next();
                        
                        if(row.getAttribute("IdAdjunto") != null) { // Verificamos que no se manden ids null al servicio
                            documento = new Documento();
                            documento.setIdAdjunto((Long)row.getAttribute("IdAdjunto"));
                            request.getDocumentos().getDocumento().add(documento);
                        }
                    }
                                
                    String wsdl = fenixAM.getWsdl(IWsdlLocation.DOCUMENTO); // Creando proxy
                    documento12BndQSService = IWsdlLocation.Service.getInstance(Documento12BndQSService.class, wsdl);
                    documentoPT = documento12BndQSService.getDocumento12BndQSPort();
                    
                    logger.log(ADFLogger.WARNING, "Start invocando Servicio - Cargar Documento-");
                        xmlEntrada = fenixAM.writeXMLRequest(request, request.getClass());
                        logger.log(ADFLogger.WARNING, xmlEntrada.toString());
                        
                    documentoPT.cargarDocumento(request); // Esta operación es one way, no tiene response
                }
                
                // Documentos Justificados, se les cambia en BD su acción a Sincronizado.
                if(numDocJustificados > 0) {
                    
                    // Iteramos de nuevo en el rowset
                    iterator.reset();
                    while (iterator.hasNext()) {
                        Row row = iterator.next();
                        
                        if(row.getAttribute("IdAdjunto") == null) {
                            Long idDocumento = (Long)row.getAttribute("IdDocumento");
                            fenixAM.getDocumentoVO().
                                actualizarAccionDocumento(idDocumento, FenixModelConstants.TIPO_ACCION_SINCRONIZADO);
                        }
                    }    
                }
            }
            
            iterator.closeRowSetIterator();
        } catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en cargarDocumentos " + e.getClass() + ":" + e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al cargar los documentos, favor de intentar más tarde."));
            throw ex;
        }
    }

    /**
     * Returns the bind variable value for idCliente.
     * @return bind variable value for idCliente
     */
    public Number getidCliente() {
        return (Number) getNamedWhereClauseParam("idCliente");
    }

    /**
     * Sets <code>value</code> for bind variable idCliente.
     * @param value value to bind as idCliente
     */
    public void setidCliente(Number value) {
        setNamedWhereClauseParam("idCliente", value);
    }

    /**
     * Returns the bind variable value for idTarea.
     * @return bind variable value for idTarea
     */
    public Number getidTarea() {
        return (Number) getNamedWhereClauseParam("idTarea");
    }

    /**
     * Sets <code>value</code> for bind variable idTarea.
     * @param value value to bind as idTarea
     */
    public void setidTarea(Number value) {
        setNamedWhereClauseParam("idTarea", value);
    }

    /**
     * Returns the bind variable value for numeroSerieDocumento.
     * @return bind variable value for numeroSerieDocumento
     */
    public Number getnumeroSerieDocumento() {
        return (Number) getNamedWhereClauseParam("numeroSerieDocumento");
    }

    /**
     * Sets <code>value</code> for bind variable numeroSerieDocumento.
     * @param value value to bind as numeroSerieDocumento
     */
    public void setnumeroSerieDocumento(Number value) {
        setNamedWhereClauseParam("numeroSerieDocumento", value);
    }
    
    public void recargaDocumentos(){
        logger.warning("Inicia refrescado de documentos");
        executeQuery();
        logger.warning("Termina refrescado de documentos");
        }
    public Boolean eliminarDocumentosAviso(Long idCliente, String idTarea, Long idFlujo){
        Boolean resultado=Boolean.FALSE;
        if(null!=idCliente && null!=idTarea && null!=idFlujo){
                FenixAMImpl fenixAMImpl = null;
                fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                String wsdl = fenixAMImpl.getWsdl(IWsdlLocation.DOCUMENTO);
                Documento12BndQSService documento12BndQSService= IWsdlLocation.Service.getInstance(Documento12BndQSService.class, wsdl);
                DocumentoPT documentoPT= documento12BndQSService.getDocumento12BndQSPort();
                EliminarDocumentosFenixRequestType request=new EliminarDocumentosFenixRequestType();
                request.setIdCliente(idCliente);
                request.setIdFlujoNegocio(idFlujo);
                request.setTarea(idTarea);
                Date horaInicio =
                    ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ELIMINACION_TAREA_DOCUMENTO);

                EliminarDocumentosFenixResponseType response=null;
                Boolean ejecutoServicio=Boolean.TRUE;
                try{
                response= documentoPT.eliminarDocumentoPorTarea(request);
                }catch (Exception error) {
                logger.warning("error al ejecutar el servicio" + error.getMessage());
                ejecutoServicio = Boolean.FALSE;
            }
                if(ejecutoServicio){
                        ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ELIMINACION_TAREA_DOCUMENTO,
                                            horaInicio);
                        resultado=Boolean.TRUE;
                    }
                else{
                    if(null!=response.getResultado().getError() && response.getResultado().getResult().value().equalsIgnoreCase("ERROR")){
                        logger.warning("Error:"+ response.getResultado().getMessage());
                        }
                    }
            }
        else{
            logger.warning("Error al cargar los datos");
            }

            
        return resultado;
        }
    
    /**
     * cargarDocumentosCliente
     * Metodo que invoca el servicio web "cargarDocumento" para subir los documentos adjuntados en el
     * GestorDocumentosCliente a onBase por medio de boton Enviar Documento.
     * @param Not params , obtiene el "idAdjunto" de iterador de "DocumentosAdjuntadosClientesVO"
     * @since 16/08/2017
     * @by Josue Hernandez Castillo
     */ 
    public Map enviarDocumentoOnBaseCliente(String usuario) {
        logger.log(ADFLogger.WARNING,"Inside enviarDocumentoOnBaseCliente.");
        
        Documento12BndQSService documento12BndQSService = null;
        DocumentoPT documentoPT = null;
        CargarDocumentoRequestType request = null;
        ListaDocumentos listaDocumentos = null;
        Documento documento = null;
        StringWriter xmlEntrada = null;
        FenixAMImpl fenixAM = null;
        Long idCliente = null;
        Integer idTarea = null;
        Boolean enviarDoc = Boolean.FALSE;
        Long idDocumento = null;
        
        Map<Long, String> adjuntosName = new HashMap<Long, String>();
        
        try{
            SimpleDateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date horaInicio = new GregorianCalendar().getTime();
            int numDocAdjunto = 0; // Documentos con un archivo adjunto
            int numDocAEnviar = 0; // Documentos con un archivo adjunto
            
            // The recommended way to iterate a View Object is via a secondary RowSetIterator             
            RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();
            logger.log(ADFLogger.WARNING,"Count rows to documentosAdjuntosClientesVO is :."+iterator.getRowCount());            
            
            // Iteramos en todos los rows para llenar valores de número documentos que enviarán al servicio
            while (iterator.hasNext()) {
                Row row = iterator.next();
                idCliente = (Long)row.getAttribute("IdCliente");
                idTarea = (Integer)row.getAttribute("IdTareaBpm");
                
                if(row.getAttribute("IdAdjunto") != null)                     
                    numDocAdjunto++;
                
                //Si el estado del documento es diferente de EN_PROCESO se envia en request.
                if (row.getAttribute("Estado") != null) {
                    if (row.getAttribute("Estado").toString().equalsIgnoreCase("EN_PROCESO")) {
                        logger.warning("Documento EN_PROCESO." + row.getAttribute("Filename"));
                    } else {
                        numDocAEnviar++;
                    }
                } else {
                    numDocAEnviar++;
                }
            }
            
            logger.log(ADFLogger.WARNING, "Inside cargarDocumentos. Hora de inicio: " + dateFormat.format(horaInicio.getTime()) +
                                          ". IdCliente: " + idCliente + ". IdTareaBpm: " + idTarea +
                                          ". RowCount: " + iterator.getRowCount() + ". numDocAdjunto: " + numDocAdjunto + 
                                          ". numDocAEnviar: " + numDocAEnviar);
            
            // Documentos que se van al servicio cargarDocumento.
            if ((numDocAdjunto > 0) && (numDocAEnviar > 0)) {

                fenixAM = (FenixAMImpl) this.getRootApplicationModule();

                request = new CargarDocumentoRequestType();
                listaDocumentos = new ListaDocumentos();
                request.setDocumentos(listaDocumentos);

                // Iteramos de nuevo en el rowset
                iterator.reset();
                while (iterator.hasNext()) {
                    Row row = iterator.next();
                    enviarDoc = Boolean.FALSE;
                    
                    if (row.getAttribute("IdAdjunto") != null) { // Verificamos que no se manden ids null al servicio
                        
                        //Si el estado del documento es diferente de EN_PROCESO se envia en request.
                        if (row.getAttribute("Estado") != null) {
                            if (row.getAttribute("Estado").toString().equalsIgnoreCase("EN_PROCESO")) {
                                
                            } else {
                                enviarDoc = Boolean.TRUE;
                            }
                        } else {
                            enviarDoc = Boolean.TRUE;
                        }
                        
                        if (enviarDoc) {
                            documento = new Documento();
                            documento.setIdAdjunto((Long) row.getAttribute("IdAdjunto"));
                            idDocumento = (Long)row.getAttribute("IdDocumento");
                            request.getDocumentos().getDocumento().add(documento);
                            /*
                            crearRegistroBitacoraDocumentoCliente(idDocumento, usuario, idTarea);
                            */
                            //crear bitacora directamente a BD
                            crearRegistroTbiDocumentoPorDB(idDocumento, usuario, idTarea);
                            
                            //Se agregan a mapa documentos enviados en request
                            adjuntosName.put((Long) row.getAttribute("IdDocumento"), (String) row.getAttribute("Filename"));    
                        }
                    }
                }

                String wsdl = fenixAM.getWsdl(IWsdlLocation.DOCUMENTO); // Creando proxy
                documento12BndQSService = IWsdlLocation.Service.getInstance(Documento12BndQSService.class, wsdl);
                documentoPT = documento12BndQSService.getDocumento12BndQSPort();

                logger.log(ADFLogger.WARNING, "Start invocando Servicio - Cargar Documento-");
                xmlEntrada = fenixAM.writeXMLRequest(request, request.getClass());
                logger.log(ADFLogger.WARNING, xmlEntrada.toString());

                documentoPT.cargarDocumento(request); // Esta operación es one way, no tiene response
            }
            
            iterator.closeRowSetIterator();
            
        } catch(Exception e){
            logger.log(ADFLogger.ERROR, "Error en cargarDocumentos " + e.getClass() + ":" + e.getMessage());
            
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al cargar los documentos, favor de intentar más tarde."));
            throw ex;
        }
        
        return adjuntosName;
    }
    
    private void crearRegistroBitacoraDocumentoCliente(Long idDocumento, String usuario, Integer idTarea) {
            logger.warning("Entra en crearRegistroBitacoraDocumentoCliente");
            logger.warning("idDocumento : " + idDocumento);
            FenixAMImpl fenixAM = null;

            String wsdl = null;
            CrearActualizarBitacoraDocumentoSOAP12BindingQSService crearActualizarBitacoraDocumentoSOAP12BindingQSService = null;
            CrearActualizarBitacoraDocumento crearActualizarBitacoraDocumento = null;
            CrearActualizarBitacoraDocumentoRequest request = null;
            CrearActualizarBitacoraDocumentoResponse response = null;
            BitacoraDocumento bitacoraDocumento = null;
            
            GregorianCalendar fecha = null;
            XMLGregorianCalendar fechaRegistro = null;
            Long idTareaBpm = null;
            Date horaInicio = null;
            try{

                fecha = new GregorianCalendar();
                fechaRegistro = DatatypeFactory.newInstance().newXMLGregorianCalendar(fecha);
                logger.warning("fechaRegistro : " + fechaRegistro);
                idTareaBpm = idTarea.longValue();
                
                fenixAM = (FenixAMImpl) this.getRootApplicationModule();
                wsdl = fenixAM.getWsdl(IWsdlLocation.CREAR_ACTUALIZAR_BIT_DOC);

                crearActualizarBitacoraDocumentoSOAP12BindingQSService =
                    IWsdlLocation.Service.getInstance(CrearActualizarBitacoraDocumentoSOAP12BindingQSService.class, wsdl);
                ;
                crearActualizarBitacoraDocumento =
                    crearActualizarBitacoraDocumentoSOAP12BindingQSService.getCrearActualizarBitacoraDocumentoSOAP12BindingQSPort();

                request = new CrearActualizarBitacoraDocumentoRequest();
                bitacoraDocumento = new BitacoraDocumento();
                bitacoraDocumento.setIdDocumento(idDocumento);
                
                if(null != usuario)
                    bitacoraDocumento.setUsuario(usuario);
                
                bitacoraDocumento.setIdTarea(idTareaBpm);
                bitacoraDocumento.setEstado("EN_PROCESO");
                bitacoraDocumento.setDescripcion("EN_PROCESO : ");
                bitacoraDocumento.setEstatus(Boolean.TRUE);
                bitacoraDocumento.setFechaRegistro(fechaRegistro);
                bitacoraDocumento.setRegistroActivo(Boolean.TRUE);

                request.setBitacoraDocumentoInput(bitacoraDocumento);
                
                horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CREAR_ACTUALIZAR_BIT_DOC);
                response = crearActualizarBitacoraDocumento.crearActualizarBitacoraDocumento(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CREAR_ACTUALIZAR_BIT_DOC, horaInicio);
                
                if(null != response && null != response.getResult() && null != response.getResult().getResult()){
                    switch(response.getResult().getResult()){
                    case OK:
                        logger.warning("Se creo el registro en la bitacora correctamente");
                        if(null != response.getResult().getMessage()){
                            logger.warning("Respuesta :" + response.getResult().getMessage());
                        }
                        break;
                    case ERROR:
                        logger.warning("Error al crear el registro en la bitacora.");
                        String msj = response.getResult().getError().getErrorDescription();
                        logger.warning("Error:  " + msj);
                        break;
                    }

                }else{
                    logger.warning("No se recibió respuesta del servicio.");

                }
                
            }catch (Exception e){
                logger.warning("Error en crearRegistroBitacoraDocumentoCliente.", e);
            }
        }
    
    //Metodo que devuelve Map con lista de documentos actuales que cuentan con idAdjunto
    public Map currentDocumentsClient() {
        logger.warning("Inside currentDocumentsClient.");

        Map<Long, String> adjuntosMap = new HashMap<Long, String>();

        // The recommended way to iterate a View Object is via a RowSetIterator
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();

        // Iteramos en todos los rows para almacenar solo los documentos que cuentan con idAdjunto
        while (iterator.hasNext()) {
            Row row = iterator.next();

            if(row.getAttribute("IdAdjunto") != null) {
                adjuntosMap.put((Long) row.getAttribute("IdDocumento"), (String) row.getAttribute("Filename"));
                logger.warning(row.getAttribute("IdDocumento") + " : " + row.getAttribute("Filename"));
            }
        }
        
        iterator.closeRowSetIterator();
        
        return adjuntosMap;
    }
    
    public Boolean verificarEstadoDocumento() {
        logger.warning("Inside verificarEstadoDocumento.");

        Boolean result = Boolean.FALSE;

        // The recommended way to iterate a View Object is via a RowSetIterator
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();

        while (iterator.hasNext()) {
            Row row = iterator.next();

            if (row.getAttribute("Estado") != null) {
                if (row.getAttribute("Estado").toString().equalsIgnoreCase("EN_PROCESO") ||
                    row.getAttribute("Estado").toString().equalsIgnoreCase("ERROR")) {
                    result = Boolean.TRUE;
                    break;
                }
            }
        }

        iterator.closeRowSetIterator();

        logger.warning("verificarEstadoDocumento: " + result);
        return result;
    }
    
    public List<Long> obtenerDocumentoIdAdjunto(Integer idTarea, Long idCliente, Long numSerie){
        logger.warning("Entra en obtenerDocumentoAdjunto.");
        
        List<Long> listaIdAdjunto = new ArrayList<>();
        Number idTareaBpm = null;
        Number idClienteBpm = null;
        Number numeroSerieDocumento = null;
        Long idAdjunto = null;
        RowSetIterator iterator = null;
        
        try{
            this.executeQuery();
            idTareaBpm = new oracle.jbo.domain.Number(idTarea);
            idClienteBpm = new oracle.jbo.domain.Number(idCliente);
            numeroSerieDocumento = new oracle.jbo.domain.Number(numSerie);
            
            this.setidTarea(idTareaBpm);
            this.setidCliente(idClienteBpm);
            this.setnumeroSerieDocumento(numeroSerieDocumento);
            this.executeQuery(); 
            
            iterator = this.createRowSetIterator(null);
            iterator.reset();
            logger.warning("Numero de registros : " + iterator.getRowCount());
            while(iterator.hasNext()){
                Row row = iterator.next();
                if(null != row.getAttribute("IdAdjunto")){
                   idAdjunto =  (Long)row.getAttribute("IdAdjunto");
                   logger.warning("Valor del id adjunto recuperado : " + idAdjunto);
                   listaIdAdjunto.add(idAdjunto);
                }else{
                    logger.warning("No se recupero el id adjunto para este documento."
                                   + row.getAttribute("IdDocumento"));
                }
            }
            iterator.closeRowSetIterator();
        }catch(Exception e){
            logger.warning("Entra en obtenerDocumentoAdjunto.", e);
        }
        logger.warning("Numero de id's adjuntos recuperados : " + listaIdAdjunto.size());
        return listaIdAdjunto;
    }
    
    public void crearRegistroTbiDocumentoPorDB(Long idDocumento, String usuario, Integer idTarea) {
        logger.warning("Dentro crearRegistroTbiDocumentoPorDB");
        logger.warning("idDocumento : " + idDocumento);
        logger.warning("usuario :"+usuario);
        logger.warning("idTarea :"+idTarea);
        //declaracion de variables
        FenixAMImpl fenixAM = null;
        Boolean resultado = null;

        try{
            //se obtiene la instancia de AM
            fenixAM = (FenixAMImpl) this.getRootApplicationModule();
            //se ejecuta el metodo para insertar
            resultado =fenixAM.getTbiDocumentoVO().crearRegistroTbiDocumento(idDocumento, idTarea, usuario, usuario,
                                                                                null, "EN_PROCESO",new Integer("0"),
                                                                                    new Integer("1"),new Integer("1"), "EN_PROCESO : ");
            logger.warning("resultado de insertar bitacora del idDocumento:"+idDocumento +" es :"+resultado);
        }catch (Exception e){
            logger.severe("Error en crearRegistroTbiDocumentoPorDB", e);
        }
        
        logger.warning("Fuera crearRegistroTbiDocumentoPorDB");
    }
}

