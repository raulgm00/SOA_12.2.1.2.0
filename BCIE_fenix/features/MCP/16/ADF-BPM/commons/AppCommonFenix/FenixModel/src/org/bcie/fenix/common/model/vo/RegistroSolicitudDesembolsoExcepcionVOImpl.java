package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.RegistroSolicitudDesembolsoExcepcionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Oct 15 16:34:14 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegistroSolicitudDesembolsoExcepcionVOImpl extends ViewObjectImpl implements RegistroSolicitudDesembolsoExcepcionVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    
    private static ADFLogger logger = null;
    
    public RegistroSolicitudDesembolsoExcepcionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    
  
    /**
     * Returns the bind variable value for pIdSolicitud.
     * @return bind variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) getNamedWhereClauseParam("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for bind variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {
        logger.warning(" setpIdSolicitud como where clause ->"+value);
        setNamedWhereClauseParam("pIdSolicitud", value);
        //executeQuery();
        logger.warning("termino metodo setpIdSolicitud  ->");
    }
    
    public void setpIdSolicitudRegSolDesExc(Long value) {
        logger.warning(" setpIdSolicitudRegSolDesExc como where clause ->"+value);
        setNamedWhereClauseParam("pIdSolicitud", value);
        executeQuery();
        logger.warning("termino metodo setpIdSolicitudRegSolDesExc  ->");
    }

    /**
     * Returns the bind variable value for pInstanciaProceso.
     * @return bind variable value for pInstanciaProceso
     */
    public String getpInstanciaProceso() {
        return (String) getNamedWhereClauseParam("pInstanciaProceso");
    }

    /**
     * Sets <code>value</code> for bind variable pInstanciaProceso.
     * @param value value to bind as pInstanciaProceso
     */
    public void setpInstanciaProceso(String value) {
        setNamedWhereClauseParam("pInstanciaProceso", value);
    }
    
    public void setpInstanciaProcesoRegSolDesExc(String value) {
        
        logger.warning("setpInstanciaProcesoRegSolDesExc como where clause ->"+value);
        
        String descripcion = null;
        setNamedWhereClauseParam("pInstanciaProceso", value);
        executeQuery();
        
        if(getEstimatedRowCount()>1){
            logger.warning("Entra if getEstimatedRowCount() " + getEstimatedRowCount());
            descripcion = "Excepciones";
            
            RowSetIterator iter = createRowSetIterator(null);
            iter.reset();
            
            String motivos = null;
            RegistroSolicitudDesembolsoExcepcionVORowImpl row = null;
            while(iter.hasNext()){
                row = (RegistroSolicitudDesembolsoExcepcionVORowImpl) iter.next();
                if(row.getTransaccion() != null){
                    if(motivos == null){
                        motivos = "";
                    }
                    motivos += " " + row.getTransaccion();
                }
            }
            iter.closeRowSetIterator();
            if(motivos != null){
                descripcion += motivos;    
            }
            logger.warning("Descripcion de Excepcion con motivos: " + descripcion);
        }else{
             if(getEstimatedRowCount()>0){
                 setCurrentRow(first());
                 logger.warning("Entra else getEstimatedRowCount() " + getEstimatedRowCount());   
                 descripcion = "Excepción por " + String.valueOf(getCurrentRow().getAttribute("Transaccion"));
             }else{
                 descripcion = "";
                 logger.warning("No se encontraron registros de excpeciones");
             }
         } 
        
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) getApplicationModule();
        if (null != gestorDesembolsosAMImpl) {
          
            gestorDesembolsosAMImpl.getDescripcionExcepcionVO1().getDescripcionExcepcion(descripcion);

            
        } else {
            
            logger.warning("La instancia de FenixGestorDesembolsosAMImpl es NULL");
        
        }
        logger.warning("termina metodo setpInstanciaProcesoRegSolDesExc  ->");
    }
    
    
}

