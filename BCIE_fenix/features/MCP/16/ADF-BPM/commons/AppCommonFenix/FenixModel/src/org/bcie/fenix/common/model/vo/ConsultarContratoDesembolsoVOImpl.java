package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ConsultarContratoDesembolsoVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 23 19:11:19 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarContratoDesembolsoVOImpl extends ViewObjectImpl implements ConsultarContratoDesembolsoVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public ConsultarContratoDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean obtenerContratoDesembolsoById(Long id) {
        logger.log(ADFLogger.WARNING, "INTO  obtenerContratoDesembolsoById : ");
        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución
        TInicio = System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio

        Integer contador = 0;
        Boolean respuesta = Boolean.FALSE;

        try {
            if (id == null) {
                respuesta = Boolean.FALSE;
                logger.warning("Ingresa al if... id Contrato_Desembolso es null");
            } else {
                logger.warning("Ingresa al else... se comienza con la busqueda por id del Contrato_Desembolso");
                ViewCriteria criteria =
                    this.getViewCriteriaManager().getViewCriteria("ConsultarContratoDesembolsoCriteriaById");
                criteria.ensureVariableManager().setVariableValue("varId", id);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsConsultarContratoDesembolsoVo = createRowSetIterator(null);
                rowsConsultarContratoDesembolsoVo.reset();
                while (rowsConsultarContratoDesembolsoVo.hasNext()) {
                    ConsultarContratoDesembolsoVORowImpl rowL =
                        (ConsultarContratoDesembolsoVORowImpl) rowsConsultarContratoDesembolsoVo.next();
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);

                try {
                    if (contador > 0)
                        respuesta = Boolean.TRUE;
                    else
                        respuesta = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsConsultarContratoDesembolsoVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerContratoDesembolsoById " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarContratoDesembolsoCriteriaById");
        }

        TFin = System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T
        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia
        logger.log(ADFLogger.WARNING,"Termina  obtenerContratoDesembolsoById con una duracion de: " + tiempo + " segundos");
        return respuesta;
    }
    
    public Boolean insertarCamposFT05(Long id, String bhqTransferenciaFT05, Timestamp fechaEfectivaFT05, Long idTransferenciaFT05){
        logger.log(ADFLogger.WARNING, "INTO  insertarCamposFT05 : ");
        
                if(id == null || null == bhqTransferenciaFT05 || null ==fechaEfectivaFT05 || null==idTransferenciaFT05){
                    logger.warning("Se reciben valores como null");
                        logger.warning("id: "+id);
                        logger.warning("bhqTransferenciaFT05: "+bhqTransferenciaFT05);
                        logger.warning("fechaEfectivaFT05: "+ fechaEfectivaFT05);
                        logger.warning("idTransferenciaFT05: "+ idTransferenciaFT05);
                    return Boolean.FALSE;
                }
                
        Boolean resultado=Boolean.FALSE;
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        logger.warning("Id recibido: "+ id);
        logger.warning("bhqTransferenciaFT05 recibido: "+ bhqTransferenciaFT05);
        logger.warning("fechaEfectivaFT05 recibido: "+ fechaEfectivaFT05);
        logger.warning("idTransferenciaFT05 recibido: "+ idTransferenciaFT05);
        
      
            try{      
                criteria =this.getViewCriteriaManager().getViewCriteria("ConsultarContratoDesembolsoCriteriaById");
                criteria.ensureVariableManager().setVariableValue("varId", id);
                this.applyViewCriteria(criteria);
            
                if(getEstimatedRowCount() > 0){               
                    setCurrentRow(first());
                    filaRecuperada = getCurrentRow();
                    /*
                    logger.warning("Id: "+ id);
                    logger.warning("Valor anterior BhqTransferenciaFt05: "+ filaRecuperada.getAttribute("BhqTransferenciaFt05"));
                    logger.warning("Valor anterior FechaEfectivaFt05: "+ filaRecuperada.getAttribute("FechaEfectivaFt05"));
                    logger.warning("Valor anterior IdTransferenciaFt05: "+ filaRecuperada.getAttribute("IdTransferenciaFt05"));
                        */
                    filaRecuperada.setAttribute("BhqTransferenciaFt05", bhqTransferenciaFT05);
                    filaRecuperada.setAttribute("FechaEfectivaFt05", fechaEfectivaFT05);
                    filaRecuperada.setAttribute("IdTransferenciaFt05", idTransferenciaFT05);
                        try{
                                try{
                                    logger.warning("Se realiza primer intento de Commit");
                                    getDBTransaction().commit();
                                    resultado = Boolean.TRUE;
                                    logger.warning("Se hace commit a la DB");
                                }catch(Exception e){
                                    logger.warning("Primer intento de commit fallido", e);
                                     try{
                                        logger.warning("Se realiza segundo intento de Commit");
                                        getDBTransaction().commit();
                                        resultado = Boolean.TRUE;
                                        logger.warning("Se ejecuta segundo commit correcto");
                                    }catch(Exception ex){
                                        logger.severe("Segundo intento de commit con error", ex);
                                        getDBTransaction().rollback();
                                        resultado = Boolean.FALSE;
                                    }
                                }
                            /*
                                logger.warning("Nuevo valor BhqTransferenciaFt05: "+ filaRecuperada.getAttribute("BhqTransferenciaFt05"));
                                logger.warning("Nuevo valor FechaEfectivaFt05: "+ filaRecuperada.getAttribute("FechaEfectivaFt05"));
                                logger.warning("Nuevo valor IdTransferenciaFt05: "+ filaRecuperada.getAttribute("IdTransferenciaFt05"));
                          */
                            }catch(Exception e){
                                logger.log(ADFLogger.ERROR, "Error al intentar hacer commit en el metodo insertarCamposFT05 ->: "+e.getMessage());
                                getDBTransaction().rollback();
                                resultado = Boolean.FALSE;
                            }
                    
                   
                }else{
                     logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
                     getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarContratoDesembolsoCriteriaById");
                     resultado=Boolean.FALSE;
                     executeQuery();
                    }
            }catch(Exception e){
                logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e.getClass() + ":" + e.getMessage());     
            }finally{
               getViewCriteriaManager().removeApplyViewCriteriaName("ConsultarContratoDesembolsoCriteriaById");              
            }
        
           
        logger.warning("*** Termina metodo insertarCamposFT05");
        
        return resultado;
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }
    
    public void afterCommit(TransactionEvent event){
        executeQuery();
    }

    @Override
    public void afterRollback(TransactionEvent transactionEvent) {
        
        executeQuery();
        
        // TODO Implement this method
        super.afterRollback(transactionEvent);
    }
}

