package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.EvidenciasSolicitudVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Oct 21 19:08:00 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class EvidenciasSolicitudVOImpl extends ViewObjectImpl implements EvidenciasSolicitudVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    
    public EvidenciasSolicitudVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for pIdSolicitud.
     * @return bind variable value for pIdSolicitud
     */
    public Long getpIdSolicitud() {
        return (Long) getNamedWhereClauseParam("pIdSolicitud");
    }

    /**
     * Sets <code>value</code> for bind variable pIdSolicitud.
     * @param value value to bind as pIdSolicitud
     */
    public void setpIdSolicitud(Long value) {
        setNamedWhereClauseParam("pIdSolicitud", value);
    }
    
    public void setpIdSolicitudEviSol(Long value) {
        setNamedWhereClauseParam("pIdSolicitud", value);
    }
    
    public Long obtenerEstimatedRowCount(Long idSolicitud) {
        Long pIdSolicitudActual = null;
        Long estimatedRowCount = null;
        
        // Obtenemos el valor del varIdSolicitud actual
        pIdSolicitudActual = this.getpIdSolicitud();
        
        // Filtramos query con el idSolicitud requerido
        setpIdSolicitud(idSolicitud);
        this.executeQuery();
        estimatedRowCount = this.getEstimatedRowCount();
        
        // Regresamos el query a su valor anterior
        setpIdSolicitud(pIdSolicitudActual);
        this.executeQuery();
        
        return estimatedRowCount;
    }
    
    public Boolean obtenerEvidenciasByIdSolicitud(Long idSolicitud) {

        logger.log(ADFLogger.WARNING, "INTO  obtenerEvidenciasByIdSolicitud : ");
        Integer contador = 0;
        Boolean validaEvidencias = Boolean.FALSE;

        try {
            if (idSolicitud == null) {
                validaEvidencias = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("EvidenciasSolicitudVOCriteriaByIdSolicitud");
                criteria.ensureVariableManager().setVariableValue("varIdSolicitud", idSolicitud);
                this.applyViewCriteria(criteria);
                this.executeQuery();

                RowSetIterator rowsEvidenciaSolicitudVo = createRowSetIterator(null);
                rowsEvidenciaSolicitudVo.reset();
                while (rowsEvidenciaSolicitudVo.hasNext()) {
                    EvidenciasSolicitudVORowImpl rowL = (EvidenciasSolicitudVORowImpl) rowsEvidenciaSolicitudVo.next();
                    contador++;
                }
                logger.warning("Numero de rows: " + contador);

                try {
                    if (contador > 0)
                        validaEvidencias = Boolean.TRUE;
                    else
                        validaEvidencias = Boolean.FALSE;
                } catch (Exception e) {
                    logger.warning("Numero de rows: vacío");
                }
                rowsEvidenciaSolicitudVo.closeRowSetIterator();
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerEvidenciasByIdSolicitud... ", ex);
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("EvidenciasSolicitudVOCriteriaByIdSolicitud");
        }
        
        logger.warning("valor a retornar validaEvidencias: " + validaEvidencias);
        logger.log(ADFLogger.WARNING, "Finaliza  obtenerEvidenciasByIdSolicitud : ");
        return validaEvidencias;
    }

    /**
     * Returns the variable value for varIdSolicitud.
     * @return variable value for varIdSolicitud
     */
    public Long getvarIdSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("varIdSolicitud");
    }

    /**
     * Sets <code>value</code> for variable varIdSolicitud.
     * @param value value to bind as varIdSolicitud
     */
    public void setvarIdSolicitud(Long value) {
        ensureVariableManager().setVariableValue("varIdSolicitud", value);
    }
}

