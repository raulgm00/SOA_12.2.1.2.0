package org.bcie.fenix.common.model.vo;

import java.util.logging.Logger;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.AccionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jun 16 17:59:18 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class AccionVOImpl extends ViewObjectImpl implements AccionVO {
    
    private static ADFLogger logger = null;
    
    public static final String BUSCAR_ACCION_POR_ID = "AccionVOCriteria";
    /**
     * This is the default constructor (do not remove).
     */
    public AccionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    /**
     * Returns the variable value for varIdAccion.
     * @return variable value for varIdAccion
     */
    public Long getvarIdAccion() {
        return (Long) ensureVariableManager().getVariableValue("varIdAccion");
    }

    /**
     * Sets <code>value</code> for variable varIdAccion.
     * @param value value to bind as varIdAccion
     */
    public void setvarIdAccion(Long value) {
        ensureVariableManager().setVariableValue("varIdAccion", value);
    }
    
    public Row getAccionObtenido(Long idAccion, Integer vencida) {
        logger.log(ADFLogger.WARNING, "Inside getSeguimientoInstanciaCliente.");
        logger.warning("id accion: " +idAccion);
        logger.warning("vencida: " +vencida);
            Row seguimientoRow = null;
            ViewCriteria criteriaByAccion = null;
            if(idAccion != null) {
                   criteriaByAccion=this.getViewCriteriaManager().getViewCriteria("AccionVOCriteria");
                    criteriaByAccion.ensureVariableManager().setVariableValue("varIdAccion", idAccion);
                    
                    this.applyViewCriteria(criteriaByAccion);
                    this.executeQuery();
                    
                    // 2) Asignamos valor de retorno
                    if(this.getEstimatedRowCount() > 0) {
                    seguimientoRow = this.getRowAtRangeIndex(0);
                    if(vencida.compareTo(FenixModelConstants.ESTADO_ACCION_VENCIDA)==0){
                        try{
                            seguimientoRow.setAttribute("IdEstadoAccion", FenixModelConstants.ESTADO_ACCION_VENCIDA);
                            getDBTransaction().commit();
                        }catch(Exception ex){
                            ex.printStackTrace();
                            }
                        }
                    
                        if(vencida.compareTo(FenixModelConstants.ESTADO_ACCION_PORATENDER)==0){
                            try{
                                seguimientoRow.setAttribute("IdEstadoAccion", FenixModelConstants.ESTADO_ACCION_PORATENDER);
                                getDBTransaction().commit();
                            }catch(Exception ex){
                                ex.printStackTrace();
                                }
                            }
                    
                    // Removemos criteria del VO
                    this.getViewCriteriaManager().removeApplyViewCriteriaName("AccionVOCriteria");
                    
                    // Re-ejecutamos el query 
                   // this.executeQuery();
                    }
                    }
        return seguimientoRow;
        }
    
    /** actualizarEstadoAccion"
     * Metodo que actualiza el campo "IdEstadoAccion" de la tabla "accion"
     * Realiza un filtro por idCliente,idEstadoAccion,IdTcaCategoriaAccion al recuperar todos los rows con 
     * este criterio de busqueda actualizamos con el nuevo valor "idEstadoAccionNuevo"
    * @param  idCliente -- Sirve para realizar un filtro de los registros
    * @param idEstadoAccion -- Sirve para realizar un filtro de los registros
    * @param idEstadoAccionNuevo -- El nuevo idEstadoAccion al cual se va actualizar
    * @param IdTcaCategoriaAccion -- Sirve para realizar un filtro de los registros
    * @since 09/08/2016
    * @by Gabriel Niño Rosales
    * Recordatorio aplicarlo tambien cuando sea de operacion
    */
    public void actualizarEstadoAccion(Long idCliente,Integer idEstadoAccion,Integer idEstadoAccionNuevo,
                                                    Integer IdTcaCategoriaAccion){
            logger.log(ADFLogger.WARNING, "Inside actualizarEstadoAccion.");
            try {
            ViewCriteria criteria = null;
            criteria=this.getViewCriteriaManager().getViewCriteria("AccionVOCriteriaMultiple");
            criteria.ensureVariableManager().setVariableValue("varIdCliente", idCliente);
            criteria.ensureVariableManager().setVariableValue("varIdEstadoAccion", idEstadoAccion);
            criteria.ensureVariableManager().setVariableValue("varIdTcaCategoriaAccion", IdTcaCategoriaAccion);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            this.setRangeSize(-1);
            for(Row row : this.getAllRowsInRange()){
                logger.log(ADFLogger.WARNING, "IdAccion por actualizar. "+row.getAttribute("Id"));
                row.setAttribute("IdEstadoAccion", idEstadoAccionNuevo);
                try{
                    getDBTransaction().commit();
                }catch(Exception e){
                    logger.severe("Error en commit de actualizarEstadoAccion",e);
                    try{
                        logger.warning("Se ejecuta segundo commit");
                        getDBTransaction().commit();
                    }catch(Exception ex){
                        logger.severe("Error en el segundo commit de actualizarEstadoAccion",ex);
                    }
                }
            }
            
            }catch(Exception e){
                logger.log(ADFLogger.ERROR, "Error en inicioLAFT " + e.getClass() + ":" + e.getMessage());
            
            } finally {
                //Siempre removemos el criterio de busqueda
                this.getViewCriteriaManager().removeApplyViewCriteriaName("AccionVOCriteriaMultiple");
            }

        }

    /**
     * Returns the variable value for varIdTcaCategoriaAccion.
     * @return variable value for varIdTcaCategoriaAccion
     */
    public Integer getvarIdTcaCategoriaAccion() {
        return (Integer) ensureVariableManager().getVariableValue("varIdTcaCategoriaAccion");
    }

    /**
     * Sets <code>value</code> for variable varIdTcaCategoriaAccion.
     * @param value value to bind as varIdTcaCategoriaAccion
     */
    public void setvarIdTcaCategoriaAccion(Integer value) {
        ensureVariableManager().setVariableValue("varIdTcaCategoriaAccion", value);
    }

    /**
     * Returns the variable value for varIdEstadoAccion.
     * @return variable value for varIdEstadoAccion
     */
    public Integer getvarIdEstadoAccion() {
        return (Integer) ensureVariableManager().getVariableValue("varIdEstadoAccion");
    }

    /**
     * Sets <code>value</code> for variable varIdEstadoAccion.
     * @param value value to bind as varIdEstadoAccion
     */
    public void setvarIdEstadoAccion(Integer value) {
        ensureVariableManager().setVariableValue("varIdEstadoAccion", value);
    }
    
    public Boolean obtenerRegistroAccion(Long idAccion){
        logger.warning("Inicia metodo obtenerRegistroAccion");
        Boolean resultado = Boolean.FALSE;
        
        if(null == idAccion){
            logger.warning("El idAccion requerido es NULL");
            return resultado;
        }
        
        setvarIdAccion(idAccion);
        
        ViewCriteria vc = getViewCriteria(BUSCAR_ACCION_POR_ID);
        applyViewCriteria(vc);
        executeQuery();
        
        logger.warning("Filas obtenidas: " + getEstimatedRowCount());
        if(getEstimatedRowCount() <= 0){
            logger.warning("No existe registro de Accion con id: " + idAccion);
        } else {
            setCurrentRow(first());
            Row row = getCurrentRow();
            
            logger.warning("Registro obtenido con id de accion: " + row.getAttribute("Id"));
            resultado = Boolean.TRUE;
        }
        
        logger.warning("Termina metodo obtenerRegistroAccion");
        return resultado;
    }
    
    public Boolean actualizarEstadoAccion(Integer idEstadoAccion){
        logger.warning("Inicia metodo actualizarEstadoAccion");
        Boolean resultado = Boolean.FALSE;
        
        if(null == idEstadoAccion){
            logger.warning("IdEstadoAccion requerido es NULL");
            return resultado;
        }
        
        if(getEstimatedRowCount() == 1){
            Row row = getCurrentRow();
            logger.warning("Id accion a ser editado: " + row.getAttribute("Id"));
            
            row.setAttribute("IdEstadoAccion", idEstadoAccion);
            resultado = Boolean.TRUE;
            logger.warning("Atributo idEstadoAccion actualizado");
        }else{
            logger.warning("No existe row o exite mas de un row a ser editado");
        }
        
        logger.warning("Termina metodo actualizarEstadoAccion");
        return resultado;
    }

    /**
     * Returns the variable value for varIdCliente.
     * @return variable value for varIdCliente
     */
    public Long getvarIdCliente() {
        return (Long) ensureVariableManager().getVariableValue("varIdCliente");
    }

    /**
     * Sets <code>value</code> for variable varIdCliente.
     * @param value value to bind as varIdCliente
     */
    public void setvarIdCliente(Long value) {
        ensureVariableManager().setVariableValue("varIdCliente", value);
    }
}

