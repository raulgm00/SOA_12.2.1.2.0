package org.bcie.fenix.common.model.vo;

import java.util.ResourceBundle;

import oracle.adf.share.logging.ADFLogger;

import oracle.javatools.resourcebundle.BundleFactory;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.domain.Number;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jbo.server.ViewRowImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.common.FenixAM;
import org.bcie.fenix.common.model.vo.common.TccElementosOperVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jan 29 18:37:09 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TccElementosOperVOImpl extends ViewObjectImpl implements TccElementosOperVO {
    
    private static ADFLogger logger = null;
    
    /**
     * Define classpath y Resource Bundle
     */
    public static final String BUNDLE = "org.bcie.fenix.common.model.FenixModelBundle";
    
    // Variables para guardar estado antes del rollback
    Key currentRowKey; 
    int firstRowInRange;
    int currentRowIndexInRange;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TccElementosOperVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Number getpIdOperacion() {
        return (Number) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Number value) {
        setNamedWhereClauseParam("pIdOperacion", value);
    }
    
    /**
     * Asigna el path del icono segun el estado de la tcc de cada registro
     */
    public void asignaIconoEstatusPath(){
        
        if(getEstimatedRowCount() > 0){
            
            RowSetIterator iter  = createRowSetIterator(null);
            if(iter != null){
                TccElementosOperVORowImpl row = null;
                    
                iter.reset();
                while(iter.hasNext()){
                    
                    row = (TccElementosOperVORowImpl) iter.next();
                    if(row.getIdEstadoTcc() != null){
                        
                        //Asigna path de icono segun el estado de TCC
                        String path = obtenerIconoPathPorEstadoTcc(row.getIdEstadoTcc().intValue());
                        row.seticonPath(path);
                    }
                    
                    if(row.getIdSubEstadoTcc() != null){
                        
                        //Asigna path de icono segun el sub estado TCC
                        String path = obtenerIconoPathPorEstadoTcc(row.getIdSubEstadoTcc().intValue());
                        row.seticonPathSubEstado(path);
                    }
                }
                iter.closeRowSetIterator();
            }
        }
    }
    
    /**
     * Obtiene el nombre y ruta de archivo del icono para el estado de TCC
     * @param estadoTcc contiene id de estado de TCC
     * @return devuelve cadena con el path del icono de estado TCC
     */
    public String obtenerIconoPathPorEstadoTcc(Integer estadoTcc){
        
        String iconoPath = null;
        String key = null;
        if(estadoTcc != null){
            switch (estadoTcc){
                case 1: //Sugerida
                    key = "estado.tcc.icono.path.1";
                break;
                case 2: //Por aplicar
                    key = "estado.tcc.icono.path.2";
                break;
                case 3: //Por validar dispensa
                    key = "estado.tcc.icono.path.3";
                break;
                case 4: //Por pagar
                    key = "estado.tcc.icono.path.4";
                break;
                case 5: //Dispensada
                    key = "estado.tcc.icono.path.5";
                break;
                case 6: //Pagada
                    key = "estado.tcc.icono.path.6";
                break;
                case 7: //Nueva
                    key = "estado.tcc.icono.path.7";
                break;
                case 8: //Mandatoria
                    key = "estado.tcc.icono.path.8";
                break;
                case 9: //Editada
                    key = "estado.tcc.icono.path.9";
                break;
                case 10: //Eliminada
                    key = "estado.tcc.icono.path.10";
                break;
                case 11: //Mandatoria Editada
                    key = "estado.tcc.icono.path.11";
                break;
                case 12: //Exceptuada
                    key = "estado.tcc.icono.path.12";
                break;
                case 13: //Por aprobar
                    key = "estado.tcc.icono.path.13";
                break;
                case 14: //Aprobada
                    key = "estado.tcc.icono.path.14";
                break;
                case 15: //Formalizada
                    key = "estado.tcc.icono.path.15";
                break;
                case 16: //Nueva por aprobar
                    key = "estado.tcc.icono.path.16";
                break;
                case 17: //Por dispensar
                    key = "estado.tcc.icono.path.17";
                break;
                case 18: //Por modificar
                    key = "estado.tcc.icono.path.18";
                break;
                case 19: //Por eliminar
                    key = "estado.tcc.icono.path.19";
                break;
                case 20: //Enmienda cancelada
                    key = "estado.tcc.icono.path.20";
                break;
                case 21: //Por validar
                    key = "estado.tcc.icono.path.21";
                break;
                case 22: //Eliminada
                    key = "estado.tcc.icono.path.22";
                break;
                case 23: //Por validar
                    key = "estado.tcc.icono.path.23";
                break;
                case 24: //Con evidencia
                    key = "estado.tcc.icono.path.24";
                break;
                case 25: //Valida parcialmente
                    key = "estado.tcc.icono.path.25";
                break;
                case 26: //Validada
                    key = "estado.tcc.icono.path.26";
                break;
                case 27: //Aprobada editada
                    key = "estado.tcc.icono.path.27";
                break;
                case 28: //Validada
                    key = "estado.tcc.icono.path.28";
                break;
                default:
                    key = "estado.tcc.icono.path.default";
                break;
            }
        }else{
            //Asigna path para valores por defecto
            key = "estado.tcc.icono.path.default";
        }
        
        iconoPath = getStringValueBundle(key);
        
        return iconoPath;
    }
    
    public String getStringValueBundle(String key){
        ResourceBundle rb = BundleFactory.getBundle(BUNDLE);
        String value = rb.getString(key);
        return value;
    }
    
    public void beforeRollback(TransactionEvent TransactionEvent) {
        logger.log(ADFLogger.WARNING, "Inside beforeRollback.");
        if (isExecuted()) {
            ViewRowImpl currentRow = (ViewRowImpl)getCurrentRow();
            if (currentRow != null) {
                byte newRowState = currentRow.getNewRowState();
                if (newRowState != Row.STATUS_INITIALIZED && newRowState != Row.STATUS_NEW) {
                    currentRowKey = currentRow.getKey();
                    firstRowInRange = getRangeStart();
                    int rangeIndexOfCurrentRow = getRangeIndexOf(currentRow);
                    currentRowIndexInRange = rangeIndexOfCurrentRow;
                }
            }
        }
        super.beforeRollback(TransactionEvent);
    }
    
    public void afterRollback(TransactionEvent TransactionEvent) {
        logger.log(ADFLogger.WARNING, "Inside afterRollback.");
        super.afterRollback(TransactionEvent);
        if (currentRowKey != null) {
            executeQuery();
            Key k = new Key(currentRowKey.getAttributeValues());
            Row[] found = findByKey(k, 1);
            
            if (found != null && found.length == 1) {
                Row r = getRow(k);
                setCurrentRow(r);
                if (currentRowIndexInRange >= 0) {
                    scrollRangeTo(r, currentRowIndexInRange);
                }
            }
        }
        currentRowKey = null;
    }
    
    /**
     * Borrar un elemento del Grid, modificando su Estado TCC a Eliminada (Id Estado TCC = 22 y Id Sub Estado TCC = 10)
     * @param tipoTcc contiene el tipo de TCC (1 = Termino, 2 = Condicion y 3 = Comision)
     * @param idTcc contiene el id del elemento TCC
     */
    public void borrarElementoTCCGrid(Number tipoTcc,
                                      Number idTcc){
        logger.warning("Entrando en borrarElementoTCCGrid.");
        logger.warning("tipoTcc: " + tipoTcc);
        logger.warning("idTcc: " + idTcc);

        if(tipoTcc != null &&
           idTcc != null){
            
            FenixAMImpl am = null;
            am = (FenixAMImpl) getApplicationModule();
            if(am != null){
                
                TccTerminoVORowImpl terRow = null;
                TccCondicionVORowImpl conRow = null;
                TccComisionVORowImpl comRow = null;
                
                if(FenixModelConstants.ID_TERMINO.equals(new Integer(tipoTcc.intValue()))){
                    
                    logger.warning("Busca el registro del Termino con Id: " + idTcc.toString());
                    
                    am.getTccTerminoGridVO().buscarTerminoPorId(idTcc);   
                    if(am.getTccTerminoGridVO().getCurrentRow() != null){
                    
                        terRow = (TccTerminoVORowImpl) am.getTccTerminoGridVO().getCurrentRow();
                        //terRow.remove();
                        terRow.setIdTcaEstadoTcc(new Integer(FenixModelConstants.ESTADO_TCC_ELIMINADA));
                        terRow.setIdTcaSubEstadoTcc(new Integer(FenixModelConstants.SUBESTADO_TCC_ELIMINADA));
                    }else{
                        logger.severe("No se encontro registro del Termino");
                    }
                }
                if(FenixModelConstants.ID_CONDICION.equals(new Integer(tipoTcc.intValue()))){
                    
                    logger.warning("Busca el registro de la Condicion con Id: " + idTcc.toString());
                    
                    am.getTccCondicionGridVO().buscarCondicionPorId(idTcc);
                    if(am.getTccCondicionGridVO().getCurrentRow() != null){
                        
                        conRow = (TccCondicionVORowImpl) am.getTccCondicionGridVO().getCurrentRow();
                        //conRow.remove();
                        conRow.setIdTcaEstadoTcc(new Integer(FenixModelConstants.ESTADO_TCC_ELIMINADA));
                        conRow.setIdTcaSubEstadoTcc(new Integer(FenixModelConstants.SUBESTADO_TCC_ELIMINADA));
                    }else{
                        logger.severe("No se encontro registro de la Condicion");
                    }
                }
                if(FenixModelConstants.ID_COMISION.equals(new Integer(tipoTcc.intValue()))){
                    
                    logger.warning("Busca el registro de la Comision con Id: " + idTcc.toString());
                    
                    am.getTccComisionGridVO().buscarComisionPorId(idTcc);
                    if(am.getTccComisionGridVO().getCurrentRow() != null){
                        
                        comRow = (TccComisionVORowImpl) am.getTccComisionGridVO().getCurrentRow();
                        //comRow.remove();
                        comRow.setIdTcaEstadoTcc(new Integer(FenixModelConstants.ESTADO_TCC_ELIMINADA));
                        comRow.setIdTcaSubEstadoTcc(new Integer(FenixModelConstants.SUBESTADO_TCC_ELIMINADA));
                    }else{
                        logger.severe("No se encontro registro de la Comision");
                    }
                }
                
//                if(terRow != null ||
//                   conRow != null ||
//                   comRow != null){
                    
                    try{
                        logger.warning("Ejecuta commit");
                        am.getDBTransaction().commit();
                    }catch(Exception e){
                        logger.warning("Error al ejecutar guardar los cambios", e);
                        am.getDBTransaction().rollback();
                    }
//                }else{
//                    logger.warning("No hay cambios que guardar");
//                }
            }else{
                logger.severe("Error al obtener instancia de Application Module");
            }
        }else{
            logger.warning("Parametros no recibidos, no hay elementos que borrar");
        }
    }

    public Boolean eliminarTccAlCancelarEnmiendas(){
        logger.warning("Entra en eliminarTccAlCancelarProceso");
        
        FenixAMImpl am = null;
        am = (FenixAMImpl) getApplicationModule();
        Boolean esEliminado = Boolean.TRUE;
        RowSetIterator iterator = null;
        TccTerminoVORowImpl terRow = null;
        TccCondicionVORowImpl conRow = null;
        TccComisionVORowImpl comRow = null;
        Number idTipoTcc = null;
        Number idTcc = null;
        Integer contador = 0;
        
        try{
            iterator = this.createRowSetIterator(null);
            iterator.reset();
            while(iterator.hasNext()){
                TccElementosOperVORowImpl tccVORowImpl = (TccElementosOperVORowImpl)iterator.next();
                if(null != tccVORowImpl.getIdTipoTcc()){
                    idTipoTcc = tccVORowImpl.getIdLink();
                    idTcc = tccVORowImpl.getIdTcc();
                    logger.warning("Tipo Tcc : " + idTipoTcc);
                    
                    if(FenixModelConstants.ID_TERMINO.equals(new Integer(idTipoTcc.intValue()))){
                        
                        logger.warning("Busca el registro del Termino con Id: " + idTcc.toString());
                        
                        am.getTccTerminoGridVO().buscarTerminoPorId(idTcc);   
                        if(am.getTccTerminoGridVO().getCurrentRow() != null){
                        
                            terRow = (TccTerminoVORowImpl) am.getTccTerminoGridVO().getCurrentRow();
                            //terRow.remove();
                            terRow.setIdTcaEstadoTcc(new Integer(FenixModelConstants.ESTADO_TCC_ELIMINADA));
                            terRow.setIdTcaSubEstadoTcc(new Integer(FenixModelConstants.SUBESTADO_TCC_ELIMINADA));
                        }else{
                            logger.severe("No se encontro registro del Termino");
                        }
                    }
                    if(FenixModelConstants.ID_CONDICION.equals(new Integer(idTipoTcc.intValue()))){
                        
                        logger.warning("Busca el registro de la Condicion con Id: " + idTcc.toString());
                        
                        am.getTccCondicionGridVO().buscarCondicionPorId(idTcc);
                        if(am.getTccCondicionGridVO().getCurrentRow() != null){
                            
                            conRow = (TccCondicionVORowImpl) am.getTccCondicionGridVO().getCurrentRow();
                            conRow.remove();
                        }else{
                            logger.severe("No se encontro registro de la Condicion");
                        }
                    }
                    if(FenixModelConstants.ID_COMISION.equals(new Integer(idTipoTcc.intValue()))){
                        
                        logger.warning("Busca el registro de la Comision con Id: " + idTcc.toString());
                        
                        am.getTccComisionGridVO().buscarComisionPorId(idTcc);
                        if(am.getTccComisionGridVO().getCurrentRow() != null){
                            
                            comRow = (TccComisionVORowImpl) am.getTccComisionGridVO().getCurrentRow();
                            comRow.remove();
                        }else{
                            logger.severe("No se encontro registro de la Comision");
                        }
                    }
                    
                }else{
                    logger.warning("El tipo de tcc es nulo.");
                }
                contador++;
            }
            iterator.closeRowSetIterator();
            
            if(contador > 0){
                logger.warning("Ejecuta commit");
                am.getDBTransaction().commit();
            }else{
                logger.warning("No se encontraron registros, no se ejecuta el commit.");
            }
        }catch(Exception e){
            logger.warning("Error en eliminarTccAlCancelarEnmiendas.", e);
            esEliminado = Boolean.FALSE;
            am.getDBTransaction().rollback();
        }
        return esEliminado;
    }
    /**
     * Returns the bind variable value for pIdEnmienda.
     * @return bind variable value for pIdEnmienda
     */
    public Number getpIdEnmienda() {
        return (Number) getNamedWhereClauseParam("pIdEnmienda");
    }

    /**
     * Sets <code>value</code> for bind variable pIdEnmienda.
     * @param value value to bind as pIdEnmienda
     */
    public void setpIdEnmienda(Number value) {
        setNamedWhereClauseParam("pIdEnmienda", value);
    }
}

