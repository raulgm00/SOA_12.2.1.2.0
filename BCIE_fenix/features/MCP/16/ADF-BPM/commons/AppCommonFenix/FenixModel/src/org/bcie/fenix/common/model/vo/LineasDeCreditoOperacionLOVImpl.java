package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.ViewCriteriaRow;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.LineasDeCreditoOperacionLOV;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 09 21:33:32 VET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class LineasDeCreditoOperacionLOVImpl extends ViewObjectImpl implements LineasDeCreditoOperacionLOV {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public LineasDeCreditoOperacionLOVImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    public void filterResultsByClientOperations(Long idCliente, String operations) {
        //To Fetch All Results
        this.setRangeSize(-1);

        //Set the client id
        this.setidClienteBind(idCliente);

        if (operations != null && !operations.isEmpty()) {
            //Create the view criteria object
            ViewCriteria operationsCriteria = this.createViewCriteria();
            operationsCriteria.setName("operationsCriteria");

            //Build the IN clause
            //Note: there can't be any spaces after each comma
            String inClause = "IN (" + operations + ")";
            ViewCriteriaRow criteriaRow = operationsCriteria.createViewCriteriaRow();
            criteriaRow.setAttribute(LineasDeCreditoOperacionLOVRowImpl.IDOPERACION, inClause);
            operationsCriteria.addElement(criteriaRow);
            this.applyViewCriteria(operationsCriteria, true);
        } else {
            //Remove the criteria in case no operations were specified
            this.removeApplyViewCriteriaName("operationsCriteria");
        }
        this.executeQuery();
    }
    
    /**
     * Metodo para ejecutar el view Criteria
     * */
        public void cargaLineas(Long idCliente) {
            logger.warning("idCliente: "+ idCliente);
            logger.log(ADFLogger.TRACE, "Inside LOVOPERACIONES.");
            ViewCriteria criteriaByClienteInstanciaProceso = null;

            criteriaByClienteInstanciaProceso = this.getViewCriteriaManager().getViewCriteria("LineasDeCreditoOperacionLOVCriteria");
                if (null != idCliente) {
                setidClienteBind(idCliente);
                this.applyViewCriteria(criteriaByClienteInstanciaProceso);
                this.executeQuery();

                // 2) Asignamos valor de retorno
                if (this.getEstimatedRowCount() <= 0) {
                    logger.warning("No existen registros");
                }
                else{
                        logger.warning("registros encontrados: "+ getEstimatedRowCount());
                    }
            }
                else{
                        logger.warning("no se encontro el cliente");
                    }
        }

    /**
     * Returns the variable value for idClienteBind.
     * @return variable value for idClienteBind
     */
    public Long getidClienteBind() {
        return (Long) ensureVariableManager().getVariableValue("idClienteBind");
    }

    /**
     * Sets <code>value</code> for variable idClienteBind.
     * @param value value to bind as idClienteBind
     */
    public void setidClienteBind(Long value) {
        ensureVariableManager().setVariableValue("idClienteBind", value);
    }
}

