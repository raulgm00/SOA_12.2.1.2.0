package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import oracle.jbo.domain.Number;

import org.bcie.fenix.common.model.vo.common.VotoAprobacionLOV;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Feb 18 17:18:28 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VotoAprobacionLOVImpl extends ViewObjectImpl implements VotoAprobacionLOV {
    
    /**
     * Define Log de la aplicacion
     */
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(VotoActualAprobLOVImpl.class);
    
    /**
     * Define el nombre de view criteria para buscar votos por id de solicitud aprobacion
     */
    public static final String BUSCAR_POR_ID_SOLICITUD_VC = "BuscarVotosPorIdSolicitudVC";
    
    /**
     * Indicador de voto fuera de sistema
     */
    public static final Integer ID_VOTO_FUERA_SISTEMA = 1;
    
    /**
     * This is the default constructor (do not remove).
     */
    public VotoAprobacionLOVImpl() {
    }

    /**
     * Returns the variable value for pIdSolicitudAprobacion.
     * @return variable value for pIdSolicitudAprobacion
     */
    public Long getpIdSolicitudAprobacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdSolicitudAprobacion");
    }

    /**
     * Sets <code>value</code> for variable pIdSolicitudAprobacion.
     * @param value value to bind as pIdSolicitudAprobacion
     */
    public void setpIdSolicitudAprobacion(Long value) {
        ensureVariableManager().setVariableValue("pIdSolicitudAprobacion", value);
    }
    
    /**
     * Realiza la busqueda de votos aprobacion por Solicitud de Aprobacion
     * @param idSolicitudAprobacion contiene Id de Solicitud de Aprobacion
     */
    public void buscarPorIdSolicitudAprobacion(Number idSolicitudAprobacion){
        
        if(idSolicitudAprobacion == null){
            return;
        }
        
        LOGGER.warning("Asigna Id de Solicitud: " + idSolicitudAprobacion.longValue());
        setpIdSolicitudAprobacion(idSolicitudAprobacion.longValue());
        
        ViewCriteria vc = null;
        try{
            vc = getViewCriteria(BUSCAR_POR_ID_SOLICITUD_VC);
            
            LOGGER.warning("Aplica View Criteria: " + BUSCAR_POR_ID_SOLICITUD_VC);
            appendViewCriteria(vc);
            executeQuery();
            
            setCurrentRow(first());
        }catch(Exception e){
            LOGGER.severe("Error al ejecutar view criteria: " + BUSCAR_POR_ID_SOLICITUD_VC);
        }
    }
    
    /**
     * Realiza busqueda de votos por solicitud de aprobacion y verifica si existe un voto fuera de sistema
     * @param idSolicitudAprobacion contiene id de solicitud aprobacion
     * @return devuelve valor booleano, true indica que si existe el voto fuera de sistema o false en caso contrario
     */
    public boolean existeVotoFueraSistema(Number idSolicitudAprobacion){
        
        LOGGER.entering(VotoAprobacionLOVImpl.class.getName(), 
                        "existeVotoFueraSistema",
                        idSolicitudAprobacion);
        
        boolean existe = false;
        
        buscarPorIdSolicitudAprobacion(idSolicitudAprobacion);
        
        LOGGER.warning("Verifica cantidad de registros de votos: " + getEstimatedRowCount());
        if(getEstimatedRowCount() > 0 ){
            
            LOGGER.warning("Itera en busqueda de votos fuera de sistema");
            RowSetIterator iter = createRowSetIterator(null);
            if(iter != null){
                
                VotoAprobacionLOVRowImpl row = null;
                
                iter.reset();
                while(iter.hasNext()){
                    
                    row = (VotoAprobacionLOVRowImpl) iter.next();
                    if(row.getVaEsFueraDeSistema() != null){
                        if(ID_VOTO_FUERA_SISTEMA.equals(row.getVaEsFueraDeSistema())){
                            existe = true;
                            LOGGER.warning("Existe voto fuera de sistema");
                            break;
                        }
                    }
                }
                iter.closeRowSetIterator();
            }
        }
        
        if(!existe){
            LOGGER.warning("No existe voto fuera de sistema");
        }
        
        LOGGER.exiting(VotoAprobacionLOVImpl.class.getName(), 
                       "existeVotoFueraSistema",
                       existe);
        return existe;
    }
}

