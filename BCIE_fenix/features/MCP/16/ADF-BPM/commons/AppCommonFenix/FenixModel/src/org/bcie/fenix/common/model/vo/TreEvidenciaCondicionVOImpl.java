package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.TreEvidenciaCondicionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jan 20 12:23:57 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreEvidenciaCondicionVOImpl extends ViewObjectImpl implements TreEvidenciaCondicionVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TreEvidenciaCondicionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void agregarTreEvidenciaCondicion(Long idCondicion,Long idDocumento, Long idAgrupador) {
        logger.log(ADFLogger.TRACE, "Inside agregarTreEvidenciaCondicion.");
        logger.log(ADFLogger.WARNING, "Vlor." + idCondicion);
        logger.log(ADFLogger.WARNING, "Vlor." + idDocumento);
        logger.log(ADFLogger.WARNING, "Vlor." + idAgrupador);
        
        oracle.jbo.domain.Number idTreEvidenciaCondicion = null;
        NameValuePairs nvpTreEvidenciaCondicion = null;
        SequenceImpl seqTreEvidenciaCondicion = null;
        try{
            seqTreEvidenciaCondicion = new SequenceImpl("TRE_EVIDENCIA_CONDICION_SEQ", getDBTransaction());
            idTreEvidenciaCondicion = seqTreEvidenciaCondicion.getSequenceNumber();
            logger.warning("Valor secuencia :" + idTreEvidenciaCondicion);
            logger.log(ADFLogger.WARNING, "Vlor." + idTreEvidenciaCondicion);
            nvpTreEvidenciaCondicion = new NameValuePairs();
            nvpTreEvidenciaCondicion.setAttribute("Id", idTreEvidenciaCondicion);
            nvpTreEvidenciaCondicion.setAttribute("IdCondicion", idCondicion);
            nvpTreEvidenciaCondicion.setAttribute("IdDocumento", idDocumento);
            nvpTreEvidenciaCondicion.setAttribute("Agrupador", idAgrupador);
            
            this.createAndInitRow(nvpTreEvidenciaCondicion);
                    
            getDBTransaction().commit();
        }catch(Exception e){
            logger.warning("Error al insertar la evidencia :", e);
        }
    }
    
    public void eliminarTreEvidenciaCondicion(Integer idTreEvidenciaCondicion) {
        logger.warning("Inside eliminarTreEvidenciaCondicion.");
        logger.warning("Id de la evidencia : " + idTreEvidenciaCondicion);
        ViewCriteria criteria = null;
        Long pIdTreEvidenciaCondicion = null;
        try{
            pIdTreEvidenciaCondicion = idTreEvidenciaCondicion.longValue();
            criteria = this.getViewCriteriaManager().getViewCriteria("TreEvidenciaCondicionVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdTreEvidenciaCondicion", pIdTreEvidenciaCondicion);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            
            RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();
            while(iterator.hasNext()){
                TreEvidenciaCondicionVORowImpl treEvidenciaCondicionVORowImpl = (TreEvidenciaCondicionVORowImpl)iterator.next();
                treEvidenciaCondicionVORowImpl.remove();
                
                getDBTransaction().commit();
                logger.warning("Se elimina la evidencia");
                break;
            }
            logger.warning("Se cierra el iterador");
            iterator.closeRowSetIterator();
        }catch(Exception e){
            logger.warning("Error al eliminar la evidencias.", e);
        }finally{
            logger.warning("Se remueve el Criterio.");
            this.getViewCriteriaManager().removeApplyViewCriteriaName("CargoPrepagoVOCriteria");
        }
    }

    /**
     * Returns the variable value for pIdTreEvidenciaCondicion.
     * @return variable value for pIdTreEvidenciaCondicion
     */
    public Long getpIdTreEvidenciaCondicion() {
        return (Long) ensureVariableManager().getVariableValue("pIdTreEvidenciaCondicion");
    }

    /**
     * Sets <code>value</code> for variable pIdTreEvidenciaCondicion.
     * @param value value to bind as pIdTreEvidenciaCondicion
     */
    public void setpIdTreEvidenciaCondicion(Long value) {
        ensureVariableManager().setVariableValue("pIdTreEvidenciaCondicion", value);
    }
}

