package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Feb 15 18:38:43 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreTcaEventoCondicionVOImpl extends ViewObjectImpl {
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(TreTcaEventoCondicionVOImpl.class);
    
    /**
     * Define nombre de View Criteria para buscar por Id de Condicion
     */
    public static final String BUSCAR_POR_ID_VC = "BuscarPorIdVC";
    
    /**
     * This is the default constructor (do not remove).
     */
    public TreTcaEventoCondicionVOImpl() {
    }

    /**
     * Returns the variable value for pIdCondicion.
     * @return variable value for pIdCondicion
     */
    public Long getpIdCondicion() {
        return (Long) ensureVariableManager().getVariableValue("pIdCondicion");
    }

    /**
     * Sets <code>value</code> for variable pIdCondicion.
     * @param value value to bind as pIdCondicion
     */
    public void setpIdCondicion(Long value) {
        ensureVariableManager().setVariableValue("pIdCondicion", value);
    }
    
    /**
     * Realiza la busqueda de registros de Precarga para Eventos Condicion, por Id de Condicion
     * @param idCondicion contiene Id de Condicion
     */
    public void buscarPorId(Long idCondicion){
        
        if(idCondicion == null){
            return;
        }
        
        logger.warning("Asigna Id Condicion: " + idCondicion);
        setpIdCondicion(idCondicion);
        
        ViewCriteria vc = null;
        try{
            vc = getViewCriteria(BUSCAR_POR_ID_VC);
            applyViewCriteria(vc);
            executeQuery();
            
            if(getEstimatedRowCount() > 0){
                logger.warning("Asigna Current Row de Precarga");
                setCurrentRow(first());
            }else{
                logger.warning("No se encontraron registros de Precarga Evento Condicion");
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar View Criteria: " + BUSCAR_POR_ID_VC);
        }
    }
    
    /**
     * Realiza la busqueda y la creacion de registros Evento Condicion de Precarga
     * @param condicionRow contiene Registro de Condicion a Precargar
     * @param preCargaRow contiene Registro de Condicion de Precarga
     * @return devuelve valor booleano, true si la precarga fue exitosa o false en caso contrario
     */
    public boolean precargarInformacion(TccCondicionVORowImpl condicionRow,
                                        PreCargaCondicionVORowImpl preCargaRow){
        
        
        boolean exito = false;
        logger.warning("Inicia Precarga de Informacion para Evento Condicion");
        logger.warning("Id Condicion a Precargar: " + condicionRow.getId());
        
        logger.warning("Asigna Id Condicion de Precarga: " + preCargaRow.getId());
        buscarPorId(preCargaRow.getId());
        
        long iniCount = getEstimatedRowCount();
        
        if(iniCount > 0){
            
            logger.warning("Cantidad de Registros encontrados de Eventos Condicion para Precarga: " +
                           getEstimatedRowCount());
            
            TreTcaEventoCondicionVORowImpl eventoRow = null;
            long cantidad = 0;
            
            RowSetIterator iter = createRowSetIterator(null);
            iter.reset();
            while(iter.hasNext()){
                
                eventoRow = (TreTcaEventoCondicionVORowImpl) iter.next();
                
                if(eventoRow.getIdTcaEvento() != null){
                    
                    NameValuePairs nvpTreTcaEventoCondicion = null;
                    try{
                        SequenceImpl sqEvento = null;
                        sqEvento = new SequenceImpl("TRE_TCA_EVENTO_CONDICION_SEQ", getDBTransaction());
                        
                        nvpTreTcaEventoCondicion = new NameValuePairs();
                        nvpTreTcaEventoCondicion.setAttribute("Id", sqEvento.getSequenceNumber().longValue());
                        nvpTreTcaEventoCondicion.setAttribute("IdCondicion", condicionRow.getId());
                        nvpTreTcaEventoCondicion.setAttribute("IdTcaEvento", eventoRow.getIdTcaEvento());
                        
                        this.createAndInitRow(nvpTreTcaEventoCondicion);
                        cantidad += 1;
                    }catch(Exception e){
                        logger.severe("Error al generar nuevo registro de Evento Condicion. Id TCA Evento: " + 
                                      eventoRow.getIdTcaEvento());
                    }
                }
            }
            iter.closeRowSetIterator();
            
            logger.warning("Cantidad de Registros generados: " + cantidad);
            
            if(iniCount == cantidad){
                exito = true;
                logger.warning("Todos los registros de Evento Condicion fueron precargados");
            }else{
                logger.warning("No se pudieron precargar todos los registros de Evento Condicion");
                exito = false;
            }
        }else{
            exito = true;
            logger.warning("No se encontraron registros de Eventos Condicion que Pre Cargar");
        }
        
        return exito;
    }
}

