package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.ContrapartesTerminoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 02 12:48:14 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContrapartesTerminoVOImpl extends ViewObjectImpl implements ContrapartesTerminoVO {
    
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(ContrapartesTerminoVOImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContrapartesTerminoVOImpl() {
    }
    
    public void insertarContrapartesAsociadas(Long IdContraparte,String NombreContraparte){
        Row rowContrapartesTermino = null;
        rowContrapartesTermino = this.createRow();
        rowContrapartesTermino.setAttribute("IdContraparte", IdContraparte);
        rowContrapartesTermino.setAttribute("NombreContraparte", NombreContraparte);
        rowContrapartesTermino.setAttribute("esAgregado",Boolean.FALSE);
        this.insertRow(rowContrapartesTermino);
    }
    
    public void limpiarContrapartesAsociadas(){
        LOGGER.warning("Dentro de limpiarContrapartesAsociadas");
        //recuperar los rows que se agregaron programticamente, para posteriormente volver a insertarlos
        Row[] contrapartesAsociadasAgregadas = this.getFilteredRows("esAgregado",Boolean.TRUE);
        LOGGER.warning("Cantidad de row agregados programaticamente :"+contrapartesAsociadasAgregadas.length);
        this.clearCache();
        this.executeQuery();
        //insertar los registros que se agregaron programaticamente
        for(Row row : contrapartesAsociadasAgregadas){
            this.insertRow(row);
        }
        LOGGER.warning("Fuera de limpiarContrapartesAsociadas");
    }
    
    public void asociarContrapartesTest(){
        LOGGER.warning("Dentro de asociarContrapartesTest");
        FenixAMImpl fenixAM = null;
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        fenixAM.getBuscarClienteVO().executeQuery();
        Row row = fenixAM.getBuscarClienteVO().getRowAtRangeIndex(0);
        try{
            asociarContrapartes(row);
        }catch(Exception e){
            LOGGER.warning("error : "+e);
        }
        LOGGER.warning("Fuera de asociarContrapartesTest");
    }
    public void asociarContrapartes(Row row){
        LOGGER.warning("Dentro de asociarContrapartes");
        Row rowContrapartesTermino = null;
        
        if(row.getAttribute("IdCliente") != null){
            
            Row[] contrapartesAsociadas = this.getFilteredRows("IdContraparte", row.getAttribute("IdCliente"));
            
            if(contrapartesAsociadas.length == 0){
                LOGGER.warning("idContraparte :"+row.getAttribute("IdCliente"));
                LOGGER.warning("NombreContraparte :"+row.getAttribute("RazonSocial"));
                rowContrapartesTermino = this.createRow();
                rowContrapartesTermino.setAttribute("IdContraparte", row.getAttribute("IdCliente"));
                rowContrapartesTermino.setAttribute("NombreContraparte", row.getAttribute("RazonSocial"));
                rowContrapartesTermino.setAttribute("esAgregado",Boolean.TRUE);
                this.insertRow(rowContrapartesTermino);
                LOGGER.warning("Se inserta el registros correctamente");
            }
        }else{
            LOGGER.severe("IdCliente es nulo, no se inserta registro");
        }
        
        LOGGER.warning("Fuera de asociarContrapartes");
    }
    
    public void desasociarContrapartes(Long IdContraparte){
        LOGGER.warning("Dentro de desasociarContrapartes");
        LOGGER.warning("IdContraparte :"+IdContraparte);
        Row rowContrapartesTermino = null;
        //es valido usar el getRow by Key ya que la VO es programatica
        rowContrapartesTermino = this.getRow(new Key(new Object[] {IdContraparte}));
        if(null != rowContrapartesTermino){
            //remueve el row 
            rowContrapartesTermino.setAttribute("esEliminado", Boolean.TRUE);
            LOGGER.warning("Se elimino correctamente la contraparte : "+IdContraparte);
        }else{
            LOGGER.severe("No se encontro un row con el IdContraparte :"+IdContraparte);
            LOGGER.warning("No se puede eliminar la contraparte");
        }
        LOGGER.warning("Fuera de desasociarContrapartes");
    }
    
    public Row[] recuperarContrapartesAsociadasEliminadas(){
        LOGGER.warning("Dentro de recuperarContrapartesAsociadasEliminadas");
        Row[] contrapartesAsoiadasEliminadas = this.getFilteredRows("esEliminado",Boolean.TRUE);
        LOGGER.warning("Cantidad de row eliminados programaticamente :"+contrapartesAsoiadasEliminadas.length);
        LOGGER.warning("Fuera de recuperarContrapartesAsociadasEliminadas");
        return contrapartesAsoiadasEliminadas;
    }
    
    public void eliminarContrapartesAsociadasEliminadas(List<Long> listaIdContraParteEliminada){
        LOGGER.warning("Dentro de eliminarContrapartesAsociadasEliminadas");
        Row rowDelete = null;
        //eliminar todos los registros que se eliminaron programaticamente
        for(Long idContraparteEliminada:listaIdContraParteEliminada){
            LOGGER.warning("idContraparte a eliminar :"+idContraparteEliminada);
            rowDelete = null;
            rowDelete = this.getRow(new Key(new Object[] {idContraparteEliminada}));
            if(null != rowDelete){
                LOGGER.warning("Se borra row , con idContraparte :" +rowDelete.getAttribute("IdContraparte"));
                rowDelete.remove();
            }else{
                LOGGER.warning("Row es nulo, con idContraparte :"+idContraparteEliminada);
            }
            
        }
        LOGGER.warning("Fuera de eliminarContrapartesAsociadasEliminadas");
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

