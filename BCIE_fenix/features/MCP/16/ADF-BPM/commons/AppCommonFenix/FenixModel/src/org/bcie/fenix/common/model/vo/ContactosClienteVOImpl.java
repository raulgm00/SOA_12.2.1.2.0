package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ContactosClienteVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 07 13:35:57 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContactosClienteVOImpl extends ViewObjectImpl implements ContactosClienteVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ContactosClienteVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public String actualizarContactoCliente(Long idContacto, Integer recibeAvisoCobro) {
        logger.log(ADFLogger.WARNING, "Into actualizarContactoCliente.");
        logger.log(ADFLogger.WARNING, "idContacto : " + idContacto);
        logger.log(ADFLogger.WARNING, "recibeAvisoCobro : " + recibeAvisoCobro);
        /*
        Long idContactoValueRow = null;
        
        RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
        iterator.reset();
        
        while (iterator.hasNext()) {
            Row row = iterator.next();
            
            if (row.getAttribute("IdContacto") != null) {
                idContactoValueRow = (Long) row.getAttribute("IdContacto");
                    if (idContactoValueRow.compareTo(idContacto) == 0) {
                        row.setAttribute("RecibeAvisoCobro", recibeAvisoCobro);
                        getDBTransaction().commit();
                        logger.warning("Se hace commit");
                    }
            } else {
                logger.log(ADFLogger.WARNING, "IdContacto es nulo.");
            }
        }
        iterator.closeRowSetIterator();
        */
        /*
        Row contactosClienteRow = null;
        contactosClienteRow = this.getRow(new Key(new Object[] { idContacto }));

        if (contactosClienteRow != null) {

            contactosClienteRow.setAttribute(ContactosClienteVORowImpl.RECIBEAVISOCOBRO, recibeAvisoCobro);
            getDBTransaction().commit();
            logger.warning("Se hace commit");
        } else {
            logger.log(ADFLogger.WARNING, "No record found in ContactosClienteVo with idContacto : " + idContacto);
        }
        */
        
        Row filaRecuperada = null;        
        ViewCriteria criteria = null;
        
        if(idContacto == null){
            logger.warning("*** El parametro id es requerido para actualizar los campos requeridos");
            return "false";
        }
        try{      
            criteria =this.getViewCriteriaManager().getViewCriteria("ContactosClienteVOCriteriaByIdContacto");
            criteria.ensureVariableManager().setVariableValue("varIdContacto", idContacto);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        
            if(getEstimatedRowCount() > 0){               
                setCurrentRow(first());
                filaRecuperada = getCurrentRow();
                //logger.warning("IdContacto: "+ idContacto);
                //logger.warning("Valor anterior RecibeAvisoCobro: "+ filaRecuperada.getAttribute("RecibeAvisoCobro"));
                if(null!=recibeAvisoCobro){
                    filaRecuperada.setAttribute("RecibeAvisoCobro", recibeAvisoCobro);
                        try{
                            getDBTransaction().commit();
                            logger.warning("Se hace commit a la DB");
                        }catch(Exception e){
                            logger.log(ADFLogger.ERROR, "Error al intentar guardar en el metodo actualizarContactoCliente ->: "+e.getClass());
                           // getDBTransaction().rollback();
                        }
                }
                else{
                    logger.warning("Se reciben valores como null");
                }
            }else{
                 logger.warning("El row recuperado es Null no hay coincidencias en la busqueda"); 
                }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "*** Error al BuscarPorId  ->" + e);     
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("ContactosClienteVOCriteriaByIdContacto");
            executeQuery();              
        }
        
        logger.log(ADFLogger.WARNING, "Finaliza actualizarContactoCliente.");
        return "true";
    }

    /**
     * Returns the variable value for varIdContacto.
     * @return variable value for varIdContacto
     */
    public Long getvarIdContacto() {
        return (Long) ensureVariableManager().getVariableValue("varIdContacto");
    }

    /**
     * Sets <code>value</code> for variable varIdContacto.
     * @param value value to bind as varIdContacto
     */
    public void setvarIdContacto(Long value) {
        ensureVariableManager().setVariableValue("varIdContacto", value);
    }
}

