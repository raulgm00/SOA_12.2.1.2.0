package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.Objects;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.aprobacionmo.ConsultarAprobacionResponseType;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.bo.BaseBO;
import org.bcie.fenix.common.model.bo.adminlineacredito.CargarContratoOperacionProcesoBO;
import org.bcie.fenix.common.model.bo.importes.ConvertirMonedasBO;
import org.bcie.fenix.common.model.vo.common.RegistrarLineaCreditoAprobacionVO;
import org.bcie.lineacreditobo.LineaCredito;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sat Dec 12 15:19:03 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RegistrarLineaCreditoAprobacionVOImpl
  extends ViewObjectImpl implements RegistrarLineaCreditoAprobacionVO {
    
    /**
     * Log de la aplicacion
     */
    private static ADFLogger logger = ADFLogger.createADFLogger(RegistrarLineaCreditoAprobacionVOImpl.class);
    
  /**
   * This is the default constructor (do not remove).
   */
  public RegistrarLineaCreditoAprobacionVOImpl()
  {
  }
  
  public void agregarLinea(Integer piId, String psNumeroLinea, String psDecripcion, BigDecimal pdMonto, Integer piIdTipoMoneda)
  {
    RegistrarLineaCreditoAprobacionVORowImpl newRow = (RegistrarLineaCreditoAprobacionVORowImpl) this.createRow();

    newRow.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.ID, piId);
    newRow.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.NUMERO, psNumeroLinea);
    newRow.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.DESCRIPCION, psDecripcion);
    newRow.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.MONTO, pdMonto);
    newRow.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.IDTCATIPOMONEDA, piIdTipoMoneda);
    
    this.insertRow(newRow);
  }
  
  public void eliminarLinea(Integer piId)
  {
    Row row = obtenerRowLinea(piId);
    this.setCurrentRow(row);
    this.removeCurrentRow();
  }

  public void modificarLinea(Integer piId, String psNumeroLinea, String psDecripcion, BigDecimal pdMonto, Integer piIdTipoMoneda)
  {
    Row row = obtenerRowLinea(piId);

    if (null != row)
    {
      row.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.NUMERO, psNumeroLinea);
      row.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.DESCRIPCION, psDecripcion);
      row.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.MONTO, pdMonto);
      row.setAttribute(RegistrarLineaCreditoAprobacionVORowImpl.IDTCATIPOMONEDA, piIdTipoMoneda);
    }
  }
  
  public Row obtenerRowLinea (Integer piId)
  {
    return this.getRow((new Key(new Object[]{piId})));
  }
  
  public void cargarLineas(ConsultarAprobacionResponseType poAprobacionResponse)
  {
    if(null!= poAprobacionResponse.getAprobacion().getLineaCredito())
    {
      int i = 1;
      for(LineaCredito lcredito: poAprobacionResponse.getAprobacion().getLineaCredito())
      {
        //Dado que el id de tipos de monedas es un valor pequeño, no hay problemas de conversión aquí
        Integer idTcaTipoMoneda = lcredito.getIdTipoMonedaMontoLinea() != null ? lcredito.getIdTipoMonedaMontoLinea().intValue() : null;
        agregarLinea(i, lcredito.getNumeroLineaCredito(), lcredito.getDescripcion(), lcredito.getMontoLinea(), idTcaTipoMoneda);
        i++;
      }
    }
  }


    /**
     * Valida la suma de los montos de las lineas de credito con el monto aprobado
     * @return devuelve valor booleano, true si la validacion es positiva o false en caso contrario
     */
    public boolean validaMontoLineas(BigDecimal montoAprobacion){
        
        logger.entering(RegistrarLineaCreditoAprobacionVORowImpl.class.getName(), 
                        "validaMontoLineas", 
                        montoAprobacion);
        
        logger.warning("Invocación del método validaMontoLineas directamente sin tipoMoneda.");
        //[Kb: 13306] Refactoriza para que se use método que valida también tipos de monedas. Se envía nulo por compatibilidad.
        return validaMontoLineas(montoAprobacion, null);
    }
    
    /**
     * [Kb: 13306]
     * Refactoriza para validar montos teniendo en cuenta el tipoMoneda de las líneas.
     * Valida la suma de los montos de las lineas de credito con el monto aprobado y en el tipoMoneda del monto aprobado.
     * @param montoAprobacion Monto de la aprobación.
     * @param piIdTcaTipoMonedaAprobacion Tipo de moneda del monto de la aprobación. Si es nulo, entonces no se hacen conversiones de monedas.
     * @return devuelve valor booleano, true si la validacion es positiva o false en caso contrario.
     */
    public boolean validaMontoLineas(BigDecimal montoAprobacion, Integer piIdTcaTipoMonedaAprobacion){
        
        logger.entering(RegistrarLineaCreditoAprobacionVORowImpl.class.getName(), 
                        "validaMontoLineas", 
                        new Object[]{montoAprobacion, piIdTcaTipoMonedaAprobacion});
        
        boolean esValido = false;
        
        BigDecimal totalLineas = null;
        Row rowLinea = null;
        BigDecimal monto = null;
        String numLinea = null;
        Integer idTcaTipoMonedaLinea = null;
        
        boolean montoInvalido = false;
        
        if(montoAprobacion != null){
            logger.warning("El monto de aprobacion asignado: " + montoAprobacion);
        }
        
        RowSetIterator iter = null;
        try {
            iter = createRowSetIterator(null);            
            if(iter != null){
                iter.reset();
                while(iter.hasNext()){
                    rowLinea = iter.next();
                    
                    // [Kb: 13306] reset vars
                    numLinea = null;
                    idTcaTipoMonedaLinea = null;
                    monto = null;
                    
                    try{
                        numLinea = 
                            (String) rowLinea.getAttribute(RegistrarLineaCreditoAprobacionVORowImpl.NUMERO);  
                    }catch(Exception e){
                        logger.severe("Error al obtener el numero de linea", e);
                    }
                    
                    // [Kb: 13306] Leer el tipoMoneda de la linea
                    try{
                        idTcaTipoMonedaLinea = 
                            (Integer) rowLinea.getAttribute(RegistrarLineaCreditoAprobacionVORowImpl.IDTCATIPOMONEDA);  
                    }catch(Exception e){
                        logger.severe("Error al obtener el tipoMoneda de la linea. Numero de Linea: " + numLinea, e);
                    }
                    
                    try{
                        monto = 
                            (BigDecimal) rowLinea.getAttribute(RegistrarLineaCreditoAprobacionVORowImpl.MONTO);
                        if(monto == null){
                            montoInvalido = true;
                        }else{
                            if(monto.intValue() < 0){
                                montoInvalido = true;
                            }
                        }
                    }catch(Exception e){
                        logger.severe("Error al obtener el monto de la linea de credito. Numero de Linea: " + numLinea);
                        totalLineas = null;
                        montoInvalido = true;
                        break;
                    }
                    
                    if(monto != null){
                        // [Kb: 13306] Variable auxiliar para intercambiar monto de la LC por monto convertido.
                        BigDecimal montoAdd = monto;
                        if(piIdTcaTipoMonedaAprobacion != null && idTcaTipoMonedaLinea != null){
                            montoAdd = convertirMonedas(idTcaTipoMonedaLinea, monto, piIdTcaTipoMonedaAprobacion );
                            //si no se pudo realizar la conversión, entonces se debe reportar el monto como invalido 
                            if(montoAdd == null){
                                logger.warning("La conversión es nula, lo que indica que no se pudo realizar. Reportando el monto como inválido.");
                                totalLineas = null;
                                montoInvalido = true;
                                break;
                            }
                        }
                        if(totalLineas == null){
                            totalLineas = montoAdd;
                        }else{
                            totalLineas = totalLineas.add(montoAdd);
                        }
                    }
                }
            }
        } finally {
            if(iter != null){
                iter.closeRowSetIterator();
            }
        }
        
        if(montoInvalido){
            logger.warning("Procesa el indicador de Monto Invalido");
            try{
                FenixAMImpl am = (FenixAMImpl) getApplicationModule();
                if(am != null){
                    RegistrarDatosAprobacionVORowImpl datosAprobRow =
                        (RegistrarDatosAprobacionVORowImpl) am.getRegistrarDatosAprobacionVO().getCurrentRow();
                    if(datosAprobRow != null){
                        logger.warning("Asigna indicador de Monto Invalido al Registro Actual de Datos de Aprobacion");
                        datosAprobRow.setAttribute(RegistrarDatosAprobacionVORowImpl.CONTIENELINEASMONTOINVALIDO, montoInvalido);
                    }else{
                        logger.severe("No se pudo obtener Registro Actual de Datos de Aprobacion");
                    }
                }else{
                    logger.severe("No se pudo obtener Application Module");
                }
            }catch(Exception e){
                logger.severe("Error al procesar indicador de Monto Invalido", e);
            }            
        }
        
        if(totalLineas != null){
            logger.warning("La sumatoria de los montos es: " + totalLineas);
        }else{
            logger.warning("La sumatoria de los montos es NULL");
        }
        
        if(!montoInvalido){
            if(totalLineas != null &&
               montoAprobacion != null){
                if(totalLineas.compareTo(montoAprobacion) <= 0){
                    logger.warning("La sumatoria de los montos es valida");
                    esValido = true;
                }else{
                    logger.severe("La sumatoria de los montos es invalida");
                }
            } 
        }
        
        logger.exiting(RegistrarLineaCreditoAprobacionVORowImpl.class.getName(), 
                       "validaMontoLineas",
                       esValido);
        return esValido;
    }
    
    /**
     * [Kb: 3306]
     * Realiza conversion de monedas del montoAProbado y del monto de las lineas.
     * Se apalanca en metodos existentes en el FenixAM.     
     * @param piIdTipoMonedaLC TipoMOneto Linea (moneda desde la que se convierte).
     * @param pbdMontoLC Monto de la linea (valor a convertir a la moneda de la aprobacion).
     * @param piIdTipoMonedaAprobacion TipoMoneto Aprobacion (moneda a la que se debe convertir).
     * @return Resultado de la conversión o nulo si no se pudo realizar.
     * 
     */
    private BigDecimal convertirMonedas(final Integer piIdTipoMonedaLC, final BigDecimal pbdMontoLC, final Integer piIdTipoMonedaAprobacion){
        Objects.requireNonNull(piIdTipoMonedaAprobacion, "piIdTipoMonedaLC no puede ser nulo.");
        Objects.requireNonNull(piIdTipoMonedaAprobacion, "pbdMontoLC no puede ser nulo.");
        Objects.requireNonNull(piIdTipoMonedaAprobacion, "piIdTipoMonedaAprobacion no puede ser nulo.");
        BigDecimal resultado = null;
        //Esta clase ya hace uso del FenixAMImpl como su AM ppal, por lo tanto no estamos violando algo aquí
        try (ConvertirMonedasBO operacion = new ConvertirMonedasBO((FenixAMImpl) getApplicationModule(), piIdTipoMonedaLC, pbdMontoLC, piIdTipoMonedaAprobacion)) {
            //ejecutarla operacion para que se configure la linea de credito para el admin lineas credito
            operacion.execute();
            resultado = operacion.getResultado();
        } catch (Exception e) {
            logger.severe("Error al ConvertirMonedasBO.", e);
        }
        return resultado;
    }
}

