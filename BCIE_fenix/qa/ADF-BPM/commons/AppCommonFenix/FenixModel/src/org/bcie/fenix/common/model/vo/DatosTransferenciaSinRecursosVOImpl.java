package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsomo.PropagarTransSinSalidaRecursosRequestType;
import org.bcie.desembolsomo.PropagarTransSinSalidaRecursosResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DatosTransferenciaSinRecursosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Mar 09 10:35:02 CST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosTransferenciaSinRecursosVOImpl extends ViewObjectImpl implements DatosTransferenciaSinRecursosVO {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public DatosTransferenciaSinRecursosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varId.
     * @return bind variable value for varId
     */
    public Long getvarId() {
        return (Long) getNamedWhereClauseParam("varId");
    }

    /**
     * Sets <code>value</code> for bind variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        setNamedWhereClauseParam("varId", value);
    }
    
    public Integer getIdTcaEstadoDesembolso(Long idContrato)
    {
        logger.log(ADFLogger.WARNING, "Inside getIdTcaEstadoDesembolso");
        logger.log(ADFLogger.WARNING, "idContrato " +idContrato); 
        Integer idEstado = null;
        
        this.clearCache();
        this.setvarId(idContrato);
        this.executeQuery();
        
        if (this.getEstimatedRowCount() > 0) 
        {
            Row row = this.getRowAtRangeIndex(0);
            idEstado = row.getAttribute("IdTcaEstado") != null ? Integer.parseInt(row.getAttribute("IdTcaEstado").toString()): null;
            logger.log(ADFLogger.WARNING, "Estado Recuperado: " + idEstado);
        }
        else
        {
            logger.log(ADFLogger.WARNING, "No se han obtenido resultados");
        }
        
        
        logger.log(ADFLogger.WARNING, "Termina getIdTcaEstadoDesembolso");
        return idEstado;
    }
    
    public Map propagarSinTransferencias(Long idContrato) {
        Map resultado = new HashMap();
        String respuestaServicio = null;
        Row row = null;
        logger.log(ADFLogger.WARNING, "Inside propagarSinTransferencias");
        if (null != idContrato) {
            try {
                this.clearCache();
                setvarId(idContrato);
                this.executeQuery();
                logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                // 1) Asignamos valor de retorno
                if (this.getEstimatedRowCount() > 0) 
                {
                    RowSetIterator iterator = this.getRowSetIterator();
                    iterator.reset();
                    
                    logger.warning("Elementos encontrados en iterator:  " + iterator.getRowCount());
                    
                    for(int i =0; i < iterator.getRowCount(); i++)
                    {
                        row = iterator.getRowAtRangeIndex(i);
                        
                        logger.warning("usuarioCreador: " + row.getAttribute("OrigenTranferenciaCliente"));
                        if (null != row.getAttribute("OrigenTranferenciaCliente")) {
                            String directo = FenixModelConstants.DIRECTO_CLIENTE;
                            String registroOrigen = (String) row.getAttribute("OrigenTranferenciaCliente");
                            if (directo.equalsIgnoreCase(registroOrigen)) {
                                FenixAMImpl fenixAM = null;
                                fenixAM = (FenixAMImpl) this.getRootApplicationModule();
                                String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);

                                DesembolsoPTSOAP12BindingQSService desembolsoService =
                                    IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
                                DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();

                                PropagarTransSinSalidaRecursosRequestType request =
                                    new PropagarTransSinSalidaRecursosRequestType();
                                PropagarTransSinSalidaRecursosResponseType response = null;
                                request.setIdDesembolso(idContrato);

                                try {
                                    java.util.Date horaInicio =
                                        ModelUtils.logStartWS(logger, request,
                                                              FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA_DIRECTO);
                                    response = desembolsoPT.propagarTransSinSalidaRecursos(request);
                                    ModelUtils.logEndWS(logger, response,
                                                        FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA_DIRECTO, horaInicio);
                                } catch (Exception e) {
                                    resultado.put("respuesta", Boolean.FALSE);
                                    logger.warning("ERROR al ejecutar servicio propagarSinTransferencias ", e);
                                    respuestaServicio =
                                        "ERROR al ejecutar el serivcio propagarSinTransferencias: " + e.getMessage();
                                }

                                if (null != response) {
                                    if (response.getResultado() != null && response.getResultado().getResult() != null &&
                                        response.getResultado().getResult().value() == "OK") {
                                        if (null != response.getContratoDesembolso() &&
                                            null != response.getContratoDesembolso().getTransferenciaFT05()) {
                                            resultado.put("respuesta", Boolean.TRUE);
                                            if (null !=
                                                response.getContratoDesembolso().getTransferenciaFT05().getFechaEfectiva()) {
                                                Timestamp fechaEfectiva =
                                                    new Timestamp(response.getContratoDesembolso().getTransferenciaFT05().getFechaEfectiva().toGregorianCalendar().getTimeInMillis());
                                                logger.warning("Fecha efectiva: " + fechaEfectiva);
                                                resultado.put("fecha", fechaEfectiva);
                                            }
                                            if (null !=
                                                response.getContratoDesembolso().getTransferenciaFT05().getIdFacturador() &&
                                                !response.getContratoDesembolso().getTransferenciaFT05().getIdFacturador().isEmpty()) {
                                                String bhqTransferenciaF05 =
                                                    response.getContratoDesembolso().getTransferenciaFT05().getIdFacturador();
                                                logger.warning("BHQObtenido: " + bhqTransferenciaF05);
                                                resultado.put("bhq", bhqTransferenciaF05);
                                            }
                                            if (0L ==
                                                response.getContratoDesembolso().getTransferenciaFT05().getIdTransferenciaFT05()) {
                                                Long idTransferencia =
                                                    response.getContratoDesembolso().getTransferenciaFT05().getIdTransferenciaFT05();
                                                logger.warning("idTransferencia: " + idTransferencia);
                                                resultado.put("transferencia", idTransferencia);
                                            }
                                        } else {
                                            logger.warning("Error al obtener los datos del TransferenciaFT05");
                                        }

                                    } else {
                                        logger.warning("Error al ejecutar el servicio la respuesta del servicio devuelve error");
                                        if (response.getResultado() == null ||
                                            (response.getResultado().getResult() != null &&
                                             response.getResultado().getResult().value().equalsIgnoreCase("ERROR"))) {
                                            logger.log(ADFLogger.WARNING, "Error propagarSinTransferencias.");
                                            respuestaServicio = "Error en el servicio de propagar sin Transferencias";

                                            if (response.getResultado().getMessage() != null) {
                                                respuestaServicio +=
                                                    "Message: " + response.getResultado().getMessage() + ". ";
                                            }

                                            if (response.getResultado().getError() != null &&
                                                response.getResultado().getError().getErrorCode() != null) {
                                                respuestaServicio +=
                                                    "Code Error: " + response.getResultado().getError().getErrorCode() +
                                                    ". ";
                                            }

                                            if (response.getResultado().getError() != null &&
                                                response.getResultado().getError().getErrorDescription() != null) {
                                                respuestaServicio +=
                                                    "Message Error: " +
                                                    response.getResultado().getError().getErrorDescription();
                                            }
                                        }

                                    }
                                } else {
                                    logger.warning("Error al ejecutar el servicio se obtienen datos vacios");
                                    respuestaServicio =
                                        "Error en el servicio de propagar sin Transferencias se obtienen datos vacios";
                                }
                            } else {
                                logger.warning("Es diferente el origen por lo tanto no aplica");
                                resultado.put("respuesta", Boolean.TRUE);

                            }

                        } else {
                            logger.warning("No tiene registro de OrigenDedatos");
                            //respuestaServicio =
                              //  "Error en el servicio de propagar sin Transferencias  no se obtuvo el Origen de datos";
                              resultado.put("respuesta", Boolean.TRUE);
                            
                        }
                    }
                    
                    iterator.closeRowSetIterator();  
                    
                } else {
                    logger.warning("No existe registro de contrato");
                    respuestaServicio = "Error en el servicio de propagar sin Transferencias  no existe contrato";
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
                respuestaServicio = "Error en el servicio de propagar sin Transferencias" + e.getMessage();
                resultado.put("respuesta", Boolean.FALSE);
            } finally {
                if (respuestaServicio != null) {
                    JboException exception = new JboException(respuestaServicio);
                    throw exception;
                }
            }
        } else {
            logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
            resultado.put("respuesta", Boolean.FALSE);
        }
        if (respuestaServicio != null) {
            resultado.put("respuesta", Boolean.FALSE);
            JboException exception = new JboException(respuestaServicio);
            throw exception;
        }
        logger.warning("Termina consultar propagarSinRecursos");
        logger.warning("Valor que retorna es: " + resultado);
        return resultado;
    }
}

