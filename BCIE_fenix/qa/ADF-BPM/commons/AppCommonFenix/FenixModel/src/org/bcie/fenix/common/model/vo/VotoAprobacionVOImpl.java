package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import java.util.Iterator;
import java.util.List;

import java.util.Map;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.common.VotoAprobacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 24 14:07:48 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class VotoAprobacionVOImpl extends ViewObjectImpl implements VotoAprobacionVO {
    
    /**
     * Define nombre del View Criteria para buscar registros de voto por id's a modo de
     * encontrar los votos correspondientes a un solo usuario y reunion.
     */
    public static final String VOTO_APROBACION_POR_ID_VC = "VotoAprobacionPorIdVOCriteria";
    
    /**
     * Define nombre del View Criteria para buscar registros de una reunion de votacion
     */
    public static final String VOTO_APROBACION_POR_ID_REUNION_VC = "VotoAprobacionPorIdUsuReuVOCriteria";
    
    /**
     * This is the default constructor (do not remove).
     */
    public VotoAprobacionVOImpl() {
    }
    
    public Row asignarDatosVoto(Map<String, Object> mapAtributosVoto, Row createRow){
        try{
            Number id = (Number) mapAtributosVoto.get("ID");
            Number idUsuarioReunion = (Number) mapAtributosVoto.get("IdUsuarioReunion");
            Number idTipoDecision = (Number) mapAtributosVoto.get("IdTipoDecision");
            Timestamp fechaHora = (Timestamp) mapAtributosVoto.get("HoraFecha");
            String usuarioEmite = mapAtributosVoto.get("LoginUsuarioEmite").toString();
            Integer fueraSistema = (Integer) mapAtributosVoto.get("EsFueraDeSistema");
            Integer banEstatus = (Integer) mapAtributosVoto.get("BanEstatus");
            
            createRow.setAttribute("Id", id);
            createRow.setAttribute("IdTcaTipoDecision", idTipoDecision);
            createRow.setAttribute("IdUsuarioReunion", idUsuarioReunion);
            createRow.setAttribute("FechaHora", fechaHora);
            createRow.setAttribute("LoginUsuarioEmite", usuarioEmite);
            createRow.setAttribute("EsFueraDeSistema", fueraSistema);
            createRow.setAttribute("BanEstatus", banEstatus);
        }catch(Exception e){
            e.printStackTrace();
        }
        return createRow;
    }

    /**
     * Returns the variable value for pIdUsuarioReunion.
     * @return variable value for pIdUsuarioReunion
     */
    public Number getpIdUsuarioReunion() {
        return (Number) ensureVariableManager().getVariableValue("pIdUsuarioReunion");
    }

    /**
     * Sets <code>value</code> for variable pIdUsuarioReunion.
     * @param value value to bind as pIdUsuarioReunion
     */
    public void setpIdUsuarioReunion(Number value) {
        ensureVariableManager().setVariableValue("pIdUsuarioReunion", value);
    }

    /**
     * Returns the variable value for pIdVotoAprobacion.
     * @return variable value for pIdVotoAprobacion
     */
    public Number getpIdVotoAprobacion() {
        return (Number) ensureVariableManager().getVariableValue("pIdVotoAprobacion");
    }

    /**
     * Sets <code>value</code> for variable pIdVotoAprobacion.
     * @param value value to bind as pIdVotoAprobacion
     */
    public void setpIdVotoAprobacion(Number value) {
        ensureVariableManager().setVariableValue("pIdVotoAprobacion", value);
    }

    /**
     * Returns the variable value for pLoginUsuarioEmite.
     * @return variable value for pLoginUsuarioEmite
     */
    public String getpLoginUsuarioEmite() {
        return (String) ensureVariableManager().getVariableValue("pLoginUsuarioEmite");
    }

    /**
     * Sets <code>value</code> for variable pLoginUsuarioEmite.
     * @param value value to bind as pLoginUsuarioEmite
     */
    public void setpLoginUsuarioEmite(String value) {
        ensureVariableManager().setVariableValue("pLoginUsuarioEmite", value);
    }
    
    /**
     * Obtiene el registro de votacion correspondiente a un miembro-usuario y una reunion especifica. 
     * 
     * @param idUsuarioReunion Valor de Id de Reunion y usuario
     * @param idVotoAprobacion Valor de Id de voto del usuario por reunion
     * @param loginUsuarioEmite Valor del login de usuario que realiza votacion
     */
    public void obtenerVotoAprobacionPorId(Number idUsuarioReunion,
                                           Number idVotoAprobacion,
                                           String loginUsuarioEmite){
        if(idVotoAprobacion == null){
            return;
        }
        
        //Asigna valores a Bind Variables
        setpIdUsuarioReunion(idUsuarioReunion);
        setpIdVotoAprobacion(idVotoAprobacion);
        setpLoginUsuarioEmite(loginUsuarioEmite);
        
        obtenerVotoAprobacionPorId();
    }
    
    /**
     * Ejecuta View Criteria para obtener todos los registros de votacion correspondientes a un miembro-usuario y una 
     * reunion especifica. 
     * 
     * Asigna el primer el registro de la consulta como registro actual.
     * 
     * Depende del valor asignado a las Bind variables.
     *  -pIdUsuarioReunion
     *  -pIdVotoAprobacion
     *  -pLoginUsuarioEmite
     */
    public void obtenerVotoAprobacionPorId(){
        
        if(getpIdUsuarioReunion() == null ||
           getpIdVotoAprobacion() == null){
            return;
        }
        
        ViewCriteria vc = getViewCriteria(VOTO_APROBACION_POR_ID_VC);
        applyViewCriteria(vc);
        executeQuery();
        
        setCurrentRowByFirstRow();
    }
    
    /**
     * Obtiene todos los registros de votacion de una reunion especifica
     * @param listIdUsuarioReunion Valor de Id de Reunion
     */
    public void obtenerVotosReunion(List<UsuarioReunionAprobacionLOVRowImpl> listIdUsuarioReunion){
        
        if(listIdUsuarioReunion == null ||
           listIdUsuarioReunion.size() < 1){
            return;
        }
        
        UsuarioReunionAprobacionLOVRowImpl row = null;
        String params = null;
        Iterator iter = listIdUsuarioReunion.iterator();
        while(iter.hasNext()){
            row = (UsuarioReunionAprobacionLOVRowImpl) iter.next();
            params = row.getId().toString();
            if(iter.hasNext()){
                params.concat(" , ");
            }
        }
        
        obtenerVotosReunion(params);
        
        //Realiza asignacion de valores de Rol BPM
        setRolBPM(listIdUsuarioReunion);
    }
    
    /**
     * Asigna los valores de Rol BPM
     * @param listIdUsuarioReunion contiene lista de Miembros votantes de la Reunion
     */
    public void setRolBPM(List<UsuarioReunionAprobacionLOVRowImpl> listIdUsuarioReunion){
        
        //Asigna valor de Rol BPM de Usuario Reunion
        VotoAprobacionVORowImpl rowVotoMiembro = null;
        String descRolBPM = null;
        
        //Obtiene instancia del AM
        FenixAMImpl am = (FenixAMImpl)getApplicationModule();
        
        RowSetIterator rsi = createRowSetIterator(null);
        while(rsi.hasNext()){
            rowVotoMiembro = (VotoAprobacionVORowImpl) rsi.next();
            for(UsuarioReunionAprobacionLOVRowImpl rowIdUR : listIdUsuarioReunion){
                if(rowIdUR.getId().equals(rowVotoMiembro.getIdUsuarioReunion())){
                    rowVotoMiembro.setIdRolBPM(rowIdUR.getIdTcaRolBpm());
                    
                    //Obtiene descripcion corta de Rol BPM
                    descRolBPM = am.getTcaRolBpmLOV1().getRolBPMDescCortaPorId(rowVotoMiembro.getIdRolBPM());
                    
                    //Asigna la descripcion corta del Rol BPM
                    rowVotoMiembro.setRolBPM(descRolBPM);
                }
            }
        }
        rsi.closeRowSetIterator();
    }
    
    /**
     * Ejecuta View Criteria para obtener los registros de votacion de una reunion especifica
     * @param params contiene cadena de Id's de Usuario reunion.
     */
    private void obtenerVotosReunion(String params){
        
        if(params == null){
            return;
        }
        //Limpia el parametro where
        setWhereClause(null);
        
        setWhereClause("ID_USUARIO_REUNION IN (" + params + ")");
        executeQuery();
    }
    
    /**
     * Asigna el registro actual con el primer registro
     */
    private void setCurrentRowByFirstRow(){
        //Crea RowSetIterator
        RowSetIterator rsi = createRowSetIterator(null);
        //Obtiene el primer registro
        Row row = rsi.first();
        //Asigna el registro actual
        setCurrentRow(row);
        rsi.closeRowSetIterator();
    }
}

