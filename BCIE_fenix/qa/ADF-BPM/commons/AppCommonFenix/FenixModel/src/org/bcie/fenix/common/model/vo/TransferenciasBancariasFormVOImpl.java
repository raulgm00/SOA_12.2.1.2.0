package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.domain.Date;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.TransferenciasBancariasFormVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 17 13:17:07 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferenciasBancariasFormVOImpl extends ViewObjectImpl implements TransferenciasBancariasFormVO {
   
    private static ADFLogger logger = null;
   
    public TransferenciasBancariasFormVOImpl() {        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }        
    }
    
    
    
    public void nuevoRegistroTransferencia(Long idContrato, Long idOperacion, Integer IdTcaTipoMoneda, BigDecimal montoTransferencia){
        logger.warning("*Inf, Inicia metodo nuevoRegistroTransferencia");
        
        this.clearCache();
        
        oracle.jbo.domain.Number idTransferencia = null;
        SequenceImpl seqTransferencia = null;
        
        try{
            seqTransferencia = new SequenceImpl("TRANSFERENCIA_BANCARIA_SEQ", getDBTransaction());
            idTransferencia = seqTransferencia.getSequenceNumber();
        }catch(Exception e){
            logger.warning("*Error, al obtener la secuencia de transferencias ->",e);
            JboException ex = new JboException("Ha ocurrido un error al crear el registro en transferencias "+e.getMessage().toString());
        }
        Long idTransferenciaLong = new Long(idTransferencia.longValue());
        logger.warning("*Inf, nuevo registro de transferencia generado: "+idTransferenciaLong);
        NameValuePairs nvpTransferencia = new NameValuePairs();
        nvpTransferencia.setAttribute("IdTransferencia", idTransferenciaLong);
        nvpTransferencia.setAttribute("IdContrato", idContrato);
        nvpTransferencia.setAttribute("IdOperacion", idOperacion);
        nvpTransferencia.setAttribute("IdTcaTipoMoneda", IdTcaTipoMoneda);        
        nvpTransferencia.setAttribute("MontoTransferencia", montoTransferencia);
        nvpTransferencia.setAttribute("RefMensaje", null);
        nvpTransferencia.setAttribute("TipoOpcionBeneficiario", "OPCION_A");
        nvpTransferencia.setAttribute("NumeroCuenteBeneficiario", "/");
        nvpTransferencia.setAttribute("IdentificadorBeneficiario", null);
        nvpTransferencia.setAttribute("NombreBeneficiario", null);
        nvpTransferencia.setAttribute("DireccionBeneficiario", null);
        nvpTransferencia.setAttribute("TipoOpcionBancoBeneficiario", "OPCION_A");
        nvpTransferencia.setAttribute("NumeroCuentaBancoBeneficiario", null);
        nvpTransferencia.setAttribute("IdentificadorBancoBeneficiario", null);
        nvpTransferencia.setAttribute("NombreBancoBeneficiario", null);
        nvpTransferencia.setAttribute("DireccionBancoBeneficiario", null);
        nvpTransferencia.setAttribute("TipoOpcionBancoIntermediario", "OPCION_A");
        nvpTransferencia.setAttribute("NumeroCuentaBancoIntermediario", null);
        nvpTransferencia.setAttribute("IdentificadorBancoIntermediario", null);
        nvpTransferencia.setAttribute("NombreBancoIntermediario", null);
        nvpTransferencia.setAttribute("DireccionBancoIntermediario", null);
        nvpTransferencia.setAttribute("EstadoInstruccion", "POR_VALIDAR");
        nvpTransferencia.setAttribute("TipoMensaje", "MT103");            
        
        Row row = createAndInitRow(nvpTransferencia);
        insertRow(row);
        setCurrentRow(row);            
        
        logger.warning("*Inf, Termina metodo nuevoRegistroTransferencia");
    }
        
        
    public void crearRowFormTransferenciaExistente(Row transferenciaRow){
        logger.warning("*Inf, Inicia metodo crearRowFormTransferenciaExistente");
        
        this.clearCache();
         
        NameValuePairs nvpTransferencia = new NameValuePairs();    
        nvpTransferencia.setAttribute("IdTransferencia", transferenciaRow.getAttribute("IdTransferencia"));
        nvpTransferencia.setAttribute("IdContrato", transferenciaRow.getAttribute("IdContratoDesembolso"));        
        nvpTransferencia.setAttribute("MontoTransferencia", transferenciaRow.getAttribute("MontoTransferencia"));
        nvpTransferencia.setAttribute("RefMensaje", transferenciaRow.getAttribute("ReferenciaMsj"));
        nvpTransferencia.setAttribute("TipoOpcionBeneficiario", transferenciaRow.getAttribute("TipoOpcionBenef"));
        nvpTransferencia.setAttribute("NumeroCuenteBeneficiario", transferenciaRow.getAttribute("NumeroCtaBenef"));
        nvpTransferencia.setAttribute("IdentificadorBeneficiario", transferenciaRow.getAttribute("IdentificadorBenef"));
        nvpTransferencia.setAttribute("NombreBeneficiario", transferenciaRow.getAttribute("BeneficiarioBenef"));
        nvpTransferencia.setAttribute("DireccionBeneficiario", transferenciaRow.getAttribute("DireccionBenef"));
        nvpTransferencia.setAttribute("TipoOpcionBancoBeneficiario", transferenciaRow.getAttribute("TipoOpcionBanBenef"));
        nvpTransferencia.setAttribute("NumeroCuentaBancoBeneficiario", transferenciaRow.getAttribute("NumeroCtaBanBenef"));
        nvpTransferencia.setAttribute("IdentificadorBancoBeneficiario", transferenciaRow.getAttribute("IdentificadorBanBenef"));
        nvpTransferencia.setAttribute("NombreBancoBeneficiario", transferenciaRow.getAttribute("BeneficiarioBanBenef"));
        nvpTransferencia.setAttribute("DireccionBancoBeneficiario", transferenciaRow.getAttribute("DireccionBanBenef"));
        nvpTransferencia.setAttribute("TipoOpcionBancoIntermediario", transferenciaRow.getAttribute("TipoOpcionBanInter"));
        nvpTransferencia.setAttribute("NumeroCuentaBancoIntermediario", transferenciaRow.getAttribute("NumeroCtaBanInter"));
        nvpTransferencia.setAttribute("IdentificadorBancoIntermediario", transferenciaRow.getAttribute("IdentificadorBanInter"));
        nvpTransferencia.setAttribute("NombreBancoIntermediario",  transferenciaRow.getAttribute("BeneficiarioBanInter"));
        nvpTransferencia.setAttribute("DireccionBancoIntermediario", transferenciaRow.getAttribute("DireccionBanInter"));        
        nvpTransferencia.setAttribute("IdOperacion", transferenciaRow.getAttribute("IdOperacion"));
        nvpTransferencia.setAttribute("EstadoInstruccion", transferenciaRow.getAttribute("EstadoInstruccion"));
        nvpTransferencia.setAttribute("TipoMensaje", transferenciaRow.getAttribute("TipoMensaje"));
        
        Row row = createAndInitRow(nvpTransferencia);
        insertRow(row);
        setCurrentRow(row);                                                                
              
      logger.warning("*Inf, Termina metodo crearRowFormTransferenciaExistente");
    }
    
    
    public void guardarInformacionTransferencia(){
      logger.warning("*Inf, Inicia metodo guardarInformacionTransferencia");
        
        Row rowAcual = getCurrentRow();
        
        if(rowAcual != null){
        
            try{
                FenixAMImpl fenixAMImpl = null;
                FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
                fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
                gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
                gestorDesembolsosAMImpl.getTransferenciasConInstruccionVO().guardarDatosTransferencia(rowAcual);
            }catch(Exception e){
                logger.warning("*Error, No se ha podido guardar los datos de la transferencia ->",e);
            }  
        }else{
            logger.warning("*Error, No se pudo recuperar la transferencia Current");  
        }
        
      logger.warning("*Inf, Termina metodo guardarInformacionTransferencia");
    }
    
    
    public void recargarTablaTransferencias(Long idContrato){
      logger.warning("*Inf, Inicia metodo recargarTablaTransferencias");
      
        FenixAMImpl fenixAMImpl = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
        gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        gestorDesembolsosAMImpl.getConsultaTransferenciasBanByDesembolso().recuperarDatos(idContrato);
        
      logger.warning("*Inf, Termina metodo recargarTablaTransferencias");
    }
        
    
    public Boolean recuperarEstablecerInstruccionPago(String noCuenta){
      logger.warning("*Inf, Inicia metodo recargarTablaTransferencias");
        Boolean seEstablecioInstruccion = Boolean.FALSE;
        Boolean seEncontroInstruccion = Boolean.FALSE;
      
        FenixAMImpl fenixAMImpl = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();   
        gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();
        
        Row instruccionPago =
            gestorDesembolsosAMImpl.getCatInstruccionesPagoValidadasVO().recuperarInstruccionPago(noCuenta);
        
        if(instruccionPago != null){
           seEncontroInstruccion = Boolean.TRUE;
           seEstablecioInstruccion = establecerInstruccionPago(instruccionPago);
        }else{
            logger.warning("*Inf, no hay instruccion de pago para noCuenta: "+noCuenta);
        }
        
        
      logger.warning("*Inf, Termina metodo recargarTablaTransferencias");
      return (seEncontroInstruccion && seEstablecioInstruccion);
    }
    
    
    public Boolean establecerInstruccionPago(Row instruccionPagoRow){
     logger.warning("*Inf, Inicia el metodo establecerInstruccionPago");
     Boolean respuesta = Boolean.FALSE;
        if(instruccionPagoRow != null){                        
             
            if(getCurrentRow()!= null){
                 
                try{               
                    getCurrentRow().setAttribute("TipoOpcionBeneficiario", instruccionPagoRow.getAttribute("TipoOpcionBenef"));
                    getCurrentRow().setAttribute("NumeroCuenteBeneficiario", instruccionPagoRow.getAttribute("NumeroCtaBenef"));
                    getCurrentRow().setAttribute("IdentificadorBeneficiario", instruccionPagoRow.getAttribute("IdentificadorBenef"));
                    getCurrentRow().setAttribute("NombreBeneficiario", instruccionPagoRow.getAttribute("BeneficiarioBenef"));
                    getCurrentRow().setAttribute("DireccionBeneficiario", instruccionPagoRow.getAttribute("DireccionBenef"));
                    getCurrentRow().setAttribute("TipoOpcionBancoBeneficiario", instruccionPagoRow.getAttribute("TipoOpcionBanBenef"));
                    getCurrentRow().setAttribute("NumeroCuentaBancoBeneficiario", instruccionPagoRow.getAttribute("NumeroCtaBanBenef"));
                    getCurrentRow().setAttribute("IdentificadorBancoBeneficiario", instruccionPagoRow.getAttribute("IdentificadorBanBenef"));
                    getCurrentRow().setAttribute("NombreBancoBeneficiario", instruccionPagoRow.getAttribute("BeneficiarioBanBenef"));
                    getCurrentRow().setAttribute("DireccionBancoBeneficiario", instruccionPagoRow.getAttribute("DireccionBanBenef"));
                    getCurrentRow().setAttribute("TipoOpcionBancoIntermediario", instruccionPagoRow.getAttribute("TipoOpcionBanInter"));
                    getCurrentRow().setAttribute("NumeroCuentaBancoIntermediario", instruccionPagoRow.getAttribute("NumeroCtaBanInter"));
                    getCurrentRow().setAttribute("IdentificadorBancoIntermediario", instruccionPagoRow.getAttribute("IdentificadorBanInter"));
                    getCurrentRow().setAttribute("NombreBancoIntermediario", instruccionPagoRow.getAttribute("BeneficiarioBanInter"));
                    getCurrentRow().setAttribute("DireccionBancoIntermediario", instruccionPagoRow.getAttribute("DireccionBanInter"));
                  
                    respuesta = Boolean.TRUE;
                }catch(Exception e){
                    logger.warning("***Error, no se ha podido establecer la instruccion de pago ->",e);
                    JboException ex = new JboException("Erro no se pudo establecer la instruccion de pago");
                    throw ex;
                }
                
            }else{
                logger.warning("*Error, error no se encontro un registro current en transferenciasBancariasFormVO");
            }
         
        }else{            
            logger.warning("*Error, parametro requerido instruccionPagoRow igual a null");
        }
                     
     logger.warning("*Inf, Inicia el metodo establecerInstruccionPago");
     return respuesta;
    }
    
    
   
}

