package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.TransactionEvent;
import oracle.jbo.server.ViewObjectImpl;

import oracle.sql.TIMESTAMP;

import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsomo.PropagarTransSinSalidaRecursosRequestType;
import org.bcie.desembolsomo.PropagarTransSinSalidaRecursosResponseType;
import org.bcie.desembolsomo.PropagarTransferenciaRequestType;
import org.bcie.desembolsomo.PropagarTransferenciaResponseType;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.DatosContratoDesembolsoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Sun Oct 02 16:47:58 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DatosContratoDesembolsoVOImpl extends ViewObjectImpl implements DatosContratoDesembolsoVO {
    private static ADFLogger logger = null;

    /**
     * This is the default constructor (do not remove).
     */
    public DatosContratoDesembolsoVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean validarBHQ(Long idContrato) {
        Boolean resultado = Boolean.FALSE;
        logger.warning("inicia metodo validarBHQ");
        logger.warning("Valores a ingresar");
        logger.warning("idContrato " + idContrato);
        String bhq=null;
        if(null!=idContrato){
            setvarId(idContrato);
            this.executeQuery();
            Row seguimientoRow = null;
            logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
            if(this.getEstimatedRowCount()>0){
                seguimientoRow= this.getRowAtRangeIndex(0);
                    if(null!=seguimientoRow){
                            if(null!=(String)seguimientoRow.getAttribute("ContratoFlexcube")){
                                    bhq=(String)seguimientoRow.getAttribute("ContratoFlexcube");
                                    logger.warning("BHQ del contrato " +bhq);
                                    resultado = Boolean.TRUE;
                                }
                            else{
                                    logger.warning("Error no se obtuvo el registro ContratoFlexcube " +
                                        "de contrato desembolso");
                                }
                        }
                    else{
                            logger.warning("Error no se obtuvo el registro de contrato desembolso");
                        }
                }
            else{
                    logger.warning("Error no se obtuvo el registro de contrato desembolso");
                }            
            }
        else{
                logger.warning("Error no se obtuvo el id de contrato desembolso");
            }
        logger.warning("Termina metodo validarBHQ");
        logger.warning("resultado: " + resultado);
    return resultado;
    }
    

    public Boolean actualizarDatosContrato(Long idContrato, String programaOperacion, Boolean esIntermediario,
                                           String destino, Integer modalidad, Integer actividad, Integer actividadAsoc,
                                           Integer actividadF1, Integer area, Integer eje, Integer proyecto,
                                           Boolean registraDolat, BigDecimal dolar, Long idTcaProductoPrograma) {
        logger.warning("Inicia metodo actualizarDatosContrato");
        Boolean resultado = Boolean.TRUE;
        logger.warning("Valores a ingresar");
        logger.warning("idContrato " + idContrato);
        logger.warning("programaOperacion " + programaOperacion);
        logger.warning("esIntermediario " + esIntermediario);
        logger.warning("destino " + destino);
        logger.warning("idContrato " + idContrato);
        logger.warning("modalidad " + modalidad);
        logger.warning("iniciativa " + actividadAsoc);
        logger.warning("actividad " + actividad);
        logger.warning("actividadF1 " + actividadF1);
        logger.warning("area " + area);
        logger.warning("eje " + modalidad);
        logger.warning("proyecto " + proyecto);
        logger.warning("registraDolat " + actividadF1);
        logger.warning("area " + dolar);
        logger.warning("idTcaProductoPrograma " + idTcaProductoPrograma);
   
        
        
        if(null!=idContrato){
            setvarId(idContrato);
    
            this.executeQuery();
            Row seguimientoRow = null;
            logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
            if(this.getEstimatedRowCount()>0){
                seguimientoRow= this.getRowAtRangeIndex(0);
                    if (null != seguimientoRow) {
                        logger.warning("Valores que se insertan: ");
                        logger.warning("Entra a row");
                        logger.warning("CuentaCliente en DatosContratoDesembolsoVO : "+seguimientoRow.getAttribute("CuentaCliente"));
                        logger.warning("OrigenTranferenciaCliente en DatosContratoDesembolsoVO : " +seguimientoRow.getAttribute("OrigenTranferenciaCliente"));
                        
                
                        if (null != actividad && actividad!=0) {
                            seguimientoRow.setAttribute("IdCatActividadEconomica", actividad);
                            logger.warning("IdCatActividadEconomica " + seguimientoRow.getAttribute("IdCatActividadEconomica"));
                        }
                            if (null != modalidad && 0!= modalidad) {
                                seguimientoRow.setAttribute("IdTcaModalidadFinan", modalidad);
                                logger.warning("IdTcaModalidadFinan " + seguimientoRow.getAttribute("IdTcaModalidadFinan"));
                            }
                       

                        if (null != programaOperacion) {
                            seguimientoRow.setAttribute("ProgramaOperacion", programaOperacion);
                            logger.warning("ProgramaOperacion " + seguimientoRow.getAttribute("ProgramaOperacion"));
                        }
                        if(null!=destino){
                            seguimientoRow.setAttribute("DestinoFinanciamiento", destino);
                                                         //DestinoFinanciamiento
                            logger.warning("DestinoFinanciamiento " + seguimientoRow.getAttribute("DestinoFinanciamiento"));
                        }
                        if (null != actividadAsoc && 0!= actividadAsoc) {
                            seguimientoRow.setAttribute("IdCatIniciativaEstrategica", actividadAsoc);
                            logger.warning("IdCatIniciativaEstrategica " + seguimientoRow.getAttribute("IdCatIniciativaEstrategica"));
                        }
                        if (null != area && 0!= area) {
                            seguimientoRow.setAttribute("IdCatAreaFocalizacion", area);
                            logger.warning("IdCatAreaFocalizacion " + seguimientoRow.getAttribute("IdCatAreaFocalizacion"));
                        }
                        if (null != eje && 0!=eje) {
                            seguimientoRow.setAttribute("IdCatEjeEstrategico", eje);
                            logger.warning("IdCatEjeEstrategico " + seguimientoRow.getAttribute("IdCatEjeEstrategico"));
                        }
                        if (null != actividadF1 && 0!= actividadF1) {
                            seguimientoRow.setAttribute("IdTcaActividadEconomicaF1", actividadF1);
                            logger.warning("IdTcaActividadEconomicaF1 " + seguimientoRow.getAttribute("IdTcaActividadEconomicaF1"));
                        }
                        if (null != proyecto && 0!=proyecto ) {
                            seguimientoRow.setAttribute("IdTcaProyMunicipal", proyecto);
                            logger.warning("IdTcaProyMunicipal " + seguimientoRow.getAttribute("IdTcaProyMunicipal"));
                        }
                        if (null != idTcaProductoPrograma) {
                            seguimientoRow.setAttribute("IdTcaProductoPrograma", idTcaProductoPrograma);
                            logger.warning("idTcaProductoPrograma " + seguimientoRow.getAttribute("IdTcaProductoPrograma"));
                        }
                        try {
                            logger.warning("Realizando commit de DATOS GENERALES.");
                            getDBTransaction().commit();
                        } catch (Exception e) {
                            logger.warning("ERROR AL REALIZAR EL COMMIT EN DATOS GENERALES.", e);
                            logger.warning("reintentando commit....");
                            try {
                                logger.warning("Realizando commit de DATOS GENERALES.");
                                getDBTransaction().commit();
                            } catch (Exception ex) {
                                logger.warning("ERROR AL REALIZAR EL COMMIT EN DATOS GENERALES.", ex);
                                resultado = Boolean.FALSE;
                            }
                            
                        }
                    } else {
                        logger.warning("No tiene row");
                        resultado = Boolean.FALSE;
                    }
                }
            else{
                    logger.warning("Error no se obtuvo el registro de contrato desembolso");
                    resultado = Boolean.FALSE;
                }            
            }
        else{
                logger.warning("Error no se obtuvo el id de contrato desembolso");
                resultado = Boolean.FALSE;
            }
        logger.warning("Termina metodo actualizarDatosContrato");
        logger.warning("resultado: " + resultado);
        return resultado;
    }

    public void editarContrato(Long idContrato) {
        logger.warning("inicia metodo editarContrato");
        logger.warning("idContrato: " + idContrato);
        if(null!=idContrato){
            setvarId(idContrato);
            this.executeQuery();
            Row contratoRow = null;
            logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
            if(this.getEstimatedRowCount()>0){
                contratoRow= this.getRowAtRangeIndex(0);
                
                    if (null != contratoRow) {
                        logger.warning("ID contrato " + (Long) contratoRow.getAttribute("Id"));
                    }
                    setCurrentRow(contratoRow);
                }
            else{
                    logger.warning("Error no se obtuvo el registro de contrato desembolso");
                }            
            }
        else{
                logger.warning("Error no se obtuvo el id de contrato desembolso");
            }
        logger.warning("termina metodo editarContrato");
    }

    /**
     * Returns the variable value for varId.
     * @return variable value for varId
     */
    public Long getvarId() {
        return (Long) ensureVariableManager().getVariableValue("varId");
    }

    /**
     * Sets <code>value</code> for variable varId.
     * @param value value to bind as varId
     */
    public void setvarId(Long value) {
        ensureVariableManager().setVariableValue("varId", value);
    }

    public Boolean tieneCuentasBCIE(Long idContrato, String valor) {
        Boolean respuesta = null;
        Row row = null;
        logger.log(ADFLogger.WARNING, "Inside CONSULTAR CUENTAS CLIENTE.");
        if (null != idContrato) {
            try {
                setvarId(idContrato);
                this.executeQuery();
                logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                // 1) Asignamos valor de retorno
                if (this.getEstimatedRowCount() > 0) {
                    row = this.getRowAtRangeIndex(0);
                    logger.warning("origen: " + String.valueOf(row.getAttribute("OrigenTranferenciaCliente")));
                    if (null != row.getAttribute("OrigenTranferenciaCliente")) {
                        String comparar = (String) row.getAttribute("OrigenTranferenciaCliente");
                        if (comparar.equalsIgnoreCase(valor)) {
                            logger.warning("Los Valores de Origen de transferencia SI coinciden.");
                            respuesta = Boolean.TRUE;
                        }else{
                            logger.warning("Los Valores de Origen de transferencia NO coinciden.");
                            respuesta = Boolean.FALSE;
                        }
                    } else {
                        logger.warning("OrigenTranferenciaClientee se encuentra vacio.");
                    }
                }else{
                    logger.warning("No se encontraron registros de DatosContratoDesembolsoVO con ID: " + idContrato);
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "Error en consultar el contrato ", e);
            }
        } else {
            logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
        }
        logger.warning("Termina consultar contrato con cuentas BCIE");
        logger.warning("Valor que retorna es: " + respuesta);
        return respuesta;
    }
    
    public String usuarioCreador(Long idContrato){
        String resultado=null;
        java.util.Date fechaTerminoT102 = null;
        java.sql.Timestamp fechaEfectiva=null;
        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
            Row row = null;
            logger.log(ADFLogger.WARNING, "Inside usuarioCreador");
            if (null != idContrato) {
                try {
                    setvarId(idContrato);
                    this.executeQuery();
                    logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                    // 1) Asignamos valor de retorno
                    if (this.getEstimatedRowCount() > 0) {
                        row = this.first();
                        logger.warning("usuarioCreador: " + String.valueOf(row.getAttribute("LoginUsuario")));
                                    if(null!=(String)row.getAttribute("LoginUsuario")){
                                        resultado=(String)row.getAttribute("LoginUsuario");
                                        }
                                    else{
                                            logger.warning("No tiene registro de LoginUsuario");
                                        }
                    }
                    else{
                            logger.warning("No existe registro de contrato");
                        }
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
                    resultado=null;
                }
            } else {
                logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
                resultado=null;
            }
            logger.warning("Termina consultar usuarioCreador");
            logger.warning("Valor que retorna es: " + resultado);
        return resultado;
        }
    
    public String validarFechaEfectivaTermino(Long idOperacion, Long idContrato){
        String resultado=null;
        String mensaje=FenixModelConstants.FECHA_EFECTIVA_TERMINO;
        java.util.Date fechaTerminoT102 = null;
        java.sql.Timestamp fechaEfectiva=null;
        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
            Row row = null;
            logger.log(ADFLogger.WARNING, "Inside validarFechaEfectivaTermino");
            if (null != idContrato) {
                try {
                    setvarId(idContrato);
                    this.executeQuery();
                    logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                    // 1) Asignamos valor de retorno
                    if (this.getEstimatedRowCount() > 0) {
                        row = this.getRowAtRangeIndex(0);
                        logger.warning("FechaEfectiva: " + String.valueOf(row.getAttribute("FechaEstimadaDispRecursos")));
                        if(null != fenixAmImpl){
                            logger.warning("Obteniendo fecha de termino T102");
                            fechaTerminoT102 = fenixAmImpl.getTccTerminoVO().obtenerFechaTerminoPorId(FenixModelConstants.ID_TCA_TERMINO_INICIO_DESEMBOLSOS, idOperacion);
                            if(null!= fechaTerminoT102){
                                    if(null!=(java.sql.Timestamp)row.getAttribute("FechaEstimadaDispRecursos")){
                                        fechaEfectiva=(java.sql.Timestamp)row.getAttribute("FechaEstimadaDispRecursos");
                                        if(fechaEfectiva.before(fechaTerminoT102) || fechaEfectiva.compareTo(fechaTerminoT102)==0){
                                                logger.warning("La fecha efectiva cumple con la condicion");
                                            }
                                        else{
                                                logger.warning("La fecha efectiva no cumple con la condicion");
                                                resultado=mensaje;
                                            }
                                        }
                                    else{
                                            logger.warning("No tiene registro de fecha efectiva");
                                            resultado=mensaje;
                                        }
                            }
                            else{
                                    logger.warning("No se pudo obtener la fecha maxima del termino");
                                    resultado=mensaje;
                                }
                           
                        }

                    }
                } catch (Exception e) {
                    logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
                    resultado=mensaje;
                }
            } else {
                logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
                resultado=mensaje;
            }
            logger.warning("Termina consultar validarFechaEfectivaTermino");
            logger.warning("Valor que retorna es: " + resultado);

        
        return resultado;
        }
    
    public String validarFEfectivaFMaxima(Long idContrato, Long linea, Long idSolicitud){
        String resultado=null;
        String mensaje=null;
        String mensaje2=null;
        java.sql.Timestamp fechaMaxima = null;
        String codigoMoneda=null;
        BigDecimal montoDesembolso=BigDecimal.ZERO;
        //consultarLineaCreditoByIdLineaCredito
        java.sql.Timestamp fechaEfectiva=null;
        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsoAMImpl = (FenixGestorDesembolsosAMImpl) fenixAmImpl.getFenixGestorDesembolsosAM();
        Row row = null;
        logger.log(ADFLogger.WARNING, "Inside CONSULTAR validarFEfectivaFMaxima.");
            if(null!=idSolicitud){
                    codigoMoneda=fenixGestorDesembolsoAMImpl.getTipoMonedaDeSolicitudDesembolsosVO().getTipoMonedaDeSolicitud(idSolicitud);
                }
            else{
                    logger.warning("Codigo moneda no obtenido");
                }
            if (null != idContrato) {
                try {
                    setvarId(idContrato);
                    this.executeQuery();
                    logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                    // 1) Asignamos valor de retorno
                    if (this.getEstimatedRowCount() > 0) {
                        row = this.getRowAtRangeIndex(0);
                    logger.warning("FechaEfectiva: " + String.valueOf(row.getAttribute("FechaEstimadaDispRecursos")));
                    logger.warning("MontoDesembolsar: " + String.valueOf(row.getAttribute("MontoDesembolsar")));
                    if(null != fenixAmImpl){
                        Map obtuvo= new HashMap();
                        obtuvo=fenixGestorDesembolsoAMImpl.getConsultaLineaCreditoVO().consultarLineaCreditoByIdLineaCredito(linea, codigoMoneda);
                        if(null!=(java.sql.Timestamp)obtuvo.get("FECHAMAXIMADESEMBOLSO") ){
                                fechaMaxima=(java.sql.Timestamp)obtuvo.get("FECHAMAXIMADESEMBOLSO");
                                        if(null!=(java.sql.Timestamp)row.getAttribute("FechaEstimadaDispRecursos")){
                                            fechaEfectiva=(java.sql.Timestamp)row.getAttribute("FechaEstimadaDispRecursos");
                                            if(fechaEfectiva.before(fechaMaxima)){
                                                    logger.warning("La fecha efectiva cumple con la condicion");
                                                }
                                            else{
                                                    mensaje=FenixModelConstants.FECHA_EFECTIVA_MAXIMA;
                                                    logger.warning("La fecha efectiva no cumple con la condicion");
                                                }
                                        }
                                        else{
                                                logger.warning("No tiene registro de fecha efectiva");
                                                mensaje=FenixModelConstants.FECHA_EFECTIVA_MAXIMA;
                                            }
                            }
                        else{
                                logger.warning("No se pudo obtener la fecha maxima a desembolsar");
                                mensaje=FenixModelConstants.FECHA_EFECTIVA_MAXIMA;
                            }
                        if(null!=(BigDecimal)row.getAttribute("MontoDesembolsar")){
                                montoDesembolso=(BigDecimal)row.getAttribute("MontoDesembolsar");
                                BigDecimal montoDisponible=BigDecimal.ZERO;
                                if(null!=obtuvo.get("DISPONIBLE")){
                                        montoDisponible=(BigDecimal)obtuvo.get("DISPONIBLE");
                                        if(montoDisponible.compareTo(montoDesembolso)>=0){
                                                logger.warning("El monto desembolso cumple con la condicion");
                                            }else{
                                                logger.warning("El monto desembolso no cumple con la condicion");
                                                mensaje2=FenixModelConstants.MONTO_DESEMBOLSO_DISPONIBLE;
                                            }
                                    }else{                                      
                                        logger.warning("no hay monto disponible");
                                        mensaje2=FenixModelConstants.MONTO_DESEMBOLSO_DISPONIBLE;                                 
                                    }
                            }
                        else{
                                logger.warning("No tiene registro de monto a desembolsar");
                                mensaje2=FenixModelConstants.MONTO_DESEMBOLSO_DISPONIBLE;
                            }
                    }
                    }
                        
                } catch (Exception e) {
                    resultado="Eror al consultar las condiciones de validacion de reglas. ";
                    logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
                } 
            } else {
                resultado="Error al obtener el id contrato desembolso. ";
                logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
            }
            if(null!=mensaje){
                if(null!=resultado){
                        resultado=resultado.concat(mensaje);
                    }
                else{
                        resultado=mensaje;
                    }

                    if(null!=mensaje2){
                            resultado=resultado.concat(mensaje2);
                        }
                    else{
                        logger.warning("no hay mensaje de monto disponible");
                    }
                }
            else{
                if(null!=mensaje2){
                        if(null!=resultado){
                                resultado=resultado.concat(mensaje2);
                            }
                        else{
                                resultado=mensaje2;
                            }
                    }
                else{
                    logger.warning("no hay mensaje fecha maxima disponible");
                }
            }
            logger.warning("Termina consultar validarFEfectivaFMaxima y monto a desembolsar");
            logger.warning("Valor que retorna es: " + resultado);

        return resultado;
        }
    
    public Map propagarSinTransferencias(Long idContrato) {
        Map resultado = new HashMap();
        String respuestaServicio = null;
        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
        Row row = null;
        logger.log(ADFLogger.WARNING, "Inside propagarSinTransferencias");
        if (null != idContrato) {
            try {
                setvarId(idContrato);
                this.executeQuery();
                logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                // 1) Asignamos valor de retorno
                if (this.getEstimatedRowCount() > 0) 
                {
                    RowSetIterator iterator = this.getRowSetIterator();
                    iterator.reset();
                    
                    logger.warning("Elementos encontrados en iterator:  " + iterator.getRowCount());
                    
                    for(int i =0; i < iterator.getRowCount(); i++)
                    {
                        row = iterator.getRowAtRangeIndex(i);
                        
                        logger.warning("usuarioCreador: " + row.getAttribute("OrigenTranferenciaCliente"));
                        if (null != row.getAttribute("OrigenTranferenciaCliente")) {
                            String directo = FenixModelConstants.DIRECTO_CLIENTE;
                            String registroOrigen = (String) row.getAttribute("OrigenTranferenciaCliente");
                            if (directo.equalsIgnoreCase(registroOrigen)) {
                                FenixAMImpl fenixAM = null;
                                fenixAM = (FenixAMImpl) this.getRootApplicationModule();
                                String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);

                                DesembolsoPTSOAP12BindingQSService desembolsoService =
                                    IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
                                DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();

                                PropagarTransSinSalidaRecursosRequestType request =
                                    new PropagarTransSinSalidaRecursosRequestType();
                                PropagarTransSinSalidaRecursosResponseType response = null;
                                request.setIdDesembolso(idContrato);

                                try {
                                    java.util.Date horaInicio =
                                        ModelUtils.logStartWS(logger, request,
                                                              FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA_DIRECTO);
                                    response = desembolsoPT.propagarTransSinSalidaRecursos(request);
                                    ModelUtils.logEndWS(logger, response,
                                                        FenixModelConstants.WSC_PROPAGAR_TRANSFERENCIA_DIRECTO, horaInicio);
                                } catch (Exception e) {
                                    resultado.put("respuesta", Boolean.FALSE);
                                    logger.warning("ERROR al ejecutar servicio propagarSinTransferencias ", e);
                                    respuestaServicio =
                                        "ERROR al ejecutar el serivcio propagarSinTransferencias: " + e.getMessage();
                                }

                                if (null != response) {
                                    if (response.getResultado() != null && response.getResultado().getResult() != null &&
                                        response.getResultado().getResult().value() == "OK") {
                                        if (null != response.getContratoDesembolso() &&
                                            null != response.getContratoDesembolso().getTransferenciaFT05()) {
                                            resultado.put("respuesta", Boolean.TRUE);
                                            if (null !=
                                                response.getContratoDesembolso().getTransferenciaFT05().getFechaEfectiva()) {
                                                Timestamp fechaEfectiva =
                                                    new Timestamp(response.getContratoDesembolso().getTransferenciaFT05().getFechaEfectiva().toGregorianCalendar().getTimeInMillis());
                                                logger.warning("Fecha efectiva: " + fechaEfectiva);
                                                resultado.put("fecha", fechaEfectiva);
                                            }
                                            if (null !=
                                                response.getContratoDesembolso().getTransferenciaFT05().getIdFacturador() &&
                                                !response.getContratoDesembolso().getTransferenciaFT05().getIdFacturador().isEmpty()) {
                                                String bhqTransferenciaF05 =
                                                    response.getContratoDesembolso().getTransferenciaFT05().getIdFacturador();
                                                logger.warning("BHQObtenido: " + bhqTransferenciaF05);
                                                resultado.put("bhq", bhqTransferenciaF05);
                                            }
                                            if (0L ==
                                                response.getContratoDesembolso().getTransferenciaFT05().getIdTransferenciaFT05()) {
                                                Long idTransferencia =
                                                    response.getContratoDesembolso().getTransferenciaFT05().getIdTransferenciaFT05();
                                                logger.warning("idTransferencia: " + idTransferencia);
                                                resultado.put("transferencia", idTransferencia);
                                            }
                                        } else {
                                            logger.warning("Error al obtener los datos del TransferenciaFT05");
                                        }

                                    } else {
                                        logger.warning("Error al ejecutar el servicio la respuesta del servicio devuelve error");
                                        if (response.getResultado() == null ||
                                            (response.getResultado().getResult() != null &&
                                             response.getResultado().getResult().value().equalsIgnoreCase("ERROR"))) {
                                            logger.log(ADFLogger.WARNING, "Error propagarSinTransferencias.");
                                            respuestaServicio = "Error en el servicio de propagar sin Transferencias";

                                            if (response.getResultado().getMessage() != null) {
                                                respuestaServicio +=
                                                    "Message: " + response.getResultado().getMessage() + ". ";
                                            }

                                            if (response.getResultado().getError() != null &&
                                                response.getResultado().getError().getErrorCode() != null) {
                                                respuestaServicio +=
                                                    "Code Error: " + response.getResultado().getError().getErrorCode() +
                                                    ". ";
                                            }

                                            if (response.getResultado().getError() != null &&
                                                response.getResultado().getError().getErrorDescription() != null) {
                                                respuestaServicio +=
                                                    "Message Error: " +
                                                    response.getResultado().getError().getErrorDescription();
                                            }
                                        }

                                    }
                                } else {
                                    logger.warning("Error al ejecutar el servicio se obtienen datos vacios");
                                    respuestaServicio =
                                        "Error en el servicio de propagar sin Transferencias se obtienen datos vacios";
                                }
                            } else {
                                logger.warning("Es diferente el origen por lo tanto no aplica");
                                resultado.put("respuesta", Boolean.TRUE);

                            }

                        } else {
                            logger.warning("No tiene registro de OrigenDedatos");
                            //respuestaServicio =
                              //  "Error en el servicio de propagar sin Transferencias  no se obtuvo el Origen de datos";
                              resultado.put("respuesta", Boolean.TRUE);
                            
                        }
                    }
                    
                    iterator.closeRowSetIterator();  
                    
                } else {
                    logger.warning("No existe registro de contrato");
                    respuestaServicio = "Error en el servicio de propagar sin Transferencias  no existe contrato";
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
                respuestaServicio = "Error en el servicio de propagar sin Transferencias" + e.getMessage();
                resultado.put("respuesta", Boolean.FALSE);
            } finally {
                if (respuestaServicio != null) {
                    JboException exception = new JboException(respuestaServicio);
                    throw exception;
                }
            }
        } else {
            logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
            resultado.put("respuesta", Boolean.FALSE);
        }
        if (respuestaServicio != null) {
            resultado.put("respuesta", Boolean.FALSE);
            JboException exception = new JboException(respuestaServicio);
            throw exception;
        }
        logger.warning("Termina consultar propagarSinRecursos");
        logger.warning("Valor que retorna es: " + resultado);
        return resultado;
    }
    
    public Map obtenerFT05(Long idContrato) {
        Map resultado = new HashMap();
        
        Row row = null;
        logger.log(ADFLogger.WARNING, "Inside obtenerFT05");
        if (null != idContrato) {
            setvarId(idContrato);
            this.executeQuery();
            logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                // 1) Asignamos valor de retorno
                if (this.getEstimatedRowCount() > 0) {
                    row = this.getRowAtRangeIndex(0);
                    resultado.put("respuesta", Boolean.TRUE);
                    if(null!= row.getAttribute("FechaEfectivaFt05")){
                    resultado.put("fecha", row.getAttribute("FechaEfectivaFt05"));
                        }
                    //Date hora=new Date();
                    //Timestamp fechaActual= new Timestamp(hora.getTime());
                    //resultado.put("fecha",fechaActual);  //prueba
                    if(null!=row.getAttribute("BhqTransferenciaFt05")){
                    resultado.put("bhq", row.getAttribute("BhqTransferenciaFt05"));
                        }
                    //resultado.put("bhq","qwerqe"); //prueba
                } else {
                    logger.warning("No existe registro de contrato");
                    resultado.put("respuesta", Boolean.FALSE);
                }
            
        } else {
            logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
            resultado.put("respuesta", Boolean.FALSE);
        }
        logger.warning("Termina consultar obtenerFT05");
        logger.warning("Valor que retorna es: " + resultado);
        return resultado;
    }
    
    public String obtencionPrograma(Long idContrato) {
        String respuesta = null;
        Row row = null;
        this.executeQuery();
        logger.log(ADFLogger.WARNING, "Inside obtencionPrograma");
        logger.warning("idContrato: desembolso "+ idContrato);
        if (null != idContrato) {
            try {
                setvarId(idContrato);
                this.executeQuery();
                logger.warning("Elementos encontrados:  " + this.getEstimatedRowCount());
                // 1) Asignamos valor de retorno
                if (this.getEstimatedRowCount() > 0) {
                    row = this.getRowAtRangeIndex(0);
                    if (null != row.getAttribute("ProgramaOperacion")) {
                        logger.warning("ProgramaOperacion: " + String.valueOf(row.getAttribute("ProgramaOperacion")));
                        respuesta = (String) row.getAttribute("ProgramaOperacion");
                    } else {
                        logger.warning("Los valores de ProgramaOperacion se encuentran vacios");
                    }
                }
            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, "Error en consultar el contrato " + e.getClass() + ":" + e.getMessage());
            } 
        } else {
            logger.log(ADFLogger.WARNING, "Error al obtener el id de contrato desembolso");
        }
        logger.warning("Termina obtencionPrograma");
        logger.warning("Valor que retorna es: " + respuesta);
        return respuesta;
    }
    

    public void afterCommit(TransactionEvent event){
        executeQuery();
    }

    @Override
    public void afterRollback(TransactionEvent transactionEvent) {
        
        executeQuery();
        
        // TODO Implement this method
        super.afterRollback(transactionEvent);
    }
}

