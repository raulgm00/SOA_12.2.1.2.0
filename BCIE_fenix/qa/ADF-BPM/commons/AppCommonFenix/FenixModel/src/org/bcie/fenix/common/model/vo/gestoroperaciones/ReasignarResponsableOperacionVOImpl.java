package org.bcie.fenix.common.model.vo.gestoroperaciones;

import com.bcie.xmlns.usuarioservice.Usuario12BndQSService;
import com.bcie.xmlns.usuarioservice.UsuarioPT;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixGestorOperacionesAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.gestoroperaciones.common.ReasignarResponsableOperacionVO;
import org.bcie.usuariobo.ListaNombres;
import org.bcie.usuariobo.ListaUsuarios;
import org.bcie.usuariobo.Usuario;
import org.bcie.usuariomo.ConsultarAtributosUsuarioRequestType;
import org.bcie.usuariomo.ConsultarAtributosUsuarioResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Jul 20 12:25:20 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReasignarResponsableOperacionVOImpl extends ViewObjectImpl implements ReasignarResponsableOperacionVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ReasignarResponsableOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public String[] obtenerRepresentantesFenix() {
        logger.warning("Entrando en obtenerRepresentantesFenix");
        List<String> gruposFenix = obtenerListaGruposRepresentantes();
        List<String> listaRepresentantes = obtenerUsuariosPorGrupo(gruposFenix);
        List<String> listaRepresentantesFiltro = new ArrayList<>();
        
        String anterior = "";
        if (null != listaRepresentantes) {
            Collections.sort(listaRepresentantes);
            
            // Usar log solo en DEV
            //logger.warning("listaRepresentantes: " + listaRepresentantes.toString());
            
            for(String representante: listaRepresentantes) {
                // Evitamos usuarios duplicados
                if (!anterior.equals(representante)) {
                    listaRepresentantesFiltro.add(representante);
                }
                
                anterior = representante;
            }
        }
        
        // Usar log solo en DEV
        logger.warning("listaRepresentantesFiltro: " + listaRepresentantesFiltro.toString());
        
        return ModelUtils.convertListStringToArray(listaRepresentantesFiltro);
    }
    
    private List<String> obtenerListaGruposRepresentantes() {
        List<String> gruposFenix = new ArrayList<>();
        RowSetIterator rowSetIterator = getFenixGestorOperacionesAM().getCatPaisesVO().createRowSetIterator(null);
        rowSetIterator.reset();
        
        while(rowSetIterator.hasNext()) {
            Row row = rowSetIterator.next();
            String codPais = (String)row.getAttribute("Cod");
            
            if (null != codPais) {
                gruposFenix.add(FenixModelConstants.OID_PREFIJO_GRUPO_REPRESENTANTE.concat(codPais));
            } else {
                logger.warning("El codigo de pais es nulo");
            }
        }
        
        rowSetIterator.closeRowSetIterator();
        return gruposFenix;
    }
    
    private List<String> obtenerUsuariosPorGrupo(List<String> gruposFenix) {
        logger.warning("Entrando en obtenerUsuariosPorGrupo:");
        if (null != gruposFenix) {
            logger.warning("gruposFenix: " + gruposFenix.toString());
        }
        
        UsuarioPT usuarioPT = getUsuarioPT();
        ConsultarAtributosUsuarioRequestType request = consultarAtributosListaUsuarioRequest(gruposFenix);
        ConsultarAtributosUsuarioResponseType response = new ConsultarAtributosUsuarioResponseType();
        
        try {
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_USUARIOS_GRUPO);
            response = usuarioPT.consultarAtributosUsuario(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_USUARIOS_GRUPO, horaInicio);
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR, "Error al obtener los usuarios por grupo", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error al obtener lo atributos del usuario. Intentelo más tarde."));
            throw ex;
        }
        
        return mapeoUsuarioResponse(response);
    }
    
    private List<String> mapeoUsuarioResponse(ConsultarAtributosUsuarioResponseType response) {
        ListaUsuarios usuarios = new ListaUsuarios();
        List<String> listaUsuarios = new ArrayList<>();

        if (response.getResultado().getResult().value().equalsIgnoreCase("OK")) {
            usuarios = response.getListaUsuarios();
            for (Usuario usuario : usuarios.getUsuario()) {
                if (null != usuario && null != usuario.getNombreUsuario()) {
                    listaUsuarios.add(usuario.getNombreUsuario());
                }
            }
        }
        
        return listaUsuarios;
    }
    
    private FenixGestorOperacionesAMImpl getFenixGestorOperacionesAM() {
        FenixGestorOperacionesAMImpl fenixGestorOperacionesAM = (FenixGestorOperacionesAMImpl) getRootApplicationModule();
        return fenixGestorOperacionesAM;
    }
    
    private UsuarioPT getUsuarioPT() {
        String wsdl = getFenixGestorOperacionesAM().getWsdl(IWsdlLocation.USUARIO);
        Usuario12BndQSService usuario12BndQSService =
            IWsdlLocation.Service.getInstance(Usuario12BndQSService.class, wsdl);
        UsuarioPT usuarioPT = usuario12BndQSService.getUsuario12BndQSPort();
        
        return usuarioPT;
    }
    
    private ConsultarAtributosUsuarioRequestType consultarAtributosListaUsuarioRequest(List<String> usuarios) {
        ConsultarAtributosUsuarioRequestType request = new ConsultarAtributosUsuarioRequestType();

        ListaNombres listaNombres = new ListaNombres();
        if (null != usuarios) {
            for(String usuario : usuarios) {
                listaNombres.getNombreUsuario().add(usuario);
            }
        }
        
        request.setListaNombres(listaNombres);
        
        return request;
    }
}

