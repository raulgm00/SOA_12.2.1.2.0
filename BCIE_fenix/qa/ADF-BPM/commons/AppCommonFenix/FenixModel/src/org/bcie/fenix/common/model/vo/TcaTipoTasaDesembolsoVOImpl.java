package org.bcie.fenix.common.model.vo;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.Key;import oracle.jbo.Row;import oracle.jbo.ViewCriteria;import oracle.jbo.server.ViewObjectImpl;import org.bcie.fenix.common.model.vo.common.TcaTipoTasaDesembolsoVO;// ---------------------------------------------------------------------// ---    File generated by Oracle ADF Business Components Design Time.// ---    Mon Oct 24 13:12:16 CDT 2016// ---    Custom code may be added to this class.// ---    Warning: Do not modify method signatures of generated methods.// ---------------------------------------------------------------------public class TcaTipoTasaDesembolsoVOImpl extends ViewObjectImpl implements TcaTipoTasaDesembolsoVO {    private static ADFLogger logger = ADFLogger.createADFLogger(TcaTipoTasaDesembolsoVOImpl.class);    /**     * This is the default constructor (do not remove).     */    public TcaTipoTasaDesembolsoVOImpl() {    }        Integer banEstatus = 1;        public Boolean getTipoTasaConBanEstatus(){        Boolean error = Boolean.TRUE;        logger.log(ADFLogger.WARNING, " <-> getTipoTasaConBanEstatus <-> ");        Row[] row = null;         ViewCriteria criteria = null;        try{            criteria = this.getViewCriteriaManager().getViewCriteria("BanEstatusCriteria");            criteria.ensureVariableManager().setVariableValue("pBanEstatus", banEstatus);            this.applyViewCriteria(criteria);            this.executeQuery();            row = this.getAllRowsInRange();            if(row != null){                if(row.length > 0){                    error = Boolean.FALSE;                }           }else{                logger.log(ADFLogger.WARNING, "NULL <-getTipoTasaConBanEstatus->");           }        }catch(Exception e){            logger.log(ADFLogger.WARNING, "Error en getTipoTasaConBanEstatus" + e.getClass() +                                ":" + e.getMessage());        }        this.getViewCriteriaManager().removeApplyViewCriteriaName("BanEstatusCriteria");        return error;        }        public String obtenerCodigoexternoPorId(Integer IdTcaTipoTasa) {        logger.warning("Inicia metodo obtenerCodigoexternoPorId.");        String codigoExterno = null;        Row row = null;        ViewCriteria criteria = null;        Integer idTcaTipoTasaRow = null;        if (null == IdTcaTipoTasa) {            logger.warning("Parametro IdTipoTasa requerido es NULL.");            return codigoExterno;        }        try {            criteria = this.getViewCriteriaManager().getViewCriteria("TcaTipoTasaDesembolsoPorIdVC");            criteria.ensureVariableManager().setVariableValue("pIdTipoTasa", IdTcaTipoTasa);            this.applyViewCriteria(criteria);            this.executeQuery();            row = first();            this.getViewCriteriaManager().removeApplyViewCriteriaName("TcaTipoTasaDesembolsoPorIdVC");            executeQuery();        } catch (Exception e) {            logger.log(ADFLogger.WARNING, "Error en getTipoTasaConBanEstatus" + e.getClass() + ":" + e.getMessage());        }        if (null != row) {            try {                idTcaTipoTasaRow = (Integer) row.getAttribute("Id");            } catch (Exception e) {                logger.warning("ERROR al recuperar el Id: ", e);            }            if (null != idTcaTipoTasaRow) {                if (idTcaTipoTasaRow.compareTo(IdTcaTipoTasa) == 0) {                    logger.warning("TcaTipoTasaDesembolso encontratdo. Obteniendo CodigoExterno.");                    try {                        codigoExterno = (String) row.getAttribute("CodExterno");                    } catch (Exception e) {                        logger.warning("ERROR al recuperar el CodigoExterno: ", e);                    }                }            }        } else {            logger.warning("No se encontro Registro para Tipo de tasa: " + IdTcaTipoTasa);        }        logger.warning("CodigoExterno Recuperado: " + codigoExterno);        logger.warning("Termina metodo obtenerCodigoexternoPorId.");        return codigoExterno;    }        /**     * Returns the variable value for pBanEstatus.     * @return variable value for pBanEstatus     */    public Integer getpBanEstatus() {        return (Integer) ensureVariableManager().getVariableValue("pBanEstatus");    }    /**     * Sets <code>value</code> for variable pBanEstatus.     * @param value value to bind as pBanEstatus     */    public void setpBanEstatus(Integer value) {        ensureVariableManager().setVariableValue("pBanEstatus", value);    }    /**     * Returns the variable value for pIdTipoTasa.     * @return variable value for pIdTipoTasa     */    public Integer getpIdTipoTasa() {        return (Integer) ensureVariableManager().getVariableValue("pIdTipoTasa");    }    /**     * Sets <code>value</code> for variable pIdTipoTasa.     * @param value value to bind as pIdTipoTasa     */    public void setpIdTipoTasa(Integer value) {        ensureVariableManager().setVariableValue("pIdTipoTasa", value);    }}