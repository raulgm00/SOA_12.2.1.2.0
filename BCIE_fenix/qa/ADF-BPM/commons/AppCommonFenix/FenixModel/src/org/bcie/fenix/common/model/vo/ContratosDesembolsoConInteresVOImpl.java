package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixImplementacionPctAMImpl;
import org.bcie.fenix.common.model.vo.common.ContratosDesembolsoConInteresVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Dec 14 17:08:13 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ContratosDesembolsoConInteresVOImpl extends ViewObjectImpl implements ContratosDesembolsoConInteresVO {
     
     private static ADFLogger logger = null;
     
    public ContratosDesembolsoConInteresVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }      
    }

    public Row[] recuperarInteresDeContratos(Long idOperacion, Long idSolicitud) {
        logger.warning("Inicia metodo recuperarInteresDeContratos");
        logger.warning("idOperacion: " + idOperacion);
        logger.warning("idSolicitud: " + idSolicitud);
        
        Boolean esActualizado = Boolean.TRUE;
        if (idOperacion == null) {
            logger.warning("parametro idOperacion null no se iniciara la busqueda de contratos");
            return null;
        }

        Row[] contratosArray = null;
        int contador = 0;
        Integer idEstadoCreado = null;

        //Metodo para actualizar el estado del contrato de desembolsado a por liquidar
        esActualizado = actualizarEstadoContratoAPorLiquidar(idOperacion);
        if (!esActualizado) {
            logger.warning("Error al actualizar el estado de los contratos");
        } else {
            //Metodo para obtener los contratos con estado por liquidar actualizado previamente
            //obtenerContratoEstadoPorLiquidar();
            this.setpIdOperacion(idOperacion);
            setpIdEstadoContrato(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR);
            setpEstadoCreado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION);
            setpEstadoValidado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_VALIDADO_POR_IMPLEMENTACION);
            setpEstadoLiquidado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_LIQUIDADO);
            this.executeQuery();
            logger.warning("Numero de contratos con estado Por liquidar y creado por implementacin." + this.getEstimatedRowCount());
        }
        Long rowCount = (getEstimatedRowCount() > 0) ? getEstimatedRowCount() : null;
        logger.warning("numero de contratos :" + rowCount);
        if (rowCount != null) {

            int numContratos = rowCount.intValue();

            contratosArray = new Row[numContratos];

            FenixAMImpl fenixAMImpl = null;
            RowSetIterator iteratorContrato = null;
            ContratosDesembolsoConInteresVORowImpl ContratoDesembolsoRow = null;

            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixImplementacionPctAMImpl implementacionPctAM =
                (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();

            logger.warning("Inf, iterando sobre los contratos...");
            iteratorContrato = this.createRowSetIterator(null);
            iteratorContrato.reset();
            
            Timestamp fechaFlex = null;
            oracle.jbo.domain.Date fechaFlexDate = null;
            
            if (iteratorContrato.hasNext()) {
                
                // Verifica en tabla que se tenga registro de fecha
                fechaFlexDate = implementacionPctAM.getActualizarOperacionVO().obtenerFechaFlexStatic(idOperacion);
                
                if (fechaFlexDate != null) {
                    fechaFlex = fechaFlexDate.timestampValue();
                } else {
                    logger.warning("Fecha flex se obtendra de servicio.");
                    
                    fechaFlexDate = implementacionPctAM.getActualizarOperacionVO().obtenerFechaFlex();
                    
                    if (null != fechaFlexDate) {
                        fechaFlex = fechaFlexDate.timestampValue();
                    } else {
                        logger.warning("Error. La fecha de flex se recupero nula.");
                    }
                }
            } else {
                logger.warning("Iterador sin registros");
            }
            
            while (iteratorContrato.hasNext()) {
                logger.warning("Inf, inicia el iterador");
                ContratoDesembolsoRow = (ContratosDesembolsoConInteresVORowImpl) iteratorContrato.next();
                
                    logger.warning("Inf, contrado con id : " + ContratoDesembolsoRow.getAttribute("Id"));
                if(null != ContratoDesembolsoRow.getAttribute("IdTcaEstado")){
                    idEstadoCreado = (Integer)ContratoDesembolsoRow.getAttribute("IdTcaEstado");
                    if(idEstadoCreado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR) == 0 ||
                        idEstadoCreado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_LIQUIDADO) == 0){
                    String contratoFlexcube = (String) ContratoDesembolsoRow.getAttribute("ContratoFlexcube");
                    logger.warning("Inf, ContratoFlexcube del contrato : " + contratoFlexcube);

                    Long idPrepago =
                        implementacionPctAM.getObtenerDatosPrepagoByContratoFlexcube().recuperarIdPrepagoByContratoFlexcube(contratoFlexcube);
                    logger.warning("Inf, idPrepago  del contrato : " + idPrepago);
                    
                    // Se obtiene interes por medio del SP_CALCULO_DE_INTERES_ENV_COB por la FNXII-6752
                    String idContratoFlexcube = (String) ContratoDesembolsoRow.getAttribute("ContratoFlexcube");
                    
                    BigDecimal interes = BigDecimal.ZERO;
                    if (null != idContratoFlexcube) {
                        interes = implementacionPctAM.getCalcularInteresContratoByIdPrepagoSpVO().obtenerInteresPorIdContratoFlexcube(idContratoFlexcube, fechaFlex);
                    } else {
                        logger.warning("El id del contrato es nulo. ");
                    }
                    
//                    BigDecimal interes =
//                        implementacionPctAM.getCalcularInteresContratoByIdPrepagoSpVO().interesContratoByIdPrepago(idPrepago);
                    logger.warning("Inf, interes  del contrato : " + interes);

                    ContratoDesembolsoRow.setAttribute("Interes", interes);
                    }else{
                        logger.warning("El estado del contrato es creado por implementacion :" + idEstadoCreado);
                    }
                contratosArray[contador] = ContratoDesembolsoRow;
                contador = contador + 1;
                }
            }
            iteratorContrato.closeRowSetIterator();

        } else {
            logger.warning("*Inf, No se encontraron contratos");
        }

        logger.warning("*Inf, Numero de registros encontrados :" + getEstimatedRowCount());

        logger.warning("Termina metodo recuperarInteresDeContratos");
        return contratosArray;
    }
    
    public Row[] recuperarInteresDeContratosActual(Long idOperacion, Long idSolicitud, oracle.jbo.domain.Date fechaFlexActual) {
        logger.warning("Inicia metodo recuperarInteresDeContratos");
        logger.warning("idOperacion: " + idOperacion);
        logger.warning("idSolicitud: " + idSolicitud);
        logger.warning("fechaFlexActual: " + fechaFlexActual);
        
        Boolean esActualizado = Boolean.TRUE;
        if (idOperacion == null) {
            logger.warning("parametro idOperacion null no se iniciara la busqueda de contratos");
            return null;
        }

        Row[] contratosArray = null;
        int contador = 0;
        Integer idEstadoCreado = null;

        //Metodo para actualizar el estado del contrato de desembolsado a por liquidar
        esActualizado = actualizarEstadoContratoAPorLiquidar(idOperacion);
        if (!esActualizado) {
            logger.warning("Error al actualizar el estado de los contratos");
        } else {
            //Metodo para obtener los contratos con estado por liquidar actualizado previamente
            //obtenerContratoEstadoPorLiquidar();
            this.setpIdOperacion(idOperacion);
            setpIdEstadoContrato(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR);
            setpEstadoCreado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION);
            setpEstadoValidado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_VALIDADO_POR_IMPLEMENTACION);
            setpEstadoLiquidado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_LIQUIDADO);
            this.executeQuery();
            logger.warning("Numero de contratos con estado Por liquidar y creado por implementacin." + this.getEstimatedRowCount());
        }
        Long rowCount = (getEstimatedRowCount() > 0) ? getEstimatedRowCount() : null;
        logger.warning("numero de contratos :" + rowCount);
        if (rowCount != null) {

            int numContratos = rowCount.intValue();

            contratosArray = new Row[numContratos];

            FenixAMImpl fenixAMImpl = null;
            RowSetIterator iteratorContrato = null;
            ContratosDesembolsoConInteresVORowImpl ContratoDesembolsoRow = null;

            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixImplementacionPctAMImpl implementacionPctAM =
                (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();

            logger.warning("Inf, iterando sobre los contratos...");
            iteratorContrato = this.createRowSetIterator(null);
            iteratorContrato.reset();
            
            while (iteratorContrato.hasNext()) {
                logger.warning("Inf, inicia el iterador");
                ContratoDesembolsoRow = (ContratosDesembolsoConInteresVORowImpl) iteratorContrato.next();
                
                    logger.warning("Inf, contrado con id : " + ContratoDesembolsoRow.getAttribute("Id"));
                if(null != ContratoDesembolsoRow.getAttribute("IdTcaEstado")){
                    idEstadoCreado = (Integer)ContratoDesembolsoRow.getAttribute("IdTcaEstado");
                    if(idEstadoCreado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR) == 0 ||
                        idEstadoCreado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_LIQUIDADO) == 0){
                    String contratoFlexcube = (String) ContratoDesembolsoRow.getAttribute("ContratoFlexcube");
                    logger.warning("Inf, ContratoFlexcube del contrato : " + contratoFlexcube);

                    Long idPrepago =
                        implementacionPctAM.getObtenerDatosPrepagoByContratoFlexcube().recuperarIdPrepagoByContratoFlexcube(contratoFlexcube);
                    logger.warning("Inf, idPrepago  del contrato : " + idPrepago);
                    
                    // Se obtiene interes por medio del SP_CALCULO_DE_INTERES_ENV_COB por la FNXII-6752
                    String idContratoFlexcube = (String) ContratoDesembolsoRow.getAttribute("ContratoFlexcube");
                    
                    BigDecimal interes = BigDecimal.ZERO;
                    if (null != idContratoFlexcube) {
                        interes = implementacionPctAM.getCalcularInteresContratoByIdPrepagoSpVO().obtenerInteresPorIdContratoFlexcube(idContratoFlexcube, fechaFlexActual.timestampValue());
                    } else {
                        logger.warning("El id del contrato es nulo. ");
                    }
                    
    //                    BigDecimal interes =
    //                        implementacionPctAM.getCalcularInteresContratoByIdPrepagoSpVO().interesContratoByIdPrepago(idPrepago);
                    logger.warning("Inf, interes  del contrato : " + interes);

                    ContratoDesembolsoRow.setAttribute("Interes", interes);
                    }else{
                        logger.warning("El estado del contrato es creado por implementacion :" + idEstadoCreado);
                    }
                contratosArray[contador] = ContratoDesembolsoRow;
                contador = contador + 1;
                }
            }
            iteratorContrato.closeRowSetIterator();

        } else {
            logger.warning("*Inf, No se encontraron contratos");
        }

        logger.warning("*Inf, Numero de registros encontrados :" + getEstimatedRowCount());

        logger.warning("Termina metodo recuperarInteresDeContratos");
        return contratosArray;
    }
    
    /**
     * Metodo para obtener los contratos con estado desembolsado y actualizarlos
     * a estado por liquidar.
     * @param idOperacion
     * @return esActualizado
     */
        private Boolean actualizarEstadoContratoAPorLiquidar(Long idOperacion){
            logger.warning("Entra en actualizarEstadoContratoAPorLiquidar");
            //Se invoca FenixImplementacionAM para obtener la VO ContratoDesembolso 
            //e invocar metodo que actualiza el estado del contrato
            FenixImplementacionPctAMImpl fenixImplementacionPctAMImpl = null;
                fenixImplementacionPctAMImpl = (FenixImplementacionPctAMImpl) this.getApplicationModule(); 
                
            Boolean esActualizado = Boolean.TRUE;
            Long idContrato = null;
            
            setpIdOperacion(idOperacion);
            setpIdEstadoContrato(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESEMBOLSADO);
            setpEstadoCreado(null);
            setpEstadoValidado(null);
            setpEstadoLiquidado(null);
            executeQuery();
            
            try {
//                ViewCriteria criteria =
//                    this.getViewCriteriaManager().getViewCriteria("ContratosDesembolsoPorTcaEstadoVOCriteria");
//                criteria.ensureVariableManager().setVariableValue("pIdTcaEstado",
//                                                                  FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_DESEMBOLSADO);
//                
//                this.applyViewCriteria(criteria);
//                this.executeQuery();
                logger.warning("Numero de contratos con estado desembolsado." + this.getEstimatedRowCount());
    
                RowSetIterator rowsContratoDesembolsadoVo = createRowSetIterator(null);
                rowsContratoDesembolsadoVo.reset();
            while (rowsContratoDesembolsadoVo.hasNext()) {
                ContratosDesembolsoConInteresVORowImpl rowL =
                    (ContratosDesembolsoConInteresVORowImpl) rowsContratoDesembolsadoVo.next();
                if (null != rowL) {
                    idContrato = rowL.getId();
                    esActualizado =
                        fenixImplementacionPctAMImpl.getContratoDesembolsoVO().actualizarEstadoContratoAPorLiquidar(idContrato);
                    if (!esActualizado) {
                        break;
                    }
                }
            }
            rowsContratoDesembolsadoVo.closeRowSetIterator();
        } catch (Exception e) {
            logger.warning("Error al ejecutar criterio.", e);
        } 
//            finally {
//            this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratosDesembolsoPorTcaEstadoVOCriteria");
//        }
            this.setpIdOperacion(idOperacion);
            setpIdEstadoContrato(null);
            setpEstadoCreado(null);
            setpEstadoValidado(null);
            setpEstadoLiquidado(null);
            this.executeQuery();
            logger.warning("Numero de contratos." + this.getEstimatedRowCount());
            return esActualizado;
        }
    
    public Boolean actualizarEstadoDesembolso(Integer estadoAnterior, Integer estadoNuevo) {
        logger.log(ADFLogger.WARNING, "Into actualizarEstadoDesembolso.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl implementacionPctAM =
            (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();
        
        // Es para las tarea de validar envio al cobro y envio al cobro
        Boolean respuesta = actualizaDesembolso(estadoAnterior, estadoNuevo);
        if (!respuesta) {
            try {
                // Es para la tarea de liquidar desembolsos anteriores
                respuesta =
                    implementacionPctAM.getContratosPorLiquidarByOperacion().actualizaDesembolsoLiquidar(estadoAnterior,
                                                                                                         estadoNuevo);

            } catch (Exception ex) {
                logger.warning("Mensjae: ", ex);
                respuesta =Boolean.FALSE;
            }
        }
        logger.warning("respuestaFinal: " + respuesta);
        return respuesta;
    }
    
    public Boolean actualizarEstadoDesembolsoCreado() {
        logger.log(ADFLogger.WARNING, "Into actualizarEstadoDesembolsoCreado.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl implementacionPctAM =
            (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();
        Integer estadoContrato = null;
        Long idContrato = null;
        Boolean respuesta = Boolean.FALSE;
        Boolean actualizo = Boolean.FALSE;
            try {
                logger.warning("Elementos encontrados: " + this.getEstimatedRowCount());
                RowSetIterator iterator = this.createRowSetIterator(null);
                iterator.reset();
                while(iterator.hasNext()){
                    ContratosDesembolsoConInteresVORowImpl row = (ContratosDesembolsoConInteresVORowImpl)iterator.next();
                    estadoContrato = null;
                    idContrato = null;
                    if (null != row.getId()) {
                        idContrato = row.getId();
                        logger.warning("Contrato encontrado : " + idContrato);
                    }
                    if (null != row.getIdTcaEstado()) {
                        estadoContrato = row.getIdTcaEstado();
                        logger.warning("Estado del Contrato encontrado : " + estadoContrato);
                    }
                    if (null != estadoContrato) {
                        logger.warning("El estado de contrato : " + estadoContrato + " Es igual al contrato Anterior : " + 
                                       FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_VALIDADO_POR_IMPLEMENTACION);
                        if (estadoContrato.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_VALIDADO_POR_IMPLEMENTACION) == 0) {
                            logger.warning("El estado es En validacion para el contrato : " + idContrato);
                                actualizo =
                                    implementacionPctAM.getContratoDesembolsoVO().estadoImplementacionDesembolso(idContrato,
                                                                                                                 FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION);
                                logger.warning("Actualizo registro: " + actualizo + " para el id de contrato: " +
                                               idContrato);
                                if(actualizo){
                                    respuesta = implementacionPctAM.getContratoDesembolsoVO().commitDesembolso();
                                    if(!respuesta){
                                        logger.warning("No se realizo el commit.");
                                        break;
                                    }
                                }else{
                                    logger.warning("No se encontro contrato para actualizar.");
                                }
                        }else{
                            logger.warning("El estado del contrato no es en validacion, se conserva su estado.");
                        }
                        }
                }
                iterator.closeRowSetIterator();

            } catch (Exception ex) {
                logger.warning("Mensjae: ", ex);
                respuesta =Boolean.FALSE;
            }
        logger.warning("respuestaFinal: " + respuesta);
        return respuesta;
    }
    
    public Boolean actualizaDesembolso(Integer estadoAnterior, Integer estadoNuevo) {
            logger.log(ADFLogger.WARNING, "Into actualizaDesembolso.");
            FenixAMImpl fenixAMImpl = null;
            fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
            FenixImplementacionPctAMImpl implementacionPctAM =
                (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();
            Boolean respuesta = Boolean.FALSE;
            Boolean actualizo = Boolean.FALSE;
            Integer estadoContrato = null;
            Long idContrato = null;
            logger.warning("Elementos encontrados: " + this.getEstimatedRowCount());
            this.setRangeSize(-1);
            if (this.getEstimatedRowCount() > 0) {
                for (Row desembolsoRow : this.getAllRowsInRange()) {
                    estadoContrato = null;
                    idContrato = null;
                    if (null != desembolsoRow.getAttribute("Id")) {
                        idContrato = (Long) desembolsoRow.getAttribute("Id");
                        logger.warning("id del contrato : " + idContrato);
                    }else{
                        logger.warning("El id del contrato es nulo.");
                    }
                    if (null != desembolsoRow.getAttribute("IdTcaEstado")) {
                        estadoContrato = (Integer) desembolsoRow.getAttribute("IdTcaEstado");
                        logger.warning("Estado del contrato : " + estadoContrato);
                    }else{
                        logger.warning("El estado del contrato es nulo.");
                    }
                    if (null != estadoContrato) {
                        if (estadoContrato.compareTo(estadoAnterior) == 0) {
                            logger.warning("El estado del contrato : " + estadoContrato + " Es igual al estado del contrato anterior : " + estadoAnterior);
                            if (null != idContrato) {
                                actualizo =
                                    implementacionPctAM.getContratoDesembolsoVO().estadoImplementacionDesembolso(idContrato,
                                                                                                                 estadoNuevo);
                                logger.warning("Actualizo registro: " + actualizo + " para el id de contrato: " +
                                               idContrato);
                            }else{
                                logger.warning("El id del contrato es nulo.");
                            }
                        }else{
                            logger.warning("Los estados no son iguales.");
                        }
                    }else{
                        logger.warning("Esdtado nulo.");
                    }
                }
                respuesta = implementacionPctAM.getContratoDesembolsoVO().commitDesembolso();
            }

            logger.warning("respuestaFinal: " + respuesta);
            return respuesta;
        }
    
    /**
     * Metodo para filtrar los contratos con estado Por liquidar
     */
    private void obtenerContratoEstadoPorLiquidar() {
        logger.warning("Entra en obtenerContratoEstadoPorLiquidar");
        //En acuerdo con QA se realiza la busqueda de los contratos de desmbolso
        //con estado Por liquidar y con estado Creado por implementacion 
        //ya que se mostraran en el tree table
        try {
            ViewCriteria criteria =
                this.getViewCriteriaManager().getViewCriteria("ContratosDesembolsoPorTcaEstadoVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdTcaEstado",
                                                              FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            logger.warning("Numero de contratos con estado Por liquidar y creado por implementacin." + this.getEstimatedRowCount());
        } catch (Exception e) {
            logger.warning("Error al consultar los contratos por liquidar y creado por implementacion.", e);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratosDesembolsoPorTcaEstadoVOCriteria");
        }
    }
    //Este metodo posiblemente se eliminara
    public BigDecimal obtenerMontoTotalContratosPorLiquidar(Long idLinea, Long idOperacion){
        logger.warning("Entra en obtenerMontoTotalContratosPorLiquidar");
        
        BigDecimal montoTotal = BigDecimal.ZERO;
        BigDecimal monto = null;
        Integer contador = 0;
        
        try {
            
            this.setpIdOperacion(idOperacion);
            setpIdEstadoContrato(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_POR_LIQUIDAR);
            setpEstadoCreado(null);
            this.executeQuery();
            
            ViewCriteria criteria =
                this.getViewCriteriaManager().getViewCriteria("ContratosDesembolsoPorIdLineaVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdLinea", idLinea);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            logger.warning("Numero de contratos con estado Por idLinea." + this.getEstimatedRowCount());
            
            RowSetIterator rowsContratoEstadoPorLiquidarVo = createRowSetIterator(null);
            rowsContratoEstadoPorLiquidarVo.reset();

            while (rowsContratoEstadoPorLiquidarVo.hasNext()) {
                ContratosDesembolsoConInteresVORowImpl rowL =
                    (ContratosDesembolsoConInteresVORowImpl) rowsContratoEstadoPorLiquidarVo.next();
                
                if (null != rowL.getMonto()) {
                    monto = rowL.getMonto();
                    logger.warning("Valor del monto :" + monto);
                    montoTotal = montoTotal.add(monto);
                    contador++;
                }
            }
            
            rowsContratoEstadoPorLiquidarVo.closeRowSetIterator();
            
            if(contador == 0)
                montoTotal = null;
            
        } catch (Exception e) {
            logger.warning("Error al consultar los contratos por idLinea.", e);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratosDesembolsoPorIdLineaVOCriteria");
        }
        logger.warning("Monto total de los contratos :" + montoTotal);
        return montoTotal;
    }
    
    public Boolean buscarContratoEstadoCreadoPorImplementacion(Long idLinea, Long idOperacion){
        logger.warning("Entra en buscarContratoEstadoCreadoPorImplementacion");
        Boolean esRegistro = Boolean.FALSE;
        Integer idTcaEstado = null;
        try{
            logger.warning("Numero de registros encontrado :" + this.getEstimatedRowCount());
            logger.warning("Valor de la linea de credito a examinar : " + idLinea);
            ViewCriteria criteria =
                this.getViewCriteriaManager().getViewCriteria("ContratosDesembolsoPorIdLineaVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdLinea", idLinea);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            RowSetIterator iterator = this.createRowSetIterator(null);
            iterator.reset();
            while(iterator.hasNext()){
                ContratosDesembolsoConInteresVORowImpl row = (ContratosDesembolsoConInteresVORowImpl)iterator.next();
                if(null != row.getIdTcaEstado()){
                    idTcaEstado = row.getIdTcaEstado();
                    logger.warning("Id del contrato a comparar : " + row.getId() + ", Con estado : " + idTcaEstado);
                    if(idTcaEstado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION) == 0){
                        logger.warning("Id del contrato encontrado : " + row.getId());
                        esRegistro = Boolean.TRUE;
                        break;
                    }
                }
            }
            iterator.closeRowSetIterator();
        }catch(Exception e){
            logger.warning("Error al buscar el registro.", e);
        }finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("ContratosDesembolsoPorIdLineaVOCriteria");
        }
        logger.warning("Registro encontrado :" + esRegistro);
        return esRegistro;
    }
//Revisar
    public List<Row> obtnerContratoCreadoPorImplementacion(Long idOperacion){
        logger.warning("Entra en obtnerContratoCreadoPorImplementacion.");
        List<Row> contratos = new ArrayList<Row>();
        try{
            this.setpIdOperacion(idOperacion);
            setpEstadoLiquidado(null);
            setpIdEstadoContrato(null);
            setpEstadoCreado(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION);
            this.executeQuery();
            logger.warning("Numero de rows recuperados :" + this.getAllRowsInRange().length);
            RowSetIterator rowsContratoDesembolsadoVo = createRowSetIterator(null);
            rowsContratoDesembolsadoVo.reset();
            while (rowsContratoDesembolsadoVo.hasNext()) {
                ContratosDesembolsoConInteresVORowImpl rowL =
                    (ContratosDesembolsoConInteresVORowImpl) rowsContratoDesembolsadoVo.next();
                if (null != rowL) {
                    contratos.add(rowL);
                }
            }
            rowsContratoDesembolsadoVo.closeRowSetIterator();
//            if(null != this.getAllRowsInRange()){
//                contratos = this.getAllRowsInRange();
//            }
                
        }catch(Exception e){
            logger.warning("Error al obtener los contratos");
        }
        logger.warning("Numero de rows recuperados :" + contratos.size());
        return contratos;
    }
    
    public boolean generarFechaDisponibilidadFondosPCT() {
        logger.warning("Entrando en generarFechaDisponibilidadFondosPCT.");
        FenixAMImpl fenixAMImpl = null;
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        FenixImplementacionPctAMImpl implementacionPctAM =
            (FenixImplementacionPctAMImpl) fenixAMImpl.getFenixImplementacionPctAM();
        
        boolean calculoFechasCorrecto = Boolean.TRUE;
        boolean respuesta = Boolean.FALSE;

        this.setRangeSize(-1);
        logger.warning("Elementos encontrados: " + this.getEstimatedRowCount());
        if (this.getEstimatedRowCount() > 0) {
            for (Row row : this.getAllRowsInRange()) {
                if (null != row && null != row.getAttribute("Id") && null != row.getAttribute("IdTcaEstado")) {
                    Integer idTcaEstado = (Integer) row.getAttribute("IdTcaEstado");
                    Long idContrato = null;
                    if (null != row.getAttribute("Id")) {
                        idContrato = (Long) row.getAttribute("Id");
                    }
                    logger.warning("idContrato: " + idContrato);
                    logger.warning("idTcaEstado: " + idTcaEstado);

                    if (null != idTcaEstado && idTcaEstado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION) == 0) {

                        Row rowContratoActualizar =
                            implementacionPctAM.getContratoDesembolsoVO().obtenerContratoPorId(idContrato);

                        if (null != rowContratoActualizar) {
                            rowContratoActualizar.setAttribute("FechaDisponibilidadFondos",
                                                               rowContratoActualizar.getAttribute("FechaEfectiva"));
                            rowContratoActualizar.setAttribute("FechaEstimadaDesembolsar",
                                                               rowContratoActualizar.getAttribute("FechaEfectiva"));
                            logger.warning("Id contrato desembolso: " + rowContratoActualizar.getAttribute("Id"));
                            logger.warning("Se establece la FechaDisponibilidadFondos: " +
                                           rowContratoActualizar.getAttribute("FechaDisponibilidadFondos"));
                            
                            
                            // Generacion de la fecha de vencimiento para las condiciones financieras de este contrato
                            if (!implementacionPctAM.getCondicionesFinancierasInstanciaNuevaVO().generarFechasVencimientoPorContratoPCT(rowContratoActualizar)) {
                                logger.warning("calculoFechasCorrecto: FALSE");
                                calculoFechasCorrecto = Boolean.FALSE;
                            } else {
                                logger.warning("calculoFechasCorrecto: TRUE");
                            }
                            
                        } else {
                            logger.warning("No se obtuvo registro con el id de contrato :" + idContrato);
                        }
                    }
                } else {
                    logger.warning("No se encontro el id o idEstado del contrato de desembolso");
                }
            }
            
            respuesta = calculoFechasCorrecto;
            
            if (respuesta) {
                respuesta = implementacionPctAM.getContratoDesembolsoVO().commitDesembolso();
            }
            
            logger.warning("respuesta commit:" + respuesta);
        }
        
        return respuesta;
    }
    
    /**
     * Returns the variable value for pIdEstadoDesembolsado.
     * @return variable value for pIdEstadoDesembolsado
     */
    public Integer getpIdTcaEstado() {
        return (Integer) ensureVariableManager().getVariableValue("pIdTcaEstado");
    }

    /**
     * Sets <code>value</code> for variable pIdEstadoDesembolsado.
     * @param value value to bind as pIdEstadoDesembolsado
     */
    public void setpIdTcaEstado(Integer value) {
        ensureVariableManager().setVariableValue("pIdTcaEstado", value);
    }

    /**
     * Returns the variable value for pIdLinea.
     * @return variable value for pIdLinea
     */
    public Long getpIdLinea() {
        return (Long) ensureVariableManager().getVariableValue("pIdLinea");
    }

    /**
     * Sets <code>value</code> for variable pIdLinea.
     * @param value value to bind as pIdLinea
     */
    public void setpIdLinea(Long value) {
        ensureVariableManager().setVariableValue("pIdLinea", value);
    }


    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        setNamedWhereClauseParam("pIdOperacion", value);
    }

    /**
     * Returns the bind variable value for pIdEstadoContrato.
     * @return bind variable value for pIdEstadoContrato
     */
    public Integer getpIdEstadoContrato() {
        return (Integer) getNamedWhereClauseParam("pIdEstadoContrato");
    }

    /**
     * Sets <code>value</code> for bind variable pIdEstadoContrato.
     * @param value value to bind as pIdEstadoContrato
     */
    public void setpIdEstadoContrato(Integer value) {
        setNamedWhereClauseParam("pIdEstadoContrato", value);
    }

    /**
     * Returns the bind variable value for pEstadoCreado.
     * @return bind variable value for pEstadoCreado
     */
    public Integer getpEstadoCreado() {
        return (Integer) getNamedWhereClauseParam("pEstadoCreado");
    }

    /**
     * Sets <code>value</code> for bind variable pEstadoCreado.
     * @param value value to bind as pEstadoCreado
     */
    public void setpEstadoCreado(Integer value) {
        setNamedWhereClauseParam("pEstadoCreado", value);
    }

    /**
     * Returns the bind variable value for pEstadoValidado.
     * @return bind variable value for pEstadoValidado
     */
    public Integer getpEstadoValidado() {
        return (Integer) getNamedWhereClauseParam("pEstadoValidado");
    }

    /**
     * Sets <code>value</code> for bind variable pEstadoValidado.
     * @param value value to bind as pEstadoValidado
     */
    public void setpEstadoValidado(Integer value) {
        setNamedWhereClauseParam("pEstadoValidado", value);
    }

    /**
     * Returns the bind variable value for pEstadoLiquidado.
     * @return bind variable value for pEstadoLiquidado
     */
    public Integer getpEstadoLiquidado() {
        return (Integer) getNamedWhereClauseParam("pEstadoLiquidado");
    }

    /**
     * Sets <code>value</code> for bind variable pEstadoLiquidado.
     * @param value value to bind as pEstadoLiquidado
     */
    public void setpEstadoLiquidado(Integer value) {
        setNamedWhereClauseParam("pEstadoLiquidado", value);
    }
}

