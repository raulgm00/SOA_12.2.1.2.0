package org.bcie.fenix.common.model.vo;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.domain.Number;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.JustificacionOperacionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 07 10:35:32 CDT 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JustificacionOperacionVOImpl extends ViewObjectImpl implements JustificacionOperacionVO {
    
    /**
     * Class name.
     */
    private static final String CLASS_NAME = JustificacionOperacionVOImpl.class.getName();
    
    /**
     * Aplication logger.
     */
    private static ADFLogger LOGGER = ADFLogger.createADFLogger(CLASS_NAME);
    
    /**
     * This is the default constructor (do not remove).
     */
    public JustificacionOperacionVOImpl() {
    }
    
    /**
     * Nombre del ViewCriteria para buscar la justificacion por id operacion.
     */
    public final String VC_OBTENER_POR_OPERACION = "obtenerJustificacionPorOperacion";
    
    
    /**
     * Obtiene la justificacion por Id Operacion.
     * @param idOperacion
     */
    public void obtenerJustificacionPorId(Number idOperacion,Integer tipo) {
        try{
            final String METHOD_NAME = "obtenerJustificacionPorId";
            final String VC_OBTENER_POR_OPERACION_TIPO = "filtrarJustificacionOperacionTipo";
            LOGGER.entering(CLASS_NAME, METHOD_NAME);
            
            if(idOperacion != null) {
                
                LOGGER.info("Limpiando la consulta y parametros");
                setWhereClause(null);
                setWhereClauseParams(null);
                
                LOGGER.warning("Parametros "+idOperacion+ " - "+tipo);
                setBindIdOperacion(idOperacion);
                LOGGER.warning("luego de setear  ");
                if(tipo!=null){
                    LOGGER.warning("if tipo  ");
                    setp_tipo(tipo);
                    LOGGER.warning("luego if tipo  ");
                    setApplyViewCriteriaName(VC_OBTENER_POR_OPERACION_TIPO);
                    LOGGER.warning("desues del criteria  ");
                }else{
                    LOGGER.warning("else tipo  ");
                    setApplyViewCriteriaName(VC_OBTENER_POR_OPERACION);
                }
                LOGGER.warning("antes de ejecutar   ");
                executeQuery();
                LOGGER.warning("despues  de ejecutar   ");
                LOGGER.info("Limpiar ViewCriteria.");
                if(tipo!=null){
                    removeApplyViewCriteriaName(VC_OBTENER_POR_OPERACION_TIPO);
                }else{
                    removeApplyViewCriteriaName(VC_OBTENER_POR_OPERACION);
                }
            } else {
                LOGGER.severe("Parametro id operacion es nulo.");
            }
            
            LOGGER.exiting(CLASS_NAME, METHOD_NAME);
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    /**
     * Validar la justificacion por Id Operacion.
     * @param idOperacion
     */
    public Long validarJustificacion(Number idOperacion) {
        
        final String METHOD_NAME = "validarJustificacion";
        LOGGER.entering(CLASS_NAME, METHOD_NAME);
        
        Long count = null;
        
        if(idOperacion != null) {
            
            LOGGER.info("Limpiando la consulta y parametros");
            setWhereClause(null);
            setWhereClauseParams(null);
            
            setBindIdOperacion(idOperacion);
            setApplyViewCriteriaName(VC_OBTENER_POR_OPERACION);
            executeQuery();

            count = getEstimatedRowCount();

            LOGGER.info("Limpiar ViewCriteria.");
            removeApplyViewCriteriaName(VC_OBTENER_POR_OPERACION);
            
        } else {
            LOGGER.severe("Parametro id operacion es nulo.");
        }
        
        LOGGER.exiting(CLASS_NAME, METHOD_NAME);
        
        return count;
    }
    public void agregarJustificacionOperacionTipo(String comentario, String idTcaTareaBpm, String idOperacion,
                                                  String loginUsuario, String nombreUsusario, String idInstanciaTarea,Integer tipo) {
        final String METHOD_NAME = "agregarJustificacionOperacionTipo";
        LOGGER.entering(CLASS_NAME, METHOD_NAME);

        Row createRow = createRow();

        SequenceImpl seqComentario = new SequenceImpl("COMENTARIO_OPERACION_SEQ", getDBTransaction());

        try {
            createRow.setAttribute("Id", seqComentario.getSequenceNumber());
            createRow.setAttribute("IdTcaTarea", Integer.valueOf(idTcaTareaBpm));
            createRow.setAttribute("IdOperacion", Long.parseLong(idOperacion));
            createRow.setAttribute("FechaRegistro", new Timestamp(System.currentTimeMillis()));
            createRow.setAttribute("LoginUsuario", loginUsuario);
            createRow.setAttribute("NombreUsuario", nombreUsusario);
            createRow.setAttribute("Comentario", comentario);
            createRow.setAttribute("IdInstanciaTarea", idInstanciaTarea);
            createRow.setAttribute("BanEstatus", Integer.valueOf(1));
            createRow.setAttribute("IdTcaTipoComentario", tipo);

            insertRow(createRow);

        } catch (Exception e) {
            LOGGER.severe(e.getMessage());
        }
        LOGGER.exiting(CLASS_NAME, METHOD_NAME);
    }
    /**
     * Returns the variable value for BindIdOperacion.
     * @return variable value for BindIdOperacion
     */
    public Number getBindIdOperacion() {
        return (Number) ensureVariableManager().getVariableValue("BindIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable BindIdOperacion.
     * @param value value to bind as BindIdOperacion
     */
    public void setBindIdOperacion(Number value) {
        ensureVariableManager().setVariableValue("BindIdOperacion", value);
    }

    /**
     * Returns the variable value for p_tipo.
     * @return variable value for p_tipo
     */
    public Integer getp_tipo() {
        return (Integer) ensureVariableManager().getVariableValue("p_tipo");
    }

    /**
     * Sets <code>value</code> for variable p_tipo.
     * @param value value to bind as p_tipo
     */
    public void setp_tipo(Integer value) {
        ensureVariableManager().setVariableValue("p_tipo", value);
    }
}

