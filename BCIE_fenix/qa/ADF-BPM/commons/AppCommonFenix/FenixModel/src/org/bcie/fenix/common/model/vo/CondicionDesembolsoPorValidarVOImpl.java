package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.configuracionprocesosservice.ConfiguracionProceso12BndQSService;
import com.bcie.xmlns.configuracionprocesosservice.ConfiguracionProcesosPT;

import com.oracle.xmlns.bpmn.bpmnprocess.procesosalternos.ProcesosAlternosBindingQSService;
import com.oracle.xmlns.bpmn.bpmnprocess.procesosalternos.ProcesosAlternosPortType;

import com.oracle.xmlns.bpmn.bpmnprocess.procesosprincipales.ProcesosPrincipalesBindingQSService;
import com.oracle.xmlns.bpmn.bpmnprocess.procesosprincipales.ProcesosPrincipalesPortType;

import java.util.Iterator;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.condicionbo.Condicion;
import org.bcie.condicionbo.ListaCondiciones;
import org.bcie.configuracionprocesosmo.ConfiguracionCondicionesRequest;
import org.bcie.configuracionprocesosmo.ConfiguracionCondicionesResponse;
import org.bcie.desembolso.DesembolsoPT;
import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;
import org.bcie.desembolsomo.CondicionesDesembolsoRequestType;
import org.bcie.desembolsomo.CondicionesDesembolsoResponseType;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.vo.common.CondicionDesembolsoPorValidarVO;
import org.bcie.resultbo.Resultado;
import org.bcie.resultbo.SuccessType;
import org.bcie.xmlns.objetoproceso.comun.header.v1.Header;
import org.bcie.xmlns.objetoproceso.comun.operacion.v1.Operacion;
import org.bcie.xmlns.objetoproceso.comun.parameter.v1.ParameterType;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri May 22 15:59:43 CST 2020
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CondicionDesembolsoPorValidarVOImpl extends ViewObjectImpl implements CondicionDesembolsoPorValidarVO {
    /**
     * This is the default constructor (do not remove).
     */    
    private static ADFLogger logger = null;
    public static final String PARAMETER_TYPE_SOLICITUD = "ID_SOLICITUD";
    public static final String PARAMETER_TYPE_AGRUPADOR= "AGRUPADOR";
    public static final String PARAMETER_TYPE_DESEMBOLSO= "ID_DESEMBOLSO";
    public static final String PARAMETER_TYPE_EVENTO= "EVENTO";
    public static final String PARAMETER_TYPE_NUM_CONTRATO= "NUM_CONTRATO";
    public static final String PARAMETER_TYPE_SALTAR_CONDICION= "SALTAR_CONDICIONES";
    public CondicionDesembolsoPorValidarVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }


    public Boolean condicionDesembolsoPorValidar(Long pnID_Contrato_Desembolso){
        logger.log(ADFLogger.WARNING, "INTO condicionDesembolsoPorValidar");
        Boolean validar = Boolean.FALSE; 
        try{
            setpID_Contrato_Desembolso(pnID_Contrato_Desembolso); 
            logger.warning("pnID_Contrato_Desembolso: " + pnID_Contrato_Desembolso); 
            logger.warning("Cantidad de registros encontrados en condicionDesembolsoPorValidar: " + 
                           this.getEstimatedRowCount());
            if(this.getEstimatedRowCount() > 0){
                validar = Boolean.TRUE;
            }else{
                validar = Boolean.FALSE;
            }
            
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error en condicionDesembolsoPorValidar." + e.getClass() + "." + e.getMessage());
        }
        logger.warning("Valor de retorno : " + validar);
        return validar;
    }
    public Integer configuracionCondicion(Long idSolicitud,Long idOperacion,Long idContrato,Integer idEvento, List listaCondiciones){
        logger.warning("Inicia configuracionCondicion. "+idOperacion+" lista:"+listaCondiciones.size());
        final FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
        Integer agrupador=null;
        String msj="";
        Boolean exito=Boolean.TRUE;
        try{
            final String wsdl = fenixAmImpl.getWsdl(IWsdlLocation.CONFIGURACION_PROCESO);
            final ConfiguracionProceso12BndQSService service = IWsdlLocation.Service.getInstance(ConfiguracionProceso12BndQSService.class, wsdl);
            final ConfiguracionProcesosPT port = service.getConfiguracionProcesosPTPort();
            
            final ConfiguracionCondicionesRequest rq= new ConfiguracionCondicionesRequest();
            if(idOperacion!=null){
                rq.setIdOperacion(idOperacion);
            }
            if(idSolicitud!=null){
                rq.setIdSolicitud(idSolicitud);
            }
            if(idEvento!=null){
                rq.setIdEventoCondicion(Long.parseLong(idEvento.toString()));
            }
            if(idContrato!=null){
                rq.setIdContratoDesembolso(idContrato);
            }
            if(listaCondiciones!=null && listaCondiciones.size()>0){
                logger.warning("Llenar la lista de condiciones -"+idOperacion);
                @SuppressWarnings("unchecked")
                final Iterator<Long> it=listaCondiciones.iterator();
                while(it.hasNext()){
                    final Long tmp=it.next();
                    final Condicion item = new Condicion();
                    item.setIdCondicion(tmp);
                    logger.warning("Se agrega condicion: "+tmp+" - "+idOperacion);
                    rq.getListaCondicion().add(item);
                }
            }
            
            final ConfiguracionCondicionesResponse res=port.configuracionCondiciones(rq);
            if(res.getResultado()!=null &&  res.getResultado().getResult()!=null && res.getResultado().getResult().value().equals(SuccessType.ERROR)){
                exito=Boolean.FALSE;
                msj=res.getResultado().getMessage();
            }else{
                final Iterator<ParameterType> it=res.getConfiguracionCondiciones().getParameterType().iterator();
                while(it.hasNext()){
                    ParameterType item=it.next();
                    if(item.getParameterName().equals(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_AGRUPADOR)){
                        logger.warning("Se encontro agrupador "+idOperacion);
                        agrupador=Integer.parseInt(item.getParameterValue());
                        break;
                    }
                }
            }
        } catch (Exception e) {
            logger.severe(e);
            final JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error en configuracionCondicion " + e.getClass() + ":" + e.getMessage()));
            throw ex;
        } 
        if(!exito){
            final JboException exception = new JboException("Error: " + msj);
            throw exception;
        }
        logger.warning("Fin configuracionCondicion agrupador:"+agrupador+" - "+idOperacion);
        return agrupador;        
    }
    public Boolean iniciarAdminstracionCondicion(Long idSolicitud,Long idOperacion,Integer agrupador,Long idContrato,String loginUsuario,String descEvento){
        logger.warning("Inicia iniciarAdminstracionCondicion. "+idOperacion+" agrupador:"+agrupador);
        Boolean existeError = Boolean.FALSE;
        String msgError = "";
        Boolean resultado = Boolean.FALSE;
        Resultado response = null;
        final FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
        try {
            
            final String wsdl = fenixAmImpl.getWsdl(IWsdlLocation.PROCESOS_ALTERNOS);
            logger.warning("Se obtiene WSDL:"+wsdl+" - "+idOperacion);
            final ProcesosAlternosBindingQSService service = IWsdlLocation.Service.getInstance(ProcesosAlternosBindingQSService.class, wsdl);
            logger.warning("Se crea el service:"+service+" - "+idOperacion);
            final ProcesosAlternosPortType port = service.getProcesosAlternosBindingQSPort();
            logger.warning("Se crea el puerto:"+port+" - "+idOperacion);
            final Header header = new Header();
            final Operacion operacion = new Operacion();
            logger.warning("Se crea el service "+idOperacion);
            ParameterType parameterType = null;
            if(idOperacion!=null){
                operacion.setCodigoOperacion(idOperacion.intValue());
            }
            if(loginUsuario!=null){
                operacion.setResponsableOperacion(loginUsuario);
                logger.warning("Se envia loginUsuario:"+loginUsuario+" - "+idOperacion);
            }
            if(idSolicitud!=null){
                parameterType = new ParameterType();
                parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_SOLICITUD);
                parameterType.setParameterValue(idSolicitud.toString());
                header.getParameterType().add(parameterType);
                logger.warning("Se envia idSolicitud:"+idSolicitud+" - "+idOperacion);
            }
            if(agrupador!=null){
                parameterType = new ParameterType();
                parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_AGRUPADOR);
                parameterType.setParameterValue(agrupador.toString());
                header.getParameterType().add(parameterType);
                logger.warning("Se envia agrupador:"+agrupador+" - "+idOperacion);
            }
            if(idContrato!=null){
                parameterType = new ParameterType();
                parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_DESEMBOLSO);
                parameterType.setParameterValue(idContrato.toString());
                header.getParameterType().add(parameterType);
                logger.warning("Se envia idContrato:"+idContrato+" - "+idOperacion);
            }
            if(descEvento!=null){
                parameterType = new ParameterType();
                parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_EVENTO);
                parameterType.setParameterValue(descEvento);
                header.getParameterType().add(parameterType);
                logger.warning("Se envia descEvento:"+descEvento+" - "+idOperacion);
            }
            header.setOperacion(operacion);
            logger.warning("Antes de llamar iniciarAdminstracionCondicion. "+idOperacion);
            response = port.inicioCondiciones(header);
            
            resultado = Boolean.TRUE;
            logger.warning("Luego de llamar iniciarAdminstracionCondicion. "+response+" - "+idOperacion);
            if (null != response.getError() || (response.getResult() != null && response.getResult().value() == "ERROR")) {
                String mensajeError = "";
                if (null != response.getMessage() && response.getMessage().trim().length() > 0) {
                    mensajeError = response.getMessage();
                }
                logger.warning("Existe error: "+mensajeError+" - "+idOperacion);
                existeError = Boolean.TRUE;
                msgError = "Servicio iniciarAdminstracionCondicion devuelve ERROR. " + "Mensaje: " + mensajeError;
                resultado = Boolean.FALSE;
                logger.warning("Existe error2: "+msgError+" - "+idOperacion);
            } 

        
        } catch (Exception e) {
            resultado = Boolean.FALSE;
            existeError = Boolean.TRUE;
            logger.log(ADFLogger.ERROR, "Error en iniciarAdminstracionCondicion ", e);

            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error en iniciarAdminstracionCondicion " + e.getClass() + ":" + e.getMessage()));
            throw ex;
        } finally {
            if (existeError) {
                JboException exception = new JboException("Error: " + msgError);
                throw exception;
            }
        }
        logger.warning("Termina iniciarAdminstracionCondicion. "+idOperacion+" agrupador:"+agrupador);
        return resultado;     
    }
    public Boolean iniciarCondicionDesembolso(Long idSolicitud, Long idOperacion, Long idContrato,  List listaCondiciones){
        logger.warning("Inicia iniciarCondicionDesembolso. "+idOperacion);
        Boolean exito = Boolean.TRUE;
        Boolean existeError = Boolean.FALSE;
        String msgError = "";
        try {
            final FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
            final String wsdl = fenixAmImpl.getWsdl(IWsdlLocation.DESEMBOLSO);
            logger.warning("Se obtiene WSDL:"+wsdl+" - "+idOperacion);
            final DesembolsoPTSOAP12BindingQSService service = IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);
            logger.warning("Se crea el service:"+service+" - "+idOperacion);
            final DesembolsoPT port = service.getDesembolsoPTSOAP12BindingQSPort();
            logger.warning("Se crea el puerto:"+port+" - "+idOperacion);
            final CondicionesDesembolsoRequestType rq= new CondicionesDesembolsoRequestType();
            if(idSolicitud!=null){
                logger.warning("Se agrega idSolicitud: "+idSolicitud+" - "+idOperacion);
                rq.setIdSolicitudDesembolso(idSolicitud);
            }
            if(idContrato!=null){
                logger.warning("Se agrega idContrato: "+idContrato+" - "+idOperacion);
                rq.setIdContratoDesembolso(idContrato);
            }
            if(listaCondiciones!=null && listaCondiciones.size()>0){
                final ListaCondiciones list= new ListaCondiciones();
                rq.setListaCondicion(list);
                @SuppressWarnings("unchecked")
                final Iterator<Long> it=listaCondiciones.iterator();
                while(it.hasNext()){
                    final Long tmp=it.next();
                    final Condicion item = new Condicion();
                    item.setIdCondicion(tmp);
                    logger.warning("Se agrega condicion: "+tmp+" - "+idOperacion);
                    rq.getListaCondicion().getCondicion().add(item);
                }
            }
            final CondicionesDesembolsoResponseType res=port.condicionesDesembolso(rq);
            if(res.getResultado()!=null &&  res.getResultado().getResult()!=null && res.getResultado().getResult().value().equals(SuccessType.ERROR)){
                logger.warning("Existe error : "+res.getResultado().getMessage()+" - "+idOperacion);
                exito=Boolean.FALSE;
                existeError = Boolean.TRUE;
                msgError="Error iniciarCondicionDesembolso: "+res.getResultado().getMessage();
            }
            
        } finally {
            if (existeError) {
                JboException exception = new JboException("Error: " + msgError);
                throw exception;
            }
        }
        logger.warning("Termina iniciarCondicionDesembolso. "+idOperacion);
        return exito;   
    }
    public Boolean inicioValidacionAsignacionRecursos(final Long idOperacion,final String loginUsuario,final Long idSolicitud,final Long idContrato) {
        logger.warning("Inicia inicioValidacionAsignacionRecursos. "+idOperacion);
        Boolean existeError = Boolean.FALSE;
        String msgError = "";
        Boolean resultado = Boolean.TRUE;
        try {
            final FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();
            final String wsdl = fenixAmImpl.getWsdl(IWsdlLocation.PROCESOS_PRINCIPALES);
            final ProcesosPrincipalesBindingQSService service = IWsdlLocation.Service.getInstance(ProcesosPrincipalesBindingQSService.class, wsdl);
            final ProcesosPrincipalesPortType port = service.getProcesosPrincipalesBindingQSPort();
            Header header = new Header();
            final Operacion operacion = new Operacion();
            ParameterType parameterType = null;
            if(idOperacion!=null){
                operacion.setCodigoOperacion(idOperacion.intValue());
                logger.warning("Se envia idOperacion:"+idOperacion);
            }
            if(loginUsuario!=null){
                operacion.setResponsableOperacion(loginUsuario);
                logger.warning("Se envia loginUsuario:"+loginUsuario+" - "+idOperacion);
            }
            if(idSolicitud!=null){
                parameterType = new ParameterType();
                parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_SOLICITUD);
                parameterType.setParameterValue(idSolicitud.toString());
                header.getParameterType().add(parameterType);
                logger.warning("Se envia idSolicitud:"+idSolicitud+" - "+idOperacion);
            }
            if(idContrato!=null){
                parameterType =new ParameterType();
                parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_NUM_CONTRATO);
                parameterType.setParameterValue(idContrato.toString());
                header.getParameterType().add(parameterType);
                logger.warning("Se envia contrato :"+idOperacion);
            }

            parameterType = new ParameterType();
            parameterType.setParameterName(CondicionDesembolsoPorValidarVOImpl.PARAMETER_TYPE_SALTAR_CONDICION);
            parameterType.setParameterValue(Boolean.TRUE.toString());
            header.getParameterType().add(parameterType);
            
            header.setOperacion(operacion);
            logger.warning("Antes de llamar inicioValidacionAsignacion "+idOperacion);
            final Resultado response = port.inicioValidacionAsignacion(header);
            logger.warning("Luego de llamar inicioValidacionAsignacion. "+response+" - "+idOperacion);
            if (null != response.getError() || (response.getResult() != null && response.getResult().value() == "ERROR")) {
                String mensajeError = "";
                if (null != response.getMessage() && response.getMessage().trim().length() > 0) {
                    mensajeError = response.getMessage();
                }
                existeError = Boolean.TRUE;
                msgError = "Servicio inicioValidacionAsignacion devuelve ERROR. " + "Mensaje: " + mensajeError;
                resultado = Boolean.FALSE;
            }

        } catch (Exception e) {
            resultado = Boolean.FALSE;
            existeError = Boolean.TRUE;
            logger.log(ADFLogger.ERROR, "Error en InicioValidacionAsignacion ", e);

            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error en InicioValidacionAsignacion " + e.getClass() + ":" + e.getMessage()));
            throw ex;
        } finally {
            if (existeError) {
                JboException exception = new JboException("Error: " + msgError);
                throw exception;
            }
        }
        logger.warning("Termina inicioValidacionAsignacionRecursos. "+idOperacion);
        return resultado;
    }
    /**
     * Returns the bind variable value for pID_Contrato_Desembolso.
     * @return bind variable value for pID_Contrato_Desembolso
     */
    public Long getpID_Contrato_Desembolso() {
        return (Long) getNamedWhereClauseParam("pID_Contrato_Desembolso");
    }

    /**
     * Sets <code>value</code> for bind variable pID_Contrato_Desembolso.
     * @param value value to bind as pID_Contrato_Desembolso
     */
    public void setpID_Contrato_Desembolso(Long value) {
        setNamedWhereClauseParam("pID_Contrato_Desembolso", value);
    }
}

