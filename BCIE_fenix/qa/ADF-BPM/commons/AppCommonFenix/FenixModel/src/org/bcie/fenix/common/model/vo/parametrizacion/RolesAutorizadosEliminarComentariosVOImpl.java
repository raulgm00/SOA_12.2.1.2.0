package org.bcie.fenix.common.model.vo.parametrizacion;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.vo.LoteImplementacionVORowImpl;
import org.bcie.fenix.common.model.vo.parametrizacion.common.RolesAutorizadosEliminarComentariosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jun 23 11:27:44 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class RolesAutorizadosEliminarComentariosVOImpl extends ViewObjectImpl implements RolesAutorizadosEliminarComentariosVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    
    public RolesAutorizadosEliminarComentariosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void autorizacionRolesEliminarComentarios() {
        logger.warning("*** Inicia metodo autorizacionRolesEliminarComentarios ***");
        FenixAMImpl fenixAM = null;
        
        // Crea una instancia del AM
        fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        // Obtenemos las evidencias seleccionadas 
        Row[] rowsRolesAutorizados = this.getFilteredRows("seleccion",Boolean.TRUE);
        logger.warning("*** Se han obtenido los Roles seleccionados");
        for (Row rowRolAutorizado : rowsRolesAutorizados) {
            logger.warning("*** Ciclio for, Row---->"+rowRolAutorizado);
            // validar "idDocumento" y "idSolicitud" no sean null
            if(rowRolAutorizado.getAttribute("IdRoles") != null) 
            {
                Long idRol = (Long)rowRolAutorizado.getAttribute("IdRoles");
                // Invocar el metodo "actualizarRolAutorizadoEliminarComentario" de VO basada en EO que brinde base de datos
                logger.warning("***idRol--->" + idRol);
                //fenixAM.getTreEvidenciaSolicitudVO().agregarTreEvidenciaSolicitud(idDocumento, idSolicitud, instancia);
                logger.warning("Se manda llamar al metodo que actualice el rol autorizado, pendiente por construir...");
            }
        }
        logger.warning("*** Finaliza metodo autorizacionRolesEliminarComentarios ***");
    }
    
    public Boolean obtenerEsRolAutorizadoEliminarComentarios(Long idRol) {
        logger.warning("*** Inicia metodo obtenerSiEsRolAutorizadoEliminarComentarios ***");
        Boolean respuesta = Boolean.TRUE;
        Row filaRecuperada = null;
        logger.warning("idRol recibido: " + idRol);
        try {
            if (idRol == null) {
                respuesta = Boolean.FALSE;
            } else {
                ViewCriteria criteria = this.getViewCriteriaManager().getViewCriteria("RolesAutorizadosEliminarComentariosVOCriteriaByIdRol");
                criteria.ensureVariableManager().setVariableValue("varIdRol", idRol);
                this.applyViewCriteria(criteria);
                this.executeQuery();
                
                if(getEstimatedRowCount()>0){
                    setCurrentRow(this.first());
                    filaRecuperada = getCurrentRow();
                    Integer esRolAutorizado = (filaRecuperada.getAttribute("RolAutorizado") != null) ? Integer.valueOf(filaRecuperada.getAttribute("RolAutorizado").toString()) : Integer.valueOf(0);
                    logger.warning("Valor idRol obtenido del getCurrentRow: " + filaRecuperada.getAttribute("IdRoles"));
                    logger.warning("Valor esRolAutorizado: " + esRolAutorizado);
                    if(esRolAutorizado.compareTo(Integer.valueOf(0)) == 0){
                        respuesta = Boolean.FALSE;
                    }
                }
            }
        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR,
                       "Error en obtenerSiEsRolAutorizadoEliminarComentarios ", ex);
            respuesta = Boolean.FALSE;
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("RolesAutorizadosEliminarComentariosVOCriteriaByIdRol");
        }
        
        logger.warning("Valor respuesta a retornar: " + respuesta);
        logger.warning("*** Finaliza matodo obtenerSiEsRolAutorizadoEliminarComentarios ***");        
        return respuesta;
        
    }

    /**
     * Returns the variable value for varIdRol.
     * @return variable value for varIdRol
     */
    public Long getvarIdRol() {
        return (Long) ensureVariableManager().getVariableValue("varIdRol");
    }

    /**
     * Sets <code>value</code> for variable varIdRol.
     * @param value value to bind as varIdRol
     */
    public void setvarIdRol(Long value) {
        ensureVariableManager().setVariableValue("varIdRol", value);
    }
}

