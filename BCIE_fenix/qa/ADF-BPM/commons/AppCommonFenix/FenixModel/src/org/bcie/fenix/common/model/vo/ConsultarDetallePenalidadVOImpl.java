package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.util.Calendar;
import java.util.Date;

import oracle.adf.model.binding.DCIteratorBinding;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixAdquisicionAMImpl;
import org.bcie.fenix.common.model.am.FenixPrepagoAMImpl;
import org.bcie.fenix.common.model.vo.common.ConsultarDetallePenalidadVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Oct 06 16:07:22 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ConsultarDetallePenalidadVOImpl extends ViewObjectImpl implements ConsultarDetallePenalidadVO {
    
    public static ADFLogger logger = null;
    
    public static final Long RESOLUCION_PRE10_2008 = 1L;
    public static final Long RESOLUCION_PRE28_2003 = 2L;
    public static final Long RESOLUCION_OTRAS_CONDICIONES = 3L;
    
    /**
     * This is the default constructor (do not remove).
     */
    public ConsultarDetallePenalidadVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the bind variable value for varIdPrepago.
     * @return bind variable value for varIdPrepago
     */
    public Long getvarIdPrepago() {
        return (Long) getNamedWhereClauseParam("varIdPrepago");
    }

    /**
     * Sets <code>value</code> for bind variable varIdPrepago.
     * @param value value to bind as varIdPrepago
     */
    public void setvarIdPrepago(Long value) {
        setNamedWhereClauseParam("varIdPrepago", value);
    }
    
    public Boolean validaIntereses() {
        logger.warning("inside validaIntereses.");
        
        Boolean result = Boolean.FALSE;
        Long idTcaTipoResolucion = null;
        Date fechaPrepago = null;
        Date fechaAmortizacion = fechaAmortizacion();
        
        if (fechaAmortizacion != null) {
            Row row = getRowAtRangeIndex(0);
            idTcaTipoResolucion = (Long) row.getAttribute("IdTcaTipoResolucion");
            fechaPrepago = (Date) row.getAttribute("FechaPrepago");
            
            logger.warning("fechaPrepago: " + fechaPrepago);
            logger.warning("idTcaTipoResolucion: " + idTcaTipoResolucion);
            if (((fechaPrepago.compareTo(fechaAmortizacion) != 0) && (idTcaTipoResolucion.compareTo(RESOLUCION_OTRAS_CONDICIONES) == 0)) || 
                ((idTcaTipoResolucion.compareTo(RESOLUCION_PRE10_2008) == 0) && (prepagoTotal()))) {
                result = Boolean.TRUE;
            }    
        }
        
        logger.warning("result: " + result);
        return (result);
    }
    
    public Date getCurrentDate() {
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(new Date());
        return calendar.getTime();
    }
    
    public Date fechaAmortizacion() {
        logger.warning("inside fechaAmortizacion.");
        
        java.sql.Timestamp currentDate = new java.sql.Timestamp(getCurrentDate().getTime());
        
        Long currentTime = currentDate.getTime();
        Long minDiff = -1L;
        Date fechaAmortizacion = null;
        
        logger.warning("Numero de rows: " + this.getRowCount());
        
        Row[] consultarDetallePenalidad = this.getAllRowsInRange();
        
        if (consultarDetallePenalidad != null) {
            for (Row row : consultarDetallePenalidad) {
                java.sql.Timestamp fechaProximoPago = (java.sql.Timestamp)row.getAttribute("FechaProximoPago");
                
                logger.warning("fechaProximoPago" + fechaProximoPago);
                if (fechaProximoPago != null) {
                    long diff = Math.abs(currentTime - fechaProximoPago.getTime());
                    if ((minDiff == -1) || (diff < minDiff)) {
                        minDiff = diff;
                        fechaAmortizacion = new Date (fechaProximoPago.getTime());
                    }    
                }
            }   
        } else {
            logger.warning("No se encontraron datos en tabla Detalle de la penalidad.");
        }
        
        logger.warning("fechaAmortizacion: " + fechaAmortizacion);
        
        return (fechaAmortizacion);
    }
    
    public Boolean prepagoTotal() {
        logger.warning("inside prepagoTotal.");
        BigDecimal capitalNoVencido = null;
        BigDecimal montoPrepago = null;
        Boolean result = Boolean.FALSE;
        logger.warning("Numero de rows: " + this.getRowCount());
        
    FenixPrepagoAMImpl fenixPrepagoAMImpl = null;
        fenixPrepagoAMImpl = (FenixPrepagoAMImpl) this.getApplicationModule();
        
        //Row[] consultarDetallePenalidad = this.getAllRowsInRange();
        RowSetIterator consultarDetallePenalidad = this.createRowSetIterator(null);
        while (consultarDetallePenalidad.hasNext()) {
            ConsultarDetallePenalidadVORowImpl consultarDetallePenalidadVORowImpl =
                (ConsultarDetallePenalidadVORowImpl) consultarDetallePenalidad.next();
            
            capitalNoVencido = consultarDetallePenalidadVORowImpl.getCapitalNoVencido();
            montoPrepago = consultarDetallePenalidadVORowImpl.getMontoPrepago();
            logger.log(ADFLogger.WARNING, "Valor monto prepago :" + montoPrepago);
            logger.log(ADFLogger.WARNING, "Valor capital no vencido :" + capitalNoVencido);
            if (montoPrepago.compareTo(capitalNoVencido) != 0) {
                logger.log(ADFLogger.WARNING, "Retorna TRUE");
                result = Boolean.TRUE;
            } else {
                logger.log(ADFLogger.WARNING, "Retorna FALSE");
                result = Boolean.FALSE;
                return (result);
            }
        }
        
        consultarDetallePenalidad.closeRowSetIterator();
        
//        if (consultarDetallePenalidad != null) {
//            for (Row row : consultarDetallePenalidad) {
//                
//                capitalNoVencido = (BigDecimal) row.getAttribute("CapitalNoVencido");
//                montoPrepago = (BigDecimal) row.getAttribute("MontoPrepago");
//                logger.log(ADFLogger.WARNING, "Valor monto prepago :" + montoPrepago);
//                logger.log(ADFLogger.WARNING, "Valor capital no vencido :" + capitalNoVencido);
//                if (montoPrepago.compareTo(capitalNoVencido) != 0) {
//                    logger.log(ADFLogger.WARNING, "Retorna TRUE");
//                    result = Boolean.TRUE;
//                } else {
//                    logger.log(ADFLogger.WARNING, "Retorna FALSE");
//                    result = Boolean.FALSE;
//                    return (result);
//                }
//            }   
//        } else {
//            logger.warning("No se encontraron datos en tabla Detalle de la penalidad.");
//        }
        
        logger.warning("result: " + result);
        
        return (result);
    }
}