package org.bcie.fenix.common.model.vo;

import java.util.ArrayList;

import java.util.HashMap;

import java.util.List;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.AfterRollbackException;
import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.ReglasValidadasDesembolsoPorExcepcion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Jul 19 12:31:31 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ReglasValidadasDesembolsoPorExcepcionImpl extends ViewObjectImpl implements ReglasValidadasDesembolsoPorExcepcion {
   
    private static ADFLogger logger = null;
    
    public ReglasValidadasDesembolsoPorExcepcionImpl() {        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }        
    }
    
    Map mapaDatos = new HashMap();  
    Boolean permitirInicioProceso = Boolean.TRUE;
    String mensaje1 = "La operaci\u00F3n no requiere un proceso de desembolso por excepci\u00F3n.";   
        
    public Map recuperarReglasInicioProcesoDesembolsoPorExcepcion(Long idOperacion, Long idDesembolso){
        logger.warning("*Inf, Incia metodo recuperarReglasInicioProcesoDesembolsoPorExcepcion"); 
        logger.warning("*Inf, idOperacion: "+idOperacion);
        logger.warning("*Inf, idDesembolso: "+idDesembolso);        
                      
        ArrayList<Row> reglasAValidar = new ArrayList<Row>();
        List<Long> listaReglas = new ArrayList<>();        
                    
        if(idOperacion == null ||idDesembolso == null){
           logger.warning("***Error, Parametros requeridos resueltos a Null");
           permitirInicioProceso = Boolean.FALSE;           
           JboException ex = new JboException("Error no se pudo recuperar los datos de Operacion y idDesembolso");
           throw ex;
        }else{
            permitirInicioProceso = Boolean.TRUE;
            limpiarVO(); 
            reglasAValidar = recuperarReglasAValiarByDesembolso(idOperacion, idDesembolso);
            
            if(reglasAValidar != null && !reglasAValidar.isEmpty()){
                logger.warning("*Inf, Inicia metodo para validar el cumplimiento de reglas activas por servicio...");                
                
                for(Row regla : reglasAValidar){
                    
                    if(regla.getAttribute("IdTcaEstado") != null){
                       Long idRegla = new Long((Integer)regla.getAttribute("IdTcaEstado"));
                       listaReglas.add(idRegla);                                                                                
                    }                    
                }
                    
                validarReglasDesembolsoService(listaReglas, idOperacion, idDesembolso);
               
            }else{
                permitirInicioProceso = Boolean.FALSE;
                mapaDatos.put("mensaje1", mensaje1);
                logger.warning("*Inf, Importante! No se recuperaron reglas activas no esceptuadas para el contrato de desembolso");
            }
            
        }
        
        mapaDatos.put("permitirInicioProceso", permitirInicioProceso);        
        logger.warning("*Inf, permitirInicioProceso :"+permitirInicioProceso);
        logger.warning("*Inf, Termina metodo recuperarReglasInicioProcesoDesembolsoPorExcepcion");
        return mapaDatos;
    }
    
    public ArrayList<Row> recuperarReglasAValiarByDesembolso(Long idOperacion, Long idDesembolso){
        logger.warning("*Inf, Incia metodo recuperarReglasAValiarByDesembolso");
        logger.warning("*Inf, idOperacion: "+idOperacion+" idDesembolso: "+idDesembolso);        
        
        if(idOperacion == null ||idDesembolso == null){
           logger.warning("***Error, Parametros requeridos resueltos a null");
            JboException ex = new JboException("Error no se pudo recuperar idOperacion, idDesembolso");
            throw ex;   
        }
        
        FenixAMImpl fenixAMImpl = null;             
        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        ArrayList<Row> reglasActivas = new ArrayList<Row>();
        ArrayList<Row> reglasActivasNoExceptuadas = new ArrayList<Row>();

        reglasActivas =
             fenixAMImpl.getSolicitudExcepcionVO().recuperarReglasActivasDesembolso(idOperacion, idDesembolso);
                    
        if(!reglasActivas.isEmpty() && reglasActivas != null){
            
            for(Row regla : reglasActivas){
                
                Long idSolicitud  = (Long)regla.getAttribute("IdSolicitud");
                Integer idTcaRegla  = (Integer)regla.getAttribute("IdTcaEstado");
                                            
                Boolean reglaExceptuada
                         = fenixAMImpl.getTreExcepcionSolicitudVO().validarReglaExceptuada(idSolicitud, idTcaRegla);
               
                if(!reglaExceptuada){
                    reglasActivasNoExceptuadas.add(regla);                    
                }else{
                    logger.warning("*Inf, la regla "+idTcaRegla+" es exceptuada no se tomara en cuenta");                    
                }                             
            }
                                        
        }else{
            reglasActivasNoExceptuadas = null;  
        }
        
        logger.warning("*Inf, Termina metodo recuperarReglasAValiarByDesembolso");
        return reglasActivasNoExceptuadas;
    }
    
    public void validarReglasDesembolsoService(List<Long> listaReglas, Long idOperacion ,Long idDesembolso){
            logger.warning("*Inf, Inicia metodo validarReglasDesembolsoService");
            FenixAMImpl fenixAmImpl = null;
            FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;  
            final Integer idTareaGestorOperacion = 65;
            final Integer idProcesoGestorOperaciones = 13;
            final String instanciaTarea = "1"; 
            Boolean moraCumplida = Boolean.FALSE;
            Boolean scrCumplida = Boolean.FALSE;
            Boolean limitesCumplida = Boolean.FALSE;                        
            Map mapaReglasValidadas = new HashMap();                
            List<Long> listaReglasAServicio  = new ArrayList<Long>();
            
            //La regla SCR no se validara por servicio
            
            for(Long regla : listaReglas){            
                if(regla.compareTo(2L) != 0){
                    listaReglasAServicio.add(regla);
                }            
            }        
            
            fenixAmImpl = (FenixAMImpl)this.getRootApplicationModule();
            gestorDesembolsosAMImpl  = (FenixGestorDesembolsosAMImpl)fenixAmImpl.getFenixGestorDesembolsosAM();
            mapaReglasValidadas =                 
                 gestorDesembolsosAMImpl.obtenerReglasNegocio(listaReglasAServicio, idDesembolso, instanciaTarea, idTareaGestorOperacion, idProcesoGestorOperaciones);
            
                if (!mapaReglasValidadas.isEmpty() && mapaReglasValidadas.size() > 0) {
                    logger.warning("*Inf, Obteniendo resultados de mapa de reglas ya validadas.");
                                                               
           
                    for(Long idRegla : listaReglas){
                        
                            if(idRegla.compareTo(1L) == 0){
                                          
                                String descripcionEstadoReglaMora = (null == mapaReglasValidadas.get(FenixModelConstants.ID_REGLA_TRANSACCION_MORA)) ? null
                                                                  : mapaReglasValidadas.get(FenixModelConstants.ID_REGLA_TRANSACCION_MORA).toString();
                                
                                    if(descripcionEstadoReglaMora == null || descripcionEstadoReglaMora.equals("")){
                                        permitirInicioProceso = Boolean.FALSE;
                                        logger.warning("*Inf, IMPORTANTE! Para legla de MORA no se recivio respuesta del servicio");                    
                                        JboException ex = new JboException("Error no se pudo validar la regla Mora, Ref. validarReglasService");
                                        throw ex;
                                    }else{
                                        if(descripcionEstadoReglaMora.equals("NO_CUMPLIDA")){
                                            logger.warning("*Inf, la regla de MORA a sido validada correctamente ");
                                            crearRow(1L, "MORA");
                                            moraCumplida = Boolean.TRUE;
                                        }else if(descripcionEstadoReglaMora.equals("ERROR")){
                                            logger.warning("*Inf, la regla de MORA tiene un estado de ERROR");
                                            permitirInicioProceso = Boolean.FALSE; 
                                            mensaje1 = "";
                                            String descripcionError = (String)mapaReglasValidadas.get("descripcionEstadoReglaError");                                            
                                            JboException ex = new JboException("Estado de la Regla MORA es Error : "+descripcionError);
                                            throw ex;                                                                                                                            
                                        }else{
                                            logger.warning("*Inf, Importante! estado de la regla de MORA es : "+descripcionEstadoReglaMora);
                                        }
                                    }
                                
                            }else if(idRegla.compareTo(2L) == 0){
                                
                                Map mapaDatosScr = new HashMap<>();                         
                                     mapaDatosScr = (Map)fenixAmImpl.getValidarClienteScrVO().validarScr5(idOperacion);
                                    
                                 Boolean reglaValidada  = (Boolean)mapaDatosScr.get("reglaValidada");
                                 Boolean ocurrioError = (Boolean)mapaDatosScr.get("ocurrioError");
                                 String mensajeError =  (String)mapaDatosScr.get("mensajeError");
                                 
                                  if(reglaValidada){
                                      logger.warning("*Inf, la regla de SCR a sido validada correctamente");
                                      crearRow(2L, "SCR");
                                      scrCumplida = Boolean.TRUE;
                                  }else{                                     
                                      logger.warning("*Inf, Importante! la regla de SCR no se valido no se mostrara en el popUp");
                                      
                                      if(ocurrioError){
                                            logger.warning("*Error, ocurrio un error al validar la regla SCR");
                                            permitirInicioProceso = Boolean.FALSE;
                                            JboException ex = new JboException(mensajeError);
                                            throw ex;
                                        }                                                                
                                  }
                                                                                    
                            }else if(idRegla.compareTo(6L) == 0){
                                   
                                String descripcionEstadoReglaLimites = (null == mapaReglasValidadas.get(FenixModelConstants.ID_REGLA_TRANSACCION_LIMITES)) ? null
                                                                     : mapaReglasValidadas.get(FenixModelConstants.ID_REGLA_TRANSACCION_LIMITES).toString();
                                
                                    if(descripcionEstadoReglaLimites == null || descripcionEstadoReglaLimites.equals("")){
                                        permitirInicioProceso = Boolean.FALSE;
                                        logger.warning("*Inf, IMPORTANTE! Para legla de Limites no se recivio respuesta del servicio");
                                        JboException ex = new JboException("Error no se pudo validar la regla LIMITES, Ref. validarReglasService");
                                        throw ex;
                                    }else{
                                          if(descripcionEstadoReglaLimites.equals("NO_CUMPLIDA")){
                                              logger.warning("*Inf, la regla de LIMITES a sido validada correctamente");
                                              crearRow(3L, "LIMITES");
                                              limitesCumplida = Boolean.TRUE;
                                          }else if(descripcionEstadoReglaLimites.equals("ERROR")){
                                            logger.warning("*Inf, la regla de LIMITES tiene un estado de ERROR");
                                            permitirInicioProceso = Boolean.FALSE; 
                                            mensaje1 = "";
                                            String descripcionError = (String)mapaReglasValidadas.get("descripcionEstadoReglaError");                                            
                                            JboException ex = new JboException("Estado de la Regla LIMITES es Error : "+descripcionError);
                                            throw ex;                                                                                                                            
                                        }else{
                                              logger.warning("*Inf, Importante! el estado de la regla LIMITES : "+descripcionEstadoReglaLimites);
                                          }
                                    }
                                    
                            }else{
                                
                                logger.warning("*Inf, Importante! se recibio regla a validar "+idRegla+" que no se contemplo en el flujo");
                            }
                        
                    }// end for
               
            
            }else {
                logger.warning("ERROR: No se obtivieron reglas validadas por servicio.");
                permitirInicioProceso = Boolean.FALSE;            
                JboException ex = new JboException("ERROR: No se pudo validar las reglas por servicio");
                throw ex;
            }
                
                
                if(!moraCumplida && !scrCumplida && !limitesCumplida){
                    permitirInicioProceso = Boolean.FALSE;
                    mapaDatos.put("mensaje1", mensaje1);
                }    
                
            logger.warning("*Inf, Termina metodo validarReglasDesembolsoService");
        }
    
        
    public void crearRow(Long id,String descripcionRegla){
        logger.warning("*Inf, creando row para la regla: "+descripcionRegla);
            Row registro = null;        
            NameValuePairs nvpRegistro = new NameValuePairs();  
            nvpRegistro.setAttribute("Id", id);
            nvpRegistro.setAttribute("DescripcionRegla", descripcionRegla);        
            registro = createAndInitRow(nvpRegistro);
            insertRow(registro);
    }
    
    public void limpiarVO(){
        executeQuery();    
    }
    
   
    public List<String> recuperarRegistrosReglasValidadasVO(){
      logger.warning("*Inf, Inicia metodo recuperarRegistrosReglasValidadasVO");
      List<String> registrosVO = new ArrayList<String>();
      logger.warning("*Inf, Inicia metodo recuperarRegistrosReglasValidadasVO");
      
      if(getEstimatedRowCount() > 0){
           
           setRangeSize(-1);
           
           for(Row row : getAllRowsInRange()){
               String descipcionRegla = (null == row.getAttribute("DescripcionRegla"))? null
                                      : (String)row.getAttribute("DescripcionRegla");
               
               if(descipcionRegla != null){
                    registrosVO.add(descipcionRegla);
               }else{
                    logger.warning("*Inf, importante! se encontro un registro de regla sin descripcion");
                }               
               
           }
                          
      }else{
          registrosVO = null;
          logger.warning("*Inf, IMPORTANTE!  no se recuperaron registros de la VO de reglas validadas ");
      }
  
      logger.warning("*Inf, Termina metodo recuperarRegistrosReglasValidadasVO");
      return registrosVO;
    }
    
    
    public void pruebaDesembolsosService(){
        logger.warning("*Inf, Inicia metodo pruebaDesembolsosService");
        FenixAMImpl fenixAmImpl = null;
        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null; 
        List<Long> listaReglasAServicio  = new ArrayList<Long>();
        
        fenixAmImpl = (FenixAMImpl)this.getRootApplicationModule();
        gestorDesembolsosAMImpl  = (FenixGestorDesembolsosAMImpl)fenixAmImpl.getFenixGestorDesembolsosAM();
        listaReglasAServicio.add(1L);
        listaReglasAServicio.add(2L);
        listaReglasAServicio.add(6L);
        
                       
        gestorDesembolsosAMImpl.obtenerReglasNegocio(listaReglasAServicio, 595L, "1", new Integer(65), new Integer(13));
        
        logger.warning("*Inf, Termina metodo pruebaDesembolsosService");
    }
    
}

