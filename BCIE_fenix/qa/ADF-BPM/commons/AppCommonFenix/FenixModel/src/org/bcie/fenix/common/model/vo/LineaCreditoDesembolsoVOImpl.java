package org.bcie.fenix.common.model.vo;import java.sql.ResultSet;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.Key;import oracle.jbo.Row;import oracle.jbo.ViewCriteria;import oracle.jbo.server.ViewObjectImpl;import oracle.jbo.server.ViewRowImpl;import oracle.jbo.server.ViewRowSetImpl;import org.bcie.fenix.common.model.vo.common.LineaCreditoDesembolsoVO;// ---------------------------------------------------------------------// ---    File generated by Oracle ADF Business Components Design Time.// ---    Mon Nov 07 19:36:12 CST 2016// ---    Custom code may be added to this class.// ---    Warning: Do not modify method signatures of generated methods.// ---------------------------------------------------------------------public class LineaCreditoDesembolsoVOImpl extends ViewObjectImpl implements LineaCreditoDesembolsoVO {    private static ADFLogger logger = null;        public LineaCreditoDesembolsoVOImpl() {        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }    }    //    @Override//    protected void create() {//        // TODO Implement this method//        super.create();//        setNestedSelectForFullSql(false);//    }        public Long filtraLineaByIdOperacion(Long idOperacion){        logger.log(ADFLogger.WARNING, "Inside filtraLineaByIdOperacion, idOperacion: " + idOperacion);        ViewCriteria criteria = null;        Long idLinea = null;        if(null == idOperacion){            logger.log(ADFLogger.WARNING, "ERROR! IdSolicitud NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("FiltrarLineasParaTreeVC");                criteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);                this.applyViewCriteria(criteria);                this.executeQuery();                    this.setCurrentRow(first());                    idLinea = (Long) this.getCurrentRow().getAttribute("Id");                    logger.log(ADFLogger.WARNING, "Id de la linea: " + idLinea);            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en filtraLineaByIdOperacion " + e.getClass() + ":" + e.getMessage());            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("FiltrarLineasParaTreeVC");            }                    }        return idLinea;    }        public Row getLineaSeleccionada(){          Row row = null;        if(getCurrentRow() != null){                logger.warning("SeleccionandoRow en el modelo id->"+getCurrentRow().getAttribute("Id"));                row = getCurrentRow();        }else{                logger.warning("No hay una fila current en la VO x(");        }        return row;    }      public void  filtrarDatosParaTree(Long idOperacion, Long idSolicitud /*, Boolean BanEstatus*/){       logger.warning("*** Inicia metodo filtrarTree: num contratos antes del filtro: "                                                                                    +getEstimatedRowCount());                                   Row filaRecuperada = null;               ViewCriteria criteria = null;              if(idSolicitud == null){           logger.warning("***Error,  El parametro idSolicitud es requerido para el filtro");                            }else{                   try{                            criteria = getViewCriteriaManager().getViewCriteria("FiltrarParaTreeVL");                      criteria.ensureVariableManager().setVariableValue("pIdSolicitud", idSolicitud);           applyViewCriteria(criteria);           executeQuery();                          logger.warning("Query ejecutado valores recuperados: "+getEstimatedRowCount());                      if(getEstimatedRowCount() > 0){                              setCurrentRow(first());                                       }else{                logger.warning("No hay coincidencias en la busqueda");                 getViewCriteriaManager().removeApplyViewCriteriaName("FiltrarParaTreeVL");                          executeQuery();               }                      }catch(Exception e){               logger.log(ADFLogger.WARNING, "*** Error al FiltrarTreeByOperacionAndContratoBySolicitud  ->" + e.getClass() + ":" + e.getMessage());                }finally{              getViewCriteriaManager().removeApplyViewCriteriaName("FiltrarParaTreeVL");                                 }       }         logger.warning("*** Termina metodo filtrarDatosParaTree");               }       public void  inicializarTree(Long idOperacion, Long idSolicitud /*, BanEstatus*/){        logger.warning("Inf, Inicia metodo inicializarTree");            logger.warning("idOperacion: " +idOperacion);            logger.warning("idSolicitud: "+ idSolicitud);            /*logger.warning("BanEstatus: "+ BanEstatus);*/                    setpIdOperacion(idOperacion);            setpIdSolicitud(idSolicitud);            /*setpBanEstatus(BanEstatus);*/            executeQuery();               logger.warning("Registros encontrados: "+ this.getEstimatedRowCount());            if(getEstimatedRowCount() > 0){                               setCurrentRow(first());                     logger.warning("Id recuperado de la lineaFirst : "+getCurrentRow().getAttribute("Id"));             }else{                 logger.warning("No hay lineas de credito asociadas a la operacion");                 }                    logger.warning("Inf, Termina metodo inicializarTree");                 }        public void inicializarTreeTareaBPM(Long idOperacion, Long idSolicitud, Long idLineaCredito /*, Boolean BanEstatus*/) {        logger.warning("Inf, Inicia metodo inicializarTree");        logger.warning("idOperacion: " +idOperacion);        logger.warning("idSolicitud: "+ idSolicitud);        /*logger.warning("BanEstatus: "+ BanEstatus);*/        logger.warning("idLineaCredito: "+ idLineaCredito);        Row row = null;                if(null == idOperacion || null == idSolicitud || null == idLineaCredito /*|| null == BanEstatus*/){            logger.warning("Parametros requeridos son NULL. Operacion: " + idOperacion                           + ", Solicitud: " + idSolicitud + ", Linea de credito: " + idLineaCredito                           /*+ ", Ban estatus: " + BanEstatus*/);            return;        }                setpIdOperacion(idOperacion);        setpIdSolicitud(idSolicitud);        /*setBanEstatus(BanEstatus);*/        executeQuery();        if (getEstimatedRowCount() > 0) {                        row = getRow(new Key(new Object[] { idLineaCredito }));            setCurrentRow(row);                        logger.warning("Id recuperado de la lineaFirst : " + getCurrentRow().getAttribute("Id"));        } else {            logger.warning("No hay lineas de credito asociadas a la operacion");        }        logger.warning("Inf, Termina metodo inicializarTree");    }    /**     * Returns the variable value for pIdOperacion.     * @return variable value for pIdOperacion     */    public Long getpIdOperacion() {        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");    }    /**     * Sets <code>value</code> for variable pIdOperacion.     * @param value value to bind as pIdOperacion     */    public void setpIdOperacion(Long value) {        ensureVariableManager().setVariableValue("pIdOperacion", value);    }    /**     * executeQueryForCollection - overridden for custom java data source support.     */    @Override    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {        super.executeQueryForCollection(qc, params, noUserParams);    }    /**     * hasNextForCollection - overridden for custom java data source support.     */    @Override    protected boolean hasNextForCollection(Object qc) {        boolean bRet = super.hasNextForCollection(qc);        return bRet;    }    /**     * createRowFromResultSet - overridden for custom java data source support.     */    @Override    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);        return value;    }    /**     * getQueryHitCount - overridden for custom java data source support.     */    @Override    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {        long value = super.getQueryHitCount(viewRowSet);        return value;    }    /**     * getCappedQueryHitCount - overridden for custom java data source support.     */    @Override    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);        return value;    }    /**     * Returns the bind variable value for pIdSolicitud.     * @return bind variable value for pIdSolicitud     */    public Long getpIdSolicitud() {        return (Long) getNamedWhereClauseParam("pIdSolicitud");    }    /**     * Sets <code>value</code> for bind variable pIdSolicitud.     * @param value value to bind as pIdSolicitud     */    public void setpIdSolicitud(Long value) {        setNamedWhereClauseParam("pIdSolicitud", value);    }    /**     * Returns the bind variable value for pBanEstatus.     * @return bind variable value for pBanEstatus     */    /*public Long getpBanEstatus() {        return (Long) getNamedWhereClauseParam("pBanEstatus");    }*/    /**     * Sets <code>value</code> for bind variable pBanEstatus.     * @param value value to bind as pBanEstatus     */    /*public void setpBanEstatus(Boolean value) {        setNamedWhereClauseParam("pBanEstatus", value);    }*/}