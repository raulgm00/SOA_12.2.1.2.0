package org.bcie.fenix.common.model.vo;

import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.UsuarioReunionAprobacionVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Nov 24 16:52:44 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class UsuarioReunionAprobacionVOImpl extends ViewObjectImpl implements UsuarioReunionAprobacionVO {
    
    public static final ADFLogger logger = ADFLogger.createADFLogger(UsuarioReunionAprobacionVOImpl.class);
    
    /**
     * This is the default constructor (do not remove).
     */
    public UsuarioReunionAprobacionVOImpl() {
    }
    
    /**
     * Crea un resgistro a partir del row y del tipo enviado.
     * @param map con los datos de Miembros Aprobación
     */
    public void create(Map<String, Object> map) {
        logger.warning("inicia create Usuario Reunión Aprobación...");
        try {
            Row row = this.createRow();
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.ID, this.getId());
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.IDSOLICITUDAPROBACION, map.get("IdSolicitudAprobacion"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.IDTCAROLBPM, map.get("IdTcaRolBpm"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.LOGINUSUARIO, map.get("LoginUsuario"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.EMITEVOTO, map.get("EmiteVoto"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.FECHAREGISTRO, map.get("FechaRegistro"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.BANESTATUS, map.get("BanEstatus"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.MARCADOCOMOLEIDO, map.get("MarcadoComoLeido"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.NOMBREUSUARIO, map.get("NombreUsuario"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.IDTCATIPOUSUARIO, map.get("IdTcaTipoUsuario"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.CONNOTIFICACION, map.get("ConNotificacion"));
            
            this.insertRow(row);
            this.getDBTransaction().commit();
            logger.warning("El usuario reunión aprobación se creó de forma satisfactoria.");
        } catch (Exception e) {
            logger.warning("No se creó el registro de Usuario reunión aprobación.");
            logger.log(ADFLogger.ERROR, "*** " + e.getMessage());
        }
        logger.warning("terminó create Usuario Reunión Aprobación.");
    }
    
    private oracle.jbo.domain.Number getId() {
        SequenceImpl seqFuente = new SequenceImpl("USUARIO_REUNION_APROBACION_SEQ", this.getDBTransaction());
        return seqFuente.getSequenceNumber();
    }
    
    public void update(Row rowMap) {
        logger.warning("Entra en update");
        try{
            logger.warning("Numero de registros : " + this.getEstimatedRowCount());
            Key keyURA = new Key(new Object[] { rowMap.getAttribute("Id") });
            logger.warning("keyURA : " + keyURA);
            Row row = this.getRow(keyURA);
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.LOGINUSUARIO, rowMap.getAttribute("LoginUsuario"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.EMITEVOTO, rowMap.getAttribute("EmiteVoto"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.FECHAREGISTRO, rowMap.getAttribute("FechaRegistro"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.BANESTATUS, rowMap.getAttribute("BanEstatus"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.MARCADOCOMOLEIDO, rowMap.getAttribute("MarcadoComoLeido"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.NOMBREUSUARIO, rowMap.getAttribute("NombreUsuario"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.IDTCATIPOUSUARIO, rowMap.getAttribute("IdTcaTipoUsuario"));
            row.setAttribute(UsuarioReunionAprobacionVORowImpl.CONNOTIFICACION, rowMap.getAttribute("ConNotificacion"));
        }catch(Exception e){
            logger.warning("Error en update.", e);
        }
        logger.warning("Se realiza actualizacion correctamente");
    }
    
    public void crudCommit() {
        try {
            this.getDBTransaction().commit();
        } catch(Exception e) {
            logger.warning("Error al realizar commit", e);
            JboException ex = new JboException(e);
            ex.addToExceptions(new Exception("Error en la actualizaci\u00F3n."));
            throw ex;
        }
    }
    
    public void obtenerUsuarioReunionRow(Long idSolicitud){
        logger.warning("Entra en obtenerUsuarioReunionRow.");
        try{
            ViewCriteria criteria =
                this.getViewCriteriaManager().getViewCriteria("UsuarioReunionAprobacionVOCriteria");
            this.ensureVariableManager().setVariableValue("idSolicitud", idSolicitud);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            logger.warning("Termina ejecutar criterio por solicitud." + this.getEstimatedRowCount());
        }catch(Exception e){
            logger.warning("Error en obtenerUsuarioReunionRow.", e);
        }finally{
            logger.warning("Remueve criterio.");
            //this.removeApplyViewCriteriaName("UsuarioReunionAprobacionVOCriteria");
        }
    }


    /**
     * Returns the variable value for idSolicitud.
     * @return variable value for idSolicitud
     */
    public Long getidSolicitud() {
        return (Long) ensureVariableManager().getVariableValue("idSolicitud");
    }

    /**
     * Sets <code>value</code> for variable idSolicitud.
     * @param value value to bind as idSolicitud
     */
    public void setidSolicitud(Long value) {
        ensureVariableManager().setVariableValue("idSolicitud", value);
    }
}

