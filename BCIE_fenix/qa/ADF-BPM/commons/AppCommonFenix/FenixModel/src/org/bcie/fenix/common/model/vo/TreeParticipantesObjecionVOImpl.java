package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Nov 23 12:29:20 CST 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreeParticipantesObjecionVOImpl extends ViewObjectImpl {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public TreeParticipantesObjecionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varRol.
     * @return variable value for varRol
     */
    public Integer getvarRol() {
        return (Integer) ensureVariableManager().getVariableValue("varRol");
    }

    /**
     * Sets <code>value</code> for variable varRol.
     * @param value value to bind as varRol
     */
    public void setvarRol(Integer value) {
        ensureVariableManager().setVariableValue("varRol", value);
    }

    /**
     * Returns the variable value for varTipo.
     * @return variable value for varTipo
     */
    public Integer getvarTipo() {
        return (Integer) ensureVariableManager().getVariableValue("varTipo");
    }

    /**
     * Sets <code>value</code> for variable varTipo.
     * @param value value to bind as varTipo
     */
    public void setvarTipo(Integer value) {
        ensureVariableManager().setVariableValue("varTipo", value);
    }
    
    public Boolean existenCampo(Integer rol, Integer tipoNoObjecion){
        Boolean resultado=Boolean.FALSE;
            logger.warning("id rol: " +rol);
            logger.warning("id tipoNoObjecion: " +tipoNoObjecion);
             logger.log(ADFLogger.TRACE, "Inside existenCampo.");
                ViewCriteria criteriaByAccion = null;
                if(null!= rol && null!= tipoNoObjecion) {
                       criteriaByAccion=this.getViewCriteriaManager().getViewCriteria("TreeParticipantesObjecionVOCriteria");
                        criteriaByAccion.ensureVariableManager().setVariableValue("varRol", rol);
                            criteriaByAccion.ensureVariableManager().setVariableValue("varTipo", tipoNoObjecion);
                        
                        this.applyViewCriteria(criteriaByAccion);
                        this.executeQuery();
                        
                        // 2) Asignamos valor de retorno
                        if(this.getEstimatedRowCount() > 0) {
                            resultado=Boolean.TRUE;     
                        }
                        
                        // Removemos criteria del VO
                        this.getViewCriteriaManager().removeApplyViewCriteriaName("TreeParticipantesObjecionVOCriteria");
                        
                        // Re-ejecutamos el query 
                       // this.executeQuery();
                        
                        }
            return resultado;
        }
}

