package org.bcie.fenix.common.model.vo;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.SeguimientoAccionVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 04 11:19:55 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class SeguimientoAccionVOImpl extends ViewObjectImpl implements SeguimientoAccionVO {
    private static ADFLogger logger = null;
    
    public static final String BUSCAR_POR_ACCION_ESTATUS_VC = "SeguimientoAccionVOPorIdAccionBanEstatusVC";
    
    /**
     * This is the default constructor (do not remove).
     */
    public SeguimientoAccionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    public Boolean ingresarSeguimientoAccion(Long idAccion, String login, String nombre, Integer estadoAnterior,
                                             Integer estadoDespues, Long idObservacion, Integer rolBpm,
                                             Integer tareaProceso, Long idSeguimientoAnterior) {
        logger.warning("Inicia metodo ingresarSeguimientoAccion");
        Boolean retorno = Boolean.FALSE;
        
        if(null == idAccion ||
           null == login ||
           null == nombre ||
           null == estadoDespues ||
           null == rolBpm ||
           null == tareaProceso){
               logger.warning("Parametros requeridos son NULL");
               return retorno;
           }
        
        Row seguimientoRow = null;
        oracle.jbo.domain.Number idSeguimientoAccion = null;
        NameValuePairs nvpSeguimiento = null;
        SequenceImpl seqSeguimiento = null;
        Integer ban=1;
        seqSeguimiento = new SequenceImpl("SEGUIMIENTO_ACCION_SEQ", getDBTransaction());
        idSeguimientoAccion = seqSeguimiento.getSequenceNumber();
        nvpSeguimiento = new NameValuePairs();
        nvpSeguimiento.setAttribute("IdTcaEstadoAnterior", estadoAnterior);
        nvpSeguimiento.setAttribute("Id", idSeguimientoAccion);
        nvpSeguimiento.setAttribute("IdObservacionAccion", idObservacion);
        nvpSeguimiento.setAttribute("IdTcaEstadoDespues", estadoDespues);
        nvpSeguimiento.setAttribute("IdTcaRolBpm", rolBpm);
        nvpSeguimiento.setAttribute("IdTcaTareaBpm", tareaProceso);
        nvpSeguimiento.setAttribute("LoginUsuario", login);
        nvpSeguimiento.setAttribute("NombreUsuario", nombre);
        nvpSeguimiento.setAttribute("BanEstatus", ban);
        nvpSeguimiento.setAttribute("IdAccion", idAccion);
        nvpSeguimiento.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
        
        seguimientoRow = this.createAndInitRow(nvpSeguimiento);  
        try{
            logger.warning("Realizando COMMIT");
            getDBTransaction().commit();
            retorno = Boolean.TRUE;
        } catch (Exception e){
            logger.warning("Error al ejectutar el COMMIT: ", e);
            try{
                logger.warning("Realizando segundo COMMIT");
                getDBTransaction().commit();
                retorno = Boolean.TRUE;
            }catch(Exception ex){
                logger.warning("Error al ejectutar segundo COMMIT: ", ex);
                getDBTransaction().rollback();
            }
        }
        logger.warning("Termina metodo ingresarSeguimientoAccion");
        return retorno;
    }
    
    /**
     * Método que recupera el row del estado actual o último de la acción.     * 
     * @param idAccion
     */
    public Boolean obtenerEstadoActualAccion(Long idAccion){
        logger.warning("Inicia metodo obtenerEstadoActualAccion");
        
        Boolean resultado = Boolean.FALSE;
        
        if(null == idAccion){
            logger.warning("Parametro idAccion requerido es NULL");
            return resultado;
        }
        
        setvIdAccion(idAccion);
        
        ViewCriteria vc = getViewCriteria(BUSCAR_POR_ACCION_ESTATUS_VC);
        applyViewCriteria(vc);
        executeQuery();
        
        logger.warning("Filas obtenidas: " + getEstimatedRowCount());
        if(getEstimatedRowCount() == 1){
            setCurrentRow(first());
            Row row = getCurrentRow();
            logger.warning("id de Estado activo de la accion: " + row.getAttribute("Id"));
            resultado = Boolean.TRUE;
        }else {
            logger.warning("La acción tiene mas de un estado activo ó no tiene estados activos.");
        }
        
        logger.warning("Termina metodo obtenerEstadoActualAccion");
        return resultado;
    }
    
    public Boolean habilitaCatologoGestor(Long idAccion) {
        logger.warning("idAccion: " + idAccion);
        Boolean resultado = Boolean.FALSE;
        Row seguimientoRow = null;
        Integer codigoTarea = null;
        if (null != idAccion) {
            ViewCriteria criteria = null;
            criteria = this.getViewCriteriaManager().getViewCriteria("SeguimientoAccionVOCriteriaId");
            criteria.ensureVariableManager().setVariableValue("vIdAccion", idAccion);
            this.applyViewCriteria(criteria);
            this.executeQuery();

            if (this.getEstimatedRowCount() > 0) {
                seguimientoRow = this.getRowAtRangeIndex(0);
                codigoTarea = (Integer) seguimientoRow.getAttribute("IdTcaTareaBpm");
                logger.warning("codigoTarea: " + codigoTarea);
                if (null != codigoTarea) {
                    if (codigoTarea.compareTo(FenixModelConstants.ID_TAREA_GESTOR_OPERACION) == 0 ||
                        codigoTarea.compareTo(FenixModelConstants.ID_TAREA_GESTOR_CLIENTES) == 0) {
                        resultado = Boolean.TRUE;
                    }
                }
            }

            this.getViewCriteriaManager().removeApplyViewCriteriaName("SeguimientoAccionVOCriteriaId");

        }
        logger.warning("resultado: " + resultado);
        return resultado;
    }
    
    public Boolean actualizarEstatusEstadoAnterior(){
        logger.warning("Inicia metodo actualizarEstatusEstadoAnterior");
        Boolean resultado = Boolean.FALSE;
        
        if(getEstimatedRowCount() == 1){
            Row row = getCurrentRow();
            logger.warning("Id seguimiento accion a actualizar: " + row.getAttribute("Id"));
            
            row.setAttribute("BanEstatus", 0);
            resultado = Boolean.TRUE;
            
//            try{
//                
//                getDBTransaction().commit();
//                logger.warning("El COMMIT se realizó exitosamente");
//                resultado = Boolean.TRUE;  
//                
//            }catch(Exception e){
//                logger.warning("Error al ejecutar el COMMIT");
//                getDBTransaction().rollback();
//            } finally {
//                logger.warning("Removiendo view criteria");
//                getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_POR_ACCION_ESTATUS_VC);
//                executeQuery();
//            }
        } else {
            logger.warning("Existe mas de un row a actualizar o ninguno");
        }
        
        logger.warning("Termina metodo actualizarEstatusEstadoAnterior");
        return resultado;
    }
    
    public Boolean actualizarEstatusYCreaSeguimiento(Integer estadoAnterior, Integer estadoDespues, Long idAccion, 
                                                     Integer rolDUsuario, Integer idTarea, String loginUsuario, String nombre){
        logger.warning("Inicia metodo actualizarEstatusEstadoAnterior");
        logger.warning("estadoAnterior: " + estadoAnterior);
        logger.warning("estadoDespues: " + estadoDespues);
        logger.warning("idAccion: " + idAccion);
        logger.warning("rolDUsuario: " + rolDUsuario);
        logger.warning("idTarea: " + idTarea);
        logger.warning("loginUsuario: " + loginUsuario);
        logger.warning("nombre: " + nombre);
        Boolean resultado = Boolean.FALSE;
        Integer rolUsuario=null;
        Integer codigoTarea=null;
        String nombreUsuario=null;
        String login=null;
        
        if(getEstimatedRowCount() == 1){
            Row row = getCurrentRow();
            rolUsuario=(Integer)row.getAttribute("IdTcaRolBpm");
            codigoTarea=(Integer)row.getAttribute("IdTcaTareaBpm");
            nombreUsuario=(String)row.getAttribute("NombreUsuario");
            login=(String)row.getAttribute("LoginUsuario");
            logger.warning("Id seguimiento accion a actualizar: " + row.getAttribute("Id"));
            row.setAttribute("BanEstatus", 0);
            resultado = Boolean.TRUE;
            
            if(null!=rolDUsuario){
                    logger.warning("agrega seguimiento con los datos que vienen como parametros");
                    resultado=ingresarSeguimientoAccion(idAccion, loginUsuario, nombre, estadoAnterior, estadoDespues, null, rolDUsuario, idTarea, null);
                }
            else{
                    if(null!=rolUsuario && null!=codigoTarea && null!=nombreUsuario && null!=login ){
                        logger.warning("agrega seguimiento con los datos que vienen en el row anterior");
                    resultado=ingresarSeguimientoAccion(idAccion, login, nombreUsuario, estadoAnterior, estadoDespues, null, rolUsuario, codigoTarea, null);
                    }
                }
            
            if(!resultado){
                    logger.warning("Error al guardar los datos");
                }

            
    //            try{
    //
    //                getDBTransaction().commit();
    //                logger.warning("El COMMIT se realizó exitosamente");
    //                resultado = Boolean.TRUE;
    //
    //            }catch(Exception e){
    //                logger.warning("Error al ejecutar el COMMIT");
    //                getDBTransaction().rollback();
    //            } finally {
    //                logger.warning("Removiendo view criteria");
    //                getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_POR_ACCION_ESTATUS_VC);
    //                executeQuery();
    //            }
        } else {
            logger.warning("Existe mas de un row a actualizar o ninguno");
        }
        
        logger.warning("Termina metodo actualizarEstatusEstadoAnterior");
        return resultado;
    }

    /**
     * Returns the variable value for vIdAccion.
     * @return variable value for vIdAccion
     */
    public Long getvIdAccion() {
        return (Long) ensureVariableManager().getVariableValue("vIdAccion");
    }

    /**
     * Sets <code>value</code> for variable vIdAccion.
     * @param value value to bind as vIdAccion
     */
    public void setvIdAccion(Long value) {
        ensureVariableManager().setVariableValue("vIdAccion", value);
    }


}

