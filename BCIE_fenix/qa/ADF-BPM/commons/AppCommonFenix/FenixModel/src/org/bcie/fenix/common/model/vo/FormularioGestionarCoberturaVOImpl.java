package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.ResultSet;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.FormularioGestionarCoberturaVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 12 13:42:15 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class FormularioGestionarCoberturaVOImpl extends ViewObjectImpl implements FormularioGestionarCoberturaVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public FormularioGestionarCoberturaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void crearRowFormularioGestionarCobertura(Long idPrepago, BigDecimal montoPagado, Integer idTcaTipoMonedaPagado) {
        logger.warning("Into crearRowGestionarCobertura.");
        
        this.clearCache();
        Row row = this.createRow();
        row.setAttribute("IdPrepago", idPrepago);
        row.setAttribute("MontoPagado", montoPagado);
        row.setAttribute("IdTcaTipoMonedaPagado", idTcaTipoMonedaPagado);
        this.insertRowAtRangeIndex(0, row);
        this.setCurrentRow(row);
    }
    
    public void crearRowFormularioGestionarCoberturaConValores(Long idGestionarCobertura, Long idPrepago, Integer existeDifCobertura, BigDecimal montoPagado,
                                        Integer idTcaTipoMonedaPagado, BigDecimal montoReal, Integer idTcaTipoMonedaReal,
                                        Timestamp fechaRegistro) {
        logger.warning("Into crearGestionarCobertura.");
        
        this.clearCache();
        Row row = this.createRow();
        row.setAttribute("Id", idGestionarCobertura);
        row.setAttribute("IdPrepago", idPrepago);
        row.setAttribute("ExisteDifCobertura", existeDifCobertura);
        row.setAttribute("MontoPagado", montoPagado);
        row.setAttribute("IdTcaTipoMonedaPagado", idTcaTipoMonedaPagado);
        row.setAttribute("MontoReal", montoReal);
        row.setAttribute("IdTcaTipoMonedaReal", idTcaTipoMonedaReal);
        row.setAttribute("FechaRegistro", fechaRegistro);
        
        this.insertRowAtRangeIndex(0, row);
        this.setCurrentRow(row);
    }
    
    public Map validaCamposFinalizar() {
        Boolean result = Boolean.FALSE;
        Boolean existeDiferencia = Boolean.FALSE;
        FormularioGestionarCoberturaVORowImpl formularioGetionarCoberturaVORowImpl = (FormularioGestionarCoberturaVORowImpl) this.getCurrentRow();
        Map<String, Object> map = new HashMap<String, Object>();
        logger.warning("ExisteDifCobertura: " + formularioGetionarCoberturaVORowImpl.getExisteDifCobertura());
        logger.warning("MontoReal: " + formularioGetionarCoberturaVORowImpl.getMontoReal());
        logger.warning("IdTcaTipoMonedaReal: "+formularioGetionarCoberturaVORowImpl.getIdTcaTipoMonedaReal());
        
        if (formularioGetionarCoberturaVORowImpl.getExisteDifCobertura() != null &&
            (FenixModelConstants.EXISTE_DIFERENCIA_COBERTURA_SI.compareTo(formularioGetionarCoberturaVORowImpl.getExisteDifCobertura()) == 0) && 
            formularioGetionarCoberturaVORowImpl.getMontoReal() != null &&
            formularioGetionarCoberturaVORowImpl.getIdTcaTipoMonedaReal() != null) {
            logger.warning("Existe diferencia en cobertura");
            result = Boolean.TRUE;
            existeDiferencia = Boolean.TRUE;
        }
        
        if (formularioGetionarCoberturaVORowImpl.getExisteDifCobertura() != null &&
            FenixModelConstants.EXISTE_DIFERENCIA_COBERTURA_NO.compareTo((formularioGetionarCoberturaVORowImpl.getExisteDifCobertura())) == 0) {
            logger.warning("No existe diferencia en cobertura,no es necesario montoReal,idTcaTipoMonedaReal");
            result = Boolean.TRUE;
            existeDiferencia = Boolean.FALSE;
        }
        
        logger.warning("result : "+result);
        logger.warning("existeDiferencia : "+existeDiferencia);
        map.put("existeDiferencia", existeDiferencia);
        map.put("result", result);
        
        return (map);
    }
    
    public Boolean montoRealMayorPagado() {
        logger.warning("Dentro montoRealMayorPagado");
        Boolean result = null;
        
        FormularioGestionarCoberturaVORowImpl formularioGetionarCoberturaVORowImpl = (FormularioGestionarCoberturaVORowImpl) this.getCurrentRow();
        
        BigDecimal montoReal = formularioGetionarCoberturaVORowImpl.getMontoReal(); 
        BigDecimal montoPagado = formularioGetionarCoberturaVORowImpl.getMontoPagado(); 
        
        logger.warning("MontoReal: " + montoReal);
        logger.warning("MontoPagado: " + montoPagado);
        
        if (null != montoReal && null != montoPagado) {
            if (montoReal.compareTo(montoPagado) < 0) {
                result = Boolean.TRUE;
            } else {
                result = Boolean.FALSE;
            }
        }
        
        logger.warning("Saliendo montoRealMayorPagado result: "+result);
        return (result);
    }
    
    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

