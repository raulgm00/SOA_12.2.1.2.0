package org.bcie.fenix.common.model.vo;

import java.awt.print.Book;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;

import javax.xml.bind.JAXBElement;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ApplicationModuleImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.catalogobo.Catalogo;
import org.bcie.condicionbo.Condicion;
import org.bcie.condicionbo.ObjectFactory;
import org.bcie.condicionbo.TransaccionCondicion;
import org.bcie.condicionmo.CondicionesDemandaRequestType;
import org.bcie.condicionmo.CondicionesDemandaResponseType;
import org.bcie.condicionservice.Condicion12BndQSService;
import org.bcie.condicionservice.CondicionPT;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.CondicionPreviasFormalizarPorValidarVO;
import org.bcie.operacionbo.OperacionBasicType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Sep 06 11:33:54 CST 2021
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class CondicionPreviasFormalizarPorValidarVOImpl extends ViewObjectImpl implements CondicionPreviasFormalizarPorValidarVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    public CondicionPreviasFormalizarPorValidarVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    /**
     * Returns the bind variable value for pIdOperacion.
     * @return bind variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) getNamedWhereClauseParam("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        this.clearCache();
        logger.log(ADFLogger.WARNING, "INTO setpIdOperacion");
        setNamedWhereClauseParam("pIdOperacion", value);
        this.executeQuery();
    }


    public Boolean condicionPreviasFormalizarPorValidar(Long idOperacion){
        logger.log(ADFLogger.WARNING, "INTO obtenerCondicionPreviasFormailzarPorValidar");
        Boolean validar = Boolean.FALSE;
        CondicionIncumplimientoVOImpl condicionIncumplimientoVOImpl = null;
        try{
            setpIdOperacion(idOperacion);
            logger.warning("Cantidad de registros encontrados: " + 
                           this.getEstimatedRowCount());
            if(this.getEstimatedRowCount() > 0){
                validar = Boolean.TRUE;
            }else{
                validar = Boolean.FALSE;
            }
            
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error en obtenerCondicionPreviasFormailzarPorValidar." + e.getClass() + "." + e.getMessage());
        }
        logger.warning("Valor de retorno : " + validar);
        return validar;
    }
    
    public Boolean obtenerCondicionPreviaFormalizarPorValidar(Long idOperacion) {
        logger.log(ADFLogger.WARNING, "Inicia CondicionPreviaFormalizarPorValidarVO");
        Boolean validar = Boolean.FALSE;
        Boolean condicionActiva = Boolean.FALSE;
        Integer activa = 1;
        
        FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
        
        ValidarCondicionProcesoActivoVOImpl validarCondicionProcesoActivoVOImpl =  fenixAMImpl.getValidarCondicionProcesoActivoVO();
        CondicionIncumplimientoVOImpl condicionIncumplimientoVOImpl = fenixAMImpl.getCondicionIncumplimientoVO();
        condicionIncumplimientoVOImpl.executeQuery();
        this.setpIdOperacion(idOperacion);
        logger.log(ADFLogger.WARNING, "idOperacion" + idOperacion);
        this.executeQuery();

        logger.warning("Cantidad de registros encontrados: " + this.getEstimatedRowCount());

        try {
            if (this.getEstimatedRowCount() > 0) {
                validar = Boolean.TRUE;
                RowSetIterator rowsCondicion = this.createRowSetIterator(null);
                List<CondicionPreviasFormalizarPorValidarVORowImpl> rows = new ArrayList<>();
                rowsCondicion.reset();

                while (rowsCondicion.hasNext()) {
                    CondicionPreviasFormalizarPorValidarVORowImpl rowCondicion =
                        (CondicionPreviasFormalizarPorValidarVORowImpl) rowsCondicion.next();
                    if (null != rowCondicion) {
                        //Valida si una condicion se encuentra en un proceso activo
                        condicionActiva = validarCondicionProcesoActivoVOImpl.validarCondicionEnProcesoActivo(rowCondicion.getId(),idOperacion, activa);              
                        if (!condicionActiva) {
                            logger.warning("IdCondicion: " + rowCondicion.getId());
                            logger.warning("ID Tipo Fecha Inicio - " + rowCondicion.getIdTcaTipoFechaInicio());
                            logger.warning("Nombre: " + rowCondicion.getNombre());
                            logger.warning("Fecha Vigencia: " + rowCondicion.getFechaVigencia());
                            logger.warning("Fecha Inicio: " + rowCondicion.getFechaInicio());
                            logger.warning("Fecha Final: " + rowCondicion.getFechaFinal());
                            logger.warning("Fecha Validacion: " + rowCondicion.getFechaValidacion());
                            logger.warning("En proceso: " + rowCondicion.getEnProceso());
                            logger.warning("Plazo: " + rowCondicion.getPlazo());
                            logger.warning("Frecuencia Plazo: " + rowCondicion.getIdTcaFrecuenciaPlazo());
                            logger.warning("Control Condicion: " + rowCondicion.getIdTcaControlCondicion());
    
                            //Se inserta la condicion encontrada y se guarda su bitacora
                            logger.warning("La condicion aun no esta validada, se agregara a condicionIncumplimientoVOImpl.");
                            condicionIncumplimientoVOImpl.insertaRowIncumplimiento(rowCondicion);
                        }
                    } else {
                        logger.log(ADFLogger.WARNING, "El row es nulo.");
                    }
                }

                rowsCondicion.closeRowSetIterator();

                if (condicionIncumplimientoVOImpl.getEstimatedRowCount() > 0) {
                    logger.warning("Condiciones agregadas: " + condicionIncumplimientoVOImpl.getEstimatedRowCount());
                } else {
                    validar = Boolean.FALSE;
                }
            } else {
                validar = Boolean.FALSE;
            }
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "Error en obtenerCondicionPreviasFormailzarPorValidar." + e.getClass() + "." + e.getMessage());
        }
        logger.log(ADFLogger.WARNING, "Finaliza obtenerCondicionPreviasFormailzarPorValidarVO");
        return validar;
    }
    
    public Boolean validarEsVisibleCondicionPreviasFormalizar(Long idOperacion){
        logger.log(ADFLogger.WARNING, "INTO obtenerCondicionPreviasFormailzarPorValidar");
        Boolean validar = Boolean.FALSE;
        CondicionIncumplimientoVOImpl condicionIncumplimientoVOImpl = null;
        try{
            setpIdOperacion(idOperacion);
            logger.warning("Cantidad de registros encontrados: " + 
                           this.getEstimatedRowCount());
            if(this.getEstimatedRowCount() > 0){
                validar = Boolean.TRUE;
            }else{
                validar = Boolean.FALSE;
            }
            
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error en obtenerCondicionPreviasFormailzarPorValidar." + e.getClass() + "." + e.getMessage());
        }
        logger.warning("Valor de retorno : " + validar);
        return validar;
    }
    
    /**
    ???? * Se crea metodo para insertar las condiciones 
    ???? * Existe una implementacion en el AMImpl con la misma funcion con la diferencia que este permitira enviar EventoCondicion
    ???? * Iniciar Cumplimiento de condiciones
    ???? * @param
    ???? * @since 10/04/2021
    ???? */
    public Boolean agregarCondiciones(Long idOperacion, String responsableOperacion, Row[] SeleccionCondiciones) {
        logger.log(ADFLogger.WARNING, "INTO agregarCondiciones.");

        //En este metodo se sustituye el idEvento por Agrupador
        HashMap<String, Object> respuestaServicio = null;
        CondicionesDemandaRequestType request = null;
        CondicionesDemandaResponseType response = null;
        Long idCondicion = null;
        Boolean isValidaCondicion = Boolean.FALSE;
        OperacionBasicType operacion = new OperacionBasicType();
        TransaccionCondicion transaccionCondicion = new TransaccionCondicion();
        logger.log(ADFLogger.WARNING, "numero de Rows." + SeleccionCondiciones.length);

        try {
            if (null != SeleccionCondiciones && SeleccionCondiciones.length > 0) {
                Catalogo catalogo = new Catalogo();
                List<Catalogo> listCatalogo = new ArrayList<Catalogo>();  
                catalogo.setDescripcionCorta("1");
                catalogo.setId(1L);
                listCatalogo.add(catalogo);
                ObjectFactory fact = new ObjectFactory();   
                JAXBElement<Integer> banEstatus = fact.createCondicionBanEstatus(1); 
                
                for (Row row : SeleccionCondiciones) {
                    Condicion condicion = new Condicion();
                    
                    idCondicion = (Long) row.getAttribute("Id");
                    condicion.setIdCondicion(idCondicion);
                    condicion.setBanEstatus(banEstatus);
                    
                    transaccionCondicion.getCondicion().add(condicion);
                    transaccionCondicion.setEstatus(1);
                    transaccionCondicion.setEnProceso(true);
                    transaccionCondicion.setEventoCondicion(catalogo);

                    logger.warning("IdCondicion :" + idCondicion);
                }
            } else {
                logger.log(ADFLogger.WARNING, "La lista del row es nulo.");
            }
            if (null != idOperacion && null != responsableOperacion) {
                operacion.setIdOperacion(idOperacion);
                operacion.setResponsable(responsableOperacion);
                transaccionCondicion.setOperacion(operacion);
            } else {
                logger.log(ADFLogger.WARNING,
                           "La operacion o el responsableOperacion son nulos." + idOperacion + ". :" +
                           responsableOperacion);
            }
        } catch (Exception e) {
            logger.log(ADFLogger.ERROR,
                       "Error al llenar el objeto TransaccionCondicion." + e.getClass() + "." + e.getMessage());
        }

        if (null != transaccionCondicion) {
            try {
                FenixAMImpl fenixAM = (FenixAMImpl) this.getRootApplicationModule();
                String wsdl = fenixAM.getWsdl(IWsdlLocation.CONDICION);

                Condicion12BndQSService condicion12BndQSService =
                IWsdlLocation.Service.getInstance(Condicion12BndQSService.class, wsdl);
                CondicionPT condicionPT = condicion12BndQSService.getCondicion12BndQSPort();
                request = new CondicionesDemandaRequestType();
                request.setCondicionesDemanda(transaccionCondicion);
                
                

                Date horaInicio =
                    ModelUtils.logStartWS(logger, request, FenixModelConstants.AGREGAR_CONDICIONES_POR_VALIDAR);
                response = condicionPT.condicionesDemanda(request);
                ModelUtils.logEndWS(logger, response, FenixModelConstants.AGREGAR_CONDICIONES_POR_VALIDAR, horaInicio);
                if (null != response.getResultado().getResult() &&
                    response.getResultado().getResult().toString().equalsIgnoreCase("OK")) {
                    logger.log(ADFLogger.WARNING, "respuesta del servicio." + response.getResultado().getResult());
                    logger.log(ADFLogger.WARNING, "respuesta del servicio." + response.getResultado().getMessage());
                } else {
                    logger.log(ADFLogger.WARNING, "Error en  request." + response.getResultado().getResult());
                }
                // Regresamos respuesta del servicio
                respuestaServicio = new HashMap<String, Object>();
                respuestaServicio.put("response", response);
                isValidaCondicion = Boolean.TRUE;

            } catch (Exception e) {
                logger.log(ADFLogger.ERROR, e.getMessage());
                isValidaCondicion = Boolean.FALSE;
                JboException ex = new JboException(e);
                ex.addToExceptions(new Exception("Error al agregar las condiciones e iniciar el proceso."));
                throw ex;
            }
        }

        return isValidaCondicion;
    }
    
}

