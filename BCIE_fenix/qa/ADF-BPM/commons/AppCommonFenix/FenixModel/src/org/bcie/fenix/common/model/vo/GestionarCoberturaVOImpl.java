package org.bcie.fenix.common.model.vo;

import com.bcie.xmlns.prepagoservice.PlanAmortizacionPT;
import com.bcie.xmlns.prepagoservice.PlanAmortizacionPTSOAP12BndQSService;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.JboException;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.correobo.Param;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.GestionarCoberturaVO;
import org.bcie.prepagomo.PlanArmotizacionRequestType;
import org.bcie.prepagomo.PlanArmotizacionResponseType;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 12 12:28:00 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class GestionarCoberturaVOImpl extends ViewObjectImpl implements GestionarCoberturaVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public GestionarCoberturaVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Long crearGestionarCobertura(Long idPrepago, Integer existeDifCobertura, BigDecimal montoPagado,
                                        Integer idTcaTipoMonedaPagado, BigDecimal montoReal, Integer idTcaTipoMonedaReal,
                                        Timestamp fechaRegistro) {
        logger.warning("Into crearGestionarCobertura.");
        logger.warning("idPrepago: " + idPrepago);
        logger.warning("existeDifCobertura: " + existeDifCobertura);
        logger.warning("montoPagado: " + montoPagado);
        logger.warning("idTcaTipoMonedaPagado: " + idTcaTipoMonedaPagado);
        logger.warning("montoReal: " + montoReal);
        logger.warning("idTcaTipoMonedaReal: " + idTcaTipoMonedaReal);
        logger.warning("fechaRegistro: " + fechaRegistro);
        
        Row gestionarCoberturaRow = null;
        oracle.jbo.domain.Number idGestionarCobertura = null;
        SequenceImpl sequenceGestionarCobertura = null;
        NameValuePairs nvpGestionarCobertura = null;
        
        try {
            //Obtener la secuencia de la tabla "GESTIONAR_COBERTURA"
            sequenceGestionarCobertura = new SequenceImpl("GESTIONAR_COBERTURA_SEQ", getDBTransaction());
            idGestionarCobertura = sequenceGestionarCobertura.getSequenceNumber();
            nvpGestionarCobertura = new NameValuePairs();
            nvpGestionarCobertura.setAttribute("Id", idGestionarCobertura.longValue());
            nvpGestionarCobertura.setAttribute("IdPrepago", idPrepago);
            nvpGestionarCobertura.setAttribute("ExisteDifCobertura", existeDifCobertura);
            nvpGestionarCobertura.setAttribute("MontoPagado", montoPagado);
            nvpGestionarCobertura.setAttribute("IdTcaTipoMonedaPagado", idTcaTipoMonedaPagado);
            nvpGestionarCobertura.setAttribute("MontoReal", montoReal);
            nvpGestionarCobertura.setAttribute("IdTcaTipoMonedaReal", idTcaTipoMonedaReal);
            nvpGestionarCobertura.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
            
            gestionarCoberturaRow = this.createAndInitRow(nvpGestionarCobertura);
            
            getDBTransaction().commit();
        } catch (Exception e) {
            logger.warning("Exception in crearGestionarCobertura: " + e.getMessage());
            getDBTransaction().rollback();
            return null;
        }
        
        this.executeQuery();
        
        return idGestionarCobertura.longValue();
    }
    
    public String consultarInformeByIdPrepago(Long idPrepago) {
        logger.log(ADFLogger.WARNING, "INTO consultarInformeByIdPrepago");
        String url = null;
        String planAmortizacion = "PLAN_AMORTIZACION";
        String idPrepagoTag = "ID_PREPAGO";
        
        try {
            if (idPrepago != null) {
                FenixAMImpl fenixAM = null;
                fenixAM = (FenixAMImpl) this.getRootApplicationModule();
                String wsdl = fenixAM.getWsdl(IWsdlLocation.OBTENER_URL);

                
                PlanAmortizacionPTSOAP12BndQSService planAmortizacionPTSOAP12BndQSService = IWsdlLocation.Service.getInstance(PlanAmortizacionPTSOAP12BndQSService.class, wsdl);
                PlanAmortizacionPT planAmortizacionPT = planAmortizacionPTSOAP12BndQSService.getPlanAmortizacionPTSOAP12BndQSPort();
                PlanArmotizacionRequestType planArmotizacionRequestType = new PlanArmotizacionRequestType(); 
                
                planArmotizacionRequestType.setURL(planAmortizacion);
                Param param = new Param();
                param.setTag(idPrepagoTag);
                param.setValor(idPrepago.toString());
                planArmotizacionRequestType.getTags().add(param);

                Date horaInicio = ModelUtils.logStartWS(logger, planArmotizacionRequestType, FenixModelConstants.WSC_OBTENER_URL);
                PlanArmotizacionResponseType planArmotizacionResponseType = planAmortizacionPT.planAmortizacion(planArmotizacionRequestType);
                ModelUtils.logEndWS(logger, planArmotizacionResponseType, FenixModelConstants.WSC_OBTENER_URL, horaInicio);

                if (null != planArmotizacionResponseType.getResultado() && planArmotizacionResponseType.getResultado().getResult() != null &&
                    planArmotizacionResponseType.getResultado().getResult().toString().equalsIgnoreCase("OK")) {
                    url = planArmotizacionResponseType.getURL();
                    logger.warning("URL: " + url);
                } else {
                    String msg = "ERROR";

                    if (null != planArmotizacionResponseType.getResultado())
                        msg = planArmotizacionResponseType.getResultado().getMessage();
                    throw new Exception("WS Obtener URL Error:  " + msg);
                }
            } else {
                logger.log(ADFLogger.WARNING, "El valor del idPrepago es nulo.");
            }
            
            
        } catch (Exception e) {
            logger.log(ADFLogger.WARNING, "planArmotizacionResponseType is  null, no mapping information.");
            logger.log(ADFLogger.ERROR,
                       "Error en consultarInformeByIdPrepago " + e.getClass() + ":" + e.getMessage());
            JboException ex = new JboException(e);
            throw ex;
        }

        return url;
    }

    /**
     * Returns the variable value for varIdPrepago.
     * @return variable value for varIdPrepago
     */
    public Long getvarIdPrepago() {
        return (Long) ensureVariableManager().getVariableValue("varIdPrepago");
    }

    /**
     * Sets <code>value</code> for variable varIdPrepago.
     * @param value value to bind as varIdPrepago
     */
    public void setvarIdPrepago(Long value) {
        ensureVariableManager().setVariableValue("varIdPrepago", value);
    }
}

