package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.DocumentoVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 05 17:34:17 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DocumentoVOImpl extends ViewObjectImpl implements DocumentoVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public DocumentoVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

    /**
     * Returns the variable value for varIdDocumento.
     * @return variable value for varIdDocumento
     */
    public Number getvarIdDocumento() {
        return (Number) ensureVariableManager().getVariableValue("varIdDocumento");
    }

    /**
     * Sets <code>value</code> for variable varIdDocumento.
     * @param value value to bind as varIdDocumento
     */
    public void setvarIdDocumento(Number value) {
        ensureVariableManager().setVariableValue("varIdDocumento", value);
    }
    
    /**
     * Actualiza el IdTipoDocumento para un Documento específico. Creado para proceso de LAFT - Seguimiento
     * @param idDocumento
     * @param idTipoDocumento
     * 
     * @author Francisco Cuevas Pineda 
     * @since 18/abril/2016
     */
    public void actualizarTipoDocumento(Long idDocumento, Integer idTipoDocumento) {
        logger.log(ADFLogger.WARNING, "Inside actualizarTipoDocumento. idDocumento: " + idDocumento + 
                                      " idTipoDocumento: " + idTipoDocumento);
        Row documentoRow = null;
        documentoRow = this.getRow(new Key(new Object[] {idDocumento}));
        
        if(documentoRow != null) {
            documentoRow.setAttribute("IdTipoDocumento", idTipoDocumento);
            getDBTransaction().commit();
            
            // Debido a que el Rowset del VO cambió, hacemos un executeQuery 
            // (para que no falle en inserciones posteriores)
            this.executeQuery();
        }
    }
    
    /**
     * Actualiza el atributo IdTcaAccion para un Documento específico. Creado para método genérico de cargarDocumentos
     * @param idDocumento
     * @param idAccion
     * 
     * @author Francisco Cuevas Pineda 
     * @since 28/junio/2016
     */
    public void actualizarAccionDocumento(Long idDocumento, Integer idAccion) {
        logger.log(ADFLogger.WARNING, "Inside actualizarAccionDocumento. idDocumento: " + idDocumento + 
                                      " idAccion: " + idAccion);
        Row documentoRow = null;
        documentoRow = this.getRow(new Key(new Object[] {idDocumento}));
        
        if(documentoRow != null) {
            documentoRow.setAttribute("IdTcaAccion", idAccion);
            try{
                logger.warning("Se ejecuta primer commit");
                getDBTransaction().commit();
            }catch(Exception e){
                logger.severe("Error en commit en actualizarAccionDocumento",e);
                try{
                    logger.warning("Se ejecuta segundo commit");
                    getDBTransaction().commit();
                }catch(Exception ex){
                    logger.severe("Error en segundo commit en actualizarAccionDocumento",ex);
                }
            }
            
            // Debido a que el Rowset del VO cambió, hacemos un executeQuery 
            // (para que no falle en inserciones posteriores)
            this.executeQuery();
        }        
    }
    
    /**
     * Realiza un borrado logico del documento en la base de fenix
     * @param idDocumento
     * @author Jonathan Ruiz
     * @since 14/12/2017
     */
    public void borrarLogicamenteDocumentoFenix(Long idDocumento) {
        logger.log(ADFLogger.WARNING, "Entrando en borrarDocumentoFenix.");
        logger.log(ADFLogger.WARNING, "idDocumento: " + idDocumento);
        
        Row documentoRow = null;
        documentoRow = obtenerDocumentoPorId(idDocumento);
        
        if(documentoRow != null) {
            documentoRow.setAttribute(DocumentoVORowImpl.BANESTATUS, FenixModelConstants.BANESTATUS_FALSE);
            //getDBTransaction().commit();
        }
    }
    
    /**
     * Obtiene un documento en la base de fenix por ViewCriteria
     * @param idDocumento
     * @author Jonathan Ruiz
     * @since 14/12/2017
     */
    public Row obtenerDocumentoPorId(Long idDocumento) {
        ViewCriteria criteria = null;
        Row documentoRow = null;
        
        try {
            criteria = getViewCriteriaManager().getViewCriteria("DocumentoVOCriteriaByIdDocumento");
            criteria.ensureVariableManager().setVariableValue("varIdDocumento", idDocumento);
            applyViewCriteria(criteria);
            executeQuery();
            documentoRow = first();
        } catch(Exception e) {
            logger.warning("Error al recuperar el documento." , e);
        } finally {
            getViewCriteriaManager().removeApplyViewCriteriaName("DocumentoVOCriteriaByIdDocumento");
        }
        
        return documentoRow;
    }
    
    /**
     * Realiza un borrado fisico del documento en la base de fenix
     * @param idDocumento
     * @author Gabriel Niño
     * @since 31/01/2018
     */
    public void borrarFisicamenteDocumentoFenix(Long idDocumento) {
        logger.warning("Dentro de borrarFisicamenteDocumentoFenix");
        logger.warning("idDocumento: " + idDocumento);
        
        Row documentoRow = null;
        documentoRow = obtenerDocumentoPorId(idDocumento);
        
        if(documentoRow != null) {
            try{
                this.setCurrentRow(documentoRow);
                this.removeCurrentRow();
                //getDBTransaction().commit();
            }catch(Exception e){
                logger.severe("Error en borrarFisicamenteDocumentoFenix",e);
            }
        }else{
            logger.warning("row es nulo");
        }
        
        logger.warning("Fuera de borrarFisicamenteDocumentoFenix");
    }
}

