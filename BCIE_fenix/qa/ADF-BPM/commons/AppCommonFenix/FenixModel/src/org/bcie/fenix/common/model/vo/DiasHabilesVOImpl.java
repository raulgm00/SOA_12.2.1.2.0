package org.bcie.fenix.common.model.vo;

import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.DiasHabilesVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Oct 10 17:10:40 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DiasHabilesVOImpl extends ViewObjectImpl implements DiasHabilesVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public DiasHabilesVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }

  
    public List obtenerDiasInhabilesMoneda(String descripcionMoneda) {
        logger.warning("Dentro obtenerDiasInhabilesMoneda");
        long startTime = System.currentTimeMillis();
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");
        String fechaString = null;
        Date fecha = null;
        List<Date> result = new ArrayList<Date>();
        filtrarPorCodigoMoneda(descripcionMoneda);
        
        this.setRangeSize(-1);
        
        for(Row row:this.getAllRowsInRange()){
            Date dia = (Date)row.getAttribute("Dia");
            try {
                fechaString = formatter.format(dia);
                fecha = formatter.parse(fechaString);
                result.add(fecha);
            } catch (ParseException e) {
                logger.severe("Error obtenerDiasInhabilesMoneda : ",e);
            }
        }
        
        
        logger.warning("Tamaño de la lista de dias inhabiles : "+result.size());
        logger.warning("Fuera obtenerDiasInhabilesMoneda");
        
        long endTime = System.currentTimeMillis();
        logger.warning("Tiempo de ejecución del metodo obtenerDiasInhabilesMoneda :  "
                            +(endTime - startTime)/1000 +" segundos");
        return (result);
    }
    
    
    public void filtrarPorCodigoMoneda(String codigoMoneda){
        logger.warning("Dentro filtrarPorCodigoMoneda, codigoMoneda : "+codigoMoneda);
        try {
            ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("FiltrarPorCodigoMoneda");
            criteria.ensureVariableManager().setVariableValue("varCodigoMoneda", codigoMoneda);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            logger.warning("Cantidad de row obtenidos : "+ this.getEstimatedRowCount());
        } catch (Exception ex) {
            logger.severe("Error en filtrarPorCodigoMoneda : ",ex);
        }
        logger.warning("Fuera filtrarPorCodigoMoneda, cantidad de registros obtenidos : "+this.getEstimatedRowCount());
    }

    /**
     * Returns the variable value for varCodigoMoneda.
     * @return variable value for varCodigoMoneda
     */
    public String getvarCodigoMoneda() {
        return (String) ensureVariableManager().getVariableValue("varCodigoMoneda");
    }

    /**
     * Sets <code>value</code> for variable varCodigoMoneda.
     * @param value value to bind as varCodigoMoneda
     */
    public void setvarCodigoMoneda(String value) {
        ensureVariableManager().setVariableValue("varCodigoMoneda", value);
    }
}
