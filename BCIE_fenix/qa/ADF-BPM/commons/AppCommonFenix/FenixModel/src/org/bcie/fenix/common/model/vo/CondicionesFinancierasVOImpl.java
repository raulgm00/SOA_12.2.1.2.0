package org.bcie.fenix.common.model.vo;import java.math.BigDecimal;import java.math.BigInteger;import java.sql.Timestamp;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import java.util.GregorianCalendar;import java.util.HashMap;import java.util.List;import java.util.Map;import javax.xml.datatype.DatatypeFactory;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.NameValuePairs;import oracle.jbo.Row;import oracle.jbo.ViewCriteria;import oracle.jbo.server.SequenceImpl;import oracle.jbo.server.ViewObjectImpl;import org.bcie.desembolso.DesembolsoPT;import org.bcie.desembolso.DesembolsoPTSOAP12BindingQSService;import org.bcie.desembolsomo.CalcularCuotasRequestType;import org.bcie.desembolsomo.CalcularCuotasResponseType;import org.bcie.fenix.common.model.FenixModelConstants;import org.bcie.fenix.common.model.am.FenixAMImpl;import org.bcie.fenix.common.model.utils.IWsdlLocation;import org.bcie.fenix.common.model.utils.ModelUtils;import org.bcie.fenix.common.model.vo.common.CondicionesFinancierasVO;import javax.xml.datatype.XMLGregorianCalendar;import oracle.binding.AttributeBinding;import oracle.jbo.JboException;import oracle.jbo.RowSetIterator;import org.bcie.catalogobo.Catalogo;import org.bcie.desembolsobo.FrecuenciaType;import org.bcie.desembolsobo.LimitePlazoType;import org.bcie.desembolsomo.ActualizarEstadoContratoDesembolsoRequestType;import org.bcie.desembolsomo.ActualizarEstadoContratoDesembolsoResponseType;import org.bcie.desembolsomo.PropagarContratoDesembolsoRequestType;import org.bcie.desembolsomo.PropagarContratoDesembolsoResponseType;import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;import org.bcie.fenix.common.model.utils.PropertiesUtils;import org.bcie.resultbo.Resultado;public class CondicionesFinancierasVOImpl extends ViewObjectImpl implements CondicionesFinancierasVO {    private static ADFLogger logger = null;    private static final String CLASS_NAME = CondicionesFinancierasVOImpl.class.getName();        private static final Integer NUMERO_DIAS_CERO = 0;        Long idCondicionFinanciera=null;    Long idLineaCredito=null;    public CondicionesFinancierasVOImpl() {        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }    }    /**     * En este metodo creamos el nuevo Row para condiciones financieras     *     * @since 17/01/2017     * @author Carlos Lopez     * @return idCondicionFinanciera     */    public Long crearRow(Long idContratoDesembolso, Long idOperacion) {        logger.warning("Inf, Inicia metodo crearRow en CondicionesFinancieras");        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución        TInicio =            System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        String programa = null;        Row nuevaFila = null;        Long idCondicionFinanciera = null;                String descripcionMoneda = null;        BigDecimal valorTasaActual = null;                executeQuery();        if (idContratoDesembolso != null && idContratoDesembolso.compareTo(0L) == 1) {            logger.warning("*Inf, buscando condicion financiera para idContratoDesembolso : " + idContratoDesembolso);            Boolean existeCondicionFin = cargarDatosContrato(idContratoDesembolso);                        FenixAMImpl fenixAMImpl = (FenixAMImpl) getRootApplicationModule();            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =                (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();                        if (!existeCondicionFin) {                logger.warning("Inf, No se encontro un registro para el IdDEsembolso : " + idContratoDesembolso);                logger.warning("Inf, Creando nuevo registro en condiciones financieras");                idCondicionFinanciera = createSequenceCondicion();                try {                    NameValuePairs nvpCondicionesFinancieras = new NameValuePairs();                                        programa =                        fenixGestorDesembolsosAMImpl.getContratoDesembolsoQueryVO().obtencionPrograma(idContratoDesembolso);                    nvpCondicionesFinancieras.setAttribute("Id", idCondicionFinanciera);                    nvpCondicionesFinancieras.setAttribute("IdContratoDesembolso", idContratoDesembolso);                    nvpCondicionesFinancieras.setAttribute("IdTcaBaseCalculo", 7);                    nvpCondicionesFinancieras.setAttribute("IdTcaEspecificacionFecha", 1);                    nvpCondicionesFinancieras.setAttribute("IdTcaTipoCalendario", 2);                    nvpCondicionesFinancieras.setAttribute("IdTcaTipoTasaDesembolso", 2); // Se modifica la tasa por Fixed por defecto para iniciar correctamente los desembolsos                    nvpCondicionesFinancieras.setAttribute("TratamientoDiasFeriados", "FWD");                    nvpCondicionesFinancieras.setAttribute("IdTcaFrecuenciaPagoCapital", null);                    nvpCondicionesFinancieras.setAttribute("IdTcaFrecuenciaPagoInteres", null);                    nvpCondicionesFinancieras.setAttribute("IdTcaFrecuenciaRevTasa", null);                    nvpCondicionesFinancieras.setAttribute("IdTcaFrecuenciaPeriodoGra", null);                    nvpCondicionesFinancieras.setAttribute("IdTcaFrecuenciaPlazo", null);                    nvpCondicionesFinancieras.setAttribute("IdTcaFrecuenciaRevSpread", null);                    nvpCondicionesFinancieras.setAttribute("DescripcionTasa", null);                    nvpCondicionesFinancieras.setAttribute("DescripcionSpread", null);                    if (null != programa) {                        nvpCondicionesFinancieras.setAttribute("ProgramaContrato", programa);                    } else {                        nvpCondicionesFinancieras.setAttribute("ProgramaContrato", null);                    }                    nvpCondicionesFinancieras.setAttribute("CodigoOperacion", idOperacion);                    nvpCondicionesFinancieras.setAttribute("CodigoTasa", "F");                    if (null != fenixAMImpl) {                        Map map = new HashMap();                        try {                            map = fenixAMImpl.getTccTerminoVO().obtenerTccTerminoEnDesembolsos(idOperacion);                        } catch (Exception e) {                            logger.warning("ERROR al recuperar informacion del Termino En Desembolsos T501.", e);                        }                        if (map.size() > 0) {                            BigDecimal tasaMinima = null;                            BigDecimal tasaMaxima = null;                            try {                                tasaMinima = (BigDecimal) map.get("tasaMinima");                                tasaMaxima = (BigDecimal) map.get("tasaMaxima");                            } catch (Exception e) {                                logger.warning("ERROR al recuperar la tasaMaxima y minima para Condiciones financieras.",                                               e);                            }                            logger.warning("Seteando LimiteTasaMinima: " + tasaMinima + " y LimiteTasaMaxima: " +                                           tasaMaxima + " al registro de la Condicion financiera.");                            nvpCondicionesFinancieras.setAttribute("LimiteTasaMinima", tasaMinima);                            nvpCondicionesFinancieras.setAttribute("LimiteTasaMaxima", tasaMaxima);                        } else {                            logger.warning("No se obtuvieron datos del termino EnDesembolso T501.");                        }                    }                    nuevaFila = createAndInitRow(nvpCondicionesFinancieras);                    insertRow(nuevaFila);                    setCurrentRow(nuevaFila);                                        try{                        logger.warning("Se realiza primer intento de Commit");                        getDBTransaction().commit();                    }catch(Exception e){                        logger.warning("Primer intento de commit fallido", e);                        try{                            logger.warning("Se realiza segundo intento de Commit");                            getDBTransaction().commit();                        }catch(Exception ex){                            logger.severe("Segundo intento de commit con error", ex);                        }                    }                } catch (Exception e) {                    logger.warning("ERROR al crear el row de condiciones financieras.", e);                }            } else {                nuevaFila = getCurrentRow();                try {                    idCondicionFinanciera = (Long) nuevaFila.getAttribute("Id");					logger.warning("***** IdTcaBaseCalculo: " + nuevaFila.getAttribute("IdTcaBaseCalculo") );                } catch (Exception e) {                    logger.warning("Error al obtener idCondicionFinanciera.", e);                }            }        } else {            logger.warning("*Inf, Important!  IdContratoDesemboso Null, No se creara row de condicionesFinancieras.");        }        TFin =            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia        logger.warning("Inf, Termina metodo crearRow en CondicionesFinancieras con una duracion de " + tiempo +                       " segundos");        return idCondicionFinanciera;    }    /**     * Este metodo calcula y establece el numero de cuotas de la seccion principal de condiciones financieras     *     * @since 18/01/2017     * @author Carlos Lopez     */    public Boolean calcularCoutasPrincipal(java.sql.Timestamp fechaInicio, java.sql.Timestamp fechaTermino,                                           Integer IdTcaFrecuencia, Integer frecuencia, String tipoCuota,Long IdCondicionFinanciera) {        logger.warning("*Inf, inicia metodo para calcular las cuotas  tipoCuota: " + tipoCuota);        Boolean respuesta = Boolean.FALSE;        Integer numCuotas = null;        logger.warning("*Inf, fechaInicio " + fechaInicio);        logger.warning("*Inf, fechaTermino " + fechaTermino);        logger.warning("*Inf, IdTcaFrecuencia " + IdTcaFrecuencia);        logger.warning("*Inf, frecuencia " + frecuencia);        if (fechaInicio == null || fechaTermino == null || IdTcaFrecuencia == null || frecuencia == null ||            tipoCuota == null) {            logger.warning("*Inf, Important! faltan parametros para poder calcular el numero de cuotas ");        } else {            numCuotas = calcularCuotasService(fechaInicio, fechaTermino, IdTcaFrecuencia, frecuencia, IdCondicionFinanciera);            respuesta = Boolean.TRUE;        }        if (tipoCuota != null && !tipoCuota.equals("")) {            switch (tipoCuota) {            case "principal":                getCurrentRow().setAttribute("NumeroCuotasPagoCapital", numCuotas);                logger.warning("*Inf, NumeroCuotasPagoCapital Calculando: " + numCuotas);                respuesta = Boolean.TRUE;                break;            case "interes":                getCurrentRow().setAttribute("NumeroCuotasPagoInteres", numCuotas);                logger.warning("*Inf, NumeroCuotasPagoInteres Calculando: " + numCuotas);                respuesta = Boolean.TRUE;                break;            case "taza":                getCurrentRow().setAttribute("NumeroRevisionesTasa", numCuotas);                logger.warning("*Inf, NumeroRevisionesTasa Calculando: " + numCuotas);                respuesta = Boolean.TRUE;                break;            case "spread":                getCurrentRow().setAttribute("NumeroRevisionesSpread", numCuotas);                logger.warning("*Inf, NumeroRevisionesSpread Calculando: " + numCuotas);                respuesta = Boolean.TRUE;                break;                //getCurrentRow().setAttribute("NumeroCuotasPagoCapital",numCuotas);            }        } else {            logger.warning("*Inf, Important! el tipoCuota no fue especificado no se realizara la asignacion");            respuesta = Boolean.FALSE;        }        logger.warning("Inf, termina metodo calcularCoutasInteres numCuotas calculado : " + numCuotas);        return respuesta;    }    /**     * Este metodo calcula  el numero de cuotas mediante un servicio es necesario ingrsar todos los parametros     * solicitados     *     * @since 18/01/2017     * @author Carlos Lopez     * @param  fechaInicio, fechaTermino, IdTcaFrecuencia, Frecuencia     * @return numeroCuotas     */    public Integer calcularCuotasService(java.sql.Timestamp fechaInicio, java.sql.Timestamp fechaTermino,                                         Integer IdTcaFrecuencia, Integer Frecuencia, Long IdCondicionFinanciera) {        logger.warning("Inf, Inicia el metodo calcularCuotasService");        FenixAMImpl fenixAM = null;        Integer numeroCuotas = null;        Row filaRecuperada = null;                ViewCriteria criteria = getViewCriteriaManager().getViewCriteria("IdCondicionFinancieraCriteria");        criteria.ensureVariableManager().setVariableValue("pIdCondicionFinanciera", IdCondicionFinanciera);        applyViewCriteria(criteria);        executeQuery();        if (getEstimatedRowCount() > 0) {            setCurrentRow(first());            filaRecuperada = getCurrentRow();        }        if (filaRecuperada != null) {            logger.warning(" Id Current en condiciones Financieras : " + filaRecuperada.getAttribute("Id"));            fenixAM = (FenixAMImpl) this.getRootApplicationModule();            String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);            DesembolsoPTSOAP12BindingQSService desembolsoService =                IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);            DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();            CalcularCuotasRequestType request = new CalcularCuotasRequestType();            CalcularCuotasResponseType response = null;            XMLGregorianCalendar fechaIni = convertirFecha(fechaInicio);            XMLGregorianCalendar fechaFin = convertirFecha(fechaTermino);            String codigoEsterno = null;            switch (IdTcaFrecuencia) {            case 1:                codigoEsterno = "D";                break;            case 2:                codigoEsterno = "M";                break;            case 3:                codigoEsterno = "Y";                break;            }            request.setPlazo(new FrecuenciaType());            request.getPlazo().setFechaInicio(fechaIni);            request.getPlazo().setFrecuencia(new LimitePlazoType());            request.getPlazo().getFrecuencia().setTipo(new Catalogo());            request.getPlazo().getFrecuencia().getTipo().setCodigoExterno(codigoEsterno);            request.getPlazo().getFrecuencia().setValor(Frecuencia);            request.setFechaVencimiento(fechaFin);            try {                logger.warning("Ejecutando servicio " + FenixModelConstants.WSC_CALCULAR_CUOTAS);                java.util.Date horaInicio =                    ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CALCULAR_CUOTAS);                response = desembolsoPT.calcularCuotas(request);                ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CALCULAR_CUOTAS, horaInicio);                logger.warning("Servicio " + FenixModelConstants.WSC_CALCULAR_CUOTAS + " ejecutado correctamente");            } catch (Exception e) {                logger.warning("Error al ejecutar servicio " + FenixModelConstants.WSC_CALCULAR_CUOTAS);            }            if (null != response) {                if (null != response.getResultado()) {                    if (response.getResultado().getResult().value() == "OK") {                        if (null != response.getNumeroCuotas()) {                            logger.warning("*Inf, El Numero de Cuotas recuperado del servicio es : " +                                           response.getNumeroCuotas());                            try {                                numeroCuotas = Integer.parseInt(response.getNumeroCuotas().toString());                            } catch (Exception e) {                                logger.warning("***Error, al parsear numero de cuotas ->" + numeroCuotas);                            }                        } else {                            logger.warning("***Error, response.getNumeroCuotas() es resuelto a null");                            logger.warning("*Inf, mensagge del servicio ---> :" + response.getResultado().getMessage());                            logger.warning("*Inf, mensagge Error del servicio --->  :" +                                           response.getResultado().getError());                        }                    } else {                        logger.warning("***Error, response.getResultado().getResult().value() :" +                                       response.getResultado().getResult().value());                    }                } else {                    logger.warning("***Error, response.getResultado() es resuelto a null");                }            } else {                logger.warning("***Error, El response del servicio es resuelto a null");            }        } else {            logger.warning("*Inf, No se pudo calcular las Cuotas, El Current en Condiciones Financieras es null");        }        logger.warning("*Inf, termina el metodo calcularCuotasService");        return numeroCuotas;    }        public Boolean actualizarEstadoContratoByService(BigInteger idContrato, BigInteger idTcaEstado) {        final String METHOD_NAME = "actualizarEstadoContratoByService";            logger.entering(CLASS_NAME, METHOD_NAME);        FenixAMImpl fenixAM = null;        Boolean resultadoActualizacionEstado = false;        fenixAM = (FenixAMImpl) this.getRootApplicationModule();        String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);        DesembolsoPTSOAP12BindingQSService desembolsoService =            IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);        DesembolsoPT desembolsoPT = desembolsoService.getDesembolsoPTSOAP12BindingQSPort();        ActualizarEstadoContratoDesembolsoRequestType request = new ActualizarEstadoContratoDesembolsoRequestType();        ActualizarEstadoContratoDesembolsoResponseType response = null;                request.setIdContrato(idContrato);        request.setIdTcaEstado(idTcaEstado);        try {            logger.warning("Ejecutando servicio " + FenixModelConstants.WSC_ACTUALIZAR_ESTADO_CONTRATO);            java.util.Date horaInicio =                ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_ACTUALIZAR_ESTADO_CONTRATO);            response = desembolsoPT.actualizarEstadoContratoDesembolso(request);            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_ACTUALIZAR_ESTADO_CONTRATO, horaInicio);            logger.warning("Servicio " + FenixModelConstants.WSC_ACTUALIZAR_ESTADO_CONTRATO + " ejecutado correctamente");        } catch (Exception e) {            logger.warning("Error al ejecutar servicio " + FenixModelConstants.WSC_ACTUALIZAR_ESTADO_CONTRATO);        }        if (null != response) {            if (null != response.getResultado()) {                if (response.getResultado().getResult().value() == "OK") {                    if (null != response.getRespuestaDB() ) {                                                String respuestaActualizacion = response.getRespuestaDB();                        logger.warning("*Inf, la respuesta es : " + respuestaActualizacion);                        try {                            resultadoActualizacionEstado = Boolean.valueOf(respuestaActualizacion);                                                   } catch (Exception e) {                            logger.warning("***Error, al convertir a Boolean  ->" + respuestaActualizacion);                        }                    } else {                        logger.warning("***Error, response.getRespuestaDB() es resuelto a null");                        logger.warning("*Inf, mensagge del servicio ---> :" + response.getRespuestaDB());                        logger.warning("*Inf, mensagge Error del servicio --->  :" +  response.getResultado().getError());                    }                } else {                    logger.warning("***Error, response.getResultado().getResult().value() :" +                                   response.getResultado().getResult().value());                }            } else {                logger.warning("***Error, response.getResultado() es resuelto a null");            }        } else {            logger.warning("***Error, El response del servicio es resuelto a null");        }                logger.exiting(CLASS_NAME, METHOD_NAME);        return resultadoActualizacionEstado;    }    /**     * Este metodo conviete un tipo de dato java.sql.Timestamp en XMLGregorianCalendar     *     * @since 18/01/2017     * @author Carlos Lopez     * @param  fechaTimeStamp     * @return numeroCuotas     */    public XMLGregorianCalendar convertirFecha(java.sql.Timestamp fechaTimeStamp) {        logger.warning("*Inf, convertir timeStam  : " + fechaTimeStamp + " a XMLGregorianCalendar");        XMLGregorianCalendar fechaXML = null;        try {            GregorianCalendar fechaCalendar = new GregorianCalendar();            fechaCalendar.setTimeInMillis(fechaTimeStamp.getTime());            fechaXML = DatatypeFactory.newInstance().newXMLGregorianCalendar(fechaCalendar);        } catch (Exception e) {            logger.warning("***Error, al convertir Fecha " + fechaTimeStamp + "  ->" + e);        }        logger.warning("*Inf, termino la conversion de la fecha: " + fechaXML);        return fechaXML;    }        public Boolean cargarDatosContrato(Long idDesembolso) {        logger.warning("*Inf, inicia metodo cargarDatosContrato idContrato : " + idDesembolso);        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución        TInicio =            System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        Boolean existeRegistroDeContrato = Boolean.FALSE;        String descripcionProducto = null;        String programaContrato = null;        String IdProductoFlexcube = null;        Row filaRecuperada = null;        ViewCriteria criteria = null;        if (idDesembolso == null) {            logger.warning("***Error, el parametro idDesembolso requerido es resuelto a Null");            return existeRegistroDeContrato;        }        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =            (FenixGestorDesembolsosAMImpl) this.getApplicationModule();        try {            criteria = getViewCriteriaManager().getViewCriteria("IdContratoDesembolsoCriteria");            criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idDesembolso);            applyViewCriteria(criteria);            executeQuery();            if (getEstimatedRowCount() > 0) {                setCurrentRow(first());                filaRecuperada = getCurrentRow();                existeRegistroDeContrato = Boolean.TRUE;                logger.warning("Inf, Ok se encontro el registro del contrato de desembolso : " + idDesembolso);                logger.warning("Inf, Id de condicionesFinancieras recuperado ->" + filaRecuperada.getAttribute("Id"));                idCondicionFinanciera=(Long)filaRecuperada.getAttribute("Id");                if (filaRecuperada.getAttribute("IdProductoFlexcube") != null &&                    !filaRecuperada.getAttribute("IdProductoFlexcube").equals("")) {                    IdProductoFlexcube = (String) filaRecuperada.getAttribute("IdProductoFlexcube");                    descripcionProducto =                        fenixGestorDesembolsosAMImpl.getConsultarVtaProductoDesembolsoFlexcubeVO().recuperarDescripcionById(IdProductoFlexcube).toString();                    programaContrato =                        fenixGestorDesembolsosAMImpl.getContratoDesembolsoQueryVO().obtencionPrograma(idDesembolso);                } else {                    logger.warning("*Inf, Important! el registro de la condicion financiera no cuenta con un IdProductoFlexcube");                }                                //asignarValorTransient(filaRecuperada);                if (descripcionProducto != null && !descripcionProducto.equals("")) {                    logger.warning("*Inf, setando valor de descripcion de producto a transient");                    filaRecuperada.setAttribute("DescripcionProducto", descripcionProducto);                } else {                    logger.warning("*Inf, Important! no se encontro la Descripcion! para el IdProductoFlexcube : " +                                   IdProductoFlexcube);                }                if (programaContrato != null && !programaContrato.equals("")) {                    filaRecuperada.setAttribute("ProgramaContrato", programaContrato);                } else {                    logger.warning("*Inf, Important! no se encontro la Descripcion! para el ProgramaContrato ");                }                                if (filaRecuperada.getAttribute("IdTcaTipoTasaDesembolso") != null){                                     Integer tipoTasa = (Integer)filaRecuperada.getAttribute("IdTcaTipoTasaDesembolso");                                      if(tipoTasa.compareTo(new Integer(1)) == 0){                           filaRecuperada.setAttribute("IdTcaFrecuenciaPagoInteres",  new Integer(4));                           filaRecuperada.setAttribute("FrecuenciaPagoInteres",  new Integer(1));                           filaRecuperada.setAttribute("NumeroCuotasPagoInteres",  new Integer(1));                   }                    logger.warning("*Inf, NumeroCuotasPagoInteres :"+filaRecuperada.getAttribute("NumeroCuotasPagoInteres"));                                    }else{                    logger.warning("*Inf, Value IdTcaTipoTasaDesembolso: "+filaRecuperada.getAttribute("IdTcaTipoTasaDesembolso"));                }                                if(idDesembolso!=null){                    TreSolicitudLineaCreditoVOImpl treSL= fenixGestorDesembolsosAMImpl.getTreSolicitudLineaCreditoVO();                    idLineaCredito=treSL.obtenerLineaCreditoPorIdContrato(idDesembolso);                    if(idLineaCredito!=null){                        logger.warning("*Inf, idLineaCredito :"+idLineaCredito);                        FenixAMImpl fenixAM = (FenixAMImpl) getRootApplicationModule();                        if(fenixAM!=null){                            fenixAM.cargarCFTempVO(idDesembolso.toString(), idLineaCredito.toString());                               }                    }                }                                            } else {                logger.warning("Inf, No hay coincidencias en la busqueda");                getViewCriteriaManager().removeApplyViewCriteriaName("IdContratoDesembolsoCriteria");                executeQuery();            }        } catch (Exception e) {            logger.log(ADFLogger.WARNING, "*** Error,  METHOD cargarDatosContrato->", e);        } finally {            getViewCriteriaManager().removeApplyViewCriteriaName("IdContratoDesembolsoCriteria");        }        TFin =            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia        logger.warning("Inf, Termina metodo cargarDatosContrato con una duracion de: " + tiempo + " segundos");        return existeRegistroDeContrato;    }    public Row getCondicionesFinancieras(Long idContrato) {        logger.log(ADFLogger.WARNING, "--- INSIDE getCondicionesFinancieras idContrato: " + idContrato);        ViewCriteria criteria = null;        Row row = null;        if (idContrato != null) {            try {                criteria = this.getViewCriteriaManager().getViewCriteria("IdContratoDesembolsoCriteria");                criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idContrato);                this.applyViewCriteria(criteria);                this.executeQuery();                if (this.getCurrentRow() != null) {                    if (this.getEstimatedRangePageCount() > 0) {                        row = this.getCurrentRow();                        logger.log(ADFLogger.WARNING, "-----------------CondicionFinancieraRow------------------");                        logger.log(ADFLogger.WARNING, "--Id Recuperado: " + row.getAttribute("Id"));                        logger.log(ADFLogger.WARNING, "--IdDesembolso: " + row.getAttribute("IdContratoDesembolso"));                        logger.log(ADFLogger.WARNING, "--IdProductorFlex : " + row.getAttribute("IdProductoFlexcube"));                        logger.log(ADFLogger.WARNING, "--------------------------------------------------------");                        cargarDatosContrato(idContrato);                    } else {                        logger.log(ADFLogger.WARNING, "Row de condiciones NULL");                    }                }            } catch (Exception e) {                logger.log(ADFLogger.WARNING,                           "Error en getLineaCreditoDesembolso " + e.getClass() + ":" + e.getMessage());            } finally {                this.getViewCriteriaManager().removeApplyViewCriteriaName("IdContratoCriteria");            }        } else {            logger.warning("El idContratoDesembolso de es NULL");        }        return row;    }    public String getIdProductoFlexcubeByIdContrato(Long idContrato) {        logger.warning("*** Inicia metodo getIdProductoFlexcubeByIdContrato");        String idProductoFlexcube = null;        Row filaRecuperada = null;        ViewCriteria criteria = null;        if (idContrato == null) {            logger.warning("*** El parametro numCuenta es requerido para la busqueda");            return null;        } else {            try {                criteria = getViewCriteriaManager().getViewCriteria("IdContratoDesembolsoCriteria");                criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idContrato);                applyViewCriteria(criteria);                executeQuery();                if (getEstimatedRowCount() > 0) {                    setCurrentRow(first());                    filaRecuperada = getCurrentRow();                    idProductoFlexcube = String.valueOf(filaRecuperada.getAttribute("IdProductoFlexcube"));                    logger.warning("Id Producto Flexcube recuperado ->" +                                   filaRecuperada.getAttribute("IdProductoFlexcube"));                } else {                    logger.warning("El row recuperado es Null no hay coincidencias en la busqueda");                    getViewCriteriaManager().removeApplyViewCriteriaName("IdContratoDesembolsoCriteria");                    executeQuery();                }            } catch (Exception e) {                logger.log(ADFLogger.WARNING,                           "*** Error al getIdProductoFlexcubeByIdContrato??->" + e.getClass() + ":" + e.getMessage());            } finally {                getViewCriteriaManager().removeApplyViewCriteriaName("IdContratoDesembolsoCriteria");            }        }        logger.warning("*** Termina metodo getIdProductoFlexcubeByIdContrato");        return idProductoFlexcube;    }    public Boolean setCondicionesFinancieras(Row row) {        logger.warning("---------INSIDE setCondicionesFinancieras -------------");        logger.log(ADFLogger.WARNING, "- FechaRegistro : " + new java.sql.Timestamp(System.currentTimeMillis()));        Row rowCondicion = null;        NameValuePairs condicionesFinancierasPairs = null;        if (row != null) {            try {                condicionesFinancierasPairs = new NameValuePairs();                if (row.getAttribute("id") != null) {                    condicionesFinancierasPairs.setAttribute("Id", row.getAttribute("id"));                }                if (row.getAttribute("codigoTasaReferencia") != null) {                    condicionesFinancierasPairs.setAttribute("CodigoTasaReferencia",                                                             row.getAttribute("codigoTasaReferencia"));                }                if (row.getAttribute("codigoTasaReferenciaSpread") != null) {                    condicionesFinancierasPairs.setAttribute("CodigoTasaReferenciaSpread",                                                             row.getAttribute("codigoTasaReferenciaSpread"));                }                if (row.getAttribute("exceptoVencimiento") != null) {                    condicionesFinancierasPairs.setAttribute("ExceptoVencimiento",                                                             row.getAttribute("exceptoVencimiento"));                }                if (row.getAttribute("fechaPrimerPagoCapital") != null) {                    condicionesFinancierasPairs.setAttribute("FechaPrimerPagoCapital",                                                             row.getAttribute("fechaPrimerPagoCapital"));                }                if (row.getAttribute("fechaProximaRevisionSpread") != null) {                    condicionesFinancierasPairs.setAttribute("FechaProximaRevisionSpread",                                                             row.getAttribute("fechaProximaRevisionSpread"));                }                if (row.getAttribute("fechaProximaRevisionTasa") != null) {                    condicionesFinancierasPairs.setAttribute("FechaProximaRevisionTasa",                                                             row.getAttribute("fechaProximaRevisionTasa"));                }                if (row.getAttribute("fechaProximoPagoInteres") != null) {                    condicionesFinancierasPairs.setAttribute("FechaProximoPagoInteres",                                                             row.getAttribute("fechaProximoPagoInteres"));                }                if (row.getAttribute("fechaVencimiento") != null) {                    condicionesFinancierasPairs.setAttribute("FechaVencimiento", row.getAttribute("fechaVencimiento"));                }                if (row.getAttribute("frecuenciaPagoCapital") != null) {                    condicionesFinancierasPairs.setAttribute("FrecuenciaPagoCapital",                                                             row.getAttribute("frecuenciaPagoCapital"));                }                if (row.getAttribute("frecuenciaPagoInteres") != null) {                    condicionesFinancierasPairs.setAttribute("FrecuenciaPagoInteres",                                                             row.getAttribute("frecuenciaPagoInteres"));                }                if (row.getAttribute("frecuenciaPeriodoGracia") != null) {                    condicionesFinancierasPairs.setAttribute("FrecuenciaPeriodoGracia",                                                             row.getAttribute("frecuenciaPeriodoGracia"));                }                if (row.getAttribute("frecuenciaPlazo") != null) {                    condicionesFinancierasPairs.setAttribute("FrecuenciaPlazo", row.getAttribute("frecuenciaPlazo"));                }                if (row.getAttribute("frecuenciaRevisionSpread") != null) {                    condicionesFinancierasPairs.setAttribute("FrecuenciaRevisionSpread",                                                             row.getAttribute("frecuenciaRevisionSpread"));                }                if (row.getAttribute("frecuenciaRevisionTasa") != null) {                    condicionesFinancierasPairs.setAttribute("FrecuenciaRevisionTasa",                                                             row.getAttribute("frecuenciaRevisionTasa"));                }                if (row.getAttribute("idContratoDesembolso") != null) {                    condicionesFinancierasPairs.setAttribute("IdContratoDesembolso",                                                             row.getAttribute("idContratoDesembolso"));                }                if (row.getAttribute("idProductoFlexcube") != null) {                    condicionesFinancierasPairs.setAttribute("IdProductoFlexcube",                                                             row.getAttribute("idProductoFlexcube"));                }                if (row.getAttribute("idTcaBaseCalculo") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaBaseCalculo", row.getAttribute("idTcaBaseCalculo"));                }                if (row.getAttribute("idTcaEspecificacionFecha") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaEspecificacionFecha",                                                             row.getAttribute("idTcaEspecificacionFecha"));                }                if (row.getAttribute("idTcaFrecuenciaPagoCapital") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaFrecuenciaPagoCapital",                                                             row.getAttribute("idTcaFrecuenciaPagoCapital"));                }                if (row.getAttribute("idTcaFrecuenciaPagoInteres") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaFrecuenciaPagoInteres",                                                             row.getAttribute("idTcaFrecuenciaPagoInteres"));                }                if (row.getAttribute("idTcaFrecuenciaPeriodoGra") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaFrecuenciaPeriodoGra",                                                             row.getAttribute("idTcaFrecuenciaPeriodoGra"));                }                if (row.getAttribute("idTcaFrecuenciaPlazo") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaFrecuenciaPlazo",                                                             row.getAttribute("idTcaFrecuenciaPlazo"));                }                if (row.getAttribute("idTcaFrecuenciaRevSpread") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaFrecuenciaRevSpread",                                                             row.getAttribute("idTcaFrecuenciaRevSpread"));                }                if (row.getAttribute("idTcaFrecuenciaRevTasa") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaFrecuenciaRevTasa",                                                             row.getAttribute("idTcaFrecuenciaRevTasa"));                }                if (row.getAttribute("idTcaTipoCalendario") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaTipoCalendario",                                                             row.getAttribute("idTcaTipoCalendario"));                }                if (row.getAttribute("idTcaTipoTasaDesembolso") != null) {                    condicionesFinancierasPairs.setAttribute("IdTcaTipoTasaDesembolso",                                                             row.getAttribute("idTcaTipoTasaDesembolso"));                }                if (row.getAttribute("limiteTasaMaxima") != null) {                    condicionesFinancierasPairs.setAttribute("LimiteTasaMaxima", row.getAttribute("limiteTasaMaxima"));                }                if (row.getAttribute("limiteTasaMinima") != null) {                    condicionesFinancierasPairs.setAttribute("LimiteTasaMinima", row.getAttribute("limiteTasaMinima"));                }                if (row.getAttribute("montoDescuento") != null) {                    condicionesFinancierasPairs.setAttribute("MontoDescuento", row.getAttribute("montoDescuento"));                }                if (row.getAttribute("numeroCuotasPagoCapital") != null) {                    condicionesFinancierasPairs.setAttribute("NumeroCuotasPagoCapital",                                                             row.getAttribute("numeroCuotasPagoCapital"));                }                if (row.getAttribute("numeroCuotasPagoInteres") != null) {                    condicionesFinancierasPairs.setAttribute("NumeroCuotasPagoInteres",                                                             row.getAttribute("numeroCuotasPagoInteres"));                }                if (row.getAttribute("numeroRevisionesSpread") != null) {                    condicionesFinancierasPairs.setAttribute("NumeroRevisionesSpread",                                                             row.getAttribute("numeroRevisionesSpread"));                }                if (row.getAttribute("numeroRevisionesTasa") != null) {                    condicionesFinancierasPairs.setAttribute("NumeroRevisionesTasa",                                                             row.getAttribute("numeroRevisionesTasa"));                }                if (row.getAttribute("sePuedeAlinearDiaPago") != null) {                    condicionesFinancierasPairs.setAttribute("SePuedeAlinearDiaPago",                                                             row.getAttribute("sePuedeAlinearDiaPago"));                }                if (row.getAttribute("sePuedeMoverEntreMeses") != null) {                    condicionesFinancierasPairs.setAttribute("SePuedeMoverEntreMeses",                                                             row.getAttribute("sePuedeMoverEntreMeses"));                }                if (row.getAttribute("spreadMora") != null) {                    condicionesFinancierasPairs.setAttribute("SpreadMora", row.getAttribute("spreadMora"));                }                if (row.getAttribute("spreadTasa") != null) {                    condicionesFinancierasPairs.setAttribute("SpreadTasa", row.getAttribute("spreadTasa"));                }                if (row.getAttribute("tasaTotal") != null) {                    condicionesFinancierasPairs.setAttribute("TasaTotal", row.getAttribute("tasaTotal"));                }                if (row.getAttribute("tratamientoDiasFeriados") != null) {                    condicionesFinancierasPairs.setAttribute("TratamientoDiasFeriados",                                                             row.getAttribute("tratamientoDiasFeriados"));                }                if (row.getAttribute("valorTasa") != null) {                    condicionesFinancierasPairs.setAttribute("ValorTasa", row.getAttribute("valorTasa"));                }                if (row.getAttribute("valorTasaReferenciaSpread") != null) {                    condicionesFinancierasPairs.setAttribute("ValorTasaReferenciaSpread",                                                             row.getAttribute("valorTasaReferenciaSpread"));                }                //condicionesFinancierasPairs.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));                rowCondicion = this.createAndInitRow(condicionesFinancierasPairs);                try{                    logger.warning("Se realiza primer intento de Commit");                    getDBTransaction().commit();                    logger.warning("Es correcto commit");                    this.executeQuery();                }catch(Exception e){                    logger.warning("Primer intento de commit fallido", e);                    try{                       logger.warning("Se realiza segundo intento de Commit");                        getDBTransaction().commit();                        logger.warning("Es correcto el segundo commit");                        this.executeQuery();                    }catch(Exception ex){                        logger.severe("Segundo intento de commit con error", ex);                        getDBTransaction().rollback();                        return Boolean.TRUE;                    }                }            } catch (Exception e) {                logger.log(ADFLogger.ERROR, "Exception in crearJustificacionExcepcion : " + e.getMessage());                getDBTransaction().rollback();                return Boolean.TRUE;            }        }        return Boolean.FALSE;    }    public Long createSequenceCondicion() {        logger.warning("Inf, Inicia metodo createSequenceCondicion");        Long idCondicionFinanciera = null;        oracle.jbo.domain.Number newIdCondicionFinanciera = null;        SequenceImpl condicionesFinancierasSequense = null;        try {            condicionesFinancierasSequense = new SequenceImpl("CONDICIONES_FINANCIERAS_SEQ", getDBTransaction());            newIdCondicionFinanciera = condicionesFinancierasSequense.getSequenceNumber();            if (newIdCondicionFinanciera != null)                idCondicionFinanciera = newIdCondicionFinanciera.longValue();        } catch (Exception e) {            logger.warning("*** ERROR, AL CREAR LA SECUENCIA DE CONDICION " + e.getMessage() + " ->" + e);        }        logger.warning("Inf, Id de condicion financiera obtenido : " + idCondicionFinanciera);        logger.warning("Inf, Termina metodo createSequenceCondicion");        return idCondicionFinanciera;    }    public void asignarValorTransient(Row filaRecuperada) {        logger.warning("Inside asignarValorTransient.");        final Integer TIPO_TASA_VARIABLE = new Integer(3);        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución        Row filaRecuperadaCF = null;        FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;        /*            if(filaRecuperada == null)                filaRecuperada = getCurrentRow();            */        FenixAMImpl fenixAM = (FenixAMImpl) getRootApplicationModule();        if (filaRecuperada == null) {            filaRecuperada = fenixAM.getCFTempVO().getCurrentRow();        }        //Long idCondicionFinanciera = (Long) filaRecuperada.getAttribute("idCondicionFinanciera");        logger.warning("Row value - idCondicionFinanciera: " + idCondicionFinanciera);        CondicionesFinancierasVOImpl condicionesVO = fenixAM.getCondicionesFinancierasVO();        ViewCriteria criteria_condiciones =            condicionesVO.getViewCriteriaManager().getViewCriteria("IdCondicionFinancieraCriteria");        criteria_condiciones.ensureVariableManager().setVariableValue("pIdCondicionFinanciera", idCondicionFinanciera);        condicionesVO.applyViewCriteria(criteria_condiciones);        condicionesVO.executeQuery();                RowSetIterator rowsCondiciones = condicionesVO.createRowSetIterator(null);        rowsCondiciones.reset();        while (rowsCondiciones.hasNext()) {            filaRecuperadaCF = rowsCondiciones.next();        }                rowsCondiciones.closeRowSetIterator();        TInicio =            System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        logger.warning("Row value - CodigoTasaReferencia: " + filaRecuperada.getAttribute("CodigoTasaReferencia"));        logger.warning("Row value - CodigoTasaReferenciaSpread: " +                       filaRecuperada.getAttribute("CodigoTasaReferenciaSpread"));        String descripcionTasaReferencia = null;        String descripcionTasaReferenciaI = null;        String descripcionSpreadReferencia = null;        String descripcionMoneda = null;        BigDecimal valorTasaActual = null;        BigDecimal valorTasaActualI = null;        BigDecimal valorTasaSpreadActual = null;        if (fenixAM != null) {            gestorDesembolsosAMImpl = (FenixGestorDesembolsosAMImpl) fenixAM.getFenixGestorDesembolsosAM();            descripcionMoneda =                gestorDesembolsosAMImpl.getCrearActualizarContratoDesembolsoVO().obtenerDescripcionMoneda();            if (descripcionMoneda != null) {                //ExecuteQuery a TasaReferenciaVO                fenixAM.getTasaReferenciaVO().setvarCodigoMoneda(descripcionMoneda);                                if (filaRecuperada.getAttribute("CodigoTasaReferenciaI") != null) {                    descripcionTasaReferenciaI =                        fenixAM.getTasaReferenciaVO().obtenerDescripcionTasaReferencia((String) filaRecuperada.getAttribute("CodigoTasaReferenciaI"));                    filaRecuperada.setAttribute("DescripcionTasaI", descripcionTasaReferenciaI);                    logger.warning("DescripcionTasaI --> " + filaRecuperada.getAttribute("DescripcionTasaI"));                    try {                        Integer tipoTasaDesembolso = (Integer) filaRecuperadaCF.getAttribute("IdTcaTipoTasaDesembolso");                        /** FNXII-6851 - Se agrega el valor de la tasa actual y se asigna a la condicion financiera- **/                        if (tipoTasaDesembolso.compareTo(TIPO_TASA_VARIABLE) == 0) {                            logger.warning("tcaTipoTasa varible,  recuperando valor de vca tasas desembolso flexcube para nuevo valor tasa");                            valorTasaActualI =                                fenixAM.getTasaReferenciaVO().obtenerValorTasaActual();                            logger.warning("valorTasaActual --> " + valorTasaActualI);                            filaRecuperada.setAttribute("ValorTasaI", valorTasaActualI);                        }                    } catch (Exception e) {                        logger.warning("ha ocurrido una excepcion al recuperar el tipoTasa ->", e);                    }                }                                if (filaRecuperada.getAttribute("CodigoTasaReferencia") != null) {                    descripcionTasaReferencia =                        fenixAM.getTasaReferenciaVO().obtenerDescripcionTasaReferencia((String) filaRecuperada.getAttribute("CodigoTasaReferencia"));                    filaRecuperada.setAttribute("DescripcionTasa", descripcionTasaReferencia);                    logger.warning("DescripcionTasa2 --> " + filaRecuperada.getAttribute("DescripcionTasa"));                    try {                        Integer tipoTasaDesembolso = (Integer) filaRecuperadaCF.getAttribute("IdTcaTipoTasaDesembolso");                        /** FNXII-6851 - Se agrega el valor de la tasa actual y se asigna a la condicion financiera- **/                        if (tipoTasaDesembolso.compareTo(TIPO_TASA_VARIABLE) == 0) {                            logger.warning("tcaTipoTasa varible,  recuperando valor de vca tasas desembolso flexcube para nuevo valor tasa");                            valorTasaActual =                                fenixAM.getTasaReferenciaVO().obtenerValorTasaActual();                            logger.warning("valorTasaActual --> " + valorTasaActual);                            filaRecuperada.setAttribute("ValorTasa", valorTasaActual);                        }                    } catch (Exception e) {                        logger.warning("ha ocurrido una excepcion al recuperar el tipoTasa ->", e);                    }                }            }            if (filaRecuperada.getAttribute("CodigoTasaReferenciaSpread") != null) {                descripcionSpreadReferencia =                    //fenixGestorDesembolsosAMImpl.getSpreadReferenciaVO().obtenerDescripcionSpreadReferencia((String) filaRecuperada.getAttribute("CodigoTasaReferenciaSpread"));                    fenixAM.getSpreadReferenciaVO().obtenerDescripcionSpreadReferencia((String) filaRecuperada.getAttribute("CodigoTasaReferenciaSpread"));                valorTasaSpreadActual =                    //fenixGestorDesembolsosAMImpl.getSpreadReferenciaVO().obtenerValorTasaSpreadActual();                    fenixAM.getSpreadReferenciaVO().obtenerValorTasaSpreadActual();                //Se asigna valor recuperado a atributo                //filaRecuperada.setAttribute("DescripcionSpread", descripcionSpreadReferencia);                filaRecuperada.setAttribute("DescripcionSpread", descripcionSpreadReferencia);                /** FNXII-6851 - Se agrega el valor de la tasa spread actual y se asigna a la condicion financiera- **/                filaRecuperada.setAttribute("ValorTasaReferenciaSpread", valorTasaSpreadActual);                //Se actualiza campo Spread FNXII-6857                                //Solamente se modifica el SpreadTasa                if(filaRecuperada.getAttribute("tipoTasa") != null ? !filaRecuperada.getAttribute("tipoTasa").toString().equals("Fijo") : true)                {                    filaRecuperada.setAttribute("SpreadTasa", valorTasaSpreadActual);                   }            }            if (valorTasaActual == null)                valorTasaActual = (BigDecimal) filaRecuperada.getAttribute("ValorTasa");            calcularTotalTasaTotalSpread(filaRecuperada, valorTasaActual);        } else {            logger.warning("fenixGestorDesembolsosAMImpl es null.");        }        //fenixGestorDesembolsosAMImpl.getSpreadReferenciaVO().executeQuery();        fenixAM.getSpreadReferenciaVO().executeQuery();        logger.warning("descripcionTasaReferencia: " + descripcionTasaReferencia);        logger.warning("descripcionSpreadReferencia: " + descripcionSpreadReferencia);        TFin =            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia        logger.warning("Termina metodo asignarValorTransient con una duracion de: " + tiempo + " segundos");    }        public void calcularTotalTasaTotalSpread(Row filaRecuperada, BigDecimal valorActual){        logger.warning("Entra en calcularTotalTasaTotalSpread.");        BigDecimal spreadTasa = null;        BigDecimal valorTasaReferenciaSpread = null;        BigDecimal tasaTotal = null;                try{            valorTasaReferenciaSpread = (BigDecimal)filaRecuperada.getAttribute("ValorTasaReferenciaSpread");            spreadTasa = (BigDecimal)filaRecuperada.getAttribute("SpreadTasa");                        logger.warning("valorTasaReferenciaSpread : " + valorTasaReferenciaSpread);            logger.warning("valorActual : " + valorActual);            logger.warning("spreadTasa : " + spreadTasa);                        if (valorTasaReferenciaSpread != null) {                if ((valorActual != null) && (valorTasaReferenciaSpread != null)) {                    tasaTotal = calcularTasaTotal(valorActual, valorTasaReferenciaSpread);                    filaRecuperada.setAttribute("TasaTotal", tasaTotal);                }            } else {                if ((valorActual != null) && (spreadTasa != null)) {                    tasaTotal = calcularTasaTotal(valorActual, spreadTasa);                    filaRecuperada.setAttribute("TasaTotal", tasaTotal);                }            }        }catch(Exception e){            logger.warning("Error en calcularTotalTasaTotalSpread.", e);        }    }        private BigDecimal calcularTasaTotal(BigDecimal tasaReferencia, BigDecimal valorSpread) {        logger.warning("Inside calcularTasaTotal.");                logger.warning("tasaReferencia : " + tasaReferencia);        logger.warning("valorSpread : " + valorSpread);                BigDecimal tasaTotal = null;                try{                    tasaReferencia = (tasaReferencia == null)? BigDecimal.ZERO : tasaReferencia;            valorSpread = (tasaReferencia == null)? BigDecimal.ZERO : valorSpread;            tasaTotal = tasaReferencia.add(valorSpread);        }catch(Exception e){            logger.warning("Error en calcularTasaTotal.", e);        }        logger.warning("tasaTotal: " + tasaTotal);        return tasaTotal;    }        public String recuperarCodigoProducto() {        logger.warning("recuperar codigo externo producto");        String resultado = null;        Row row = getCurrentRow();        if (null != row) {            if (null != (String) row.getAttribute("IdProductoFlexcube")) {                logger.warning("Seobtuvo registro: " + (String) row.getAttribute("IdProductoFlexcube"));                resultado = (String) row.getAttribute("IdProductoFlexcube");            } else {                logger.warning("No se obtuvo codigo externo del producto");            }        }        return resultado;    }    public Integer obtenerIdTipoTasa() {        logger.warning("Inicia metodo obtenerIdTipoTasa");        double TInicio, TFin, tiempo; //Variables para determinar el tiempo de ejecución        TInicio =            System.currentTimeMillis(); //Tomamos la hora en que inicio el algoritmo y la almacenamos en la variable inicio        Integer idTipoTasa = null;        Row row = getCurrentRow();        if (null != row) {            try {                idTipoTasa = (Integer) row.getAttribute("IdTcaTipoTasaDesembolso");            } catch (Exception e) {                logger.warning("Error al obtener el idTipoTasa de CurrentRow.", e);            }        }        TFin =            System.currentTimeMillis(); //Tomamos la hora en que finalizó el algoritmo y la almacenamos en la variable T        tiempo = (TFin - TInicio) / 1000; //Calculamos los milisegundos de diferencia        logger.warning("IdTipoTasa recuperado de currentRow: " + idTipoTasa);        logger.warning("Termina metodo obtenerIdTipoTasa con una duracion de: " + tiempo + " segundos");        return idTipoTasa;    }    public Integer obtenerIdTipoCalendario() {        logger.warning("Inicia metodo obtenerIdTipoCalendario");        Integer idTipoCalendario = null;        Row row = getCurrentRow();        if (null != row) {            try {                idTipoCalendario = (Integer) row.getAttribute("IdTcaTipoCalendario");            } catch (Exception e) {                logger.warning("Error al obtener el IdTipoCalendario de CurrentRow.", e);            }        }        logger.warning("IdTipoCalendario recuperado de currentRow: " + idTipoCalendario);        logger.warning("Termina metodo obtenerIdTipoCalendario");        return idTipoCalendario;    }    public Integer obtenerTipoEspecificacionFechas() {        logger.warning("Inicia metodo obtenerTipoEspecificacionFechas");        Integer idTipoEspecificacionFecha = null;        Row row = getCurrentRow();        if (null != row) {            try {                idTipoEspecificacionFecha = (Integer) row.getAttribute("IdTcaEspecificacionFecha");            } catch (Exception e) {                logger.warning("Error al obtener el IdTcaEspecificacionFecha de CurrentRow.", e);            }        }        logger.warning("IdTipoEspecificacionFechas recuperado de currentRow: " + idTipoEspecificacionFecha);        logger.warning("Termina metodo obtenerTipoEspecificacionFechas");        return idTipoEspecificacionFecha;    }    public String propagarContratoDesembolso(Long idContratoDesembolso) {        logger.entering(this.getClass().getName(), "propagarContratoDesembolso");        PropagarContratoDesembolsoRequestType request = null;        PropagarContratoDesembolsoResponseType response = null;        FenixAMImpl fenixAM = null;        String resultado = null;        try {            Resultado result = null;            fenixAM = (FenixAMImpl) this.getRootApplicationModule();            //Service declaration            String wsdl = fenixAM.getWsdl(IWsdlLocation.DESEMBOLSO);            DesembolsoPTSOAP12BindingQSService service =                IWsdlLocation.Service.getInstance(DesembolsoPTSOAP12BindingQSService.class, wsdl);            DesembolsoPT port = service.getDesembolsoPTSOAP12BindingQSPort();            //Request declaration            request = new PropagarContratoDesembolsoRequestType();            request.setIdDesembolso(idContratoDesembolso);            //Service execution            java.util.Date horaInicioService =                ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_PROPAGAR_CONTRATO_DESEMBOLSO);            response = port.propagarContratoDesembolso(request);            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_PROPAGAR_CONTRATO_DESEMBOLSO,                                horaInicioService);            result = response.getResultado();            if (result.getResult() == null ||                (result.getResult() != null && result.getResult().value().equalsIgnoreCase("ERROR"))) {                logger.log(ADFLogger.WARNING, "Error propagarContratoDesembolso.");                String errorWS = "Error en el resultado de la propagación  de desembolso. Error Services. ";                if (result.getMessage() != null) {                    errorWS += "Message: " + result.getMessage() + ". ";                }                if (result.getError() != null && result.getError().getErrorCode() != null) {                    errorWS += "Code Error: " + result.getError().getErrorCode() + ". ";                }                if (result.getError() != null && result.getError().getErrorDescription() != null) {                    errorWS += "Message Error: " + result.getError().getErrorDescription();                }                JboException exception = new JboException(errorWS);                throw exception;            } else {                if (response.getContratoDesembolso().getIdFacturador() != null) {                    logger.warning("BHQ Contrato Desembolso: " + response.getContratoDesembolso().getIdFacturador());                    resultado = response.getContratoDesembolso().getIdFacturador();                } else {                    logger.warning("BHQ Contrado Desembolso No Obtenido.");                }            }        } catch (Exception e) {            logger.log(ADFLogger.WARNING, "Excepcion propagarContratoDesembolso." + e);            JboException exception = new JboException(e);            throw exception;        }        logger.warning("Termina propagarContratoDesembolso.");        return resultado;    }    public Boolean validarDatosRequeridos() {        logger.warning("Entra en validarDatosRequeridos.");        Boolean validaCampos = Boolean.TRUE;        Row row = null;        Integer idTcaTipoTasaDesembolso = null;        Integer idTcaEspecificacionFecha = null;        Integer idTcaTipoCalendario = null;        String descripcionProducto = null;        Integer idTcaBaseCalculo = null;        String tratamientoDiasFeriados = null;        try {            row = this.getCurrentRow();            if (null != row) {                if (null != row.getAttribute("IdTcaTipoTasaDesembolso")) {                    idTcaTipoTasaDesembolso = (Integer) row.getAttribute("IdTcaTipoTasaDesembolso");                } else {                    logger.warning("El campo IdTcaTipoTasaDesembolso es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("IdTcaEspecificacionFecha")) {                    idTcaEspecificacionFecha = (Integer) row.getAttribute("IdTcaEspecificacionFecha");                } else {                    logger.warning("El campo IdTcaEspecificacionFecha es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("IdTcaTipoCalendario")) {                    idTcaTipoCalendario = (Integer) row.getAttribute("IdTcaTipoCalendario");                } else {                    logger.warning("El campo IdTcaTipoCalendario es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("DescripcionProducto")) {                    descripcionProducto = (String) row.getAttribute("DescripcionProducto");                } else {                    logger.warning("El campo DescripcionProducto es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("IdTcaBaseCalculo")) {                    idTcaBaseCalculo = (Integer) row.getAttribute("IdTcaBaseCalculo");                } else {                    logger.warning("El campo IdTcaBaseCalculo es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("TratamientoDiasFeriados")) {                    tratamientoDiasFeriados = (String) row.getAttribute("TratamientoDiasFeriados");                } else {                    logger.warning("El campo TratamientoDiasFeriados es nulo.");                    validaCampos = Boolean.FALSE;                }            } else {                logger.warning("No se recupero el row.");            }            //Si todos los campos tienen valor se realiza commit            if (validaCampos) {                logger.warning("validacion de campos es correcto.");                try{                    logger.warning("Se realiza primer intento de Commit");                    this.getDBTransaction().commit();                }catch(Exception e){                    logger.warning("Primer intento de commit fallido", e);                    try{                        logger.warning("Se realiza segundo intento de Commit");                        getDBTransaction().commit();                    }catch(Exception ex){                        logger.severe("Segundo intento de commit con error", ex);                    }                }            } else {                logger.warning("Existen valores nulos.");            }        } catch (Exception e) {            logger.warning("Error al guardar lo campos.", e);            this.getDBTransaction().rollback();            validaCampos = Boolean.FALSE;        }        logger.warning("Valor de retorno :" + validaCampos);        return validaCampos;    }    public Long getpIdDesembolso() {        return (Long) ensureVariableManager().getVariableValue("pIdDesembolso");    }    public void setpIdDesembolso(Long value) {        ensureVariableManager().setVariableValue("pIdDesembolso", value);    }    public Boolean asignarFechasPagoRevicionYVencimiento(java.util.Date fechaPrimerPagoCapial,                                                       java.util.Date fechaProximoPagoInteres,                                                       java.util.Date fechaProximaRevisionTasa,                                                       java.util.Date fechaProximaRevisionSpread,                                                       java.util.Date fechaVencimiento) {        logger.warning("*Inf, Inicia metodo asignarFechasPrimerPagoYVencimiento.");        Boolean respuesta = Boolean.FALSE;        java.sql.Timestamp fechaPagoCapial = null;        java.sql.Timestamp fechaProxPagoInteres = null;        java.sql.Timestamp fechaProxRevTasa= null;        java.sql.Timestamp fechaProxRevSpread= null;        java.sql.Timestamp fechaVenc = null;        try {                 fechaPagoCapial = (null == fechaPrimerPagoCapial) ? null                                 : new java.sql.Timestamp(fechaPrimerPagoCapial.getTime());                        fechaProxPagoInteres = (null == fechaProximoPagoInteres) ? null                                  : new java.sql.Timestamp(fechaProximoPagoInteres.getTime());                            fechaProxRevTasa = (null == fechaProximaRevisionTasa) ? null                                 : new java.sql.Timestamp(fechaProximaRevisionTasa.getTime());                                      fechaProxRevSpread = (null == fechaProximaRevisionSpread) ? null                                 : new java.sql.Timestamp(fechaProximaRevisionSpread.getTime());                                   fechaVenc = (null == fechaVencimiento) ? null                                 : new java.sql.Timestamp(fechaVencimiento.getTime());                                            } catch (Exception e) {            logger.warning("*Error al parsear las fechas ->", e);        }        if (getCurrentRow() != null) {            getCurrentRow().setAttribute("FechaPrimerPagoCapital", fechaPagoCapial);            getCurrentRow().setAttribute("FechaProximoPagoInteres", fechaProxPagoInteres);            getCurrentRow().setAttribute("FechaProximaRevisionTasa", fechaProxRevTasa);            getCurrentRow().setAttribute("FechaProximaRevisionSpread", fechaProxRevSpread);            getCurrentRow().setAttribute("FechaVencimiento", fechaVenc);            try {                logger.warning("*Inf, insertando fechas a la condicion financiera " +                                                                       getCurrentRow().getAttribute("Id"));                logger.warning("*Inf, FechaPrimerPagoCapital: " + fechaPagoCapial);                logger.warning("*Inf, fechaProxPagoInteres: " + fechaProxPagoInteres);                logger.warning("*Inf, fechaProxRevTasa: " + fechaProxRevTasa);                logger.warning("*Inf, FechaProximaRevisionSpread: " + fechaProxRevSpread);                                logger.warning("*Inf, FechaVencimiento: " + fechaVenc);                                                logger.warning("Se realiza primer intento de Commit");                getDBTransaction().commit();                respuesta = Boolean.TRUE;                logger.warning("Se ejecuta commit correctamente");                            } catch (Exception e) {                logger.warning("Error al ejecutar primer commit", e);                try{                    logger.warning("Se realiza segundo intento de Commit");                    getDBTransaction().commit();                    respuesta = Boolean.TRUE;                    logger.warning("Se ejecuta segundo commit correctamente");                }catch(Exception ex){                    logger.warning("Error al ejecutar segundo commit :"+ex);                    JboException exception =                        new JboException("Error al realizar el commit CondicionesFinancierasVOImpl method - asignarFechasPrimerPagoYVencimiento ->" +                                     ex.getMessage().toString());                    exception.toString();                }            }        } else {            logger.warning("***Error, Importante! No se encontro un contrato current no se asignara fechas");        }        logger.warning("*Inf, termina metodo asignarFechasPrimerPagoYVencimiento.");        return respuesta;    }    public Row buscarCondicionFinancieraPorIdContrato(Long idContratoDesembolso) {        logger.warning("Entra en buscarCondicionFinancieraPorIdContrato.");        ViewCriteria criteria = null;        Row row = null;        try {            criteria = getViewCriteriaManager().getViewCriteria("IdContratoDesembolsoCriteria");            criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idContratoDesembolso);            applyViewCriteria(criteria);            executeQuery();            logger.warning("Numero de rows recuperado :" + this.getEstimatedRowCount());            if (getEstimatedRowCount() > 0) {                setCurrentRow(first());            }            RowSetIterator rowsCondicionFinanciera = this.createRowSetIterator(null);            rowsCondicionFinanciera.reset();            while (rowsCondicionFinanciera.hasNext()) {                CondicionesFinancierasVORowImpl rowCondicionFinanciera =                    (CondicionesFinancierasVORowImpl) rowsCondicionFinanciera.next();                row = rowCondicionFinanciera;            }            rowsCondicionFinanciera.closeRowSetIterator();        } catch (Exception e) {            logger.warning("Error al buscar la condicion financiera.");        }        if (row != null) {            String idCondicionFinan = null;            try {                idCondicionFinan = String.valueOf(row.getAttribute("Id"));            } catch (Exception e) {                logger.severe("Error al leer id de condiciones financieras", e);            }            logger.warning("Se encontro Registro de condicion financiera. Id: " + idCondicionFinan);        }        logger.warning("Termina busqueda de la condicion financiera");        return row;    }    public Boolean asignarPlazoPago(Integer frecuenciaPlazo, Integer idTcaFrecuenciaPlazo) {        logger.warning("*Inf, Inicia metodo asignarPlazoPago.");        Boolean respuesta = Boolean.FALSE;        if (getCurrentRow() != null) {            getCurrentRow().setAttribute("FrecuenciaPlazo", frecuenciaPlazo);            getCurrentRow().setAttribute("IdTcaFrecuenciaPlazo", idTcaFrecuenciaPlazo);            try {                logger.warning("*Inf, insertando plazoPago a la condicion financiera " +                               getCurrentRow().getAttribute("Id"));                logger.warning("*Inf, FrecuenciaPlazo: " + frecuenciaPlazo);                logger.warning("*Inf, IdTcaFrecuenciaPlazo: " + idTcaFrecuenciaPlazo);                getDBTransaction().commit();                respuesta = Boolean.TRUE;                logger.warning("Se ejecuta commit correctamente");                            } catch (Exception e) {                                try{                    logger.warning("Error al ejecutar primer commit :"+e.getMessage());                    logger.warning("Se realiza segundo intento de Commit");                    getDBTransaction().commit();                    respuesta = Boolean.TRUE;                    logger.warning("Se ejecuta segundo commit correctamente");                                                    }catch(Exception ea){                    logger.warning("***Error al realizar el segundo commit commit ->", ea);                    JboException exception =                        new JboException("Error al realizar el commit CondicionesFinancierasVOImpl method - asignarPlazoPago ->" +                                         ea.getMessage().toString());                    exception.toString();                }                            }        } else {            logger.warning("***Error, Importante! No se encontro un contrato current no se asignara Plazo");        }        logger.warning("*Inf, termina metodo asignarPlazoPago.");        return respuesta;    }    public Boolean asignarPlazoPeriodoGracia(Integer frecuenciaPlazo, Integer idTcaFrecuenciaPlazo) {        logger.warning("*Inf, Inicia metodo asignarPlazoPeriodoGracia.");        Boolean respuesta = Boolean.FALSE;        if (getCurrentRow() != null) {            getCurrentRow().setAttribute("FrecuenciaPeriodoGracia", frecuenciaPlazo);            getCurrentRow().setAttribute("IdTcaFrecuenciaPeriodoGra", idTcaFrecuenciaPlazo);            try {                logger.warning("*Inf, insertando plazo periodo gracia a la condicion financiera " +                               getCurrentRow().getAttribute("Id"));                logger.warning("*Inf, FrecuenciaPeriodoGracia: " + frecuenciaPlazo);                logger.warning("*Inf, IdTcaFrecuenciaPeriodoGra: " + idTcaFrecuenciaPlazo);                                logger.warning("Se realiza primer intento de Commit");                getDBTransaction().commit();                respuesta = Boolean.TRUE;                logger.warning("Se ejecuta commit correctamente");            } catch (Exception e) {                logger.warning("Primer intento de commit fallido", e);                try{                    logger.warning("Se realiza segundo intento de Commit");                    getDBTransaction().commit();                    respuesta = Boolean.TRUE;                    logger.warning("Se ejecuta segundo commit correctamente");                }catch(Exception ex){                    JboException exception =                        new JboException("Error al realizar el commit CondicionesFinancierasVOImpl method - asignarPlazoPeriodoGracia ->" +                                     ex.getMessage().toString());                    exception.toString();                }            }        } else {            logger.warning("***Error, Importante! No se encontro un contrato current no se asignara Plazo");        }        logger.warning("*Inf, termina metodo asignarPlazoPeriodoGracia.");        return respuesta;    }    public Boolean asignarFechasPrimerPagoYVencimientoTimeStamp(java.sql.Timestamp fechaPrimerPagoCapial,                                                                java.sql.Timestamp fechaVencimiento) {        logger.warning("*Inf, Inicia metodo asignarFechasPrimerPagoYVencimientoTimeStamp.");        Boolean respuesta = Boolean.FALSE;        String msgError = "";        if (fechaPrimerPagoCapial == null || fechaVencimiento == null) {            msgError = "Error, parametros requeridos fechaPrimerPagoCapial y fechaVencimiento son resueltas null";            logger.warning(msgError);            logger.warning("*Inf, fechaPrimerPagoCapial: " + fechaPrimerPagoCapial);            logger.warning("*Inf, fechaVencimiento: " + fechaVencimiento);            return respuesta;        }        if (getCurrentRow() != null) {            getCurrentRow().setAttribute("FechaPrimerPagoCapital", fechaPrimerPagoCapial);            getCurrentRow().setAttribute("FechaVencimiento", fechaVencimiento);            try {                logger.warning("*Inf, insertando fechas a la condicion financiera " +                               getCurrentRow().getAttribute("Id"));                logger.warning("*Inf, FechaPrimerPagoCapital: " + fechaPrimerPagoCapial);                logger.warning("*Inf, FechaVencimiento: " + fechaVencimiento);                logger.warning("Se realiza primer intento de Commit");                getDBTransaction().commit();                respuesta = Boolean.TRUE;                logger.warning("Se ejecuta correctamente commit");            } catch (Exception e) {                logger.warning("Error al ejecutar primer commit :", e);                try{                    logger.warning("Se realiza segundo intento de Commit");                    getDBTransaction().commit();                }catch(Exception ex){                    logger.severe("Segundo intento de commit con error", ex);                    msgError = "Ha cocurrido un error al intentar guardar la informacion ->" + ex.getMessage();                }            }        } else {            msgError = "Error no se a podido recuperar el contrato actual";            logger.warning("***Error, Importante! No se encontro un contrato current no se asignara fechas");        }        if (!msgError.isEmpty()) {            JboException exception = new JboException(msgError);            exception.toString();        }        logger.warning("*Inf, termina metodo asignarFechasPrimerPagoYVencimientoTimeStamp.");        return respuesta;    }    public Row getCondicionFinancieraCurrent() {        logger.warning("*Inf, Inicia metodo getCondicionFinancieraCurrent");        Row fila = null;        if (getCurrentRow() != null) {            logger.warning("*Inf, recuperando datos de la condicion financiera id: " +                           getCurrentRow().getAttribute("Id"));            fila = getCurrentRow();        } else {            logger.warning("*Inf, Important! no se ha encontrado una condicion financiara current");        }        logger.warning("*Inf, Termina metodo getCondicionFinancieraCurrent");        return fila;    }    /** se calculan plazos y fechas para un tipo de calendario complejo **/    public void setDescripcionMoneda(String descripcionMoneda) {        logger.warning("*Inf, Inicia metodo setDescripcionMoneda value: " + descripcionMoneda);        if (getCurrentRow() != null) {            getCurrentRow().setAttribute("DescripcionMoneda", descripcionMoneda);        } else {            logger.warning("***Error, no se encontro un registro current en condicionesFinancierasVO");        }        logger.warning("*Inf, termina metodo setDescripcionMoneda");    }    public void setOperacionTasaTransient(Long codigoOperacion, String codigoTasa) {        logger.warning("*Inf, Inicia metodo setOperacionTasaTransient ");        logger.warning("*Inf, operacion: " + codigoOperacion);        logger.warning("*Inf, codigoTasa: " + codigoTasa);        Long idDesembolso = null;        String programa = null;        FenixAMImpl fenixAMImpl = null;        fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =            (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();        if (getCurrentRow() != null) {            getCurrentRow().setAttribute("CodigoOperacion", codigoOperacion);            getCurrentRow().setAttribute("CodigoTasa", codigoTasa);            if (null != getCurrentRow().getAttribute("IdContratoDesembolso")) {                idDesembolso = (Long) getCurrentRow().getAttribute("IdContratoDesembolso");                programa = fenixGestorDesembolsosAMImpl.getContratoDesembolsoQueryVO().obtencionPrograma(idDesembolso);            }            if (null != programa) {                getCurrentRow().setAttribute("ProgramaContrato", programa);            }        } else {            logger.warning("***Error, no se encontro un registro current en condicionesFinancierasVO");        }        logger.warning("*Inf, termina metodo setOperacionTasaTransient");    }    @SuppressWarnings("unchecked")    public List validarCamposCondiciones(Long idOperacion, Long idDesembolso) {        logger.warning("Inicia metodo validarCamposCondiciones");        List listaMensajesError = new ArrayList();        String mensajeError = null;        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =            (FenixGestorDesembolsosAMImpl) fenixAmImpl.getFenixGestorDesembolsosAM();        Boolean validaCampos = Boolean.TRUE;        Row row = null;        Integer idTcaTipoTasaDesembolso = null;        Integer idTcaEspecificacionFecha = null;        Integer idTcaTipoCalendario = null;        String descripcionProducto = null;        Integer idTcaBaseCalculo = null;        Integer idFrecuenciaCapital = null;        Integer frecuenciaCapital = null;        Integer idFrecuenciaPlazo = null;        Integer frecuenciaPlazo = null;        Integer idFrecuenciaInteres = null;        Integer periodoGracia = null;        Integer frecuenciaInteres = null;        java.sql.Timestamp fechaPrimerPagoCapital = null;        java.sql.Timestamp fechaInteres = null;        java.sql.Timestamp fechaVencimiento = null;        String tratamientoDiasFeriados = null;        String codigoTasaReferencia = null;        java.sql.Timestamp fechaProximaTasa = null;        Integer frecuenciaRevisionTasa = null;        java.sql.Timestamp fechaProximaSpread = null;        Integer frecuenciaRevisionSpread = null;        Integer idFrecuenciaRevisionSpread = null;        BigDecimal spreadMoraValor = BigDecimal.ZERO;        BigDecimal tasaValor = BigDecimal.ZERO;        BigDecimal spreadValorTasa = BigDecimal.ZERO;        String descripcionSpread = null;        try {            row = this.getCurrentRow();            if (null != row) {                if (null != row.getAttribute("IdTcaTipoTasaDesembolso")) {                    idTcaTipoTasaDesembolso = (Integer) row.getAttribute("IdTcaTipoTasaDesembolso");                } else {                    logger.warning("El campo IdTcaTipoTasaDesembolso es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("IdTcaEspecificacionFecha")) {                    idTcaEspecificacionFecha = (Integer) row.getAttribute("IdTcaEspecificacionFecha");                } else {                    logger.warning("El campo IdTcaEspecificacionFecha es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("IdTcaTipoCalendario")) {                    idTcaTipoCalendario = (Integer) row.getAttribute("IdTcaTipoCalendario");                } else {                    logger.warning("El campo IdTcaTipoCalendario es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("DescripcionProducto")) {                    descripcionProducto = (String) row.getAttribute("DescripcionProducto");                } else {                    logger.warning("El campo DescripcionProducto es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("IdTcaBaseCalculo")) {                    idTcaBaseCalculo = (Integer) row.getAttribute("IdTcaBaseCalculo");                } else {                    logger.warning("El campo IdTcaBaseCalculo es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != row.getAttribute("TratamientoDiasFeriados")) {                    tratamientoDiasFeriados = (String) row.getAttribute("TratamientoDiasFeriados");                } else {                    logger.warning("El campo TratamientoDiasFeriados es nulo.");                    validaCampos = Boolean.FALSE;                }                if (null != idTcaTipoCalendario && null != idTcaEspecificacionFecha) {                    if (idTcaTipoCalendario.compareTo(FenixModelConstants.CALENDARIO_SENCILLO) == 0 &&                        (idTcaEspecificacionFecha.compareTo(FenixModelConstants.ESPECIFICACION_FECHAS) == 0 ||                         idTcaEspecificacionFecha.compareTo(FenixModelConstants.ESPECIFICACION_PLAZOS) == 0)) {                        //Frecuencia Interes                        if (null != row.getAttribute("FrecuenciaPagoInteres")) {                            frecuenciaInteres = (Integer) row.getAttribute("FrecuenciaPagoInteres");                        } else {                            logger.warning("El campo FrecuenciaPagoInteres es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("IdTcaFrecuenciaPagoInteres")) {                            idFrecuenciaInteres = (Integer) row.getAttribute("IdTcaFrecuenciaPagoInteres");                        } else {                            logger.warning("El campo IdTcaFrecuenciaPagoInteres es nulo.");                            validaCampos = Boolean.FALSE;                        }                        //Validar Frecuencia capital                        if (null != row.getAttribute("FrecuenciaPagoCapital")) {                            frecuenciaCapital = (Integer) row.getAttribute("FrecuenciaPagoCapital");                        } else {                            logger.warning("El campo FrecuenciaPagoCapital es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("IdTcaFrecuenciaPagoCapital")) {                            idFrecuenciaCapital = (Integer) row.getAttribute("IdTcaFrecuenciaPagoCapital");                        } else {                            logger.warning("El campo IdTcaFrecuenciaPagoCapital es nulo.");                            validaCampos = Boolean.FALSE;                        }                    } else {                        logger.warning("Se omite esta seccion de validación, interes,  capital");                    }                    if (idTcaEspecificacionFecha.compareTo(FenixModelConstants.ESPECIFICACION_FECHAS) == 0 &&                        idTcaTipoCalendario.compareTo(FenixModelConstants.CALENDARIO_SENCILLO) == 0) {                        // Fechas                        if (null != row.getAttribute("FechaVencimiento")) {                            fechaVencimiento = (java.sql.Timestamp) row.getAttribute("FechaVencimiento");                        } else {                            logger.warning("El campo FechaVencimiento es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("FechaProximoPagoInteres")) {                            fechaInteres = (java.sql.Timestamp) row.getAttribute("FechaProximoPagoInteres");                        } else {                            logger.warning("El campo FechaProximoPagoInteres es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("FechaPrimerPagoCapital")) {                            fechaPrimerPagoCapital = (java.sql.Timestamp) row.getAttribute("FechaPrimerPagoCapital");                        } else {                            logger.warning("El campo FechaPrimerPagoCapital es nulo.");                            validaCampos = Boolean.FALSE;                        }                    } else {                        logger.warning("Se omite esta seccion de fechas");                    }                    if (idTcaEspecificacionFecha.compareTo(FenixModelConstants.ESPECIFICACION_PLAZOS) == 0 &&                        idTcaTipoCalendario.compareTo(FenixModelConstants.CALENDARIO_SENCILLO) == 0) {                        //Frecuencia Plazo                        if (null != row.getAttribute("IdTcaFrecuenciaPeriodoGra")) {                            periodoGracia = (Integer) row.getAttribute("IdTcaFrecuenciaPeriodoGra");                        } else {                            logger.warning("El campo IdTcaFrecuenciaPeriodoGra es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("FrecuenciaPlazo")) {                            frecuenciaPlazo = (Integer) row.getAttribute("FrecuenciaPlazo");                        } else {                            logger.warning("El campo FrecuenciaPlazo es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("IdTcaFrecuenciaPlazo")) {                            idFrecuenciaPlazo = (Integer) row.getAttribute("IdTcaFrecuenciaPlazo");                        } else {                            logger.warning("El campo IdTcaFrecuenciaPlazo es nulo.");                            validaCampos = Boolean.FALSE;                        }                    } else {                        logger.warning("Se omite esta seccion de plazos");                    }                } else {                    logger.warning("No hay datos que validar en calendario y especificacion");                }                if (null != idTcaTipoTasaDesembolso) {                    //SPREAD SpreadTasa                    if (idTcaTipoTasaDesembolso.compareTo(FenixModelConstants.TASA_VARIABLE) == 0) {                        Boolean validarSpreadVariable = Boolean.FALSE;                        String idProductoFlex = null;                        String tasaVariable = FenixModelConstants.GD_TIPO_TAZA_VARIABLE;                        try {                            if (null != descripcionProducto && null != idOperacion && null != idDesembolso) {                                idProductoFlex =                                    fenixGestorDesembolsosAMImpl.getVtaProductoDesemFlexcubeVO().recuperarIdByDescripcion(descripcionProducto,                                                                                                                          idOperacion,                                                                                                                          tasaVariable,                                                                                                                          idDesembolso);                            } else {                                logger.warning("Error al obtener el idOperacion, o el id de desembolso");                            }                            if (null != idProductoFlex) {                                validarSpreadVariable =                                    fenixGestorDesembolsosAMImpl.getVtaProdFlexComponenteDesemVO().consultarSpreadVariableById(idProductoFlex);                            } else {                                logger.warning("Error al obtener el idProductoFlexcube");                            }                        } catch (Exception ex) {                            logger.warning("Error al obtener el producto flex, ", ex.getMessage());                        }                        if (validarSpreadVariable) {                            //descripcionSpread                            if (null != row.getAttribute("FrecuenciaRevisionSpread")) {                                frecuenciaRevisionSpread = (Integer) row.getAttribute("FrecuenciaRevisionSpread");                            } else {                                logger.warning("El campo FrecuenciaRevisionSpread es nulo.");                                validaCampos = Boolean.FALSE;                            }                            if (null != row.getAttribute("FechaProximaRevisionSpread")) {                                fechaProximaSpread =                                    (java.sql.Timestamp) row.getAttribute("FechaProximaRevisionSpread");                            } else {                                logger.warning("El campo FechaProximaRevisionSpread es nulo.");                                validaCampos = Boolean.FALSE;                            }                            if (null != row.getAttribute("DescripcionSpread")) {                                descripcionSpread = (String) row.getAttribute("DescripcionSpread");                            } else {                                logger.warning("El campo DescripcionSpread es nulo.");                                validaCampos = Boolean.FALSE;                            }                            if (null != row.getAttribute("IdTcaFrecuenciaRevSpread")) {                                idFrecuenciaRevisionSpread = (Integer) row.getAttribute("IdTcaFrecuenciaRevSpread");                            } else {                                logger.warning("El campo IdTcaFrecuenciaRevSpread es nulo.");                                validaCampos = Boolean.FALSE;                            }                        }                        if (null != row.getAttribute("SpreadMora")) {                            spreadMoraValor = (BigDecimal) row.getAttribute("SpreadMora");                        } else {                            logger.warning("El campo SpreadMora es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("FrecuenciaRevisionTasa")) {                            frecuenciaRevisionTasa = (Integer) row.getAttribute("FrecuenciaRevisionTasa");                        } else {                            logger.warning("El campo FrecuenciaRevisionTasa es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("FechaProximaRevisionTasa")) {                            fechaProximaTasa = (java.sql.Timestamp) row.getAttribute("FechaProximaRevisionTasa");                        } else {                            logger.warning("El campo FechaProximaRevisionTasa es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("SpreadTasa")) {                            spreadValorTasa = (BigDecimal) row.getAttribute("SpreadTasa");                        } else {                            logger.warning("El campo SpreadTasa es nulo.");                            validaCampos = Boolean.FALSE;                        }                        if (null != row.getAttribute("CodigoTasaReferencia")) {                            codigoTasaReferencia = (String) row.getAttribute("CodigoTasaReferencia");                        } else {                            logger.warning("El campo CodigoTasaReferencia es nulo.");                            validaCampos = Boolean.FALSE;                        }                    } else {                        if (idTcaTipoTasaDesembolso.compareTo(FenixModelConstants.TASA_FIJA) == 0) {                            if (null != row.getAttribute("ValorTasa")) {                                tasaValor = (BigDecimal) row.getAttribute("ValorTasa");                            } else {                                logger.warning("El campo ValorTasa es nulo.");                                validaCampos = Boolean.FALSE;                            }                            if (null != row.getAttribute("SpreadMora")) {                                spreadMoraValor = (BigDecimal) row.getAttribute("SpreadMora");                            } else {                                logger.warning("El campo SpreadMora es nulo.");                                validaCampos = Boolean.FALSE;                            }                        }                    }                    //public static final Integer ESPECIFICACION_PLAZOS= 2;                }            } else {                logger.warning("No se recupero el row.");                validaCampos = Boolean.FALSE;            }        } catch (Exception ex) {            logger.warning("Excepcion al validar: " + ex.getMessage());            validaCampos = Boolean.FALSE;        }        if (!validaCampos) {            mensajeError =                "Es necesario capturar la totalidad de datos obligatorios de la sección Condiciones financieras.";            listaMensajesError.add(mensajeError);        }        logger.warning("Termina metodo validarCamposCondiciones");        return listaMensajesError;    }    public Boolean recargaVistaProducto(Long idOperacion, Long idContratoDesembolso) {        logger.warning("Inicia metodo recargaVistaProducto.");        FenixAMImpl fenixAmImpl = (FenixAMImpl) getRootApplicationModule();        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =            (FenixGestorDesembolsosAMImpl) fenixAmImpl.getFenixGestorDesembolsosAM();        Row row = getCurrentRow();        Integer idTipoTasa = null;        String codigoExterno = null;        Boolean resultado = Boolean.FALSE;        if (null == idOperacion && null == idContratoDesembolso) {            logger.warning("Parametros requeridos para hacer recarga de VtaProductoDesemFlexcubeVO son NULL." +                           " IdOperacion: " + idOperacion + ", IdContratoDesembolso: " + idContratoDesembolso);            return resultado;        }        //Recuperar IdTcaTipoTasaDesembolso del currentRow.        if (null != row) {            try {                idTipoTasa = (Integer) row.getAttribute("IdTcaTipoTasaDesembolso");            } catch (Exception e) {                logger.warning("ERROR al recuperar IdTcaTipoTasaDesembolso de CondicionesFinancierasVO currentRow.");            }        } else {            logger.warning("ERROR: El currentRow de CondicionesFinancierasVO es NULL. No se pudo recargar la vista del Producto.");        }        //        if (null != idTipoTasa) {            logger.warning("Recuperando COD_EXTERNO de TcaTipoTasaDesembolsoVO para IdTipoTasa.");            codigoExterno =                fenixGestorDesembolsosAMImpl.getTcaTipoTasaDesembolso().obtenerCodigoexternoPorId(idTipoTasa);        } else {            logger.warning("El idTipoTasa es NULL. No se puede recuperar COD_EXTERNO del catalogo.");        }        if (null != codigoExterno) {            logger.warning("Invocando metodo de precarga de Vista del producto.");            resultado =                fenixGestorDesembolsosAMImpl.getVtaProductoDesemFlexcubeVO().cargarDastosVCAProducto(idOperacion,                                                                                                     codigoExterno,                                                                                                     idContratoDesembolso);        } else {            logger.warning("El codigoExterno es NULL.");        }        logger.warning("Termina metodo recargaVistaProducto.");        return resultado;    }    public void guardarCondicionesFinancieras() {        logger.warning("Inicia metodo guardarCondicionesFinancieras.");        //imprimirAtributos();        Row row = getCurrentRow();        if (null != row) {            logger.warning("Realizando COMMIT en CondicionesFinancierasVO.");                        try {                logger.warning("Se realiza primer intento de Commit");                getDBTransaction().commit();                logger.warning("El commit se realizo con exito");            } catch (Exception e) {                logger.warning("Primer intento de commit fallido", e);                /*                try{                    logger.warning("Se realiza segundo intento de Commit");                    getDBTransaction().commit();                    logger.warning("El segundo commit se realizo con exito");                }catch(Exception ex){                    logger.severe("Segundo intento de commit con error", ex);                }                */                e.printStackTrace();            }            FenixAMImpl fenixAM = (FenixAMImpl) getRootApplicationModule();            Row row2 = fenixAM.getCFTempVO().getCurrentRow();            if(row2!=null){                if(idCondicionFinanciera!=null){                    Map map= new HashMap();                    map.put("idCondicionFinanciera",idCondicionFinanciera);                    fenixAM.guardarCalendarioComponente(map);                }else{                    logger.warning("No se encontro idCondicionFinanciera.");                }                }        } else {            logger.warning("No hay registro que guardar de CondicionesFinancierasVO.");        }        logger.warning("Termina metodo guardarCondicionesFinancieras.");    }    private void imprimirAtributos() {        logger.warning("Entrando en imprimirAtributos.");        RowSetIterator rowSetIterator = createRowSetIterator(null);        rowSetIterator.reset();        while (rowSetIterator.hasNext()) {            Row row = rowSetIterator.next();            if (null != row) {                // Se imprimen atributos con restricciones en BD                logger.warning("Id: " + row.getAttribute("Id"));                logger.warning("IdContratoDesembolso: " + row.getAttribute("IdContratoDesembolso"));                logger.warning("IdProductoFlexcube: " + row.getAttribute("IdProductoFlexcube"));                logger.warning("IdTcaBaseCalculo: " + row.getAttribute("IdTcaBaseCalculo"));                logger.warning("IdTcaEspecificacionFecha: " + row.getAttribute("IdTcaEspecificacionFecha"));                logger.warning("IdTcaFrecuenciaPagoCapital: " + row.getAttribute("IdTcaFrecuenciaPagoCapital"));                logger.warning("IdTcaFrecuenciaPagoInteres: " + row.getAttribute("IdTcaFrecuenciaPagoInteres"));                logger.warning("IdTcaFrecuenciaPeriodoGra: " + row.getAttribute("IdTcaFrecuenciaPeriodoGra"));                logger.warning("IdTcaFrecuenciaPlazo: " + row.getAttribute("IdTcaFrecuenciaPlazo"));                logger.warning("IdTcaFrecuenciaRevSpread: " + row.getAttribute("IdTcaFrecuenciaRevSpread"));                logger.warning("IdTcaFrecuenciaRevTasa: " + row.getAttribute("IdTcaFrecuenciaRevTasa"));                logger.warning("IdTcaTipoCalendario: " + row.getAttribute("IdTcaTipoCalendario"));                logger.warning("IdTcaTipoTasaDesembolso: " + row.getAttribute("IdTcaTipoTasaDesembolso"));                logger.warning("TratamientoDiasFeriados: " + row.getAttribute("TratamientoDiasFeriados"));                logger.warning("LimiteTasaMaxima: " + row.getAttribute("LimiteTasaMaxima"));                logger.warning("LimiteTasaMinima: " + row.getAttribute("LimiteTasaMinima"));                logger.warning("MontoDescuento: " + row.getAttribute("MontoDescuento"));                logger.warning("NumeroCuotasPagoCapital: " + row.getAttribute("NumeroCuotasPagoCapital"));                logger.warning("NumeroCuotasPagoInteres: " + row.getAttribute("NumeroCuotasPagoInteres"));                logger.warning("NumeroRevisionesSpread: " + row.getAttribute("NumeroRevisionesSpread"));                logger.warning("NumeroRevisionesTasa: " + row.getAttribute("NumeroRevisionesTasa"));                logger.warning("SePuedeAlinearDiaPago: " + row.getAttribute("SePuedeAlinearDiaPago"));                logger.warning("SePuedeMoverEntreMeses: " + row.getAttribute("SePuedeMoverEntreMeses"));            } else {                logger.warning("row nulo.");            }        }        rowSetIterator.closeRowSetIterator();    }    public void setDescripcionProducto() {        logger.warning("*Inf, Inicia metodo setDescripcionProducto.");        String descripcionProducto = null;        String IdProductoFlexcube = null;        Row filaRecuperada = null;        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAMImpl =            (FenixGestorDesembolsosAMImpl) this.getApplicationModule();        if (getCurrentRow() != null) {            filaRecuperada = getCurrentRow();            if (filaRecuperada.getAttribute("DescripcionProducto") == null) {                IdProductoFlexcube = (String) filaRecuperada.getAttribute("IdProductoFlexcube");                descripcionProducto =                    fenixGestorDesembolsosAMImpl.getConsultarVtaProductoDesembolsoFlexcubeVO().recuperarDescripcionById(IdProductoFlexcube);                if (descripcionProducto != null && !"".equals(descripcionProducto)) {                    logger.warning("*Inf, ok setando valor de descripcion de producto: " + descripcionProducto);                    getCurrentRow().setAttribute("DescripcionProducto", descripcionProducto);                } else {                    logger.warning("*Inf, Important! no se encontro la Descripcion! para el IdProductoFlexcube : " +                                   IdProductoFlexcube);                }            } else {                logger.warning("*Inf, el CurrentRow de condicion financiera ya tiene una descipcion del producto");            }        } else {            logger.warning("*Inf, Important! no se recuperara la descipcion del producto CurrentRow resuelto a null");        }        logger.warning("*Inf, Termina metodo setDescripcionProducto.");    }    @Deprecated    public boolean generarFechasVencimientoPCT() {        logger.warning("Entrando en generarFechaVencimientoPCT.");        boolean falloGenerarVencimientos = Boolean.FALSE;        RowSetIterator condicionesRowSetIterator = createRowSetIterator(null);        condicionesRowSetIterator.reset();        while (condicionesRowSetIterator.hasNext()) {            Row rowCondiciones = condicionesRowSetIterator.next();            if (null != rowCondiciones && null != rowCondiciones.getAttribute("IdContratoDesembolso")) {                Long idContratoDesembolso = (Long) rowCondiciones.getAttribute("IdContratoDesembolso");                // Recuperamos su contrato de desembolso con estado creado por implementacion                Row rowContrato = obtenerContrantoCreadoPorPCT(idContratoDesembolso);                if (null != rowContrato) {                    // Se validan los campos necesarios para calcular las fechas                    if (validarFechasPrimerPagoCapialVencimientoPCT(rowContrato, rowCondiciones)) {                        // Se calculan las fechas                        Date fechaPrimerPagoCapial = calcularFechaPrimerPagoCapialPCT(rowContrato, rowCondiciones);                        Date fechaVencimiento = calcularFechaVencimientoPCT(rowContrato, rowCondiciones);                        // Se establece la fecha de vencimiento calculada                        if (null != fechaVencimiento && null != fechaPrimerPagoCapial) {                            if (fechaPrimerPagoCapial.compareTo(fechaVencimiento) != 1) {                                rowCondiciones.setAttribute("FechaVencimiento",                                                            new Timestamp(fechaVencimiento.getTime()));                                rowCondiciones.setAttribute("FechaPrimerPagoCapital", fechaPrimerPagoCapial);                                logger.warning("Se establece la FechaVencimiento: " +                                               rowCondiciones.getAttribute("FechaVencimiento"));                                logger.warning("Se establece la FechaPrimerPagoCapital: " +                                               rowCondiciones.getAttribute("FechaPrimerPagoCapital"));                            } else {                                String mensaje =                                    PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.primerPagoMayorFechaVencimiento");                                throw new JboException(mensaje);                            }                        } else {                            falloGenerarVencimientos = Boolean.TRUE;                            logger.warning("No se puede establecer la fecha vencimiento o la fecha de primer pago a capital nula.");                        }                    } else {                        throw new JboException(PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.primerFechaVencimientoPrimerPago"));                    }                } else {                    String mensaje =                        PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.contratoCreadoPorImplementacionNoEncontrado");                    throw new JboException(mensaje);                }            } else {                falloGenerarVencimientos = Boolean.TRUE;                logger.warning("La condicion financiera no tiene un id de contrato de desembolso.");            }        }        condicionesRowSetIterator.closeRowSetIterator();        return !falloGenerarVencimientos;    }        public boolean generarFechasVencimientoPorContratoPCT(Row rowContrato) {        logger.warning("Entrando en generarFechasVencimientoPorContratoPCT.");        logger.warning("rowContrato: " + rowContrato);        boolean falloGenerarVencimientos = Boolean.FALSE;        Row rowCondiciones = null;        Long idContratoDesembolso = null;        Integer idTcaEspecificacionFecha = null;                if (null != rowContrato && null != rowContrato.getAttribute("Id")) {            logger.warning("Buscando rowCondiciones");            removeApplyViewCriteriaName("IdContratoDesembolsoCriteria");            idContratoDesembolso = (Long) rowContrato.getAttribute("Id");            obtenerCondicionFinancieraPCT(idContratoDesembolso);                        rowCondiciones = first();        } else {            logger.warning("No se tiene el idContratoDesembolso para filtrar condiciones.");        }                logger.warning("rowCondiciones: " + rowCondiciones);                if (null != rowCondiciones && null != rowCondiciones.getAttribute("IdContratoDesembolso")) {            logger.warning("rowCondiciones: " + rowCondiciones.getAttribute("IdContratoDesembolso"));                        if (null != rowContrato && null != rowContrato.getAttribute("Id")) {                if(null != rowCondiciones.getAttribute("IdTcaEspecificacionFecha")){                    idTcaEspecificacionFecha = (Integer)rowCondiciones.getAttribute("IdTcaEspecificacionFecha");                    if(idTcaEspecificacionFecha.compareTo(FenixModelConstants.ESPECIFICACION_PLAZOS) == 0){                        if(validacionPorPlazos(rowContrato,  rowCondiciones)){                            logger.warning("Se realizo la generacion de fechas correctamente ");                        }else{                            falloGenerarVencimientos = Boolean.TRUE;                        }                    }else{                        if(validacionPorFechas(rowContrato,  rowCondiciones)){                            logger.warning("Se realiza validacion por fechas correctamente.");                        }else{                            falloGenerarVencimientos = Boolean.TRUE;                          }                    }                }else{                    logger.warning("La especificacion por fechas es nula.");                    falloGenerarVencimientos = Boolean.TRUE;                }            } else {                String mensaje =                    PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.contratoCreadoPorImplementacionNoEncontrado");                throw new JboException(mensaje);            }        } else {            falloGenerarVencimientos = Boolean.TRUE;            logger.warning("La condicion financiera no tiene un id de contrato de desembolso.");        }        return !falloGenerarVencimientos;    }        private boolean validacionPorPlazos(Row rowContrato,  Row rowCondiciones){        boolean GeneraVencimientos = Boolean.FALSE;        if (validarFechasPrimerPagoCapialVencimientoPCT(rowContrato, rowCondiciones)) {            // Se calculan las fechas            Date fechaPrimerPagoCapial = calcularFechaPrimerPagoCapialPCT(rowContrato, rowCondiciones);            Date fechaVencimiento = calcularFechaVencimientoPCT(rowContrato, rowCondiciones);                        logger.warning("fechaPrimerPagoCapial: " + fechaPrimerPagoCapial);            logger.warning("fechaVencimiento: " + fechaVencimiento);                        // Se establece la fecha de vencimiento calculada            if (null != fechaVencimiento && null != fechaPrimerPagoCapial) {                if (fechaPrimerPagoCapial.compareTo(fechaVencimiento) != 1) {                    rowCondiciones.setAttribute("FechaVencimiento",                                                new Timestamp(fechaVencimiento.getTime()));                    rowCondiciones.setAttribute("FechaPrimerPagoCapital", fechaPrimerPagoCapial);                    logger.warning("Se establece la FechaVencimiento: " +                                   rowCondiciones.getAttribute("FechaVencimiento"));                    logger.warning("Se establece la FechaPrimerPagoCapital: " +                                   rowCondiciones.getAttribute("FechaPrimerPagoCapital"));                    GeneraVencimientos = Boolean.TRUE;                } else {                    String mensaje =                        PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.primerPagoMayorFechaVencimiento");                    throw new JboException(mensaje);                }            } else {                logger.warning("No se puede establecer la fecha vencimiento o la fecha de primer pago a capital nula.");            }        } else {            throw new JboException(PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.primerFechaVencimientoPrimerPago"));        }        return GeneraVencimientos;    }        private Boolean validacionPorFechas(Row rowContrato,  Row rowCondiciones){        logger.warning("Entra en validacionPorFechas.");        Integer idTcaFrecuenciaPagoCapital = null;        Timestamp fechaVencimiento= null;        Timestamp fechaPrimerPagoCapital= null;        Boolean generaPlazo = Boolean.FALSE;        Integer contador = 0;        if(validarFrecuenciaPagoCapialVencimientoPCTFechaEstimadaDesembolsar(rowContrato, rowCondiciones)){            if(null != rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital")){                idTcaFrecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital");                if(idTcaFrecuenciaPagoCapital.compareTo(FenixModelConstants.FRECUENCIA_AL_VENCIMIENTO) == 0){                    logger.warning("cuando se tiene una frecuencia al vencimiento el periodo de gracia debe ser igual a 0 días");                    rowCondiciones.setAttribute("FrecuenciaPeriodoGracia", FenixModelConstants.FRECUENCIA_PERIODO_CERO);                     rowCondiciones.setAttribute("IdTcaFrecuenciaPeriodoGra", FenixModelConstants.ID_TCA_FRECUENCIA_PERIODO_DIAS);                }else{                    logger.warning("cuando se tiene una especificación por fechas, " +                                    "el periodo_gracia=fecha_primer_pago - fecha_estimada_desembolsar y se resta frecuencia_capital");                    if(calcularPeriodGracia(rowContrato,  rowCondiciones)){                        logger.warning("Se calcula el periodo de gracia correctamente.");                    }else{                        contador++;                        logger.warning("Error, No se realizo el calculo del periodo de gracia.");                    }                }                fechaVencimiento = (Timestamp)rowCondiciones.getAttribute("FechaVencimiento");                fechaPrimerPagoCapital = (Timestamp)rowCondiciones.getAttribute("FechaPrimerPagoCapital");                if(fechaPrimerPagoCapital.compareTo(fechaVencimiento) == 0){                    logger.warning("La fechaPrimerPagoCapital es igual a fechaVencimiento.");                    rowCondiciones.setAttribute("FrecuenciaPlazo", FenixModelConstants.FRECUENCIA_PERIODO_CERO);                     rowCondiciones.setAttribute("IdTcaFrecuenciaPlazo", FenixModelConstants.ID_TCA_FRECUENCIA_PERIODO_DIAS);                }else{                    if(calcularFrecuenciaPlazo(rowCondiciones)){                        logger.warning("Se calcula el plazo correctamente.");                    }else{                        contador++;                        logger.warning("No se realizo el calculo del periodo de plazo.");                    }                }            }else{                contador++;                logger.warning("El IdTcaFrecuenciaPagoCapital es nulo, no se realiza el calculo de frecuencias.");            }        }else{            contador++;            throw new JboException(PropertiesUtils.getResourceString("org.bcie.fenix.common.model.error.validFechasCondicionesFinancieras"));        }        if(contador > 0){            logger.warning("El calculo de plazos no se realizo correctamente.");        }else{            logger.warning("Se realiza calculo de frecuencias correctamente.");            generaPlazo = Boolean.TRUE;        }        return generaPlazo;    }        public void obtenerCondicionFinancieraPCT(Long idContratoDesembolso) {        logger.warning("Entrando en obtenerCondicionFinancieraPCT.");        logger.warning("idContratoDesembolso: " + idContratoDesembolso);        ViewCriteria criteria = getViewCriteriaManager().getViewCriteria("IdContratoDesembolsoCriteria");        criteria.ensureVariableManager().setVariableValue("pIdDesembolso", idContratoDesembolso);        applyViewCriteria(criteria);        executeQuery();        logger.warning("EstimatedRowCount: " + getEstimatedRowCount());        logger.warning("firt: " + first());    }    private Row obtenerContrantoCreadoPorPCT(Long idContratoDesembolso) {        logger.warning("Entrando en obtenerContrantoCreadoPorPCT.");        logger.warning("idContratoDesembolso: " + idContratoDesembolso);        Row row = null;        if (null != idContratoDesembolso) {            FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM =                (FenixGestorDesembolsosAMImpl) this.getApplicationModule();            ContratoDesembolsoVOImpl contratoDesembolsoVO = fenixGestorDesembolsosAM.getContratoDesembolsoVO();            logger.warning("getEstimatedRowCount: " + contratoDesembolsoVO.getEstimatedRowCount());            RowSetIterator contratoRowSetIterator = contratoDesembolsoVO.createRowSetIterator(null);            contratoRowSetIterator.reset();            while (contratoRowSetIterator.hasNext()) {                Row rowContrato = contratoRowSetIterator.next();                if (null != rowContrato && null != rowContrato.getAttribute("Id") &&                    null != rowContrato.getAttribute("IdTcaEstado")) {                    Long id = (Long) rowContrato.getAttribute("Id");                    Integer idTcaEstado = (Integer) rowContrato.getAttribute("IdTcaEstado");                    logger.warning("id: " + id);                    logger.warning("idTcaEstado: " + idTcaEstado);                    if (id.compareTo(idContratoDesembolso) == 0 &&                        idTcaEstado.compareTo(FenixModelConstants.ID_ESTADO_CONTRATO_DESEMBOLSO_CREADO_POR_IMPLEMENTACION) ==                        0) {                        row = rowContrato;                        break;                    }                }            }            contratoRowSetIterator.closeRowSetIterator();        } else {            logger.warning("El id de contrato de desembolso es nulo.");        }        return row;    }    private Date calcularFechaVencimientoPCT(Row rowContrato, Row rowCondiciones) {        logger.warning("Se genera fecha de vencimiento para Id contrato desembolso: " + rowContrato.getAttribute("Id"));        Date fechaEfectiva = null;        Integer frecuenciaPlazo = null;        Integer idTcaFrecuenciaPlazo = null;        Timestamp fechaEfectivaTS = (Timestamp) rowContrato.getAttribute("FechaEfectiva");        if (null != fechaEfectivaTS) {            fechaEfectiva = new Date(fechaEfectivaTS.getTime());        }        frecuenciaPlazo = (Integer) rowCondiciones.getAttribute("FrecuenciaPlazo");        idTcaFrecuenciaPlazo = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPlazo");        Date fechaVencimiento = agregarFrecuencia(fechaEfectiva, frecuenciaPlazo, idTcaFrecuenciaPlazo);        return fechaVencimiento;    }    private boolean validarFechasPrimerPagoCapialVencimientoPCT(Row rowContrato, Row rowCondiciones) {        logger.warning("Entrando en validarFechasPrimerPagoCapialVencimientoPCT.");        boolean camposValidos = Boolean.FALSE;                Integer idTcaFrecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital");        Integer frecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("FrecuenciaPagoCapital");        Integer frecuenciaPlazo = (Integer) rowCondiciones.getAttribute("FrecuenciaPlazo");        Integer idTcaFrecuenciaPlazo = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPlazo");        Integer frecuenciaPeriodoGracia = (Integer) rowCondiciones.getAttribute("FrecuenciaPeriodoGracia");        Integer idTcaFrecuenciaPeriodoGra = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPeriodoGra");                logger.warning("idTcaFrecuenciaPagoCapital: " + idTcaFrecuenciaPagoCapital);        logger.warning("frecuenciaPagoCapital: " + frecuenciaPagoCapital);        logger.warning("frecuenciaPlazo: " + frecuenciaPlazo);        logger.warning("idTcaFrecuenciaPlazo: " + idTcaFrecuenciaPlazo);        logger.warning("frecuenciaPeriodoGracia: " + frecuenciaPeriodoGracia);        logger.warning("idTcaFrecuenciaPeriodoGra: " + idTcaFrecuenciaPeriodoGra);        if (null != idTcaFrecuenciaPagoCapital && null != frecuenciaPagoCapital && null != frecuenciaPlazo &&            null != idTcaFrecuenciaPlazo && null != frecuenciaPeriodoGracia && null != idTcaFrecuenciaPeriodoGra) {            camposValidos = Boolean.TRUE;        }        return camposValidos;    }        private boolean validarFrecuenciaPagoCapialVencimientoPCTFechaEstimadaDesembolsar(Row rowContrato, Row rowCondiciones) {        logger.warning("Entrando en validarFrecuenciaPagoCapialVencimientoPCTFechaEstimadaDesembolsar.");        boolean camposValidos = Boolean.TRUE;                Timestamp fechaVencimiento= null;        Timestamp fechaPrimerPagoCapital= null;        oracle.jbo.domain.Date fechaEstimadaDesembolsar = null;        Integer idTcaFrecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital");        Integer frecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("FrecuenciaPagoCapital");        try{            if(null != rowCondiciones.getAttribute("FechaVencimiento")){                fechaVencimiento = (Timestamp)rowCondiciones.getAttribute("FechaVencimiento");            }else{                logger.warning("La fecha de vencimiento es nula.");                camposValidos = Boolean.FALSE;            }            if(null != rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital")){                idTcaFrecuenciaPagoCapital = (Integer)rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital");            }else{                logger.warning("El tipo de frecuencia es nulo.");                camposValidos = Boolean.FALSE;            }            if(null != rowCondiciones.getAttribute("FrecuenciaPagoCapital")){                frecuenciaPagoCapital = (Integer)rowCondiciones.getAttribute("FrecuenciaPagoCapital");            }else{                logger.warning("La frecuencia de capital.");                camposValidos = Boolean.FALSE;            }            if(null != rowContrato.getAttribute("FechaEstimadaDesembolsar")){                fechaEstimadaDesembolsar = (oracle.jbo.domain.Date)rowContrato.getAttribute("FechaEstimadaDesembolsar");            }else{                logger.warning("La fecha de FechaEstimadaDesembolsar es nula.");                camposValidos = Boolean.FALSE;            }            if(null != rowCondiciones.getAttribute("FechaPrimerPagoCapital")){                fechaPrimerPagoCapital = (Timestamp)rowCondiciones.getAttribute("FechaPrimerPagoCapital");            }else{                logger.warning("La fecha de FechaPrimerPagoCapital es nula.");                camposValidos = Boolean.FALSE;            }        }catch(Exception e){            camposValidos = Boolean.FALSE;            logger.warning("Error en validarFrecuenciaPagoCapialVencimientoPCTFechaEstimadaDesembolsar.",e);        }                logger.warning("idTcaFrecuenciaPagoCapital: " + idTcaFrecuenciaPagoCapital);        logger.warning("frecuenciaPagoCapital: " + frecuenciaPagoCapital);        logger.warning("fechaVencimiento: " + fechaVencimiento);        logger.warning("fechaEstimadaDesembolsar: " + fechaEstimadaDesembolsar);        logger.warning("fechaPrimerPagoCapital: " + fechaPrimerPagoCapital);        return camposValidos;    }        private Date calcularFechaPrimerPagoCapialPCT(Row rowContrato, Row rowCondiciones) {        logger.warning("Se genera fecha de vencimiento para Id contrato desembolso: " + rowContrato.getAttribute("Id"));        Date fechaEfectiva = null;        Date fechaPrimerPagoCapial = null;        Integer idTcaFrecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital");        Integer frecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("FrecuenciaPagoCapital");        Integer frecuenciaPlazo = (Integer) rowCondiciones.getAttribute("FrecuenciaPlazo");        Integer idTcaFrecuenciaPlazo = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPlazo");        Integer frecuenciaPeriodoGracia = (Integer) rowCondiciones.getAttribute("FrecuenciaPeriodoGracia");        Integer idTcaFrecuenciaPeriodoGra = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPeriodoGra");        Timestamp fechaEfectivaTS = (Timestamp) rowContrato.getAttribute("FechaEfectiva");        if (null != fechaEfectivaTS) {            fechaEfectiva = new Date(fechaEfectivaTS.getTime());        }        if (idTcaFrecuenciaPagoCapital.compareTo(FenixModelConstants.FRECUENCIA_AL_VENCIMIENTO) == 0) {            Date fechaEfectivaMasPlazo = agregarFrecuencia(fechaEfectiva, frecuenciaPlazo, idTcaFrecuenciaPlazo);            fechaPrimerPagoCapial =                agregarFrecuencia(fechaEfectivaMasPlazo, frecuenciaPeriodoGracia, idTcaFrecuenciaPeriodoGra);        } else {            Date fechaefetivaMasFrecuencia =                agregarFrecuencia(fechaEfectiva, frecuenciaPagoCapital, idTcaFrecuenciaPagoCapital);            fechaPrimerPagoCapial =                agregarFrecuencia(fechaefetivaMasFrecuencia, frecuenciaPeriodoGracia, idTcaFrecuenciaPeriodoGra);        }        return fechaPrimerPagoCapial;    }    private Date agregarFrecuencia(Date fecha, Integer frecuencia, Integer idTcaFrecuenciaPlazo) {        logger.warning("Entrando en agregarFrecuencia.");        Date fechaResultado = null;        if (null != fecha && null != frecuencia && null != idTcaFrecuenciaPlazo) {            Calendar cal = Calendar.getInstance();            cal.setTime(fecha);            final int DIAS = 1, MESES = 2, ANOS = 3;            switch (idTcaFrecuenciaPlazo) {            case DIAS:                cal.add(Calendar.DATE, frecuencia);                break;            case MESES:                cal.add(Calendar.MONTH, frecuencia);                break;            case ANOS:                cal.add(Calendar.YEAR, frecuencia);                break;            }            fechaResultado = cal.getTime();        } else {            logger.warning("los valores fecha, frecuencia o idTcaFrecuenciaPlazo son nulos.");        }        logger.warning("fechaResultado: " + fechaResultado);        return fechaResultado;    }        private Boolean calcularPeriodGracia(Row rowContrato, Row rowCondiciones){        logger.warning("Entra en calcularPeriodGracia");        Map map = new HashMap();        Boolean generaPeriodoGracia = Boolean.TRUE;        Timestamp fechaPrimerPagoCapitalAux = null;        Date fechaPrimerPagoCapital = null;        oracle.jbo.domain.Date fechaEstimadaDesembolsarAux = null;        Date fechaEstimadaDesembolsar = null;        Integer idTcaFrecuenciaPagoCapital = null;        Integer frecuenciaPagoCapital = null;        Long diferenciaDias = null;        Integer dias = null;        Integer totalDias = null;        Integer multiplicaDias = null;        Integer frecuencia = null;        Integer idTcaTipoFrecuencia = null;        try {            idTcaFrecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("IdTcaFrecuenciaPagoCapital");            frecuenciaPagoCapital = (Integer) rowCondiciones.getAttribute("FrecuenciaPagoCapital");                        fechaPrimerPagoCapitalAux = (Timestamp) rowCondiciones.getAttribute("FechaPrimerPagoCapital");            fechaPrimerPagoCapital = new Date(fechaPrimerPagoCapitalAux.getTime());                        fechaEstimadaDesembolsarAux = (oracle.jbo.domain.Date) rowContrato.getAttribute("FechaEstimadaDesembolsar");            java.sql.Date sqldate = fechaEstimadaDesembolsarAux.dateValue();            fechaEstimadaDesembolsar = new Date(sqldate.getTime());                        diferenciaDias = ((fechaPrimerPagoCapital.getTime() - fechaEstimadaDesembolsar.getTime()) / 86400000);            dias = diferenciaDias.intValue();                        switch (idTcaFrecuenciaPagoCapital) {            case 1:                totalDias = dias - frecuenciaPagoCapital;                break;            case 2:                multiplicaDias = frecuenciaPagoCapital * 30;                totalDias = dias - multiplicaDias;                break;            case 3:                multiplicaDias = frecuenciaPagoCapital * 365;                totalDias = dias - multiplicaDias;                break;            }                        if(totalDias.compareTo(NUMERO_DIAS_CERO) == -1){                logger.warning("Se obtuvo un numero de dias negativo.");                rowCondiciones.setAttribute("FrecuenciaPeriodoGracia", FenixModelConstants.FRECUENCIA_PERIODO_CERO);                rowCondiciones.setAttribute("IdTcaFrecuenciaPeriodoGra", FenixModelConstants.ID_TCA_FRECUENCIA_PERIODO_DIAS);            }else{                logger.warning("Se obtuvo un numero de dias positivo.");                map = calcularTipoPlazo(totalDias);                if(null != map.get("idTcaTipoPlazo") && null != map.get("resultado")){                    frecuencia = (Integer)map.get("resultado");                    idTcaTipoFrecuencia = (Integer)map.get("idTcaTipoPlazo");                    rowCondiciones.setAttribute("FrecuenciaPeriodoGracia", frecuencia);                    rowCondiciones.setAttribute("IdTcaFrecuenciaPeriodoGra", idTcaTipoFrecuencia);                }else{                    logger.warning("La frecuencia o el tipo de frcuencia son nulos, no se guardan los datos.");                }            }        } catch (Exception e) {            generaPeriodoGracia = Boolean.FALSE;            logger.warning("Error en calcularPeriodGracia.", e);        }        return generaPeriodoGracia;    }        private Map calcularTipoPlazo(Integer numeroDias){        logger.warning("Entra en calcularTipoPlazo.");        Map map = new HashMap();        Integer resultado = null;        Integer residuo = null;        Integer totalDias = null;        Integer idTcaTipoPlazo = null;        try{            logger.warning("Numero de dias : " + numeroDias);            if(numeroDias >= 365){                residuo = numeroDias % 365;                if(residuo == 0){                    logger.warning("Se obtuvo periodo en años");                    resultado = numeroDias / 365;                    idTcaTipoPlazo = 3;                    map.put("idTcaTipoPlazo", idTcaTipoPlazo);                    map.put("resultado", resultado);                }else{                   residuo = numeroDias % 30;                    if(residuo == 0){                        logger.warning("Se obtuvo periodo en meses.");                        resultado = numeroDias / 30;                        idTcaTipoPlazo = 2;                        map.put("idTcaTipoPlazo", idTcaTipoPlazo);                        map.put("resultado", resultado);                    }else{                        logger.warning("El periodo es en dias");                        idTcaTipoPlazo = 1;                        map.put("idTcaTipoPlazo", idTcaTipoPlazo);                        map.put("resultado", numeroDias);                    }                }            }else if(numeroDias >= 30){                residuo = numeroDias % 30;                if(residuo == 0){                    logger.warning("El periodo es en meses");                    resultado = numeroDias / 30;                    idTcaTipoPlazo = 2;                    map.put("idTcaTipoPlazo", idTcaTipoPlazo);                    map.put("resultado", resultado);                }else{                    logger.warning("El periodo es en dias");                    idTcaTipoPlazo = 1;                    map.put("idTcaTipoPlazo", idTcaTipoPlazo);                    map.put("resultado", numeroDias);                }            }else{                logger.warning("El periodo es en dias");                idTcaTipoPlazo = 1;                map.put("idTcaTipoPlazo", idTcaTipoPlazo);                map.put("resultado", numeroDias);            }            logger.warning("Regres tipo de frecuencia : " + map.get("idTcaTipoPlazo"));            logger.warning("Regres frecuencia : " + map.get("resultado"));        }catch(Exception e){            logger.warning("Error en calcularTipoPlazo.", e);            return null;        }        return map;    }    private Boolean calcularFrecuenciaPlazo(Row rowCondiciones) {        logger.warning("Entra en calcularFrecuenciaPlazo.");        Boolean respuesta = Boolean.FALSE;        Date fechaDeInicio = null;        Date fechaDeTermino = null;        Timestamp fechaInicio = null;        Timestamp fechaFinal = null;        fechaInicio = (Timestamp) rowCondiciones.getAttribute("FechaPrimerPagoCapital");        fechaFinal = (Timestamp) rowCondiciones.getAttribute("FechaVencimiento");        logger.warning("FechaPrimerPagoCapital : " + fechaInicio);        logger.warning("FechaVencimiento : " + fechaFinal);        if (fechaInicio == null || fechaFinal == null) {            logger.warning("La fecha de primer pago capital y la fecha vencimiento son requeridas");            return respuesta;        }        fechaDeInicio = new Date(fechaInicio.getTime());        fechaDeTermino = new Date(fechaFinal.getTime());        if (fechaDeInicio.compareTo(fechaDeTermino) == 1) {            logger.warning("La fecha de primer pago de capital es mayor que la fecha de vencimiento.");            return respuesta;        }        Map datosPlazo = (Map) calcularPlazosEntreFechas(fechaDeInicio, fechaDeTermino);        Integer frecuanciaPlazo = (Integer) datosPlazo.get("frecuanciaPlazo");        Integer idTcaPlazo = (Integer) datosPlazo.get("idTcaPlazo");        if (frecuanciaPlazo != null && idTcaPlazo != null) {            rowCondiciones.setAttribute("FrecuenciaPlazo", frecuanciaPlazo);            rowCondiciones.setAttribute("IdTcaFrecuenciaPlazo", idTcaPlazo);            respuesta = Boolean.TRUE;        } else {            logger.warning("Error, la fecha de primer pago capital y la fecha vencimiento son requeridas");        }        logger.warning("Termina el metodo getPlazoPago");        return respuesta;    }        private Map calcularPlazosEntreFechas(Date fechaDeInicio, Date fechaDeTermino) {        logger.warning("Entra en calcularPlazosEntreFechas");        if (fechaDeInicio == null || fechaDeTermino == null) {            logger.warning("Alguna de las fechas es nula.");        }        int tcaDias = 1, tcaMeses = 2, tcaAnios = 3;        Integer frecuanciaPlazo = null;        Integer idTcaPlazo = null;        Map datosPlazos = new HashMap();        SimpleDateFormat formato = new SimpleDateFormat("dd-MM-yyyy");        String fecha1 = formato.format(fechaDeInicio);        String fecha2 = formato.format(fechaDeTermino);        String fechaInic[] = fecha1.split("-");        String fechaFina[] = fecha2.split("-");        int[] fechaIni = new int[fechaInic.length];        int[] fechaFin = new int[fechaFina.length];        for (int i = 0; i < fechaInic.length; i++) {            fechaIni[i] = Integer.parseInt(fechaInic[i]);        }        for (int i = 0; i < fechaFina.length; i++) {            fechaFin[i] = Integer.parseInt(fechaFina[i]);        }        if ((fechaIni[0] == fechaFin[0]) && (fechaIni[1] == fechaFin[1])) {            logger.warning("Se realizara un calculo por anios");            if (fechaIni[2] != fechaFin[2]) {                if (fechaIni[2] < fechaFin[2]) {                    int numAnios = (fechaFin[2] - fechaIni[2]);                    logger.warning("El plazo es de " + numAnios + " año");                    frecuanciaPlazo = new Integer(numAnios);                    idTcaPlazo = new Integer(tcaAnios);                } else {                    logger.warning("La fecha de inicio no puede ser mayor a la fecha de final");                }            } else {                logger.warning("Las fechas son iguales");            }        } else if (fechaIni[0] == fechaFin[0]) {            logger.warning("Se realizara un calculo por meses");            if (fechaIni[2] != fechaFin[2]) {                if (fechaIni[2] < fechaFin[2]) {                    int mesesDeAos = (fechaFin[2] - fechaIni[2]) * 12;                    int meses = (fechaFin[1] - fechaIni[1]);                    meses = mesesDeAos + meses;                    logger.warning("El plazo es de " + meses + " meses");                    frecuanciaPlazo = new Integer(meses);                    idTcaPlazo = new Integer(tcaMeses);                } else {                    logger.warning("La fecha de inicio no puede ser mayor a la fecha de final");                }            } else {                if (fechaIni[1] < fechaFin[1]) {                    int meses = (fechaFin[1] - fechaIni[1]);                    logger.warning("El plazo es de " + meses + " meses");                } else {                    logger.warning("La fecha de inicio no puede ser mayor a la fecha de final");                }            }        } else {            logger.warning("Se realizara un calculo por dias");            try {                Date fechaIniciall = formato.parse(fechaIni[0] + "-" + fechaIni[1] + "-" + fechaIni[2]);                Date fechaFinall = formato.parse(fechaFin[0] + "-" + fechaFin[1] + "-" + fechaFin[2]);                int dias = (int) ((fechaFinall.getTime() - fechaIniciall.getTime()) / 86400000);                logger.warning("El pazo es de " + dias + " dias");                frecuanciaPlazo = new Integer(dias);                idTcaPlazo = new Integer(tcaDias);            } catch (Exception e) {                logger.warning("Ha ocurrido un error al obtener el plazo en dias", e);            }        }        datosPlazos.put("frecuanciaPlazo", frecuanciaPlazo);        datosPlazos.put("idTcaPlazo", idTcaPlazo);        logger.warning("Termina el metodo calcularPlazosEntreFechas");        return datosPlazos;    }        public Map recuperarMontoDescuento(Long idDesembolso){     logger.warning("inicia el metodo recuperarMontoDescuento");             Map datosMontoDescuento = new HashMap();        BigDecimal montoDescuento = new BigDecimal(0);        Integer tipoTasaDesembolso = null;             Row fila = getCurrentRow();                  if(fila == null){            fila = getCondicionesFinancieras(idDesembolso);        }               try{           montoDescuento = (BigDecimal)fila.getAttribute("MontoDescuento");           tipoTasaDesembolso = (Integer)fila.getAttribute("IdTcaTipoTasaDesembolso");                                }catch(Exception e){            logger.warning("Ha ocuttido un error al intentar recuperar el montodescuento ->",e);        }            datosMontoDescuento.put("montoDescuento", montoDescuento);        datosMontoDescuento.put("tipoTasaDesembolso", tipoTasaDesembolso);         return datosMontoDescuento;    }    /**     * Returns the variable value for pIdCondicionFinancieraCriteria.     * @return variable value for pIdCondicionFinancieraCriteria     */    public Long getpIdCondicionFinanciera() {        return (Long) ensureVariableManager().getVariableValue("pIdCondicionFinanciera");    }    /**     * Sets <code>value</code> for variable pIdCondicionFinancieraCriteria.     * @param value value to bind as pIdCondicionFinancieraCriteria     */    public void setpIdCondicionFinanciera(Long value) {        ensureVariableManager().setVariableValue("pIdCondicionFinanciera", value);    }}