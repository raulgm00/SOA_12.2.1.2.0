package org.bcie.fenix.common.model.vo;import java.io.IOException;import java.io.InputStream;import java.math.BigDecimal;import java.sql.Timestamp;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.Date;import java.util.List;import oracle.adf.share.logging.ADFLogger;import oracle.jbo.NameValuePairs;import oracle.jbo.Row;import oracle.jbo.ViewCriteria;import oracle.jbo.domain.BlobDomain;import oracle.jbo.server.ViewObjectImpl;import org.apache.poi.ss.usermodel.DateUtil;import org.apache.poi.xssf.usermodel.XSSFCell;import org.apache.poi.xssf.usermodel.XSSFRow;import org.apache.poi.xssf.usermodel.XSSFSheet;import org.apache.poi.xssf.usermodel.XSSFWorkbook;import org.bcie.fenix.common.model.vo.common.DetalleCalendarioVO;public class DetalleCalendarioVOImpl extends ViewObjectImpl implements DetalleCalendarioVO {    private static ADFLogger logger = null;    public DetalleCalendarioVOImpl() {        super();        if (logger == null) {            logger = ADFLogger.createADFLogger(this.getClass());        }    }    public Boolean setDetalleCalendarioData(Long idCalendarioComplejo, Date fechaPago, BigDecimal montoPago){        logger.warning("---------INSIDE setDetalleCalendarioData -------------");        logger.log(ADFLogger.WARNING, "---- idCalendarioComplejo : " + idCalendarioComplejo);        logger.log(ADFLogger.WARNING, "---- FechaActual : " + new java.sql.Timestamp(fechaPago.getTime()));          logger.log(ADFLogger.WARNING, "---- MontoPago : " + montoPago);        try{//Se crea un row por cada fecha de pago que tenemos            Row detalleCalendario = this.createRow();            detalleCalendario.setAttribute("Idcalendariocomplejo", idCalendarioComplejo);            detalleCalendario.setAttribute("Fechapago", new java.sql.Timestamp(fechaPago.getTime()));            detalleCalendario.setAttribute("Montopago", montoPago);            if(detalleCalendario != null){                logger.log(ADFLogger.WARNING, "---- COMMIT DATA --- : ");                  this.insertRow(detalleCalendario);                this.getDBTransaction().commit();                this.executeQuery();            }        }catch(Exception e){            logger.log(ADFLogger.ERROR, "ERROR en setDetalleCalendarioData : "+e.getMessage());            getDBTransaction().rollback();                    return Boolean.TRUE;        }        return Boolean.FALSE;    }        public Boolean setDetalleCalendario(Long idCalendarioComplejo, BlobDomain fileData) {        logger.log(ADFLogger.WARNING, "INSIDE setDetalleCalendario idCalendario: "+ idCalendarioComplejo);        try {            InputStream in = fileData.getBinaryStream();            XSSFWorkbook workbook = new XSSFWorkbook(in);            XSSFSheet sheet = workbook.getSheetAt(0);            NameValuePairs nvpDetalleCalendario = null;            int rowsCount = sheet.getLastRowNum();            for (int i = 0; i <= rowsCount; i++) {                int j = 0;                int colCounts;                XSSFRow row = sheet.getRow(i);                Row rowDetalleCalendario = this.createRow();                rowDetalleCalendario.setAttribute("Idcalendariocomplejo", idCalendarioComplejo);                try {                    colCounts = row.getLastCellNum();                } catch (NullPointerException e) {                    colCounts = 1;                }                String[] excel_data = new String[colCounts + 1];                for (int k = 0; k < colCounts; k++) {                    j = j++;                    try {                        XSSFCell cell = row.getCell(k);                        switch (cell.getCellType()) {                        case XSSFCell.CELL_TYPE_NUMERIC:                            if (DateUtil.isCellDateFormatted(cell)) {                                DateFormat df = new SimpleDateFormat("dd/MM/yyyy");                                excel_data[j] = df.format(cell.getDateCellValue());                                rowDetalleCalendario.setAttribute("Fechapago",                                                         new java.sql.Timestamp(cell.getDateCellValue().getTime()));                                logger.log(ADFLogger.WARNING, "Fechas: " + excel_data[j] + rowsCount);                            } else {                               rowDetalleCalendario.setAttribute("Montopago",                                                                   BigDecimal.valueOf(cell.getNumericCellValue()));                                int resultVar = (int) cell.getNumericCellValue();                                excel_data[j] = Integer.toString(resultVar);                                logger.log(ADFLogger.WARNING, "Numeros: " + excel_data[j] + rowsCount);                            }                            break;                        default:                            excel_data[j] = "";                        }                    } catch (NullPointerException e) {                        excel_data[j] = "";                    }                }                if(rowDetalleCalendario != null){                    logger.log(ADFLogger.WARNING, "COMMIT a cada row");                    this.insertRow(rowDetalleCalendario);                    this.getDBTransaction().commit();                    this.executeQuery();                }else{                    logger.log(ADFLogger.WARNING, " ERROR rowDetalleCalendario Null");                }            }        } catch (IOException e) {            e.printStackTrace();        }        return Boolean.TRUE;    }    public Row[] getDetalleCalendario(Long idCalendarioComplejo){        logger.log(ADFLogger.WARNING, "-- INSIDE getDetalleCalendario, idCalendario: " + idCalendarioComplejo);        ViewCriteria criteria = null;        Row[] row = null;        if(null == idCalendarioComplejo){            logger.log(ADFLogger.WARNING, "ERROR! idCalendario NULL");        }else{            try{                criteria = this.getViewCriteriaManager().getViewCriteria("CalendarioComplejoCriteria");                criteria.ensureVariableManager().setVariableValue("pIdCalendarioComplejo", idCalendarioComplejo);                this.applyViewCriteria(criteria);                this.executeQuery();                if(this.getEstimatedRowCount() > 0){                    row = this.getAllRowsInRange();                }            }catch(Exception e){                logger.log(ADFLogger.WARNING, "Error en getDetalleCalendario " + e.getClass() + ":" + e.getMessage());            }finally{                this.getViewCriteriaManager().removeApplyViewCriteriaName("CalendarioComplejoCriteria");            }                    }        return row;    }    public Long getpIdCalendarioCriteria() {        return (Long) ensureVariableManager().getVariableValue("pIdCalendarioCriteria");    }    /**     * Returns the variable value for pIdCalendarioComplejo.     * @return variable value for pIdCalendarioComplejo     */    public Long getpIdCalendarioComplejo() {        return (Long) ensureVariableManager().getVariableValue("pIdCalendarioComplejo");    }    /**     * Sets <code>value</code> for variable pIdCalendarioComplejo.     * @param value value to bind as pIdCalendarioComplejo     */    public void setpIdCalendarioComplejo(Long value) {        ensureVariableManager().setVariableValue("pIdCalendarioComplejo", value);    }    public static void setLogger(ADFLogger logger) {        DetalleCalendarioVOImpl.logger = logger;    }    public static ADFLogger getLogger() {        return logger;    }}