package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.Date;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.TransferenciaRecursosVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Sep 27 10:29:12 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TransferenciaRecursosVOImpl extends ViewObjectImpl implements TransferenciaRecursosVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public TransferenciaRecursosVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public void inicializarRegistroTransferenciaRecursos(Long idFuenteExterna){
        logger.warning("Inicia metodo inicializarRegistroTransferenciaRecursos");
        Row row = null;
        Row lineasPasivasRow = null;
        Row rowEncontrado = null;
        Long idTransferenciaRecursos = null;
        SequenceImpl seqTransferenciaRecursos = null;
        Long idContrato = null;
        Long idTreLineaPasiva = null;
        
        if(null == idFuenteExterna){
            logger.warning("Parametro idFuenteEterna requerido es NULL");
            return;
        }     
        
        logger.warning("Creando row de TransferenciaRecursos");
        row = this.createRow();
        FenixGestorDesembolsosAMImpl gestorDesembolsosAM = null;
        gestorDesembolsosAM = (FenixGestorDesembolsosAMImpl) getApplicationModule();
        
        
        if(null != gestorDesembolsosAM){
            if(null != gestorDesembolsosAM.getCrearActualizarContratoDesembolsoVO()){
                Row contratoDesembolsoRow = null;
                contratoDesembolsoRow = gestorDesembolsosAM.getCrearActualizarContratoDesembolsoVO().getCurrentRow();
                if(null != contratoDesembolsoRow){
                    try{
                        logger.warning("Obteniendo id de contratoDesembolsoRow");
                        idContrato = (Long) contratoDesembolsoRow.getAttribute("Id");
                    }catch(Exception e){
                        logger.warning("ERROR al recuperar idContrato", e);
                    }
                    
                    lineasPasivasRow = gestorDesembolsosAM.getTreLineaPasivaVO().obtenerLineaPasiva(idContrato, idFuenteExterna);
                    
                    if(null != lineasPasivasRow){
                        try{
                            idTreLineaPasiva = (Long) lineasPasivasRow.getAttribute("Id");
                        }catch(Exception e){
                            logger.warning("ERROR al obtener el id de linea pasiva");
                        }
                    }else{
                        logger.warning("LineaPasivaRow es NULL");
                    }
                    
                    rowEncontrado = buscarRegistroTransferenciaRecursos(idTreLineaPasiva);
                    
                    if(null != rowEncontrado){
                        Integer idFormaTransferencia = null;
                        try{
                            idFormaTransferencia = (Integer) rowEncontrado.getAttribute("TcaFormaTransferencia");
                        }catch(Exception e){
                            logger.warning("TcaFormaTransferencia ERROR al obtener el atributo", e);
                        }
                        if(null != idFormaTransferencia){
                            if(idFormaTransferencia.compareTo(1)==0){
                                logger.warning("Forma de transferencia directa a cliente");
                                rowEncontrado.setAttribute("NumeroCuentaClientePasivo", rowEncontrado.getAttribute("NumeroCuenta"));
                            }
                            if(idFormaTransferencia.compareTo(2)==0){
                                logger.warning("Forma de transferencia a cuentas BCIE");
                                rowEncontrado.setAttribute("NumeroCuentaNostro", rowEncontrado.getAttribute("NumeroCuenta"));
                            }                            
                        }
                        logger.warning("VALOR DE DATOS OBLIGATORIOS DE TRANSFERENCIA DE RECURSOS:");
                        logger.warning("Monto desembolsado: " + rowEncontrado.getAttribute("MontoDesembolsado"));
                        logger.warning("Fecha: " + rowEncontrado.getAttribute("Fecha"));
                        logger.warning("Forma transferencia: " + rowEncontrado.getAttribute("TcaFormaTransferencia"));
                        
                        logger.warning("Seteando row encontrado al row de vista");
                        row = rowEncontrado;
                        this.setCurrentRow(row);
                    }else{                          
                        logger.warning("Generando nuevo IdTransferenciaRecursos");
                        seqTransferenciaRecursos = new SequenceImpl("TRANSFERENCIA_RECURSOS_SEQ", getDBTransaction());
                        try{
                            idTransferenciaRecursos = seqTransferenciaRecursos.getSequenceNumber().longValue();
                        }catch(Exception e){
                            logger.warning("ERROR al obtener nuevo ID", e);
                        }
                        
                        logger.warning("idTransferencia de recursos: " + idTransferenciaRecursos);
                        if(null != idTransferenciaRecursos){
                            row.setAttribute("Id", idTransferenciaRecursos); 
                        }else{
                            row.setAttribute("Id", -1); 
                        } 

                        row.setAttribute("IdTreLineaPasiva", idTreLineaPasiva); 
                        row.setAttribute("BanEstatus", 1); 
                        row.setAttribute("FechaRegistro", new Date());
                        row.setAttribute("IdFuenteExterna", idFuenteExterna);
                        //row.setAttribute("CodigoCliente", "BHQ000403");
                        //row.setAttribute("Moneda", "USD");
                        
                        logger.warning("Row de transferencias creado para la linea pasiva: "+ idTreLineaPasiva);
                        this.insertRow(row);
                        
                        logger.warning("Obteniendo tipo de moneda de contratoDesembolsoRow");
                        if(null != contratoDesembolsoRow.getAttribute("IdTcaTipoMoneda")){
                            Integer idTipoMoneda = null;
                            try{
                                idTipoMoneda = (Integer) contratoDesembolsoRow.getAttribute("IdTcaTipoMoneda");
                            }catch(Exception e){
                                logger.warning("Error al obtener idTipoMoneda ", e);
                            }
                            logger.warning("IdTcaTipoMoneda: " + idTipoMoneda);
                            row.setAttribute("Moneda", idTipoMoneda);
                        }else{
                            logger.warning("Atributo IdTcaTipoMoneda de contratoDesembolsoRow es NULL");
                        }
                        this.setCurrentRow(row);
                    }
                }else{
                    logger.warning("contratoDesembolsoRow es NULL");
                }
            }else{
                logger.warning("Instancia de CrearActualizarContratoDesembolsoVO");
            }
        }else{
            logger.warning("Instancia de gestorDesembolsosAM es NULL");
        }
                
        logger.warning("Termina metodo inicializarRegistroTransferenciaRecursos");
    }
    
    public void asignarIdRegistroTransferencias(){
        logger.warning("Inicia metodo asignarIdRegistroTransferencias");
        Row row = null;
        Long idTransferenciaRecursos = null;
        SequenceImpl seqTransferenciaRecursos = null;
        
        if(getEstimatedRowCount() > 0){
            RowSetIterator iter = createRowSetIterator(null);
            iter.reset();
            if(null != iter){
                logger.warning("Recorriendo iterador");
                while(iter.hasNext()){
                    Long idTransferencia = null;
                    row = iter.next();
                    idTransferencia = (Long) row.getAttribute("Id");
                    if(idTransferencia.compareTo(-1L)==0){
                        logger.warning("Generando nuevo IdTransferenciaRecursos");
                        seqTransferenciaRecursos = new SequenceImpl("TRANSFERENCIA_RECURSOS_SEQ", getDBTransaction());
                        try{
                            idTransferenciaRecursos = seqTransferenciaRecursos.getSequenceNumber().longValue();
                        }catch(Exception e){
                            logger.warning("ERROR al obtener nuevo ID");
                        }
                        logger.warning("Nuevo id de transferencia: " + idTransferenciaRecursos);
                        row.setAttribute("Id", idTransferenciaRecursos);
                    }                   
                }
            }else{
                logger.warning("Iterador es NULL. No se pudieron asignar id de registro de transferencias.");
            }
            iter.closeRowSetIterator();
        }else{
            logger.warning("No se encontraron registros por modificar.");
        }
        
        
        logger.warning("Inicia metodo asignarIdRegistroTransferencias");
    }
    
    public void borrarRegistroTransferenciaPorIdLineaPasiva(Long idTreLineaPasiva){
        logger.warning("Inicia metodo borrarRegistroTransferenciaPorIdLineaPasiva");
        Row row = null;
        logger.warning("IdTreLineaPasiva de entrada: " + idTreLineaPasiva);
        executeQuery();
        
        if(getEstimatedRowCount()>0){
            RowSetIterator iter = createRowSetIterator(null);
            
            logger.warning("Iterando registros de Transferencias de recursos");
            if(null != iter){
                iter.reset();
                while(iter.hasNext()){
                    row = iter.next();
                    if(null != row){
                        try{
                            Long idTreLinea = (Long) row.getAttribute("IdTreLineaPasiva");
                            if(idTreLineaPasiva.compareTo(idTreLinea)==0){
                                logger.warning("Registro de transferencia de recursos encontrado con la linea pasiva: " + idTreLineaPasiva);
                                logger.warning("Borrando registro de transferencia de recursos: " + row.getAttribute("Id"));
                                row.remove();
                            }
                        }catch(Exception e){
                            logger.warning("ERROR al recuperar el valor de idTreLineaPasiva del row de transferencia de recursos.");
                        }
                    }else{
                        logger.warning("El row es NULL.");
                    }
                }
            }else{
                logger.warning("Iterador NULL");
            }
            iter.closeRowSetIterator();
        }
        
        logger.warning("Termina metodo borrarRegistroTransferenciaPorIdLineaPasiva");
    }
    
    public void executarQueryTransfereciaRecursos(){
        logger.warning("Ejecutando query de Transferencia de recursos");
        executeQuery();
    }
    
    public Row buscarRegistroTransferenciaRecursos(Long idTreLineaPasiva){
        logger.warning("Inicia metodo buscarRegistroTransferenciaRecursos idTreLineaPasiva: "+idTreLineaPasiva);
        Row row = null;
        Row rowEncontrado = null;
        
        if(null == idTreLineaPasiva){
            logger.warning("Parametro idTreLineaPasiva requerido es NULL");
            return row;
        }
        
        if(getEstimatedRowCount()>0){
            RowSetIterator iter = createRowSetIterator(null);
            
            logger.warning("Iterando registros de Transferencias de recursos");
            if(null != iter){
                iter.reset();
                while(iter.hasNext()){
                    row = iter.next();
                    if(null != row){
                        logger.warning("Comparando idTreLineaPasiva");
                        Long idTreLineaPasivaRow = null;
                        try{
                            idTreLineaPasivaRow = (Long) row.getAttribute("IdTreLineaPasiva");
                        }catch(Exception e){
                            logger.warning("Error al obtener IdLineaPasiva de row");
                        }
                        if(idTreLineaPasivaRow.compareTo(idTreLineaPasiva)==0){
                            logger.warning("Se encontro un registro de transferencias");
                            rowEncontrado = row;
                        }
                    }else{
                        logger.warning("El row es NULL.");
                    }
                }
            }else{
                logger.warning("Iterador NULL");
            }
            iter.closeRowSetIterator();
        }else{
            logger.warning("No se encontraron registros de Transferencias");
        }
        
        logger.warning("Termina metodo buscarRegistroTransferenciaRecursos");
        return rowEncontrado;
    }
    
    public Boolean crearRegistroTransferenciaRecursos(Row rowFuentesExternas){
        logger.warning("Inicia metodo crearRegistroTransferenciaRecursos.");
        Boolean retorno = Boolean.FALSE;
        
        if(null == rowFuentesExternas){
            logger.warning("El row de fuentesExternas es NULL.");
            return retorno;
        }
        
        NameValuePairs nvpTransferenciaRecursos = new NameValuePairs();
        Row rowTransferenciaRecursos = null;
        
        Long idTransferenciaRecursos = null;
        SequenceImpl seqTransferenciaRecursos = null;
        
        BigDecimal montoDesembolsado = null;
        Timestamp fecha = null;
        Integer tcaFormaTransferencia = null;
        String numeroCuenta = null;
        String nombreCuenta = null;
        String idBancoTransferencia = null;
        String nombreBancoTransferencia = null;
        Long idTreLineaPasiva = null;
        Integer idContrato = null;
        Long idFuente = null;
        Long contratoLong = null;
        FenixGestorDesembolsosAMImpl fenixGestorDesembolsosAM = null;
        Row row = null;
        
        try{
            montoDesembolsado = (BigDecimal) rowFuentesExternas.getAttribute("MontoDesembolsado");
            fecha = (Timestamp) rowFuentesExternas.getAttribute("Fecha");
            tcaFormaTransferencia = (Integer) rowFuentesExternas.getAttribute("TcaFormaTransferencia");
            nombreCuenta = (String) rowFuentesExternas.getAttribute("NombreCuenta");
            idBancoTransferencia = (String) rowFuentesExternas.getAttribute("IdBancoTransferencia");
            nombreBancoTransferencia = (String) rowFuentesExternas.getAttribute("NombreBancoTransferencia");
            idContrato = (Integer) rowFuentesExternas.getAttribute("IdContrato");
            idFuente = (Long) rowFuentesExternas.getAttribute("IdFuenteExterna");
            
            contratoLong = idContrato.longValue();
        }catch(Exception e){
            logger.warning("ERROR al recuperar valores de Row de Fuentes externas.", e);
            return retorno;
        }  
        
        
        try{            
            fenixGestorDesembolsosAM = (FenixGestorDesembolsosAMImpl) getApplicationModule();
            idTreLineaPasiva = fenixGestorDesembolsosAM.getTreLineaPasivaVO().recuperarIdTreLineaPasivaPorContratoFuente(contratoLong, idFuente);
        }catch(Exception e){
            logger.warning("ERROR al recuperar el IdTreLineaPasiva.", e);
            return retorno;
        }
        
        try{
            if(null != rowFuentesExternas.getAttribute("NumeroCuentaNostro")){
                logger.warning("Obteniendo NumeroCuentaNostro.");
                numeroCuenta = (String) rowFuentesExternas.getAttribute("NumeroCuentaNostro");
            }
            
            if(null != rowFuentesExternas.getAttribute("NumeroCuentaClientePasivo")){
                logger.warning("Obteniendo NumeroCuentaClientePasivo.");
                numeroCuenta = (String) rowFuentesExternas.getAttribute("NumeroCuentaClientePasivo");
            }
        }catch(Exception e){
            logger.warning("ERROR al recuperar el numerod e cuenta.", e);
        }        
        
        logger.warning("Validando atributos NULL.");
        
        logger.warning("MontoDesembolsado: " + montoDesembolsado);
        logger.warning("Fecha: " + fecha);
        logger.warning("TcaFormaTransferencia: " + tcaFormaTransferencia);
        logger.warning("NumeroCuenta: " + numeroCuenta);
        logger.warning("NombreCuenta: " + nombreCuenta);
        logger.warning("IdBancoTransferencia: " + idBancoTransferencia);
        logger.warning("NombreBancoTransferencia: " + nombreBancoTransferencia);
        logger.warning("IdContrato: " + idContrato);
        logger.warning("IdFuente: " + idFuente);
        
            if(null == montoDesembolsado || null == fecha || null == tcaFormaTransferencia ||
                       null == idContrato || null == idFuente
                        // Cambio Realizado el 20/10/2021 ya no sera necesario validar el numero de cuenta //
                        // || null == numeroCuenta //
                 ){
            logger.warning("Algun atributo de Transferencias es NULL.");
            return retorno;
        }
        
        logger.warning("Buscando row Existente en base a IdTreLineaPasiva.");
        row = validarExisteRegistroTransferenciaRecursos(idTreLineaPasiva);
        if(null != row){
            logger.warning("Actualizando registro existente.");
            try{
                row.setAttribute("MontoDesembolsado", montoDesembolsado);
                row.setAttribute("Fecha", fecha);
                row.setAttribute("TcaFormaTransferencia", tcaFormaTransferencia);
                row.setAttribute("NumeroCuenta", numeroCuenta);
                row.setAttribute("NombreCuenta", nombreCuenta);
                row.setAttribute("IdBancoTransferencia", idBancoTransferencia);
                row.setAttribute("NombreBancoTransferencia", nombreBancoTransferencia);
            }catch(Exception e){
                logger.warning("ERROR al asignar valores a objeto NameValuePairs.", e);
                return retorno;
            }
        }else{
            logger.warning("LLenando NameValuePairs de TransferenciaRecursosVO.");
            try{
                seqTransferenciaRecursos = new SequenceImpl("TRANSFERENCIA_RECURSOS_SEQ", getDBTransaction());
                idTransferenciaRecursos = seqTransferenciaRecursos.getSequenceNumber().longValue();
                nvpTransferenciaRecursos.setAttribute("Id", idTransferenciaRecursos);
            }catch(Exception e){
                logger.warning("ERROR al obtener la secuencia de Transferencia de recursos.", e);
                return retorno;
            }
            
            try{
                Timestamp timestamp = new Timestamp(System.currentTimeMillis());
                nvpTransferenciaRecursos.setAttribute("FechaRegistro", timestamp);
            }catch(Exception e){
                logger.warning("ERROR al obtener la fecha del sistema.", e);
                return retorno;
            }
            
            try{
                nvpTransferenciaRecursos.setAttribute("MontoDesembolsado", montoDesembolsado);
                nvpTransferenciaRecursos.setAttribute("Fecha", fecha);
                nvpTransferenciaRecursos.setAttribute("TcaFormaTransferencia", tcaFormaTransferencia);
                nvpTransferenciaRecursos.setAttribute("NumeroCuenta", numeroCuenta);
                nvpTransferenciaRecursos.setAttribute("NombreCuenta", nombreCuenta);
                nvpTransferenciaRecursos.setAttribute("IdBancoTransferencia", idBancoTransferencia);
                nvpTransferenciaRecursos.setAttribute("NombreBancoTransferencia", nombreBancoTransferencia);
                nvpTransferenciaRecursos.setAttribute("IdTreLineaPasiva", idTreLineaPasiva);            
                nvpTransferenciaRecursos.setAttribute("BanEstatus", 1);
            }catch(Exception e){
                logger.warning("ERROR al asignar valores a objeto NameValuePairs.", e);
                return retorno;
            }
            
            rowTransferenciaRecursos = createAndInitRow(nvpTransferenciaRecursos);
            insertRow(rowTransferenciaRecursos);
        }
        retorno = Boolean.TRUE;
        
        logger.warning("Termina metodo crearRegistroTransferenciaRecursos.");
        return retorno;
    }
    
    public Row currentTransferenciaRecursos(){
        logger.warning("*Inf, Inicia metodo currentTransferenciaRecursos");
         Row fila = null;
        
         if(getEstimatedRowCount() > 0){
        
             logger.warning("*Inf, id row current: "+getCurrentRow().getAttribute("Id") );
             fila = getCurrentRow();
        
        }else{
            logger.warning("*Inf, Important no se encontro un current en transferenciaRecursosVO");
        }
                
        logger.warning("*Inf, Termina metodo currentTransferenciaRecursos");
        return fila;
    }
    
    public Row validarExisteRegistroTransferenciaRecursos(Long idTreLineaPasiva){
        logger.warning("Inicia metodo validarExisteRegistroTransferenciaRecursos");
        Row row = null;
        Row rowEncontrado = null;
        
        if(null == idTreLineaPasiva){
            logger.warning("Parametro idTreLineaPasiva requerido es NULL");
            return row;
        }
        
        if(getEstimatedRowCount()>0){
            RowSetIterator iter = createRowSetIterator(null);
            
            logger.warning("Iterando registros de Transferencias de recursos");
            if(null != iter){
                iter.reset();
                while(iter.hasNext()){
                    row = iter.next();
                    if(null != row){
                        logger.warning("Comparando idTreLineaPasiva");
                        Long idTreLineaPasivaRow = null;
                        try{
                            idTreLineaPasivaRow = (Long) row.getAttribute("IdTreLineaPasiva");
                        }catch(Exception e){
                            logger.warning("Error al obtener IdLineaPasiva de row");
                        }
                        if(idTreLineaPasivaRow.compareTo(idTreLineaPasiva)==0){
                            logger.warning("Se encontro un registro de transferencias");
                            rowEncontrado = row;
                            break;
                        }
                    }else{
                        logger.warning("El row es NULL.");
                    }
                }
            }else{
                logger.warning("Iterador NULL");
            }
            iter.closeRowSetIterator();
        }else{
            logger.warning("No se encontraron registros de Transferencias");
        }
        
        logger.warning("Termina metodo validarExisteRegistroTransferenciaRecursos");
        return rowEncontrado;
    }
    
}

