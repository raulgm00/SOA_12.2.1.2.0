package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ValidacionCondicionVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Jan 16 12:21:02 CST 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ValidacionCondicionVOImpl extends ViewObjectImpl implements ValidacionCondicionVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    private static ADFLogger logger = null;
    public ValidacionCondicionVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean existeValidadorCondicion(Long idCondicion, Integer idRolBpm, String loginUsuario, Long idAgrupador){
        logger.log(ADFLogger.WARNING, "Entra en existeValidadorCondicion.");
        
        Boolean esValidador = Boolean.FALSE;
        Integer numeroRows = 0;
        try{
 
            logger.log(ADFLogger.WARNING, "Id Condicon :" + idCondicion);
            logger.log(ADFLogger.WARNING, "Id Rol Bpm :" + idRolBpm);
            logger.log(ADFLogger.WARNING, "Login Usuario :" + loginUsuario.toLowerCase());
            logger.log(ADFLogger.WARNING, "Agrupador :" + idAgrupador);
            
            setpIdCondicion(idCondicion);
            setpIdRolBpm(idRolBpm);
            setpLoginUsuario(loginUsuario);
            setpIdAgrupador(idAgrupador);
            this.executeQuery();
            logger.log(ADFLogger.WARNING, "Registro encontrado :" + this.getEstimatedRowCount());
            
            
            RowSetIterator iterator = this.getViewObject().createRowSetIterator(null);
            iterator.reset();
            
            while(iterator.hasNext()){
                Row row = iterator.next();
                logger.log(ADFLogger.WARNING, "numero de la condicion encontrada :" + row.getAttribute("IdCondicion"));
                numeroRows++;
            }
            iterator.closeRowSetIterator();
            
            if(numeroRows > 0){
                logger.log(ADFLogger.WARNING, "Numero de registro :" + numeroRows);
                esValidador = Boolean.TRUE;
            }else{
                logger.log(ADFLogger.WARNING, "No se encuentra registro con el validador :" + numeroRows);
            }
        }catch(Exception e){
            logger.log(ADFLogger.WARNING, "Error al buscar el validador." + e.getClass() + "." + e);
        }
        logger.log(ADFLogger.WARNING, "Se encontro el validador :" + esValidador);
        return esValidador;
    }


    /**
     * Returns the bind variable value for pLoginUsuario.
     * @return bind variable value for pLoginUsuario
     */
    public String getpLoginUsuario() {
        return (String) getNamedWhereClauseParam("pLoginUsuario");
    }

    /**
     * Sets <code>value</code> for bind variable pLoginUsuario.
     * @param value value to bind as pLoginUsuario
     */
    public void setpLoginUsuario(String value) {
        setNamedWhereClauseParam("pLoginUsuario", value);
    }

    /**
     * Returns the bind variable value for pIdCondicion.
     * @return bind variable value for pIdCondicion
     */
    public Long getpIdCondicion() {
        return (Long) getNamedWhereClauseParam("pIdCondicion");
    }

    /**
     * Sets <code>value</code> for bind variable pIdCondicion.
     * @param value value to bind as pIdCondicion
     */
    public void setpIdCondicion(Long value) {
        setNamedWhereClauseParam("pIdCondicion", value);
    }

    /**
     * Returns the bind variable value for pIdRolBpm.
     * @return bind variable value for pIdRolBpm
     */
    public Integer getpIdRolBpm() {
        return (Integer) getNamedWhereClauseParam("pIdRolBpm");
    }

    /**
     * Sets <code>value</code> for bind variable pIdRolBpm.
     * @param value value to bind as pIdRolBpm
     */
    public void setpIdRolBpm(Integer value) {
        setNamedWhereClauseParam("pIdRolBpm", value);
    }

    /**
     * Returns the bind variable value for pIdAgrupador.
     * @return bind variable value for pIdAgrupador
     */
    public Long getpIdAgrupador() {
        return (Long) getNamedWhereClauseParam("pIdAgrupador");
    }

    /**
     * Sets <code>value</code> for bind variable pIdAgrupador.
     * @param value value to bind as pIdAgrupador
     */
    public void setpIdAgrupador(Long value) {
        setNamedWhereClauseParam("pIdAgrupador", value);
    }
}

