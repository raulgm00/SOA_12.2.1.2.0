package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.ArrayList;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.commonbo.MontoType;
import org.bcie.contratobo.Contrato;
import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.utils.IWsdlLocation;
import org.bcie.fenix.common.model.utils.ModelUtils;
import org.bcie.fenix.common.model.vo.common.ProcesoOperacionVO;
import org.bcie.lineacreditobo.Flexcube;
import org.bcie.lineacreditobo.LineaCredito;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Fri Jul 20 12:08:02 CDT 2018
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ProcesoOperacionVOImpl extends ViewObjectImpl implements ProcesoOperacionVO {
    private static ADFLogger logger = null;
    /**
     * This is the default constructor (do not remove).
     */
    public ProcesoOperacionVOImpl() {
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Boolean existeTareaAprobacionFormalizacion(Long idOperacion){
        logger.warning("Dentro existeTareaAprobacionFormalizacion");
        logger.warning("idOperacion :"+idOperacion);
        Boolean existeTareaAprobacionFormalizacion = Boolean.FALSE;
        
        Boolean existeTareaAprobacion = Boolean.FALSE;
        Boolean existeTareaFormalizacion = Boolean.FALSE;
        
        ViewCriteria viewCriteria = null;
        try{

            viewCriteria = this.getViewCriteriaManager().getViewCriteria("obtenerRegistrosPorIdOperacionAndIdProcesoCriteria");
            viewCriteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
            viewCriteria.ensureVariableManager().setVariableValue("pIdProceso", new Integer(4));
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            logger.warning("cantidad de registros :"+this.getEstimatedRowCount());
            // 2) Validar que existan registros
            if(this.getEstimatedRowCount() > 0) {
                logger.warning("Existen registros");
                existeTareaAprobacion = Boolean.TRUE;
            }else{
                logger.warning("No existen registros");
                existeTareaAprobacion = Boolean.FALSE;
            }
            
            viewCriteria = this.getViewCriteriaManager().getViewCriteria("obtenerRegistrosPorIdOperacionAndIdProcesoCriteria");
            viewCriteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
            viewCriteria.ensureVariableManager().setVariableValue("pIdProceso", new Integer(5));
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            logger.warning("cantidad de registros :"+this.getEstimatedRowCount());
            // 2) Validar que existan registros
            if(this.getEstimatedRowCount() > 0) {
                logger.warning("Existen registros");
                existeTareaFormalizacion = Boolean.TRUE;
            }else{
                logger.warning("No existen registros");
                existeTareaFormalizacion = Boolean.FALSE;
            }
            
            logger.warning("existeTareaAprobacion :"+existeTareaAprobacion);
            logger.warning("existeTareaFormalizacion :"+existeTareaFormalizacion);
            if(existeTareaAprobacion || existeTareaFormalizacion){
                logger.warning("Se tienen tareas de formalizacion o aprobacion,regresar true");
                existeTareaAprobacionFormalizacion = Boolean.TRUE;
            }
            
        } catch (Exception ex) {
            logger.severe("Error en existeProcesoIniciado : ",ex);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("obtenerRegistrosPorIdOperacionAndIdProcesoCriteria");
        }    
        
        logger.warning("Fuera existeTareaAprobacionFormalizacion,return :"+existeTareaAprobacionFormalizacion);
        return existeTareaAprobacionFormalizacion;
    }
    
    public Boolean existeProcesoFinalizadoAnalisis(Long idOperacion,Integer idProceso) {
        logger.warning("Dentro existeProcesoFinalizadoAnalisis");
        logger.warning("idOperacion :"+idOperacion);
        logger.warning("idProceso :"+idProceso);
        
        Boolean existeProcesoFinalizadoAnalisis =  Boolean.FALSE;
        Long cantidadTareasIniciadas = new Long(0);
        Long cantidadTareasFinalizadas = new Long(0);
        
        
        try{
            //obtener todas las tareas iniciadas con las columnas BAN_FINALIZADO = 0 , BAN_ES_PROCESO = 0,
            //ID_PROCESO = 3 y ID_OPERACION
            cantidadTareasIniciadas = obtenerCantidadTareas(idOperacion,idProceso,new Integer(0),new Integer(0));
            //obtener todas las tareas finalizadas con la coumna BAN_FINALIZADO = 1 y BAN_ES_PROCESO = 0
            //ID_PROCESO = 3 y ID_OPERACION
            cantidadTareasFinalizadas = obtenerCantidadTareas(idOperacion,idProceso,new Integer(1),new Integer(0));
            logger.warning("cantidadTareasIniciadas :"+cantidadTareasIniciadas);
            logger.warning("cantidadTareasFinalizadas :"+cantidadTareasFinalizadas);
            //comparar la cantidad y si estas cantidades son iguales se finalizo analisis,regresar true
            if(cantidadTareasIniciadas == 0 && cantidadTareasFinalizadas == 0){
                logger.warning("No existen tareas iniciadas y finalizadas para analisis");
            }else if(cantidadTareasIniciadas == cantidadTareasFinalizadas){
                logger.warning("Existe la misma cantidad de tareas iniciadas que finalizadas, regresar true");
                existeProcesoFinalizadoAnalisis = Boolean.TRUE;
            }else{
                logger.warning("Cantidad de tareas iniciadas y finalisas no es la misma");
            }
        
        } catch (Exception ex) {
            logger.severe("Error en existeProcesoIniciado : ",ex);
        } 
        
        logger.warning("Fuera existeProcesoFinalizadoAnalisis,return :"+existeProcesoFinalizadoAnalisis);
        
        return existeProcesoFinalizadoAnalisis;
    }
    
    public Long obtenerCantidadTareas(Long idOperacion,Integer idProceso,Integer banEsFinActividad,Integer banEsProceso ){
        logger.warning("Dentro de obtenerCantidadTareas");
        logger.warning("idOperacion :"+idOperacion);
        logger.warning("idProceso :"+idProceso);
        logger.warning("banEsFinActividad :"+banEsFinActividad);
        logger.warning("banEsProceso :"+banEsProceso);
        
        Long cantidadRegistros = new Long(0);
        
        ViewCriteria viewCriteria = null;
        
        try{
            viewCriteria = this.getViewCriteriaManager().getViewCriteria("cantidadTareasCriteria");
            viewCriteria.ensureVariableManager().setVariableValue("pIdOperacion", idOperacion);
            viewCriteria.ensureVariableManager().setVariableValue("pIdProceso", idProceso);
            viewCriteria.ensureVariableManager().setVariableValue("pBanEsFinActividad", banEsFinActividad);
            viewCriteria.ensureVariableManager().setVariableValue("pBanEsProceso", banEsProceso);
            this.applyViewCriteria(viewCriteria);
            this.executeQuery();
            logger.warning("cantidad de registros :"+this.getEstimatedRowCount());

            // 2) Validar que existan registros
            if(this.getEstimatedRowCount() > 0) {
                logger.warning("Existen registros");
                cantidadRegistros = this.getEstimatedRowCount();
            }else{
                logger.warning("No existen registros");
            }
            
        } catch (Exception ex) {
            logger.severe("Error en existeProcesoIniciado : ",ex);
        } finally {
            this.getViewCriteriaManager().removeApplyViewCriteriaName("cantidadTareasCriteria");
        }
        
        logger.warning("Fuera de obtenerCantidadTareas,return :"+cantidadRegistros);
        return cantidadRegistros;
    }
    
    
    public Boolean validarMontoAndFechaVencimiento(Long idOperacion){
        logger.warning("Dentro de validarMontoAndFechaVencimiento");
        logger.warning("idOperacion: "+ idOperacion);
        Boolean esValidaOperacion = null;
        Boolean esValidoMonto = Boolean.FALSE;
        Boolean esValidoFechaVencimiento = Boolean.FALSE;
        
        FenixAMImpl fenixAM = (FenixAMImpl)this.getRootApplicationModule();
        
        String wsdl = fenixAM.getWsdl(IWsdlLocation.LINEA_CREDITO);

        List<Boolean> lista = new ArrayList<>();
        
        com.bcie.xmlns.lineacreditoservice.LineaCredito lineaCredito12BndQSService = 
            IWsdlLocation.Service.getInstance(com.bcie.xmlns.lineacreditoservice.LineaCredito.class, wsdl);
        com.bcie.xmlns.lineacreditoservice.LineaCreditoPT lineaCreditoPT =
                        lineaCredito12BndQSService.getLineaCredito12Bnd();

        try {
            logger.log(ADFLogger.WARNING, ">HNWS lineaCreditoPT.toString()" + lineaCreditoPT.toString());
            org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType request =
                            new org.bcie.lineacreditomo.ConsultarLineaCreditoRequestType();
            //se agrega los parametros al request idOperacion e instanciaProceso
            request.setIdOperacion(idOperacion);
            
    
            Date horaInicio = ModelUtils.logStartWS(logger, request, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO);
                org.bcie.lineacreditomo.ConsultarLineaCreditoResponseType response =
                        lineaCreditoPT.consultarLineaCredito(request);
            ModelUtils.logEndWS(logger, response, FenixModelConstants.WSC_CONSULTAR_LINEA_CREDITO, horaInicio);

            if(response.getClienteContrato().size() == 0){
                logger.warning("No existen contratos con idOperacion :"+idOperacion);
                esValidaOperacion = Boolean.TRUE;
            }else{
                
            for(Contrato contrato : response.getClienteContrato()){
                List<LineaCredito>  lineasCredito = contrato.getLineaCredito();
                if(lineasCredito.size() > 0){
                    
                for(LineaCredito linea : lineasCredito){

                    logger.warning("idLineaCredito :"+linea.getIdLineaCredito());

                    Flexcube flexcube = linea.getFlexcube();
                    //Si cuenta con un BHQ la linea de credito validar monto disponible y fecha de vencimiento
                    if(flexcube.getId() != null && flexcube.getId().length() != 0){
                        logger.warning("BHQ :"+flexcube.getId());
                        logger.warning("Como se tiene BHQ se valida que cumpla con el saldo y fechaVencimiento");
                        if (linea.getSaldo() != null) {
                                logger.warning("saldo recuperado: " + linea.getSaldo());
                                if(linea.getSaldo().compareTo(new BigDecimal(0)) == 1){
                                    logger.warning("saldo  es mayor a 0");
                                    lista.add(Boolean.TRUE);
                                }else{
                                    logger.warning("saldo es igual o menor a 0");
                                    lista.add(Boolean.FALSE);
                                }
                        } else {
                            logger.warning("El saldo recuperado no tiene un importe");
                            lista.add(Boolean.FALSE);
                        }
                    
                        if(null != linea.getFechaVencimiento()){
                            logger.warning("fechaVencimiento :"+linea.getFechaVencimiento());
                            GregorianCalendar fechaVencimientoCalendar = linea.getFechaVencimiento().toGregorianCalendar();
                            java.sql.Timestamp fechaVencimiento = new java.sql.Timestamp(fechaVencimientoCalendar.getTimeInMillis());
                            java.sql.Timestamp fechaActual = new Timestamp(new Date().getTime());
                            logger.warning("fechaActual :"+fechaActual);
                            if(fechaVencimiento.after(fechaActual)){
                                logger.warning("la fechaVencimiento es mayor a la fecha actual");
                                lista.add(Boolean.TRUE);
                            }else{
                                logger.warning("la fechaVencimiento es menor a la fecha actual");
                                lista.add(Boolean.FALSE);
                            }
                        }else{
                            logger.warning("fechaVencimiento es nula");
                            lista.add(Boolean.FALSE);
                        }
                    
                    }else{
                        logger.warning("la linea no cuenta con BHQ no se validan sus montoDisplonible ni su fechaVencimiento");
                        //no cuenta con un BHQ la linea de credito de considera valida
                        lista.add(Boolean.TRUE);
                    }
                    
                    
                }//cierra linea
                }else{
                    lista.add(Boolean.TRUE);
                }
            }//cierra contrato       
                
            
            
            logger.warning("lista de boolean : "+lista.size());
    
            for(Boolean validacion :lista){
                logger.warning("validacion :"+validacion);
                if(validacion == Boolean.TRUE){
                    esValidaOperacion = Boolean.TRUE;
                }else if(validacion == Boolean.FALSE){
                    logger.warning("Se encuentra una validacion false se sale del flujo retorna false");
                    esValidaOperacion = Boolean.FALSE;
                    break;
                }
            }
        }//else para cuando se tienen registros    
                   
        }catch(Exception e){
            logger.severe("Error en validarMontoAndFechaVencimiento :"+e);
        }
        logger.warning("Fuera de validarMontoAndFechaVencimiento,return : esValidaOperacion :"+esValidaOperacion +
                       " con el idOperacion :"+idOperacion);
        return esValidaOperacion;
    }


    /**
     * @param idOperacion - indentificador unico de operacion
     * @param idProceso   - indentificador unico de proceso BPM
     * @return
     * Compara la cantidad de tareas iniciadas de un proceso contra la cantidad de tareas finalizadas , si este valor es
     * el mismo indica que el proceso se finalizo 
     */
    public Boolean esProcesoFinalizado(Long idOperacion,Integer idProceso) {
        logger.warning("Dentro esProcesoFinalizado");
        logger.warning("idOperacion :"+idOperacion);
        logger.warning("idProceso :"+idProceso);
        
        Boolean esProcesoFinalizado =  Boolean.FALSE;
        Long cantidadTareasIniciadas = new Long(0);
        Long cantidadTareasFinalizadas = new Long(0);
        
        
        try{
            //obtener todas las tareas iniciadas con las columnas BAN_FINALIZADO = 0 , BAN_ES_PROCESO = 0,
            cantidadTareasIniciadas = obtenerCantidadTareas(idOperacion,idProceso,new Integer(0),new Integer(0));
            //obtener todas las tareas finalizadas con la coumna BAN_FINALIZADO = 1 y BAN_ES_PROCESO = 0
            cantidadTareasFinalizadas = obtenerCantidadTareas(idOperacion,idProceso,new Integer(1),new Integer(0));
            
            logger.warning("cantidadTareasIniciadas :"+cantidadTareasIniciadas);
            logger.warning("cantidadTareasFinalizadas :"+cantidadTareasFinalizadas);
            
            //comparar la cantidad y si estas cantidades son iguales se finalizo proceso,regresar true
            if(cantidadTareasIniciadas == 0 && cantidadTareasFinalizadas == 0){
                logger.warning("No existen tareas iniciadas y finalizadas");
            }else if(cantidadTareasIniciadas == cantidadTareasFinalizadas){
                logger.warning("Existe la misma cantidad de tareas iniciadas que finalizadas, regresar true");
                esProcesoFinalizado = Boolean.TRUE;
            }else{
                logger.warning("Cantidad de tareas iniciadas y finalisas no es la misma");
            }
        
        } catch (Exception ex) {
            logger.severe("Error en existeProcesoIniciado : ",ex);
        } 
        
        logger.warning("Fuera esProcesoFinalizado,return :"+esProcesoFinalizado);
        
        return esProcesoFinalizado;
    }

    /**
     * Returns the variable value for pIdOperacion.
     * @return variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }

    /**
     * Returns the variable value for pIdProceso.
     * @return variable value for pIdProceso
     */
    public Integer getpIdProceso() {
        return (Integer) ensureVariableManager().getVariableValue("pIdProceso");
    }

    /**
     * Sets <code>value</code> for variable pIdProceso.
     * @param value value to bind as pIdProceso
     */
    public void setpIdProceso(Integer value) {
        ensureVariableManager().setVariableValue("pIdProceso", value);
    }

    /**
     * Returns the variable value for pBanEsProceso.
     * @return variable value for pBanEsProceso
     */
    public Integer getpBanEsProceso() {
        return (Integer) ensureVariableManager().getVariableValue("pBanEsProceso");
    }

    /**
     * Sets <code>value</code> for variable pBanEsProceso.
     * @param value value to bind as pBanEsProceso
     */
    public void setpBanEsProceso(Integer value) {
        ensureVariableManager().setVariableValue("pBanEsProceso", value);
    }


    /**
     * Returns the variable value for pBanEsFinActividad.
     * @return variable value for pBanEsFinActividad
     */
    public Integer getpBanEsFinActividad() {
        return (Integer) ensureVariableManager().getVariableValue("pBanEsFinActividad");
    }

    /**
     * Sets <code>value</code> for variable pBanEsFinActividad.
     * @param value value to bind as pBanEsFinActividad
     */
    public void setpBanEsFinActividad(Integer value) {
        ensureVariableManager().setVariableValue("pBanEsFinActividad", value);
    }
}

