package org.bcie.fenix.common.model.vo;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.am.FenixAMImpl;
import org.bcie.fenix.common.model.am.FenixGestorDesembolsosAMImpl;
import org.bcie.fenix.common.model.vo.common.OperacionDatosSolicitudVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Mon Aug 29 10:25:14 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OperacionDatosSolicitudVOImpl extends ViewObjectImpl implements OperacionDatosSolicitudVO {
   
    private static ADFLogger logger = null;
    
    public static final String BUSCAR_OPERACION_PARA_SOLICITUD_VC = "OperacionDatosSolicitudMultiDatosVC";
    /*
    public static final String BUSCAR_POR_ID_OPERACION_VC = "OperacionDatosSolicitudVOBuscarPorIdOperacionVC";
    public static final String BUSCAR_POR_NOMBRE_OPERACION_VC = "OperacionDatosSolicitudVOBuscarPorNombreOperacionVC";
    public static final String BUSCAR_POR_RAZON_SOCIAL_CLIENTE_VC = "OperacionDatosSolicitudVOBuscarPorRazonSocialClienteVC";
    public static final String BUSCAR_POR_NUM_LINEA_CREDITO_VC = "OperacionDatosSolicitudVOBuscarPorNumLineacreditoVC";
    public static final String BUSCAR_POR_RESPONSABLE_OPERACION_VC = "OperacionDatosSolicitudVOBuscarPorResponsableOperacionVC";
    public static final String BUSCAR_POR_ID_PAIS_VC = "OperacionDatosSolicitudVOBuscarPorIdPais";
    public static final String BUSCAR_DESCRIPCION_PRODUCTO_VC = "OperacionDatosSolicitudVOBuscarPorDescripcionProductoVC";
    public static final String BUSCAR_POR_ID_ETAPA_VC = "OperacionDatosSolicitudVOBuscarPorIdEtapaVC";
    public static final String BUSCAR_POR_ESTATUS_VC = "OperacionDatosSolicitudVOBuscarPorEstatusVC";
    */
    public OperacionDatosSolicitudVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    /**
     * Método que recupera los rows de las operaciones con los siguientes criterios     
     */
      
      public void limpiarFilas(){        
            executeEmptyRowSet();        
        }
      
      
        
        /**
         * Método que recupera los rows de las operaciones con los siguientes criterios     * 
         * @param idOperacion
         */
        public Row buscarOperacionesParaCrearSolicitud(Long idOperacion, String nombreOperacion,String razonSocialCliente,String responsableOperacion,Integer paisCliente, String descripcionProducto, Integer etapa,  Integer estado, String numeroLinea ){
                    logger.warning("***Inicia metodo buscarOperacionesParaCrearSolicitud En operacionesDatosVOImp***");
                  
                    logger.warning("*** -Removiendo criterias aplicadas anteriormente- ***");
                    getViewCriteriaManager().removeApplyViewCriteriaName(BUSCAR_OPERACION_PARA_SOLICITUD_VC);  
                    getViewCriteriaManager().removeViewCriteria(BUSCAR_OPERACION_PARA_SOLICITUD_VC);
                    setpNumeroLineaCredito(numeroLinea);
                    executeQuery();
                    logger.warning("***Filas obtenidas sin filtro: " + getEstimatedRowCount());                                
                  
                    
                    Row rowOperacion = null;
                        
                    if(idOperacion == null && nombreOperacion == null && razonSocialCliente == null && responsableOperacion == null && paisCliente == null && descripcionProducto == null && etapa == null && estado == null && numeroLinea == null){                       
                        logger.warning("No se recibieron filtros para la consulta se mostraran todas las operaciones encontradas");
                        setpNumeroLineaCredito(numeroLinea);
                        executeQuery();
                       
                        logger.warning("Numero de operaciones encontradas : "+getEstimatedRowCount());
                       
                          if(getEstimatedRowCount() > 0){                               
                               validarOperacionesFormalizada(); 
                                  
                                  if(getCurrentRow() != null)
                                      rowOperacion = getCurrentRow();
                                
                                return rowOperacion;
                           }else{                                
                                return null;     
                           }                                               
                    }  
                                     
                                                                        
                try{    
                                                                    
                     this.setpIdOperacion(idOperacion);    
                       logger.warning("**->idOperacion"+idOperacion);                                            
                     this.setpNombreOperacion(nombreOperacion);
                       logger.warning("**->nombreOperacion"+nombreOperacion);                                             
                     this.setpRazonSocialCliente(razonSocialCliente); 
                       logger.warning("**->razonSocialCliente"+razonSocialCliente);                                                                                        
                     this.setpResponsableOperacion(responsableOperacion);
                       logger.warning("**->responsableOperacion"+responsableOperacion);                                             
                     this.setpIdPais(paisCliente);  
                       logger.warning("**->paisCliente"+paisCliente);                                              
                     this.setpDescripcionProducto(descripcionProducto);      
                       logger.warning("**->descripcionProducto"+descripcionProducto);                                                
                     this.setpIdEtapa(etapa); 
                       logger.warning("**->etapa"+etapa);                                        
                     this.setpEstado(estado);  
                       logger.warning("**->estado"+estado);
                     
                       
                        logger.warning("******* APLICANDO CRITERIA PARA BUSQUEDA DE OPERACION***********");
                        ViewCriteria vc1 = getViewCriteria(BUSCAR_OPERACION_PARA_SOLICITUD_VC);                       
                        applyViewCriteria(vc1);
                        setpNumeroLineaCredito(numeroLinea);
                        executeQuery();                    

                            logger.warning("***Filas obtenidas despues del filtro: " + getEstimatedRowCount());  
                    
                        if(getEstimatedRowCount() > 0){
                             validarOperacionesFormalizada();
                             
                                 if(getCurrentRow() != null){
                                        rowOperacion = getCurrentRow();
                                    }
                        }
 
                        }catch(Exception e){
                            logger.warning("*** Error al ejecutar la busqueda de las Operaiones x( ");                                    
                          e.printStackTrace();
                        }
                        
                  
                    logger.warning("***Termina metodo buscarOperacionesParaCrearSolicitud En operacionesDatosVOImp");
                    return rowOperacion;                                    
                }



        public void validarOperacionesFormalizada(){            
                logger.warning("Inf, inicia el metodo validarOperacionesFormalizada");
                logger.warning("Numero de operaciones encontradas : "+getEstimatedRowCount());
                  int bandera1 = 0;
                  
                  if(getEstimatedRowCount() > 0){       
                      
                       FenixGestorDesembolsosAMImpl gestorDesembolsosAMImpl = null;
                       FenixAMImpl fenixAMImpl = (FenixAMImpl) this.getRootApplicationModule();
                       gestorDesembolsosAMImpl =
                           (FenixGestorDesembolsosAMImpl) fenixAMImpl.getFenixGestorDesembolsosAM();

                       RowSetIterator iter = createRowSetIterator(null);      
                      OperacionDatosSolicitudVORowImpl row = null;
                      
                       while (iter.hasNext()) {                                  
                           row =  (OperacionDatosSolicitudVORowImpl) iter.next();
                             
                            Long idOper = (null == row.getAttribute("IdOperacion"))? null 
                                         : (Long)row.getAttribute("IdOperacion");
                                                      
                           Boolean operacionFormalizada = 
                                    gestorDesembolsosAMImpl.getValidarOperacionFormalizadaVO().validarOperacion(idOper);
                           
                           if(operacionFormalizada){
                                 if(bandera1 == 0){
                                        setCurrentRow(row); 
                                        bandera1 = 1;
                                    }                                       
                           }else{                               
                                  row.remove();
                               }
                           
                        }
                       iter.closeRowSetIterator();
                                                                                                                  
                   }else{                                
                       logger.warning("Inf, No se encontraron operaciones para validar");   
                    }                                               
                logger.warning("Inf, termina el metodo validarOperacionesFormalizada numero de registros en VO: "+getEstimatedRowCount());
            }


    /**
     * Returns the variable value for pIdOperacion.
     * @return variable value for pIdOperacion
     */
    public Long getpIdOperacion() {
        return (Long) ensureVariableManager().getVariableValue("pIdOperacion");
    }

    /**
     * Sets <code>value</code> for variable pIdOperacion.
     * @param value value to bind as pIdOperacion
     */
    public void setpIdOperacion(Long value) {
        ensureVariableManager().setVariableValue("pIdOperacion", value);
    }

    /**
     * Returns the variable value for pNombreOperacion.
     * @return variable value for pNombreOperacion
     */
    public String getpNombreOperacion() {
        return (String) ensureVariableManager().getVariableValue("pNombreOperacion");
    }

    /**
     * Sets <code>value</code> for variable pNombreOperacion.
     * @param value value to bind as pNombreOperacion
     */
    public void setpNombreOperacion(String value) {
        ensureVariableManager().setVariableValue("pNombreOperacion", value);
    }

    /**
     * Returns the variable value for pRazonSocialCliente.
     * @return variable value for pRazonSocialCliente
     */
    public String getpRazonSocialCliente() {
        return (String) ensureVariableManager().getVariableValue("pRazonSocialCliente");
    }

    /**
     * Sets <code>value</code> for variable pRazonSocialCliente.
     * @param value value to bind as pRazonSocialCliente
     */
    public void setpRazonSocialCliente(String value) {
        ensureVariableManager().setVariableValue("pRazonSocialCliente", value);
    }


    /**
     * Returns the variable value for pResponsableOperacion.
     * @return variable value for pResponsableOperacion
     */
    public String getpResponsableOperacion() {
        return (String) ensureVariableManager().getVariableValue("pResponsableOperacion");
    }

    /**
     * Sets <code>value</code> for variable pResponsableOperacion.
     * @param value value to bind as pResponsableOperacion
     */
    public void setpResponsableOperacion(String value) {
        ensureVariableManager().setVariableValue("pResponsableOperacion", value);
    }

    /**
     * Returns the variable value for pIdPais.
     * @return variable value for pIdPais
     */
    public Integer getpIdPais() {
        return (Integer) ensureVariableManager().getVariableValue("pIdPais");
    }

    /**
     * Sets <code>value</code> for variable pIdPais.
     * @param value value to bind as pIdPais
     */
    public void setpIdPais(Integer value) {
        ensureVariableManager().setVariableValue("pIdPais", value);
    }


    /**
     * Returns the variable value for pIdEtapa.
     * @return variable value for pIdEtapa
     */
    public Integer getpIdEtapa() {
        return (Integer) ensureVariableManager().getVariableValue("pIdEtapa");
    }

    /**
     * Sets <code>value</code> for variable pIdEtapa.
     * @param value value to bind as pIdEtapa
     */
    public void setpIdEtapa(Integer value) {
        ensureVariableManager().setVariableValue("pIdEtapa", value);
    }

    /**
     * Returns the variable value for pEstatus.
     * @return variable value for pEstatus
     */
    public String getpEstatus() {
        return (String) ensureVariableManager().getVariableValue("pEstatus");
    }

    /**
     * Sets <code>value</code> for variable pEstatus.
     * @param value value to bind as pEstatus
     */
    public void setpEstatus(String value) {
        ensureVariableManager().setVariableValue("pEstatus", value);
    }

    /**
     * Returns the variable value for pDescripcionProducto.
     * @return variable value for pDescripcionProducto
     */
    public String getpDescripcionProducto() {
        return (String) ensureVariableManager().getVariableValue("pDescripcionProducto");
    }

    /**
     * Sets <code>value</code> for variable pDescripcionProducto.
     * @param value value to bind as pDescripcionProducto
     */
    public void setpDescripcionProducto(String value) {
        ensureVariableManager().setVariableValue("pDescripcionProducto", value);
    }

    /**
     * Returns the variable value for pEstado.
     * @return variable value for pEstado
     */
    public Integer getpEstado() {
        return (Integer) ensureVariableManager().getVariableValue("pEstado");
    }

    /**
     * Sets <code>value</code> for variable pEstado.
     * @param value value to bind as pEstado
     */
    public void setpEstado(Integer value) {
        ensureVariableManager().setVariableValue("pEstado", value);
    }

    /**
     * Returns the bind variable value for pIdLinea.
     * @return bind variable value for pIdLinea
     */
    public String getpIdLinea() {
        return (String) getNamedWhereClauseParam("pIdLinea");
    }

    /**
     * Sets <code>value</code> for bind variable pIdLinea.
     * @param value value to bind as pIdLinea
     */
    public void setpIdLinea(String value) {
        setNamedWhereClauseParam("pIdLinea", value);
    }

    /**
     * Returns the bind variable value for pNumeroLineaCredito.
     * @return bind variable value for pNumeroLineaCredito
     */
    public String getpNumeroLineaCredito() {
        return (String) getNamedWhereClauseParam("pNumeroLineaCredito");
    }

    /**
     * Sets <code>value</code> for bind variable pNumeroLineaCredito.
     * @param value value to bind as pNumeroLineaCredito
     */
    public void setpNumeroLineaCredito(String value) {
        logger.warning("inside setpNumeroLineaCredito.");
        logger.warning("value: " + value);
        setNamedWhereClauseParam("pNumeroLineaCredito", value);
        this.executeQuery();
    }
}

