package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;

import org.bcie.fenix.common.model.vo.common.ObservacionCancelaVO;


// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Aug 04 10:50:51 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ObservacionCancelaVOImpl extends ViewObjectImpl implements ObservacionCancelaVO {
    /**
     * This is the default constructor (do not remove).
     */
    
    public static final ADFLogger LOGGER = ADFLogger.createADFLogger(ObservacionCancelaVOImpl.class);
    
    public ObservacionCancelaVOImpl() {
    }
    
    /**
    ???? * Metodo para almacenar respuesta de Liberar Garantias PC08Cierre
    ???? * @param idOperacion, cancelarObservacion
    ???? * @since 04/08/2016
    ???? * @by José Hernández Cruz
    ???? */  
    public void actualizarObservacionCancelar(oracle.jbo.domain.Number idOperacion, 
                                           String requiereLibGarantias){
        LOGGER.log(ADFLogger.WARNING, "Inside actualizarObservacionCancelar." );
        Row rowObservacionCancelar = null;
        rowObservacionCancelar = this.getRow(new Key(new Object[] {idOperacion}));
        oracle.jbo.domain.Number liberarGarantia;
        if(rowObservacionCancelar != null){
            LOGGER.log(ADFLogger.WARNING, "Row diferente a null.");
            if(requiereLibGarantias.equals("Si")){
                liberarGarantia = new oracle.jbo.domain.Number (1);
            }
            else{
                liberarGarantia = new oracle.jbo.domain.Number (0);
            }
            LOGGER.log(ADFLogger.WARNING, "Valor de liberar garantias." + liberarGarantia);
            rowObservacionCancelar.setAttribute("RequiereLibGarantias", liberarGarantia);
            getDBTransaction().commit();
        }else{
            LOGGER.log(ADFLogger.ERROR, "Error el rowObservacionCancelar es nulo.");
        }
        this.executeQuery();
    }
}

