package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.domain.Number;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.vo.common.JustificacionEnvioOperacion;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Thu Nov 24 14:44:56 VET 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class JustificacionEnvioOperacionImpl extends ViewObjectImpl implements JustificacionEnvioOperacion {

    private static final ADFLogger LOGGER = ADFLogger.createADFLogger(JustificacionEnvioOperacionImpl.class);

    /**
     * This is the default constructor (do not remove).
     */
    public JustificacionEnvioOperacionImpl() {
    }

    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }

    /**
     * Returns the variable value for idOperacionBind.
     * @return variable value for idOperacionBind
     */
    public Number getidOperacionBind() {
        return (Number) ensureVariableManager().getVariableValue("idOperacionBind");
    }

    /**
     * Sets <code>value</code> for variable idOperacionBind.
     * @param value value to bind as idOperacionBind
     */
    public void setidOperacionBind(Number value) {
        ensureVariableManager().setVariableValue("idOperacionBind", value);
    }


    /**Actualiza la justificacion de envio para una operacion
     */
    public void actualizarJustificacionEnvioOperacion(Long idOperacion, String justificacionEnvio) {
        LOGGER.entering(this.getClass().getName(), "actualizarJustificacionEnvioOperacion");
        LOGGER.warning("Ingresa metodo actualizarJustificacionEnvioOperacion");
        try {
            Row rowJustificacion = null;
            rowJustificacion = this.getRow(new Key(new Object[] {
                                                    new oracle.jbo.domain.Number(idOperacion)}));
            
                LOGGER.log(ADFLogger.WARNING, "idOperacion por actualizar. " + rowJustificacion.getAttribute("IdOperacion"));
                rowJustificacion.setAttribute("JustificacionEnvio", justificacionEnvio);
                getDBTransaction().commit();            
        } catch (Exception e) {
            LOGGER.log(ADFLogger.ERROR,
                       "Error en actualizarJustificacionEnvioOperacion " + e.getClass() + ":" + e.getMessage());
        } finally {
            //Siempre removemos el criterio de busqueda
            this.getViewCriteriaManager().removeApplyViewCriteriaName("JustificacionEnvioOperacionCriteria");
        }
        LOGGER.warning("Finaliza metodo actualizarJustificacionEnvioOperacion");
        LOGGER.exiting(this.getClass().getName(), "actualizarJustificacionEnvioOperacion");
    }

    public void initJustificacionEnvioOperacion(Long idOperacion) {
        LOGGER.entering(this.getClass().getName(), "initJustificacionEnvioOperacion");
        this.clearCache();
        try {
            ViewCriteria criteria = null;
            criteria = this.getViewCriteriaManager().getViewCriteria("JustificacionEnvioOperacionCriteria");
            criteria.ensureVariableManager().setVariableValue("idOperacionBind", idOperacion);
            this.applyViewCriteria(criteria);
            this.executeQuery();
        } catch (Exception e) {
            LOGGER.log(ADFLogger.ERROR,
                       "Error en actualizarJustificacionEnvioOperacion " + e.getClass() + ":" + e.getMessage());
        } finally {
            //Siempre removemos el criterio de busqueda
            this.getViewCriteriaManager().removeApplyViewCriteriaName("JustificacionEnvioOperacionCriteria");
        }
        LOGGER.exiting(this.getClass().getName(), "initJustificacionEnvioOperacion");
    }

}

