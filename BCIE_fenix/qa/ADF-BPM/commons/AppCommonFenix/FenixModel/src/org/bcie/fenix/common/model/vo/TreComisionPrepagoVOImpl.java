package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.sql.Timestamp;

import java.util.HashMap;
import java.util.Map;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.Row;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.NameValuePairs;
import oracle.jbo.RowSetIterator;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.TreComisionPrepagoVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Oct 11 12:23:46 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class TreComisionPrepagoVOImpl extends ViewObjectImpl implements TreComisionPrepagoVO {
    /**
     * This is the default constructor (do not remove).
     */
    private static ADFLogger logger = null;
    
        public TreComisionPrepagoVOImpl() {
            if(logger == null){
                logger = ADFLogger.createADFLogger(this.getClass());
            }
        }
        
        public Long buscarComisionByIdPrepago(Long id){
            Long idComision = null;
            if(id != null) {
                Row row = this.getRow(new Key(new Object[]{id.longValue()}));
                if(row != null){
                    logger.warning("Asigna Current Row");
                    setCurrentRow(row);
                    if(null != row.getAttribute("IdComision")){
                    idComision = (Long)row.getAttribute("IdComision");
                    }else{
                        logger.log(ADFLogger.WARNING, "Valor de id Comision es null.");
                    }
                }else{
                    logger.log(ADFLogger.WARNING, "No se encontro registros.");
                }
            }
            return idComision;
        }
        public Long insertarRowCargoPrepago(Long idPrepago, Long idComision){
                                                                                            
            logger.log(ADFLogger.WARNING, "INTO insertarRowCargoPrepago");
            
            Row rowComisionPrepago = null;
            
            oracle.jbo.domain.Number idComisionPrepago = null;
            SequenceImpl sequenceComisionPrepago = null;
            NameValuePairs nvpComisionPrepago = null;
            
            try{
                sequenceComisionPrepago = new SequenceImpl("TRE_COMISION_PREPAGO_SEQ", getDBTransaction());
                idComisionPrepago = sequenceComisionPrepago.getSequenceNumber();
                nvpComisionPrepago = new NameValuePairs();
                
                nvpComisionPrepago.setAttribute("Id",idComisionPrepago.longValue());
                nvpComisionPrepago.setAttribute("IdPrepago",idPrepago);
                nvpComisionPrepago.setAttribute("IdComision",idComision);
                nvpComisionPrepago.setAttribute("FechaRegistro", new java.sql.Timestamp(System.currentTimeMillis()));
                nvpComisionPrepago.setAttribute("BanEstatus", FenixModelConstants.BANESTATUS_TRUE);
                
                rowComisionPrepago = this.createAndInitRow(nvpComisionPrepago);
                getDBTransaction().commit();
            }catch(Exception e){
                logger.log(ADFLogger.ERROR, "Error en insertarRowCargoPrepago : "+e.getMessage());
                getDBTransaction().rollback();
                //return null;
            }
            this.executeQuery();
            return idComisionPrepago.longValue();
        }
        
    public Long obtenerComisionPrepagoByIdPrepago(Long idPrepago){
        
        logger.log(ADFLogger.WARNING, "INTO  obtenerComisionPrepagoByIdPrepago : ");
        //variable Map que se va retornar
        Long idComision = null;
        Long id = null;
        
        try {
            ViewCriteria criteria =this.getViewCriteriaManager().getViewCriteria("TreComisionPrepagoVOCriteria");
            criteria.ensureVariableManager().setVariableValue("pIdPrepago", idPrepago);
            this.applyViewCriteria(criteria);
            this.executeQuery();
            
            RowSetIterator rowsCategoriaVo = createRowSetIterator(null);
            rowsCategoriaVo.reset();
                while (rowsCategoriaVo.hasNext()) {
                    TreComisionPrepagoVORowImpl rowL = (TreComisionPrepagoVORowImpl) rowsCategoriaVo.next();
                    if(null != rowL.getAttribute("Id")){
                        id = (Long)rowL.getAttribute("Id");
                    }else{
                        logger.log(ADFLogger.WARNING, "Valor Id es nulo.");
                    }
                    if(null != rowL.getAttribute("IdComision")){
                        idComision = (Long)rowL.getAttribute("IdComision");
                    }else{
                        logger.log(ADFLogger.WARNING, "Valor IdComision es nulo.");
                    }
                        logger.warning("Valor idComision: " + idComision);
                    }
            rowsCategoriaVo.closeRowSetIterator();

        } catch (Exception ex) {
            logger.log(ADFLogger.ERROR, "Error en obtenerComisionPrepagoByIdPrepago " + ex.getClass() + ":" + ex.getMessage());
        } finally {
            //This takes care of removing the applied VC.
            this.getViewCriteriaManager().removeApplyViewCriteriaName("TreComisionPrepagoVOCriteria");
        }
        return idComision;
    }
    /**
     * Returns the variable value for pIdPrepago.
     * @return variable value for pIdPrepago
     */
    public Long getpIdPrepago() {
        return (Long) ensureVariableManager().getVariableValue("pIdPrepago");
    }

    /**
     * Sets <code>value</code> for variable pIdPrepago.
     * @param value value to bind as pIdPrepago
     */
    public void setpIdPrepago(Long value) {
        ensureVariableManager().setVariableValue("pIdPrepago", value);
    }
}

