package org.bcie.fenix.common.model.vo;

import java.math.BigDecimal;

import java.math.RoundingMode;

import java.sql.Timestamp;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.Key;
import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.ViewCriteria;
import oracle.jbo.server.SequenceImpl;
import oracle.jbo.server.ViewObjectImpl;

import static org.bcie.fenix.common.model.FenixModelConstants.BANESTATUS_TRUE;
import org.bcie.fenix.common.model.vo.common.DetallePenalidadVO;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Oct 05 13:51:38 CDT 2016
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class DetallePenalidadVOImpl extends ViewObjectImpl implements DetallePenalidadVO {
    
    private static ADFLogger logger = null;
    
    /**
     * This is the default constructor (do not remove).
     */
    public DetallePenalidadVOImpl() {
        if(logger == null){
            logger = ADFLogger.createADFLogger(this.getClass());
        }
    }
    
    public Row buscarDetallePenalidadPorId(Long id){
        logger.warning("Dentro de buscarDetallePenalidadPorId idDetallePenalidad :"+id);
        Row row = null;
        ViewCriteria criteria = null;
        try{                                                    
            this.setvarIdDetallePenalidad(id);                                      
            criteria = getViewCriteria("DetallePenalidadPorId");                       
            this.applyViewCriteria(criteria);
            this.executeQuery();
            for(Row rowAux : this.getAllRowsInRange()){
                row = rowAux;
            }
        }catch(Exception e){
            logger.severe("Error al ejecutar el criteria DetallePenalidadPorId : ",e);                                    
        }finally{
            getViewCriteriaManager().removeApplyViewCriteriaName("DetallePenalidadPorId");  
        }    
        logger.warning("Fuera de buscarDetallePenalidadPorId");
        return row;
    }
    
    public Boolean eliminarRowDetallePenalidad(Long id){
        logger.log(ADFLogger.WARNING, "Into eliminarRowDetallePenalidad.");
        Boolean resultado = null;
        Row detallePenalidadRow = null;
        detallePenalidadRow = this.buscarDetallePenalidadPorId(id);
        if(detallePenalidadRow != null) {
            detallePenalidadRow.remove();
            getDBTransaction().commit();
            resultado = Boolean.TRUE;
        } else {
            logger.log(ADFLogger.WARNING, "No record found in DetallePenalidadVO with id : "+id);
            resultado = Boolean.FALSE;
        } 
        logger.log(ADFLogger.WARNING, "eliminarRowDetallePenalidad return :"+resultado);
        return resultado;
    }
    
    public Long insertarRowDetallePenalidad(Long idTrePrepagoContrato, Timestamp fechaInicio,
                                            Timestamp fechaFin, String fraccionLibor, BigDecimal intereses,
                                            BigDecimal montoPenalidad, BigDecimal plazo, BigDecimal spread,
                                            BigDecimal tasaPrepago) {
        
        logger.warning("INTO insertarRowDetallePenalidad.");
        Long idDetallePenalidadSeq = null;
        Row rowDetallePenalidad = null;
        
        oracle.jbo.domain.Number idDetallePenalidad = null;
        SequenceImpl sequenceDetallePenalidad = null;
        NameValuePairs nvpDetallePenalidad = null;
        
        try {
            sequenceDetallePenalidad = new SequenceImpl("DETALLE_PENALIDAD_SEQ", getDBTransaction());
            idDetallePenalidad = sequenceDetallePenalidad.getSequenceNumber();
            
            idDetallePenalidadSeq = idDetallePenalidad.longValue();
            
            if (null == tasaPrepago) {
                tasaPrepago = BigDecimal.ZERO;
            }
            
            nvpDetallePenalidad = new NameValuePairs();
            nvpDetallePenalidad.setAttribute("Id", idDetallePenalidadSeq);
            nvpDetallePenalidad.setAttribute("IdTrePrepagoContrato", idTrePrepagoContrato);
            nvpDetallePenalidad.setAttribute("FechaInicio", fechaInicio);
            nvpDetallePenalidad.setAttribute("FechaFin", fechaFin);
            nvpDetallePenalidad.setAttribute("FraccionLibor", fraccionLibor);
            nvpDetallePenalidad.setAttribute("Intereses", (intereses != null ? intereses.setScale(2, RoundingMode.CEILING): null));
            nvpDetallePenalidad.setAttribute("MontoPenalidad", (montoPenalidad != null ? montoPenalidad.setScale(2, RoundingMode.HALF_UP) : null));
            nvpDetallePenalidad.setAttribute("Plazo", (plazo != null ? plazo.setScale(2, RoundingMode.CEILING) : null));
            nvpDetallePenalidad.setAttribute("Spread", (spread != null ? spread.setScale(2, RoundingMode.CEILING) : null));
            nvpDetallePenalidad.setAttribute("TasaPrepago", tasaPrepago.setScale(5, RoundingMode.CEILING));
            
            rowDetallePenalidad = this.createAndInitRow(nvpDetallePenalidad);
            //getDBTransaction().commit();
        } catch (Exception e) {
            logger.warning("Error en insertarRowDetallePenalidad.", e);
            //getDBTransaction().rollback();
        }
        this.executeQuery();
        
        return idDetallePenalidadSeq;
    }

    /**
     * Returns the variable value for varIdDetallePenalidad.
     * @return variable value for varIdDetallePenalidad
     */
    public Long getvarIdDetallePenalidad() {
        return (Long) ensureVariableManager().getVariableValue("varIdDetallePenalidad");
    }

    /**
     * Sets <code>value</code> for variable varIdDetallePenalidad.
     * @param value value to bind as varIdDetallePenalidad
     */
    public void setvarIdDetallePenalidad(Long value) {
        ensureVariableManager().setVariableValue("varIdDetallePenalidad", value);
    }
}
