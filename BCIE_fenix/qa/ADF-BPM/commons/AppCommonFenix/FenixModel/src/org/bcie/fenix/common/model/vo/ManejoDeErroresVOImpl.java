package org.bcie.fenix.common.model.vo;

import java.sql.ResultSet;

import java.util.ArrayList;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.NameValuePairs;
import oracle.jbo.Row;
import oracle.jbo.RowSetIterator;
import oracle.jbo.server.ViewObjectImpl;
import oracle.jbo.server.ViewRowImpl;
import oracle.jbo.server.ViewRowSetImpl;

import org.bcie.fenix.common.model.FenixModelConstants;
import org.bcie.fenix.common.model.vo.common.ManejoDeErroresVO;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jul 04 20:36:53 CDT 2017
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class ManejoDeErroresVOImpl extends ViewObjectImpl implements ManejoDeErroresVO {
   
    private static ADFLogger logger = null;
   
    public ManejoDeErroresVOImpl() {
        
        if (logger == null) {
            logger = ADFLogger.createADFLogger(this.getClass());
        }
        
    }

    public void agregarError(String codigoError, String descripcionError){        
    logger.warning("*Inf, Inicia metodo agregarError.");
        Row fila = null;
        NameValuePairs nvpFila = null;        
        nvpFila = new NameValuePairs();
        
        Long id =  (getEstimatedRowCount() + 1L);
        
        nvpFila.setAttribute("Id", id);
        nvpFila.setAttribute("CodigoError", codigoError);
        nvpFila.setAttribute("DescripcionError", descripcionError);
                  
        fila = this.createAndInitRow(nvpFila);
        this.insertRow(fila);
    
    logger.warning("*Inf, termina metodo agregarError.");    
    }

    public Row[] consultarErrores(){
      logger.warning("*Inf, Inicia metodo consultarErrores.");     
        Long count = getEstimatedRowCount();
        Row[] erroresList = null;
        logger.warning("*Inf, Numero de errores recuperados: "+getEstimatedRowCount());
        
        if(getEstimatedRowCount() > 0){
                 
            int i = count.intValue();        
            erroresList = new Row[i];
            int contador = 0;
            
            RowSetIterator iteratorManejoErrores = null;
            ManejoDeErroresVORowImpl ErrorRow = null;
            
            iteratorManejoErrores = this.createRowSetIterator(null);
            iteratorManejoErrores.reset();
            
            logger.warning("Inf, recuperando errores ...");
            
            while (iteratorManejoErrores.hasNext()) {
                ErrorRow = (ManejoDeErroresVORowImpl) iteratorManejoErrores.next();
                logger.warning("Inf, agregando error: " + ErrorRow.getAttribute("Id"));
                erroresList[contador] = ErrorRow;
                contador = contador + 1;
            }
            iteratorManejoErrores.closeRowSetIterator();
        }  
        
      logger.warning("*Inf, termina metodo consultarErrores."); 
    return erroresList;
    }   
    
    public void limpiarManejoErroresVO(){
        logger.warning("*Inf, limpiando consultarErroresVO.");
        executeQuery();        
    }



    /**
     * executeQueryForCollection - overridden for custom java data source support.
     */
    @Override
    protected void executeQueryForCollection(Object qc, Object[] params, int noUserParams) {
        super.executeQueryForCollection(qc, params, noUserParams);
    }

    /**
     * hasNextForCollection - overridden for custom java data source support.
     */
    @Override
    protected boolean hasNextForCollection(Object qc) {
        boolean bRet = super.hasNextForCollection(qc);
        return bRet;
    }

    /**
     * createRowFromResultSet - overridden for custom java data source support.
     */
    @Override
    protected ViewRowImpl createRowFromResultSet(Object qc, ResultSet resultSet) {
        ViewRowImpl value = super.createRowFromResultSet(qc, resultSet);
        return value;
    }

    /**
     * getQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getQueryHitCount(ViewRowSetImpl viewRowSet) {
        long value = super.getQueryHitCount(viewRowSet);
        return value;
    }

    /**
     * getCappedQueryHitCount - overridden for custom java data source support.
     */
    @Override
    public long getCappedQueryHitCount(ViewRowSetImpl viewRowSet, Row[] masterRows, long oldCap, long cap) {
        long value = super.getCappedQueryHitCount(viewRowSet, masterRows, oldCap, cap);
        return value;
    }
}

