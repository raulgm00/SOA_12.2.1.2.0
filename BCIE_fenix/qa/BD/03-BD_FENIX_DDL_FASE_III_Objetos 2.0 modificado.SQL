--
-- Create Schema Script 
--   Database Version   : 11.2.0.4.0 
--   Toad Version       : 10.0.0.41 
--   DB Connect String  : 172.16.49.160:1523/BCIEQ10G.WORLD 
--   Schema             : FENIX 
--   Script Created by  : FENIX 
--   Script Created at  : 21/02/2018 02:19:55 p.m. 
--   Physical Location  :  
--   Notes              :  
--

-- Object Counts: 
--   Functions: 11      Lines of Code: 568 
--   Packages: 7        Lines of Code: 152 
--   Package Bodies: 7  Lines of Code: 2311 
--   Procedures: 37 -1 = 36     Lines of Code: 4506 
--   Triggers: 75 - 1 = 74 
--   Views: 45 - 1 = 44          




CREATE OR REPLACE VIEW VCA_CARGO_PRODUCTO
AS 
SELECT T1.COMPONENTE, T1.PRODUCTO, T1.DESCRIPCION AS DESCRIPCION_COMISION, T3.ID AS ID_TCA_COMISION, T3.Descripcion_Corta AS IDENTIFICADOR
		FROM middle.FC_MV_PRODUCTO_CARGO T1
		LEFT JOIN TRE_TCA_COMISION_COMPONENTE T2 ON T1.Componente = T2.COMPONENTE 
		LEFT JOIN TCA_COMISION  T3 ON  T2.ID_TCA_COMISION = T3.ID 
		ORDER BY  2, 1;


CREATE OR REPLACE VIEW VCA_COMISION_FLEXCUBE
AS 
SELECT Codigo, Descripcion, Codigo_Producto, Tipo_Tasa, Componente_Principal 
FROM middle.fc_mv_Components
WHERE Componente_Principal = 'Y';


CREATE OR REPLACE VIEW VCA_COMPONENTE_DESEMBOLSO
AS 
SELECT Codigo, Descripcion, Codigo_Producto, Tipo_Tasa, Componente_Principal 
	FROM middle.fc_mv_Components;


CREATE OR REPLACE VIEW VCA_CTA_CONTABLE_PASIVA
AS 
SELECT  ACCOUNT, AC_DESC, AC_GL_CCY, AC_CLASS
		FROM MIDDLE.FC_MV_CUENTAS 		
		WHERE AC_CLASS = 'CONTA' AND ACCOUNT LIKE '%';


CREATE OR REPLACE VIEW VCA_CUENTA_CLIENTE
AS 
SELECT CUST_AC_NO, CUST_NO, CURRENCY, ACCOUNT_CLASS 
		FROM middle.fc_v_Cuenta_Cliente;


CREATE OR REPLACE VIEW VCA_DESTINO
AS 
Select CODIGO_DESTINO, NOMBRE_DESTINO, ESTADO 
		From middle.fc_v_Destino where ESTADO = 'A';


CREATE OR REPLACE VIEW VCA_DIAS_FERIADOS
AS 
SELECT CODIGO_MONEDA, ANIO, MES, DIAS FROM middle.FC_MV_MONEDA_CALENDARIO;


CREATE OR REPLACE VIEW VCA_ESTADO_BUSQUEDA
AS 
SELECT 0 AS ID_ESTADO,'No realizada' Estado_Busqueda FROM DUAL
    UNION ALL
    SELECT 1 AS ID_ESTADO,'Realizada sin hallazgo' Estado_Busqueda FROM DUAL
    UNION ALL
    SELECT 2 AS ID_ESTADO,'Realizada con hallazgo' Estado_Busqueda FROM DUAL;


CREATE OR REPLACE VIEW VCA_ESTADO_DECLARACION
AS 
SELECT 
  CODIGO_ESTADO AS ID_ESTADO,
  DESCRIPCION AS DESCRIPCION_CORTA,
  ESTADO AS ESTADO,
  SECUENCIA_ESTADO AS SECUENCIA_ESTADO
  FROM MIDDLE.LA_DECLARACION_ESTADO
  WHERE ESTADO <> 'I';


CREATE OR REPLACE VIEW VCA_FONDO
AS 
SELECT MIS_CLASS, MIS_CODE, CODE_DESC, ACTIVE
		FROM MIDDLE.FC_V_MIS_CODES
		WHERE MIS_CLASS ='FONDO'
			AND ACTIVE='A'
			AND MIS_CODE IN('1','7','10','25','57', '98');


CREATE OR REPLACE VIEW VCA_FONDO_DESEMBOLSO
AS 
SELECT MIS_CLASS, MIS_CODE, CODE_DESC, ACTIVE 
		FROM MIDDLE.FC_V_MIS_CODES WHERE MIS_CLASS='FONDO' AND ACTIVE='A'
		AND MIS_CODE IN('1', '7', '8', '10', '11', '25', '26', '36', '38', '40', '43', '44', '46', '47', '48', '49', '50', '51', '52',  '53', '54', '55', '56', '57', '58', '60', '98', '99')
		ORDER BY 2;


CREATE OR REPLACE VIEW VCA_FONDO_DESEMBOLSO_CLIENTE
AS 
SELECT DISTINCT VCD.CODIGO_FONDO,  VFD.CODE_DESC, VCD.CODIGO_CLIENTE
		FROM MIDDLE.DW_V_CONTRACTS  VCD
		INNER JOIN MIDDLE.FC_V_MIS_CODES VFD ON VCD.CODIGO_FONDO =  VFD.MIS_CODE
		WHERE	VFD.MIS_CLASS='FONDO' AND
				VFD.ACTIVE='A'
    ORDER BY 2;


CREATE OR REPLACE VIEW VCA_FUENTE
AS 
Select LIN.Codigo_Linea_Pasiva as ID 
		, LIN.Descrip_Linea_Pasiva || ' (' || LIN.Codigo_Linea_Pasiva || ')' as DESCRIPCION 
		, LIN.Monto_Disponible as MONTO_DISPONIBLE
		, LIN.Fecha_Vencimiento as FECHA_VENCIMIENTO
		, LIN.Moneda as MONEDA
		, LIN.Codigo_Fondo as CODIGO_FONDO
		, LIN.Codigo_Cliente as CODIGO_CLIENTE
		, LIN.Es_Externo
		From middle.ar_v_Linea_Pasiva LIN
		Where LIN.Fecha_Vencimiento >= SYSDATE;


CREATE OR REPLACE VIEW VCA_LIMITE_LINEA_FINANCIERA
AS 
SELECT CODIGO_LINEA_FINANCIERA, CODIGO_LIMITE, LIMITE, LISTALINEAFINANCIERA, LISTAMONEDA, CONCENTRACION_PAIS, DESCRIPCION  
		FROM middle.lgc_v_Limite_x_Linea_Finan;


CREATE OR REPLACE VIEW VCA_PAIS_DETALLE
AS 
SELECT CAT.ID AS ID_PAIS,
  CAT.DESCRIPCION_CORTA AS DESCRIPCION_PAIS,
  CAT.COD_EXTERNO AS CODIGO_ISO,
  (CASE CAT.ID WHEN 1 THEN '320'
  WHEN 2 THEN '220'
  WHEN 3 THEN '340'
  WHEN 4 THEN '558'
  WHEN 5 THEN '188'
  WHEN 6 THEN '591'
  WHEN 7 THEN '032'
  WHEN 19 THEN '724'
  WHEN 21 THEN '484'
  WHEN 35 THEN '170'
  WHEN 36 THEN '158'
  WHEN 937 THEN '214'
  WHEN 938 THEN '84'
  ELSE 'No DISPONIBLE' END)
  AS NUMERO_ISO,
  (CASE CAT.ID WHEN 1 THEN '14°40' || Chr(39) || 'N'
  WHEN 2 THEN '13°40' || Chr(39) || 'N'
  WHEN 3 THEN '14°05' || Chr(39) || 'N'
  WHEN 4 THEN '12°06' || Chr(39) || 'N'
  WHEN 5 THEN '09°55' || Chr(39) || 'N'
  WHEN 6 THEN '09°00' || Chr(39) || 'N'
  WHEN 7 THEN '36°30' || Chr(39) || 'S'
  WHEN 19 THEN '14°40' || Chr(39) || 'N'
  WHEN 21 THEN '14°40' || Chr(39) || 'N'
  WHEN 35 THEN '14°40' || Chr(39) || 'N'
  WHEN 36 THEN '14°40' || Chr(39) || 'N'
  WHEN 937 THEN '14°40' || Chr(39) || 'N'
  WHEN 938 THEN '14°40' || Chr(39) || 'N'
  ELSE 'NO DIPONIBLE' END)
  AS LATITUD,
  (CASE CAT.ID WHEN 1 THEN '90°22' || Chr(39) || 'W'
  WHEN 2 THEN '89°10' || Chr(39) || 'W'
  WHEN 3 THEN '87°14' || Chr(39) || 'W'
  WHEN 4 THEN '86°20' || Chr(39) || 'W'
  WHEN 5 THEN '84°02' || Chr(39) || 'W'
  WHEN 6 THEN '79°25' || Chr(39) || 'W'
  WHEN 7 THEN '60°00' || Chr(39) || 'W'
  WHEN 19 THEN '14°40' || Chr(39) || 'W'
  WHEN 21 THEN '14°40' || Chr(39) || 'W'
  WHEN 35 THEN '14°40' || Chr(39) || 'W'
  WHEN 36 THEN '14°40' || Chr(39) || 'N'
  WHEN 937 THEN '14°40' || Chr(39) || 'N'
  WHEN 938 THEN '14°40' || Chr(39) || 'N'
  ELSE 'NO DISPONIBLE' END)
  AS LONGITUD,
  (CASE CAT.ID WHEN 1 THEN 14.6686259073859
  WHEN 2 THEN 13.704698631091
  WHEN 3 THEN 14.0086963706346
  WHEN 4 THEN 12.0715526632745
  WHEN 5 THEN 9.87145199730054
  WHEN 6 THEN 9.03700289846942
  WHEN 7 THEN -34.7054934102254
  WHEN 19 THEN 40.3800284025118
  WHEN 21 THEN 19.3526108943786
  WHEN 35 THEN 4.71877755124986
  WHEN 36 THEN 24.996015742094
  WHEN 937 THEN 19.373340713364
  WHEN 938 THEN 17.1827790564318
  ELSE 0 END)
  AS LATITUD_DECIMAL,
  (CASE CAT.ID WHEN 1 THEN -90.472412109375
  WHEN 2 THEN -89.2144775390625
  WHEN 3 THEN -87.176513671875
  WHEN 4 THEN -86.209716796875
  WHEN 5 THEN -84.078369140625
  WHEN 6 THEN -79.332275390625
  WHEN 7 THEN -58.4033203125
  WHEN 19 THEN -3.66943359375
  WHEN 21 THEN -99.07470703125
  WHEN 35 THEN -73.9599609375
  WHEN 36 THEN 121.607666015625
  WHEN 937 THEN -70.6640625
  WHEN 938 THEN -88.70361328125
  ELSE 0 END)
  AS LONGITUD_DECIMAL
  FROM FENIX.CAT_PAISES CAT;


CREATE OR REPLACE VIEW VCA_PLAZO_COMPONENTE
AS 
SELECT CODIGO_COMPONENTE, CODIGO_COMPONENTE_FLEXCUBE, CODIGO_LINEA_FINANCIERA, PLAZO, TIPO_PLAZO
		FROM  middle.lgc_v_Plazo_Permitido_Comp;


CREATE OR REPLACE VIEW VCA_PROGRAMA
AS 
SELECT CODIGO_LINEA_FINANCIERA, DESCRIPCION, ACTIVO 
		FROM MIDDLE.FC_V_LINEA_FINANCIERA
		ORDER BY 1;


CREATE OR REPLACE VIEW VCA_RIESGO
AS 
SELECT CODIGO_TIPO_RIESGO AS ID_TIPO_RIESGO,
         DESCRIPCION AS DESCRIPCION_CORTA,
         ESTADO AS ESTADO,
         MESES_VENCIMIENTO AS MESES_VENCIMIENTO
FROM MIDDLE.LA_TIPO_RIESGO;


CREATE OR REPLACE VIEW VCA_TASAS_DESEMBOLSO_FLEXCUBE
AS 
SELECT  DESCRIPCION || '(' || CODIGO  || ')' AS DESCRIPCION_TASA, CODIGO, DESCRIPCION, CODIGO_MONEDA, CODIGO_BRANCH, VALOR_ACTUAL, FECHA_EFECTIVA, AUTORIZADO, REGISTRO
		FROM MIDDLE.FC_V_TASA WHERE REGISTRO='O' AND AUTORIZADO= 'A' ORDER BY 1;


CREATE OR REPLACE VIEW VCA_TASAS_FLEXCUBE
AS 
SELECT  VTH.CODIGO,
				VTH.DESCRIPCION,
				VTH.CODIGO_MONEDA,
				VTH.FECHA_EFECTIVA,
				VTH.VALOR_ACTUAL
		FROM (SELECT VTH.CODIGO,
					 VT.Descripcion,
					 VTH.CODIGO_MONEDA,
					 VTH.FECHA_EFECTIVA,
					 VTH.VALOR_ACTUAL
			  FROM MIDDLE.FC_V_TASA_HISTORICA VTH
			  LEFT JOIN MIDDLE.FC_V_TASA VT
			  ON VT.Codigo = VTH.Codigo AND VT.Codigo_Moneda = VTH.Codigo_Moneda) VTH
		WHERE VTH.Codigo IN ('1002', '1104')
		ORDER BY 1, 2;


CREATE OR REPLACE VIEW VCA_TASAS_SPREAD_DESEM_FLEX
AS 
SELECT DESCRIPCION || '(' || CODIGO  || ')' AS DESCRIPCION_TASA,
		   CODIGO,
		   DESCRIPCION,
		   CODIGO_MONEDA,
		   CODIGO_BRANCH,
		   VALOR_ACTUAL,
		   FECHA_EFECTIVA,
		   AUTORIZADO,
		   REGISTRO
	  FROM middle.fc_v_Tasa, middle.fc_v_udtm_lov 
	 WHERE REGISTRO = 'O'      
	   AND AUTORIZADO = 'A'  
	   AND CODIGO = LOV 
	 ORDER BY 1;


CREATE OR REPLACE VIEW VCA_TRANSFERENCIA_CTAS_BCIE
AS 
Select CUENTA_NOSTRO, DESCRIPCION AS NOMBRE_CUENTA, MONEDA, CLIENTE, NOMBRE_CLIENTE AS BANCO, NUMERO_CUENTA, CODIGO_PAIS, CODIGO_BIC 
		From  middle.fc_v_Cuentas_Nostro 
		order by CLIENTE;


CREATE OR REPLACE VIEW VCA_TRAT_DIAS
AS 
SELECT 'IGN' AS CODIGO_EXTERNO, 'Ignorar' DESCRIPCION FROM DUAL
    UNION ALL
    SELECT 'FWD' AS CODIGO_EXTERNO, 'Mover adelante' DESCRIPCION FROM DUAL
    UNION ALL
    SELECT 'BCK' AS CODIGO_EXTERNO, 'Mover atrás' DESCRIPCION FROM DUAL;


CREATE OR REPLACE VIEW VTA_CAPITAL_NO_VENCIDO
AS 
SELECT calc.Contract_Ref_No, calc.basis_amount,VCO.OPERACION
		FROM middle.fc_v_Contract_ICCF_Calc calc, VTA_CONTRATO_DESEMBOLSO VCO
        WHERE calc.Contract_Ref_No = VCO.NUMERO_CONTRATO
        AND calc.Component LIKE '%INT'
        AND calc.start_date = (
			SELECT MAX(calc2.start_date)
            FROM middle.fc_v_Contract_ICCF_Calc calc2, middle.fc_v_Fecha_Sistema  
            WHERE calc2.contract_ref_no = calc.contract_ref_no 
            AND calc2.component = calc.component
			--  and calc2.start_date<NVL(:P_F_PREPAGO,calc.start_date)
            AND calc2.schedule_date > today
		);


CREATE OR REPLACE VIEW VTA_CAPITAL_VENCIDO
AS 
SELECT CONTRACT_REF_NO, PRINCIPAL_OUTSTANDING_BAL, CURRENT_FACE_VALUE, LCY_PRINCIPAL_OUTSTANDING_BAL, COUNTERPARTY, USER_REF_NO
		FROM MIDDLE.fc_v_contract_balance;


CREATE OR REPLACE VIEW VTA_COBERTURAS
AS 
SELECT CONTRATO_CUBIERTO AS CONTRATO_DESEMBOLSO, NUMERO_CONTRATO_DERIVADO AS CODIGO_COBERTURA, PRINCIPAL_IN AS SALDO, RAZON_SOCIAL AS CONTRAPARTE, FECHA_VALOR AS FECHA_EFECTIVA, FECHA_VENCIMIENTO
		FROM MIDDLE.FC_V_DERIVADOS;


CREATE OR REPLACE VIEW VTA_CONTRATO_DESEMBOLSO
AS 
SELECT CONTRACT_REF_NO AS NUMERO_CONTRATO,
	CODIGO_LINEA_CREDITO,
	NUMERO_TESORERIA,
	SECTOR_INSTITUCIONAL,
	CODIGO_PROGRAMA,
	CODIGO_DESTINO,
	CODIGO_EJE,
	CODIGO_CLIENTE,
	NOMBRE_CLIENTE,
	CODIGO_TIPO_PRESTAMO,
	CODIGO_PAIS,
	CODIGO_ACTIVIDAD_ECONOMICA,
	CODIGO_MONEDA,
	CODIGO_FONDO,
	CODIGO_EJECUTIVO,
	TIPO_FINANCIAMIENTO,
	FECHA_VENCIMIENTO,
	FECHA_APERTURA,
	FECHA_RECIBIDO,
	FECHA_ESCRITURACION,
	MONTO_APROBADO,
	MONTO_APROBADO_LCY,
	MONTO_INICIAL,
	OBSERVACIONES,
	CODIGO_GRUPO_EMPRESARIAL,
	CONTRACT_REF_NO,
	LATEST_VERSION_NO,
	MODULE_CODE,
	PRODUCT,
	PRODUCT_TYPE,
	CONTRACT_STATUS,
	MAIN_COMP,
	CONTRACT_REF_NO_L,
	LATEST_VERSION_NO_L,
	BRANCH,
	USER_REF_NO,
	EXTERNAL_REF_NO,
	NUMERO_TESORERIA_UDF,
	NUMERO_CONTRATO AS NUMERO_CONTRATO_DW,
	OPERACION
	FROM MIDDLE.DW_MV_CONTRACTS;

COMMENT ON TABLE VTA_CONTRATO_DESEMBOLSO IS 'En base al correo del cliente del 12 de Enero de 2017, se indica que el campo CONTRACT_REF_NO de la vista MIDDLE.DW_V_CONTRACTS, corresponde al Número BHQ del desembolso,
	mientas que el campo NUMERO_CONTRATO de la misma vista, representa el número del contrato dentro del DW, para no impactar la construcción ya realizada,
	en la vista (VTA_CONTRATO_DESEMBOLSO) se asignan los alias a los campos correspondientes, quedando como sigue: CONTRACT_REF_NO AS NUMERO_CONTRATO y NUMERO_CONTRATO AS NUMERO_CONTRATO_DW
	ya que en la definición inicial se habia considerado el campo NUMERO_CONTRATO como el Número BHQ del desembolso.';


CREATE OR REPLACE VIEW VTA_CUENTAS_PAGO
AS 
SELECT CODIGO_MONEDA, CODIGO_PAIS, CODIGO_FONDO, CUENTA, CUENTA_NOSTRO, NOMBRE_BANCO, CLIENTE, CODIGO_BIC 
		FROM MIDDLE.MO_RELACION_CUENTAS_AVISOS;


CREATE OR REPLACE VIEW VTA_DECLARACION
AS 
SELECT CODIGO_REFERENCIA AS CODIGO_REFERENCIA,
  CODIGO_DECLARACION AS CODIGO_DECLARACION,
  TITULO_DECLARACION AS TITULO_DECLARACION,
  FECHA_VENCIMIENTO AS FECHA_VENCIMIENTO,
  FECHA_FIRMA AS FECHA_FIRMA,	
  CODIGO_ESTADO_BUSQUEDA AS CODIGO_ESTADO_BUSQUEDA,
  ESTADO_BUSQUEDA AS ESTADO_BUSQUEDA,
  CODIGO_ESTADO_DECLARACION AS CODIGO_ESTADO_DECLARACION,
  ESTADO_DECLARACION AS ESTADO_DECLARACION,
  CODIGO_TIPO_RIESGO AS CODIGO_TIPO_RIESGO,
  NIVEL_RIESGO AS NIVEL_RIESGO,	
  JUSTIFICACION_DECLARACION AS JUSTIFICACION_DECLARACION,
  JUSTIFICACION_BUSQUEDA AS JUSTIFICACION_BUSQUEDA
FROM MIDDLE.LA_V_DECLARACION_JURADA;


CREATE OR REPLACE VIEW VTA_ESTADO_FLEXCUBE
AS 
SELECT CASE TIME_LEVEL WHEN 0 THEN 'OK' ELSE 'ERROR' END ESTADO_FLEXCUBE
     FROM middle.fc_v_branch;


CREATE OR REPLACE VIEW VTA_FECHA_PROXIMO_PAGO
AS 
SELECT cad.Contract_Ref_No, MIN (due_date) Fecha_Proximo_Pago
       FROM middle.Fc_v_Plan_Pago cad, MIDDLE.FC_V_FECHA_SISTEMA cal
      WHERE cad.Due_Date >=    cal.Today -- Este cambio es temporal
            AND NVL (cad.Amount_Due, 0) - NVL (cad.Amount_Settled, 0) > 0
   GROUP BY cad.Contract_Ref_No;


CREATE OR REPLACE VIEW VTA_FUENTES_EXTERNAS
AS 
SELECT REFERENCIA AS CONTRATO_DESEMBOLSO,
          DESCRIP_LINEA_PASIVA AS DESC_FUENTE,
          CODIGO_LINEA_PASIVA,
          MONTO_UTILIZADO AS MONTO
     FROM MIDDLE.AR_V_ASIGNACION_UTILIZACION;


CREATE OR REPLACE VIEW VTA_MORA_CLIENTE
AS 
SELECT CODIGO_CLIENTE, CODIGO_LINEA_CREDITO, CLASE, COUNT(*) OCURRENCIAS
	   FROM DATAWAREHOUSE.DW_MORA_SALDOS_NEW
	   WHERE FECHA_CIERRE >= SYSDATE - 3650
	   GROUP BY CODIGO_CLIENTE, CODIGO_LINEA_CREDITO, CLASE;


CREATE OR REPLACE VIEW VTA_OPERACION
AS 
SELECT                                             --OPRECACION ID CAST--
           CAST (ID_OPERACION AS NUMBER (12, 1)) AS ID_OPERACION_CAST,
            OPERACION.ID_OPERACION,
            OPERACION.NOMBRE AS NOMBRE_OPERACION,
            OPERACION.ESTADO AS ID_ESTADO_OPERACION,
            --ESTADO OPERACION--
            (SELECT TCA_ESTADO_OPERACION.DESCRIPCION
               FROM FENIX.TCA_ESTADO_OPERACION
              WHERE OPERACION.ESTADO = TCA_ESTADO_OPERACION.ID)
               AS ESTADO_OPERACION,
            OPERACION.USUARIO AS NOMBRE_USUARIO,
            OPERACION.SCR,
            --OPERACION.SCR_ESTATUS,
            OPERACION.RAROC,
            OPERACION.TIR,
            OPERACION.TIR_ESTATUS,
            --PERSPECTIVA--
            (SELECT DESCRIPCION
               FROM FENIX.TCA_PERSPECTIVA
              WHERE TCA_PERSPECTIVA.ID = OPERACION.ID_PERSPECTIVA)
               AS PERSPECTIVA,
            --PAIS OPERACION--
            (SELECT DESCRIPCION
               FROM FENIX.CAT_PAISES INNER JOIN FENIX.CLIENTES
                       ON FENIX.CAT_PAISES.ID = FENIX.CLIENTES.PAIS
              WHERE FENIX.CLIENTES.ID_CLIENTE = OPERACION.ID_CLIENTE)
               AS PAIS_OPERACION,
            --PAIS CODIGO--
            (SELECT COD_EXTERNO
               FROM FENIX.CAT_PAISES INNER JOIN FENIX.CLIENTES
                       ON FENIX.CAT_PAISES.ID = FENIX.CLIENTES.PAIS
              WHERE FENIX.CLIENTES.ID_CLIENTE = OPERACION.ID_CLIENTE)
               AS PAIS_CODIGO_EXTERNO,
            --PAIS CODIGO ISO (NUMERICO)--
            (SELECT FENIX.VCA_PAIS_DETALLE.NUMERO_ISO
               FROM FENIX.VCA_PAIS_DETALLE
              WHERE VCA_PAIS_DETALLE.CODIGO_ISO =
                       (SELECT COD_EXTERNO
                          FROM    FENIX.CAT_PAISES
                               INNER JOIN
                                  FENIX.CLIENTES
                               ON FENIX.CAT_PAISES.ID =
                                     FENIX.CLIENTES.PAIS
                         WHERE FENIX.CLIENTES.ID_CLIENTE = OPERACION.ID_CLIENTE))
               AS PAIS_CODIGO_ISO,
            --PRODUCTO--
            (SELECT DESCRIPCION_CORTA
               FROM FENIX.CAT_PRODUCTO
              WHERE ID = OPERACION.ID_PRODUCTO)
               AS PRODUCTO,
            --SECTOR INSTITUCIONAL--
            (SELECT DESCRIPCION
               FROM    FENIX.CAT_SECTOR_INSTITUCIONAL
                    INNER JOIN
                       FENIX.CLIENTES
                    ON FENIX.CAT_SECTOR_INSTITUCIONAL.ID =
                          FENIX.CLIENTES.SECTOR
              WHERE FENIX.CLIENTES.ID_CLIENTE = OPERACION.ID_CLIENTE)
               AS SECTOR_INSTITUCIONAL,
            --TIPO INSTITUCION --
            (SELECT DESCRIPCION
               FROM    FENIX.CAT_TIPO_INSTITUCION
                    INNER JOIN
                       FENIX.CLIENTES
                    ON FENIX.CAT_TIPO_INSTITUCION.ID =
                          FENIX.CLIENTES.TIPO_INSTITUCION
              WHERE FENIX.CLIENTES.ID_CLIENTE = OPERACION.ID_CLIENTE)
               AS TIPO_INSTITUCION,
            --SECTOR MERCADO--
            (SELECT DESCRIPCION_CORTA
               FROM FENIX.CAT_SECTOR_MERCADO
              WHERE ID = OPERACION.SECTOR_MERCADO)
               AS SECTOR_MERCADO,
            --GARANTÍA--
            (SELECT DESCRIPCION_CORTA
               FROM FENIX.CAT_TIPO_GARANTIA
              WHERE ID = OPERACION.TIPO_GARANTIA)
               AS GARANTIA,
            --TIPO CLIENTE--
            (SELECT DISTINCT CAT_TIPO_CLIENTE.DESCRIPCION_CORTA
               FROM FENIX.CLIENTES INNER JOIN FENIX.CAT_TIPO_CLIENTE
                       ON CAT_TIPO_CLIENTE.ID = CLIENTES.TIPO_CLIENTE
              WHERE CLIENTES.ID_CLIENTE = OPERACION.ID_CLIENTE)
               AS TIPO_CLIENTE,
            --ACTIVIDAD ECONOMICA--
            (SELECT DESCRIPCION
               FROM FENIX.CAT_ACTIVIDAD_ECONOMICA
              WHERE ID = OPERACION.ACTIVIDAD_ECONOMICA)
               AS ACTIVIDAD_ECONOMICA,
            --INICIATIVA ESTRATÉGICA--
            (SELECT DESCRIPCION
               FROM FENIX.CAT_INICIATIVA_ESTRATEGICA
              WHERE ID = OPERACION.INICIATIVA_ESTRATEGICA)
               AS INICIATIVA_ESTRATEGICA,
            --EJE ESTRATEGICO--
            (SELECT DESCRIPCION
               FROM FENIX.CAT_EJE_ESTRATEGICO
              WHERE ID = OPERACION.EJE_ESTRATEGICO)
               AS EJE_ESTRATEGICO,
            --AREA DE FOCALIZACION--
            (SELECT DESCRIPCION
               FROM FENIX.CAT_AREA_FOCALIZACION
              WHERE ID = OPERACION.AREA_FOCALIZACION)
               AS AREA_FOCALIZACION,
            --RANGO PAISES--
            (SELECT DESCRIPCION
               FROM FENIX.TCA_RANGO_PAISES
              WHERE ID = OPERACION.ID_RANGO_PAIS)
               AS RANGO_PAISES,
            --MONTO SOLICITADO--
            (SELECT MONTO
               FROM FENIX.MONTO_OPERACION
              WHERE FENIX.MONTO_OPERACION.ID_OPERACION = OPERACION.ID_OPERACION
                    AND ID_TCA_TIPO_MONTO = 2)
               AS MONTO_SOLICITADO,
            --MONTO APROBADO--
            (SELECT MONTO
               FROM FENIX.MONTO_OPERACION
              WHERE ID_TCA_TIPO_MONTO = 3
                    AND FENIX.MONTO_OPERACION.ID_OPERACION =
                          OPERACION.ID_OPERACION)
               AS MONTO_APROBADO,
            --MONTO FORMALIZADO--
            (SELECT MONTO
               FROM FENIX.MONTO_OPERACION
              WHERE ID_TCA_TIPO_MONTO = 4
                    AND FENIX.MONTO_OPERACION.ID_OPERACION =
                          OPERACION.ID_OPERACION)
               AS MONTO_FORMALIZADO,
            OPERACION.FECHA_INICIO,
            OPERACION.FECHA_BAJA,
            CLIENTES.SECTOR,
            CLIENTES.ID_FLEXCUBE AS BHQ_CLIENTE,
            CLIENTES.RAZON_SOCIAL AS NOMBRE_CLIENTE,
            CLIENTES.TIPO_PERSONA AS ID_TIPO_PERSONA,
            CLIENTES.TIPO_INSTITUCION AS ID_TIPO_INSTITUCION,
            CLIENTES.OFICINA AS ID_OFICINA,
            (SELECT DESCRIPCION
               FROM CAT_OFICINA
              WHERE CAT_OFICINA.ID = CLIENTES.OFICINA)
               AS OFICINA,
            (SELECT DESCRIPCION
               FROM CAT_TIPO_PERSONA
              WHERE CAT_TIPO_PERSONA.ID = CLIENTES.TIPO_PERSONA)
               AS TIPO_PERSONA,
              (CAT_PRODUCTO.ES_IFI ) AS ES_IFI,
              CAT_PRODUCTO.ID AS ID_PRODUCTO,
              CAT_PRODUCTO.TIENE_RIESGO_CREDITO,
              OPERACION.TIPO_GARANTIA AS ID_GARANTIA
       FROM FENIX.OPERACION, CLIENTES , CAT_PRODUCTO
      WHERE OPERACION.ID_CLIENTE = CLIENTES.ID_CLIENTE
      AND CAT_PRODUCTO.ID =OPERACION.ID_PRODUCTO
   ORDER BY ID_OPERACION ASC;


CREATE OR REPLACE VIEW VTA_PLAZO_MAXIMO
AS 
Select CODIGO_LINEA_FINANCIERA, CODIGO_DESTINO, PLAZO, TIPO_PLAZO, TIPO_LIMITE, DESCRIPCION_TIPO_LIMITE 
		From  middle.LGC_V_PLAZO_MAXIMO;


CREATE OR REPLACE VIEW VTA_PROD_FLEX_COMPONENTE_DESEM
AS 
SELECT DISTINCT PF.ID, CD.CODIGO, CD.DESCRIPCION, CD.TIPO_TASA, CD.COMPONENTE_PRINCIPAL , CM.CODIGO_COMPONENTE 
		FROM VTA_PRODUCTO_DESEM_FLEXCUBE PF
		LEFT JOIN MIDDLE.FC_MV_COMPONENTS CD ON CD.CODIGO_PRODUCTO = PF.ID
		LEFT JOIN MIDDLE.FC_COMPONENTE_MAPEO CM ON CD.CODIGO = CM.CODIGO_COMPONENTE_FCC
		ORDER BY PF.ID;


CREATE OR REPLACE VIEW VTA_PRODUCTO_DESEM_FLEXCUBE
AS 
SELECT PARAM.Codigo_Producto AS ID, 
	nvl(PROD.Descripcion_Larga,'<Producto sin descripción>') ||' ('|| PARAM.Codigo_Producto||')' AS DESCRIPCION,
	PARAM.Revolvente AS ES_REVOLVENTE,
	CAT_PROD.ID AS COD_PRODUCTO, 
	CAT_PROD.COD_EXTERNO AS COD_EXTERNO,
	PARAM.TIPO_PRODUCTO AS TIPO_PRODUCTO,
	PARAM.CODIGO_SECTOR_INS AS CODIGO_SECTOR_INS,
	PARAM.TIPO_TASA AS TIPO_TASA,
	PARAM.CODIGO_LINEA_FINANCIERA  AS CODIGO_LINEA_FINANCIERA
	FROM middle.fc_Producto_Param PARAM
	LEFT OUTER JOIN middle.fc_v_Producto PROD ON  PARAM.Codigo_Producto = PROD.Codigo
	LEFT OUTER JOIN CAT_PRODUCTO CAT_PROD ON PARAM.CODIGO_TIPO_SOLICITUD = CAT_PROD.COD_EXTERNO
	WHERE PARAM.TIPO_PRODUCTO = 'L';


CREATE OR REPLACE VIEW VTA_PRODUCTO_FLEXCUBE
AS 
SELECT PARAM.Codigo_Producto AS ID, 
nvl(PROD.Descripcion_Larga,'<Producto sin descripción') ||' ('|| PARAM.Codigo_Producto||')' AS DESCRIPCION,
PARAM.Revolvente AS ES_REVOLVENTE,
CAT_PROD.ID AS COD_PRODUCTO, 
CAT_PROD.COD_EXTERNO AS COD_EXTERNO
FROM middle.fc_Producto_Param PARAM
LEFT OUTER JOIN middle.fc_v_Producto PROD ON  PARAM.Codigo_Producto = PROD.Codigo
LEFT OUTER JOIN CAT_PRODUCTO CAT_PROD ON PARAM.CODIGO_TIPO_SOLICITUD = CAT_PROD.COD_EXTERNO
WHERE
PARAM.Tipo_Producto='C';


CREATE OR REPLACE VIEW VTA_RECIBO_PAGO_F_EFECTIVA
AS 
SELECT 
			Fecha_Efectiva Fecha_Efectiva,
			Linea    Linea,
			Numero_Prestamo    Numero_Prestamo,
			Numero_Tesoreria    Numero_Tesoreria,
			Numero_Recibo    Numero_Recibo,
			SUM(Monto_Pagado) Valor_Adeudado,
			INITCAP(Saldo_Descripcion) Saldo_Descripcion,
			Moneda_Pago Moneda_Adeudada, 
			SUM(Monto_Usd) Pca_Valor_Cambio,
			Moneda_Pago Codigo_Moneda,
			Moneda_Pago Moneda_Pagada,
			SUM(Monto_Pagado) Valor_Pagado
		FROM middle.FC_V_RECIBO_PAGO_F_EFECTIVA
		GROUP BY
			Numero_Recibo,
			Fecha_Efectiva,
			Codigo_Cliente,
			Linea,
			Numero_Prestamo,
			Numero_Tesoreria,
			Saldo_Descripcion,
			Moneda_Pago
		order by Numero_Recibo;


CREATE OR REPLACE VIEW VTA_TAREAS_ACTIVAS
AS 
SELECT 
	TPO.ID_OPERACION, 
	TPO.NOMBRE_OPERACION, 
	TPO.ID_PROCESO,
	TPB.DESCRIPCION AS DESCRIPCION_PROCESO,
	TPO.ID_TAREA, 
	TTB.DESCRIPCION AS DESCRIPCION_TAREA,
	TRB.DESCRIPCION AS ROL,
	TPO.FECHA_REGISTRO AS FECHA_INICIO, 
	TPO.USUARIO
	FROM TBI_PROCESO_OPERACION TPO
	INNER JOIN TCA_PROCESO_BPM TPB ON(TPB.ID=TPO.ID_PROCESO)
	INNER JOIN TCA_TAREA_BPM TTB ON(TTB.ID=TPO.ID_TAREA)
	INNER JOIN TCA_ROL_BPM TRB ON(TRB.ID=TTB.ID_ROL_BPM)
	WHERE TPO.BAN_ES_PROCESO=0 AND TPO.BAN_ES_FIN_ACTIVIDAD=0 AND TPO.BAN_FINALIZADO=0
	ORDER BY 1 DESC;


CREATE OR REPLACE VIEW VTA_TOTALES_PAISES
AS 
SELECT  A.ID, A.DESCRIPCION, A.TOTAL_PAIS, A.OPERACIONES_PAIS, VPD.LATITUD_DECIMAL, VPD.LONGITUD_DECIMAL FROM (
  SELECT CP.DESCRIPCION, TOTAL_PAIS, OPERACIONES_PAIS,CP.ID 
  FROM FENIX.CAT_PAISES CP 
  INNER JOIN (SELECT SUM(VO.MONTO_SOLICITADO) AS TOTAL_PAIS, COUNT(VO.ID_OPERACION) AS OPERACIONES_PAIS, PAIS_CODIGO_EXTERNO
    FROM FENIX.VTA_OPERACION VO
    GROUP BY PAIS_CODIGO_EXTERNO)
  ON CP.COD_EXTERNO=PAIS_CODIGO_EXTERNO) A
INNER JOIN VCA_PAIS_DETALLE VPD
ON A.ID= VPD.ID_PAIS ORDER BY ID;

/*
CREATE OR REPLACE VIEW VTA_TRAZABILIDAD_OPERACION
AS 
SELECT INICIO.ID_OPERACION AS ID_OPERACION,
		INICIO.NOMBRE_OPERACION AS NOMBRE_OPERACION,
		INICIO.ID_PROCESO AS ID_PROCESO,
		TPB.DESCRIPCION AS DESCRIPCION_PROCESO,
		INICIO.FECHA_REGISTRO AS FECHA_INICIO,
		INICIO.USUARIO AS USUARIO_INICIA,
		FIN.FECHA_REGISTRO AS FECHA_FIN,
		FIN.USUARIO AS USUARIO_FIN,
		FIN.TIEMPO_PROCESO AS TIEMPO_PROCESO
		FROM (				
				SELECT TPO.ID, TPO.ID_OPERACION, TPO.NOMBRE_OPERACION, TPO.ID_PROCESO, TPO.FECHA_REGISTRO, TPO.USUARIO FROM TBI_PROCESO_OPERACION TPO
				INNER JOIN TCA_PROCESO_BPM TPB ON(TPO.ID_PROCESO=TPB.ID)
				WHERE BAN_ES_PROCESO=1 AND BAN_ES_FIN_ACTIVIDAD=0				
				AND ((SELECT COUNT(T1.INSTANCIA_PROCESO) FROM TBI_PROCESO_OPERACION T1 WHERE T1.BAN_ES_PROCESO=0 AND T1.INSTANCIA_PROCESO = TPO.INSTANCIA_PROCESO) > 0)                				
		) INICIO
		LEFT OUTER JOIN
		(
		SELECT TPO.ID, TPO.ID_OPERACION, TPO.NOMBRE_OPERACION, TPO.ID_INICIO, TPO.FECHA_REGISTRO, TPO.TIEMPO_PROCESO, TPO.USUARIO FROM TBI_PROCESO_OPERACION TPO
		INNER JOIN TCA_PROCESO_BPM TPB ON(TPO.ID_PROCESO=TPB.ID)
		WHERE BAN_ES_PROCESO=1 AND BAN_ES_FIN_ACTIVIDAD=1
		) FIN
		ON(INICIO.ID=FIN.ID_INICIO)
		INNER JOIN TCA_PROCESO_BPM TPB ON(TPB.ID=INICIO.ID_PROCESO)
        ORDER BY 1 DESC;

*/
CREATE OR REPLACE VIEW VTA_TRAZABILIDAD_TAREA
AS 
SELECT 
	INICIO.ID_OPERACION AS ID_OPERACION,
	INICIO.NOMBRE_OPERACION AS NOMBRE_OPERACION,
	INICIO.ID_PROCESO AS ID_PROCESO,
	TPB.DESCRIPCION AS DESCRIPCION_PROCESO,
	TTB.DESCRIPCION AS DESCRIPCION_TAREA,
	INICIO.FECHA_REGISTRO AS FECHA_INICIO,
	INICIO.USUARIO AS USUARIO_INICIA,
	FIN.FECHA_REGISTRO AS FECHA_FIN,
	FIN.USUARIO AS USUARIO_FIN,
	FIN.TIEMPO_TAREA AS TIEMPO_TAREA
	FROM (
		SELECT TPO.ID, TPO.ID_OPERACION, TPO.NOMBRE_OPERACION, TPO.ID_PROCESO, TPO.ID_TAREA, TPO.FECHA_REGISTRO, TPO.USUARIO FROM TBI_PROCESO_OPERACION TPO
		INNER JOIN TCA_PROCESO_BPM TPB ON(TPO.ID_PROCESO=TPB.ID)
		WHERE BAN_ES_PROCESO=0 AND BAN_ES_FIN_ACTIVIDAD=0
	) INICIO
	LEFT OUTER JOIN
	(
		SELECT TPO.ID, TPO.ID_OPERACION, TPO.NOMBRE_OPERACION, TPO.ID_INICIO, TPO.FECHA_REGISTRO, TPO.TIEMPO_TAREA, TPO.USUARIO FROM TBI_PROCESO_OPERACION TPO
		INNER JOIN TCA_PROCESO_BPM TPB ON(TPO.ID_PROCESO=TPB.ID)
		WHERE BAN_ES_PROCESO=0 AND BAN_ES_FIN_ACTIVIDAD=1
	) FIN
	ON(INICIO.ID=FIN.ID_INICIO)
	INNER JOIN TCA_PROCESO_BPM TPB ON(TPB.ID=INICIO.ID_PROCESO)
	INNER JOIN TCA_TAREA_BPM TTB ON(TTB.ID=INICIO.ID_TAREA)
	ORDER BY 1 DESC;


CREATE OR REPLACE VIEW VTA_VENTA_CARTERA
AS 
SELECT CODIGO_PAIS, CODIGO_LINEA_CREDITO, NUMERO_TESORERIA, CONTRATO_DESEMBOLSO, CODIGO_FONDO, CODIGO_CLIENTE, NOMBRE_CLIENTE, SALDO, CONTRAPARTE, PRODUCT_TYPE,CONTRACT_STATUS
		FROM  MIDDLE.FC_MV_VENTA_CARTERA;


CREATE OR REPLACE TRIGGER TCA_TIPO_TASA_TGR 
   BEFORE INSERT
   ON TCA_TIPO_TASA
   FOR EACH ROW
BEGIN
   SELECT TCA_TIPO_TASA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;



CREATE OR REPLACE PACKAGE LINEAS_CREDITO_PKG
IS
   PROCEDURE ACTUALIZAR_LINEAS (
      P_ID_APROBACION    IN     NUMBER,
      P_ID_CONTRATO      IN     NUMBER,
      P_LINEAS_CREDITO   IN     T_LINEASCREDITO_APRO,
      P_RESULTADO           OUT VARCHAR2,
      P_MENSAJE             OUT VARCHAR2);

END LINEAS_CREDITO_PKG;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PKG_CONSULTA_ONBASE
IS
   


FUNCTION F_Consulta_on_Base (  P_ID_Operacion   IN     CHAR, P_IdCliente IN NUMBER, P_TipoDocumento IN NUMBER,  P_IdTarea IN   NUMBER)
RETURN T_ONBASE;

   FUNCTION F_ESTADO_ONBASE (p_item INTEGER, p_type VARCHAR2)
      RETURN VARCHAR2;

   FUNCTION F_ETAPA_ONBASE (p_id NUMBER)
      RETURN VARCHAR2;
END PKG_CONSULTA_ONBASE;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PKG_DESEMBOLSOS
AS
  PROCEDURE SP_TRANS_GPOECONOMICO_PAIS(
      P_ID_CLIENTE              IN NUMBER,
      RECORDSET_GE              OUT SYS_REFCURSOR,
      RECORDSET_PAIS            OUT SYS_REFCURSOR,
      P_CODIGO_RES              OUT NUMBER,
      P_MENSAJE                 OUT VARCHAR2);
  PROCEDURE SP_CONSULTAR_SALDO_CARTERA(
      P_LINEA_CREDITO     IN VARCHAR2,
      P_LINEA_FINANCIERA  IN T_VARCHAR2_TAB,
      P_DESTINO           IN T_VARCHAR2_TAB,
      P_MONEDA            IN T_VARCHAR2_TAB,
      P_PAIS              IN T_VARCHAR2_TAB,
      P_CODIGO_RES        OUT NUMBER,
      P_MENSAJE           OUT VARCHAR2,
      P_SALDO             OUT NUMBER);
  PROCEDURE VALIDA_LIMITE_PORCENTAJE (
       P_NUMERO_LINEA_CREDITO         IN  VARCHAR2,
       P_CODIGO_LINEA_FINANCIERA      IN  VARCHAR2,
       P_MONTO_APROBADO_USD           IN  NUMBER,
       P_SALDO_USD                    IN  NUMBER,
       P_CODIGO_RES                   OUT NUMBER,
       P_TIPO_RES                     OUT NUMBER,
       P_MENSAJE                      OUT VARCHAR2);
   PROCEDURE SP_CONSULTAR_TRANSFERENCIAS(
      P_ID_DESEMBOLSO                   IN NUMBER,
      P_ID_TRANSFERENCIA                IN NUMBER,
      P_ID_CONSOLIDACION_PADRE          IN NUMBER,
      RS_TRANSFERENCIAS                 OUT SYS_REFCURSOR,
      P_CODIGO_RES                      OUT NUMBER,
      P_MENSAJE                         OUT VARCHAR2);
   PROCEDURE SP_UPSERT_TRANSFERENCIA(
       T_LISTA_TRANSFERENCIA_BANCARIA   IN  T_TRANSFERENCIA_BANCARIA,
       P_CODIGO_RES                     OUT NUMBER,
       P_TIPO_RES                       OUT NUMBER,
       P_MENSAJE                        OUT VARCHAR2);
   PROCEDURE SP_LISTA_PEDIENTE_F1(
       P_NUMERO_LINEA_CREDITO       IN  VARCHAR2,
       P_CODIGO_LINEA_FINANCIERA    IN  VARCHAR2,
       RECORDSET                    OUT SYS_REFCURSOR,
       P_CODIGO_RES                 OUT NUMBER,
       P_TIPO_RES                   OUT NUMBER,
       P_MENSAJE                    OUT VARCHAR2,
       P_ACUMULADO_MESSAGE          OUT VARCHAR2);
END PKG_DESEMBOLSOS;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PKG_DOCUMENTO AS 
PROCEDURE SP_UPSERT_TBI_DOCUMENTO(
     T_TBI_DOCUMENTO                 IN T_BITACORA_DOCUMENTO,
   ID_BITACORA                  OUT NUMBER,
   P_CODIGO_RES                 OUT NUMBER,
   P_TIPO_RES                   OUT NUMBER,
   P_MENSAJE                    OUT VARCHAR2);

END PKG_DOCUMENTO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE       PKG_ENVIAR_CORREO
IS
   PROCEDURE P_CONSTRUIR_CORREO (P_ID_PLATILLA     IN     NUMBER,
                                 P_ID_OPERACION    IN     NUMBER,
                                 P_ID_CLIENTE      IN     NUMBER,
                                 P_TAGS            IN     T_TAGS,
                                 P_ASUNTO          IN OUT VARCHAR2,
                                 P_MENSAJE         IN OUT VARCHAR2,
                                 P_DESTINATARIOS   IN OUT VARCHAR2,
                                 P_CC              IN OUT VARCHAR2);


PROCEDURE P_CONSULTAR_ROLES_USUARIOS (P_DESCRIPCION_PLANTILLA   IN     VARCHAR2,
                                      P_ID_OPERACION    IN     NUMBER,
                                      P_ID_CLIENTE      IN     NUMBER,
                                      P_ID_PROCESO IN     NUMBER,
                                      P_BANDERAS          IN     T_TAGS,
                                      P_ACCIONES          IN     T_TAGS,
                                      P_PARA_USUARIOS  OUT SYS_REFCURSOR,
                                      P_ERROR_USUARIOS   OUT SYS_REFCURSOR);

PROCEDURE SP_VALIDAR_ENVIO_SUPERV_TCC (P_ID_SUPERVISION IN NUMBER,
                                       P_DESC_PLANTILLA IN VARCHAR,
                                       P_ID_OPERACION IN NUMBER,
                                       P_ESTADO            OUT VARCHAR2,
                                       P_CODIGO            OUT VARCHAR2,
                                       P_MENSAJE          OUT VARCHAR2);                            


END PKG_ENVIAR_CORREO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PK_GESTION_COBRO
IS
   PROCEDURE PR_GENERAR_AVISO_COBRO (
      P_FECHAINICIO           IN     DATE,
      P_FECHAFIN              IN     DATE,
      P_ESPUBLICO             IN     VARCHAR2,
      P_TIPOAVISO             IN     VARCHAR2,
      P_LINEA                 IN     VARCHAR2,
      P_CLIENTE               IN     VARCHAR2,
      P_MONEDA                IN     VARCHAR2,
      P_PAIS                  IN     VARCHAR2,
      P_SECTORINSTITUCIONAL   IN     VARCHAR2,
      P_PERIODICIDAD          IN     VARCHAR2,
      P_TIPOSALDO             IN     VARCHAR2,
      P_FONDOS                IN     VARCHAR2,
      P_CODIGOOPERACION       IN     VARCHAR2:= NULL,
      P_USUARIOCREADOR        IN     VARCHAR2,
      P_IDAVISO                  OUT NUMBER,
      P_MENSAJEERROR             OUT VARCHAR2);

   PROCEDURE PR_OBTENER_AVISO_COBRO (P_IDAVISO   IN     NUMBER,
                                     XML_AVISO      OUT XMLTYPE);
END PK_GESTION_COBRO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE PK_PREPAGO
IS
   PROCEDURE OBTENER_TABLAS_PREPAGO (P_ID_PREPAGO    IN       NUMBER,
                                     P_OBSERVACIONES      OUT SYS_REFCURSOR,
                                     P_PENALIDAD          OUT SYS_REFCURSOR,
                                     P_CONDICIONES        OUT SYS_REFCURSOR,
                                     P_COBERTURAS         OUT SYS_REFCURSOR,
                                     P_VENTA_CARTERA      OUT SYS_REFCURSOR,
                                     P_FUENTES_EXTERNAS   OUT SYS_REFCURSOR);




PROCEDURE OBTENER_INFORMACION_PREPAGO (P_ID_PREPAGO    IN       NUMBER,
                                     P_PREPAGO     OUT SYS_REFCURSOR,
                                      P_CARGOS     OUT SYS_REFCURSOR,
                                      P_BANCOS    OUT SYS_REFCURSOR,
                                      P_INTERESES OUT NUMBER );

END PK_PREPAGO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY LINEAS_CREDITO_PKG
IS
   PROCEDURE ACTUALIZAR_LINEAS (
      P_ID_APROBACION    IN     NUMBER,
      P_ID_CONTRATO      IN     NUMBER,
      P_LINEAS_CREDITO   IN     T_LINEASCREDITO_APRO,
      P_RESULTADO           OUT VARCHAR2,
      P_MENSAJE             OUT VARCHAR2)
   IS
      V_ID_LINEA_SEQ    NUMBER (12);

      V_ID_LINEA_CRED   NUMBER (12);
   BEGIN
      
      FOR I IN 1 .. P_LINEAS_CREDITO.COUNT
      LOOP
         IF TO_CHAR (P_LINEAS_CREDITO (I).ID) IS NULL
         THEN
            SELECT LINEA_CREDITO_SEQ.NEXTVAL INTO V_ID_LINEA_SEQ FROM DUAL;

            INSERT INTO LINEA_CREDITO (ID,
                                       ID_CONTRATO,
                                       NUMERO_LINEA_CREDITO,
                                       DESCRIPCION_LINEA,
                                       MONTO_LINEA,
                                       FECHA_REGISTRO,
                                       BAN_ESTATUS)
                VALUES (V_ID_LINEA_SEQ,
                        P_ID_CONTRATO,
                        P_LINEAS_CREDITO (I).NUMERO_LINEA_CREDITO,
                        P_LINEAS_CREDITO (I).DESCRIPCION_LINEA,
                        P_LINEAS_CREDITO (I).MONTO_LINEA,
                        trunc(SYSDATE),
                        1);

            INSERT INTO TRE_LINEA_CREDITO_APROBACION (ID,
                                                      ID_LINEA_CREDITO,
                                                      ID_APROBACION)
                VALUES (TRE_LINEA_CREDITO_APROBA_SEQ.NEXTVAL,
                        V_ID_LINEA_SEQ,
                        P_ID_APROBACION);
         ELSIF P_LINEAS_CREDITO (I).ESTATUS = 1
               AND TO_CHAR (P_LINEAS_CREDITO (I).ID) IS NOT NULL
         THEN
            UPDATE LINEA_CREDITO
               SET NUMERO_LINEA_CREDITO =
                      P_LINEAS_CREDITO (I).NUMERO_LINEA_CREDITO,
                   DESCRIPCION_LINEA = P_LINEAS_CREDITO (I).DESCRIPCION_LINEA,
                   MONTO_LINEA = P_LINEAS_CREDITO (I).MONTO_LINEA
             WHERE ID = P_LINEAS_CREDITO (I).ID;
         ELSIF P_LINEAS_CREDITO (I).ESTATUS = 0
               AND TO_CHAR (P_LINEAS_CREDITO (I).ID) IS NOT NULL
         THEN
            DELETE TRE_LINEA_CREDITO_APROBACION
             WHERE ID_LINEA_CREDITO = P_LINEAS_CREDITO (I).ID
                   AND ID_APROBACION = P_ID_APROBACION;

            DELETE LINEA_CREDITO
             WHERE ID = P_LINEAS_CREDITO (I).ID;
         END IF;

         P_RESULTADO := 'OK';
         P_MENSAJE := 'La actualizacion se ha realizado exitosamente';
      END LOOP;
   
   END ACTUALIZAR_LINEAS;
END LINEAS_CREDITO_PKG;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY       PKG_CONSULTA_ONBASE
IS
   FUNCTION F_ETAPA_ONBASE (p_id NUMBER)
      RETURN VARCHAR2
   IS
      v_resultado   VARCHAR2 (1000);
   BEGIN
      SELECT TCB.DESCRIPCION AS "ETAPA"
        INTO v_resultado
        FROM TCO_CONFIGURAR_TIPO_ONBASE TCTO
             INNER JOIN TCA_DOCUMENTO TD
                ON TCTO.ID_TCA_DOCUMENTO = TD.ID
             INNER JOIN TCO_DOCUMENTO_TAREA TDT
                ON TD.ID = TDT.ID
             INNER JOIN TCA_TAREA_BPM TTB
                ON TTB.ID = TDT.ID_TAREA_BPM
             INNER JOIN TCA_PROCESO_BPM TCB
                ON TCB.ID = TTB.ID
       WHERE TCTO.ID = p_id;


      RETURN v_resultado;
   END F_ETAPA_ONBASE;

   FUNCTION F_Consulta_on_Base (P_ID_Operacion    IN CHAR,
                                P_IdCliente       IN NUMBER,
                                P_TipoDocumento   IN NUMBER,
                                P_IdTarea         IN NUMBER)
      RETURN T_ONBASE
   IS
      L_T_ONBASE    T_ONBASE := T_ONBASE ();
      id_flexcube   CHAR (250);
   BEGIN
      --



      IF P_ID_Operacion IS NOT NULL
      THEN
         SELECT CAST (
                   COLLECT (T_CON_ONBASE1 (ETAPA,
                                           NOMBRE_TIPO_DOCUMENTO,
                                           ID_DOCUMENTO,
                                           ID_TIPO_DOCUMENTO,
                                           CODIGO_DOCUMENTO,
                                           ID_ONBASE,
                                           ID_OPERACION,
                                           ID_PRODUCTO,
                                           ID_PAIS,
                                           FILENAME,
                                           MIME_TYPE,
                                           TAMANIO,
                                           ID_ADJUNTO,
                                           ES_JUSTIFICACION,
                                           COMENTARIO,
                                           FECHA_DOCUMENTO,
                                           FECHA_REGISTRO,
                                           TAREA,
                                           ID_TAREA,
                                           PUEDE_MODIFICAR,
                                           PUEDE_BORRAR,
                                           ItemTypeGroupName,
                                           ItemTypeGroupNum,
                                           ItemTypeName,
                                           ItemNum,
                                           ItemTypeNum,
                                           ItemName,
                                           Status,
                                           ItemDate,
                                           DateStored,
                                           epdocid,
                                           SecurityKW,
                                           Pais,
                                           Linea_Credito,
                                           Nombre,
                                           Numero_Documento,
                                           Periodo,
                                           Resumen,
                                           Tipo,
                                           Codigo_Intervencion,
                                           NOMBRE_USUARIO_CREA,
                                           NOMBRE_USUARIO_MODIFICA,
                                           NUM_SERIE_DOCUMENTO)) AS T_ONBASE)
           INTO L_T_ONBASE
           FROM ( (SELECT DISTINCT
                          CASE
                             WHEN ETAPA IS NULL THEN 'En Transito'
                             ELSE ETAPA
                          END
                             AS ETAPA,
                          NVL (ID_ETAPA, 0) ID_ETAPA,
                          CASE
                             WHEN NOMBRE_TIPO_DOCUMENTO IS NULL
                             THEN
                                'General'
                             ELSE
                                NOMBRE_TIPO_DOCUMENTO
                          END
                             AS NOMBRE_TIPO_DOCUMENTO,
                          ID_DOCUMENTO,
                          ID_TIPO_DOCUMENTO,
                          CODIGO_DOCUMENTO,
                          ID_ONBASE,                          --AS ID_EXTERNO,
                          ID_OPERACION,
                          ID_PRODUCTO,
                          ID_PAIS,
                          FILENAME,
                          MIME_TYPE,
                          TAMANIO,
                          ID_ADJUNTO,
                          ES_JUSTIFICACION,
                          COMENTARIO,
                          FECHA_DOCUMENTO,
                          FECHA_REGISTRO,
                          TAREA,
                          ID_TAREA,
                          CASE
                             WHEN PUEDE_MODIFICAR = 1 THEN 'true'
                             ELSE 'false'
                          END
                             AS PUEDE_MODIFICAR,
                          CASE
                             WHEN PUEDE_BORRAR = 1 THEN 'true'
                             ELSE 'false'
                          END
                             AS PUEDE_BORRAR,
                          PUEDE_CONSULTAR,
                          NULL ItemTypeGroupName,
                          NULL ItemTypeGroupNum,
                          NULL ItemTypeName,
                          NULL ItemNum,
                          NULL ItemTypeNum,
                          NULL ItemName,
                          NULL Status,
                          NULL ItemDate,
                          NULL DateStored,
                          NULL epdocid,
                          NULL SecurityKW,
                          NULL Pais,
                          NULL Linea_Credito,
                          'Justificación' Nombre, --CASE WHEN  Nombre IS NULL THEN  RTRIM (FILENAME,  '.pdf') ELSE Nombre END Nombre ,
                          NULL Numero_Documento,
                          NULL Periodo,
                          NULL Resumen,
                          NULL Tipo,
                          NULL Codigo_Intervencion,
                          NOMBRE_USUARIO_CREA,
                          NOMBRE_USUARIO_MODIFICA,
                          NUM_SERIE_DOCUMENTO
                     FROM (SELECT TCB.ID AS ID_ETAPA,
                                  TCB.DESCRIPCION AS ETAPA,
                                  TD.DESCRIPCION AS NOMBRE_TIPO_DOCUMENTO,
                                  DOC.ID_DOCUMENTO,
                                  DOC.ID_TIPO_DOCUMENTO,
                                  DOC.CODIGO_DOCUMENTO,
                                  ADJ.ID_ONBASE,              --AS ID_EXTERNO,
                                  OP.ID_OPERACION,
                                  CP.ID AS ID_PRODUCTO,
                                  TCTO.ID_CAT_PAISES AS ID_PAIS,
                                  ADJ.FILENAME,
                                  ADJ.MIME_TYPE,
                                  DBMS_LOB.getlength (CONTENT) "TAMANIO",
                                  ADJ.ID_ADJUNTO,
                                  DOC.ES_JUSTIFICACION,
                                  DOC.COMENTARIO,
                                  DOC.FECHA_DOCUMENTO,
                                  DOC.FECHA_REGISTRO,
                                  TTB.DESCRIPCION AS TAREA,
                                  TTB.ID AS ID_TAREA,
                                  CL.ID_CLIENTE,
                                  TDT.PUEDE_MODIFICAR,
                                  TDT.PUEDE_BORRAR,
                                  TDT.PUEDE_CONSULTAR,
                                  NVL (DOC.NOMBRE_USUARIO_CREA,
                                       DOC.LOGIN_USUARIO_CREA)
                                     NOMBRE_USUARIO_CREA,
                                  NVL (DOC.NOMBRE_USUARIO_MODIFICA,
                                       DOC.LOGIN_USUARIO_MODIFICA)
                                     NOMBRE_USUARIO_MODIFICA,
                                  NUM_SERIE_DOCUMENTO
                             FROM DOCUMENTO DOC                          --460
                                  LEFT OUTER JOIN ADJUNTO ADJ
                                     ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                  INNER JOIN TCA_DOCUMENTO TD
                                     ON DOC.ID_TIPO_DOCUMENTO = TD.ID
                                  INNER JOIN TCO_CONFIGURAR_TIPO_ONBASE TCTO
                                     ON TD.id = TCTO.ID_TCA_DOCUMENTO
                                  INNER JOIN DOCUMENTOS DCTS
                                     ON DCTS.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                  INNER JOIN OPERACION OP
                                     ON OP.ID_OPERACION = DCTS.ID_OPERACION
                                  INNER JOIN CLIENTES CL
                                     ON OP.ID_CLIENTE = CL.ID_CLIENTE
                                  INNER JOIN CAT_PRODUCTO CP
                                     ON CP.ID = OP.ID_PRODUCTO
                                  INNER JOIN CAT_PAISES CPS
                                     ON CPS.ID = TCTO.ID_CAT_PAISES
                                        AND CPS.ID = CL.PAIS
                                  INNER JOIN TCA_TIPO_OPERACION TTO
                                     ON CP.ID_TIPO_OPERACION = TTO.ID
                                        AND TCTO.ID_TCA_TIPO_OPERACION =
                                              TTO.ID
                                  INNER JOIN TCA_TAREA_BPM TTB
                                     ON TTB.ID = DOC.ID_TAREA_BPM
                                  INNER JOIN TCA_PROCESO_BPM TCB
                                     ON TCB.ID = TTB.ID_PROCESO_BPM
                                  INNER JOIN TCO_DOCUMENTO_TAREA TDT
                                     ON TD.ID = TDT.ID_TCA_DOCUMENTO
                                        AND TDT.ID_TAREA_BPM =
                                              NVL (P_IdTarea,
                                                   TDT.ID_TAREA_BPM)  --TTB.ID
                            WHERE     DOC.BAN_ESTATUS <> 0 -- Se agrega el estado  activo o incativo, mostrar solo activos
                                  AND OP.ID_OPERACION = P_ID_Operacion
                                  AND TDT.PUEDE_CONSULTAR = 1
                                  AND ES_JUSTIFICACION = 1) DBFENIX
                    WHERE NVL (ID_CLIENTE, 0) =
                             COALESCE (P_IdCliente, NVL (ID_CLIENTE, 0))
                          AND NVL (ID_TIPO_DOCUMENTO, 0) =
                                COALESCE (P_TipoDocumento,
                                          NVL (ID_TIPO_DOCUMENTO, 0)))
                 UNION
                 ---DOCUMENTOS QUE ESTAN EN FENIX PERO NO EN ONBSE

                 (SELECT DISTINCT
                         CASE
                            WHEN ETAPA IS NULL THEN 'En Transito'
                            ELSE ETAPA
                         END
                            AS ETAPA,
                         NVL (ID_ETAPA, 0) ID_ETAPA,
                         CASE
                            WHEN NOMBRE_TIPO_DOCUMENTO IS NULL THEN 'General'
                            ELSE NOMBRE_TIPO_DOCUMENTO
                         END
                            AS NOMBRE_TIPO_DOCUMENTO,
                         ID_DOCUMENTO,
                         ID_TIPO_DOCUMENTO,
                         CODIGO_DOCUMENTO,
                         ID_ONBASE,                           --AS ID_EXTERNO,
                         ID_OPERACION,
                         ID_PRODUCTO,
                         ID_PAIS,
                         FILENAME,
                         MIME_TYPE,
                         TAMANIO,
                         ID_ADJUNTO,
                         ES_JUSTIFICACION,
                         COMENTARIO,
                         FECHA_DOCUMENTO,
                         FECHA_REGISTRO,
                         TAREA,
                         ID_TAREA,
                         CASE
                            WHEN PUEDE_MODIFICAR = 1 THEN 'true'
                            ELSE 'false'
                         END
                            AS PUEDE_MODIFICAR,
                         CASE
                            WHEN PUEDE_BORRAR = 1 THEN 'true'
                            ELSE 'false'
                         END
                            AS PUEDE_BORRAR,
                         PUEDE_CONSULTAR,
                         NULL ItemTypeGroupName,
                         NULL ItemTypeGroupNum,
                         NULL ItemTypeName,
                         NULL ItemNum,
                         NULL ItemTypeNum,
                         NULL ItemName,
                         NULL Status,
                         NULL ItemDate,
                         NULL DateStored,
                         NULL epdocid,
                         NULL SecurityKW,
                         NULL Pais,
                         NULL Linea_Credito,
                         NVL (
                            SUBSTR (FILENAME, 1, (INSTR (FILENAME, '.') - 1)),
                            FILENAME)
                            Nombre,
                         NULL Numero_Documento,
                         NULL Periodo,
                         NULL Resumen,
                         NULL Tipo,
                         NULL Codigo_Intervencion,
                         NOMBRE_USUARIO_CREA,
                         NOMBRE_USUARIO_MODIFICA,
                         NUM_SERIE_DOCUMENTO
                    FROM (SELECT TCB.ID AS ID_ETAPA,
                                 TCB.DESCRIPCION AS ETAPA,
                                 TD.DESCRIPCION AS NOMBRE_TIPO_DOCUMENTO,
                                 DOC.ID_DOCUMENTO,
                                 DOC.ID_TIPO_DOCUMENTO,
                                 DOC.CODIGO_DOCUMENTO,
                                 ADJ.ID_ONBASE,               --AS ID_EXTERNO,
                                 OP.ID_OPERACION,
                                 CP.ID AS ID_PRODUCTO,
                                 TCTO.ID_CAT_PAISES AS ID_PAIS,
                                 ADJ.FILENAME,
                                 ADJ.MIME_TYPE,
                                 DBMS_LOB.getlength (CONTENT) "TAMANIO",
                                 ADJ.ID_ADJUNTO,
                                 DOC.ES_JUSTIFICACION,
                                 DOC.COMENTARIO,
                                 DOC.FECHA_DOCUMENTO,
                                 DOC.FECHA_REGISTRO,
                                 TTB.DESCRIPCION AS TAREA,
                                 TTB.ID AS ID_TAREA,
                                 CL.ID_CLIENTE,
                                 TDT.PUEDE_MODIFICAR,
                                 TDT.PUEDE_BORRAR,
                                 TDT.PUEDE_CONSULTAR,
                                 NVL (DOC.NOMBRE_USUARIO_CREA,
                                      DOC.LOGIN_USUARIO_CREA)
                                    NOMBRE_USUARIO_CREA,
                                 NVL (DOC.NOMBRE_USUARIO_MODIFICA,
                                      DOC.LOGIN_USUARIO_MODIFICA)
                                    NOMBRE_USUARIO_MODIFICA,
                                 NUM_SERIE_DOCUMENTO
                         FROM DOCUMENTO DOC                           --460
                                 LEFT OUTER JOIN ADJUNTO ADJ
                                    ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                 INNER JOIN TCA_DOCUMENTO TD
                                    ON DOC.ID_TIPO_DOCUMENTO = TD.ID
                                 INNER JOIN DOCUMENTOS DCTS
                                    ON DCTS.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                 INNER JOIN OPERACION OP
                                    ON OP.ID_OPERACION = DCTS.ID_OPERACION
                                 INNER JOIN CLIENTES CL
                                    ON OP.ID_CLIENTE = CL.ID_CLIENTE
                                 INNER JOIN CAT_PRODUCTO CP
                                    ON CP.ID = OP.ID_PRODUCTO
                                  INNER JOIN CAT_PAISES CPS
                                    ON  CPS.ID = CL.PAIS
                             INNER     JOIN TCA_TIPO_OPERACION TTO
                                    ON CP.ID_TIPO_OPERACION = TTO.ID
                                 LEFT JOIN TCA_TAREA_BPM TTB
                                    ON TTB.ID = DOC.ID_TAREA_BPM
                                 LEFT JOIN TCA_PROCESO_BPM TCB
                                    ON TCB.ID = TTB.ID_PROCESO_BPM
                                  LEFT      JOIN TCO_CONFIGURAR_TIPO_ONBASE TCTO
                                    ON TD.id = TCTO.ID_TCA_DOCUMENTO and CPS.ID = TCTO.ID_CAT_PAISES and TCTO.ID_TCA_TIPO_OPERACION =  TTO.ID
                                 INNER JOIN TCO_DOCUMENTO_TAREA TDT
                                    ON TD.ID = TDT.ID_TCA_DOCUMENTO
                                       AND TDT.ID_TAREA_BPM =P_IdTarea --TTB.ID
                           WHERE     DOC.BAN_ESTATUS <> 0 -- Se agrega el estado  activo o incativo, mostrar solo activos
                                 AND OP.ID_OPERACION = P_ID_Operacion
                                 AND TDT.PUEDE_CONSULTAR = 1
                                 AND ES_JUSTIFICACION = 0
                                 AND TTB.ID IS NULL                 --ID TAREA
                                 AND ADJ.ID_ONBASE IS NULL) DBFENIX
                   WHERE NVL (ID_CLIENTE, 0) =
                            COALESCE (P_IdCliente, NVL (ID_CLIENTE, 0))
                         AND NVL (ID_TIPO_DOCUMENTO, 0) =
                               COALESCE (P_TipoDocumento,
                                         NVL (ID_TIPO_DOCUMENTO, 0)))      ---
                 UNION
                 SELECT DISTINCT
                        CASE
                           WHEN ETAPA IS NULL THEN 'En Transito'
                           ELSE ETAPA
                        END
                           AS ETAPA,
                        NVL (ID_ETAPA, 0) ID_ETAPA,
                        CASE
                           WHEN NOMBRE_TIPO_DOCUMENTO IS NULL THEN 'General'
                           ELSE NOMBRE_TIPO_DOCUMENTO
                        END
                           AS NOMBRE_TIPO_DOCUMENTO,
                        ID_DOCUMENTO,
                        ID_TIPO_DOCUMENTO,
                        CODIGO_DOCUMENTO,
                        ID_ONBASE,                            --AS ID_EXTERNO,
                        ID_OPERACION,
                        ID_PRODUCTO,
                        ID_PAIS,
                        FILENAME,
                        MIME_TYPE,
                        TAMANIO,
                        ID_ADJUNTO,
                        ES_JUSTIFICACION,
                        COMENTARIO,
                        FECHA_DOCUMENTO,
                        FECHA_REGISTRO,
                        TAREA,
                        ID_TAREA,
                        CASE
                           WHEN PUEDE_MODIFICAR = 1 OR ETAPA IS NULL
                           THEN
                              'true'
                           ELSE
                              'false'
                        END
                           AS PUEDE_MODIFICAR,
                        CASE
                           WHEN PUEDE_BORRAR = 1 THEN 'true'
                           ELSE 'false'
                        END
                           AS PUEDE_BORRAR,
                        PUEDE_CONSULTAR,
                        ItemTypeGroupName,
                        ItemTypeGroupNum,
                        ItemTypeName,
                        ItemNum,
                        ItemTypeNum,
                        ItemName,
                        Status,
                        ItemDate ItemDate,
                        DateStored,
                        epdocid,
                        SecurityKW,
                        Pais,
                        Linea_Credito,
                        CASE
                           WHEN etapa IS NOT NULL
                           THEN
                              NVL (
                                 SUBSTR (FILENAME,
                                         1,
                                         (INSTR (FILENAME, '.') - 1)),
                                 FILENAME)
                           ELSE
                              RTRIM (ItemName)
                        END
                           Nombre,
                        Numero_Documento,
                        Periodo,
                        Resumen,
                        Tipo,
                        Codigo_Intervencion,
                        NOMBRE_USUARIO_CREA,
                        NOMBRE_USUARIO_MODIFICA,
                        NUM_SERIE_DOCUMENTO
                   FROM (SELECT itG.ItemTypeGroupName,         -- nombre grupo
                                dcT.ItemTypeGroupNum,
                                dcT.ItemTypeName,               -- nombre tipo
                                itD.ItemNum,               --"ID_DOC"-- doc id
                                itD.ItemTypeNum, --"Tipo_documento_Fénix"-- codigo tipo documento -- llaves
                                itD.ItemName,              -- Nombre documento
                                itD.Status,
                                itD.ItemDate ItemDate,               --"Fecha"
                                itD.DateStored,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'epdocid')
                                   AS epdocid,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'SecurityKW')
                                   AS SecurityKW,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Pais')
                                   AS Pais,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Linea Credito')
                                   AS Linea_Credito,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Nombre')
                                   AS Nombre,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Numero Documento')
                                   AS Numero_Documento,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Periodo')
                                   AS Periodo,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Resumen')
                                   AS Resumen,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Tipo')
                                   AS Tipo,
                                PKG_CONSULTA_ONBASE.f_estado_onbase (
                                   itD.ItemNum,
                                   'Codigo Intervencion')
                                   AS Codigo_Intervencion
                           FROM hsi.DocType@OnBase dcT,
                                hsi.ItemTypeGroup@OnBase itG,
                                hsi.ItemData@OnBase itD
                          WHERE dcT.ItemTypeGroupNum = itG.ItemTypeGroupNum
                                AND itD.ItemTypeNum = dcT.ItemTypeNum
                                AND itD.STATUS = 0
                                AND itD.ItemNum IN
                                         (SELECT kiINT.ItemNum
                                            FROM hsi.KeyItem109@OnBase kiINT
                                           WHERE kiINT.KeyValueChar =
                                                    P_ID_Operacion)) DBLINK,
                        (SELECT TCB.ID AS ID_ETAPA,
                                TCB.DESCRIPCION AS ETAPA,
                                TD.DESCRIPCION AS NOMBRE_TIPO_DOCUMENTO,
                                DOC.ID_DOCUMENTO,
                                DOC.ID_TIPO_DOCUMENTO,
                                DOC.CODIGO_DOCUMENTO,
                                ADJ.ID_ONBASE,                --AS ID_EXTERNO,
                                OP.ID_OPERACION,
                                CP.ID AS ID_PRODUCTO,
                                TCTO.ID_CAT_PAISES AS ID_PAIS,
                                ADJ.FILENAME,
                                ADJ.MIME_TYPE,
                                DBMS_LOB.getlength (CONTENT) "TAMANIO",
                                ADJ.ID_ADJUNTO,
                                DOC.ES_JUSTIFICACION,
                                DOC.COMENTARIO,
                                DOC.FECHA_DOCUMENTO,
                                DOC.FECHA_REGISTRO,
                                TTB.DESCRIPCION AS TAREA,
                                TTB.ID AS ID_TAREA,
                                CL.ID_CLIENTE,
                                TDT.PUEDE_MODIFICAR,
                                TDT.PUEDE_BORRAR,
                                TDT.PUEDE_CONSULTAR,
                                NVL (DOC.NOMBRE_USUARIO_CREA,
                                     DOC.LOGIN_USUARIO_CREA)
                                   NOMBRE_USUARIO_CREA,
                                NVL (DOC.NOMBRE_USUARIO_MODIFICA,
                                     DOC.LOGIN_USUARIO_MODIFICA)
                                   NOMBRE_USUARIO_MODIFICA,
                                DOC.NUM_SERIE_DOCUMENTO
                           FROM DOCUMENTO DOC                            --460
                                LEFT OUTER JOIN ADJUNTO ADJ
                                   ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                INNER JOIN TCA_DOCUMENTO TD
                                   ON DOC.ID_TIPO_DOCUMENTO = TD.ID
                                INNER JOIN TCO_CONFIGURAR_TIPO_ONBASE TCTO
                                   ON TD.id = TCTO.ID_TCA_DOCUMENTO
                                INNER JOIN DOCUMENTOS DCTS
                                   ON DCTS.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                INNER JOIN OPERACION OP
                                   ON OP.ID_OPERACION = DCTS.ID_OPERACION
                                INNER JOIN CLIENTES CL
                                   ON OP.ID_CLIENTE = CL.ID_CLIENTE
                                INNER JOIN CAT_PRODUCTO CP
                                   ON CP.ID = OP.ID_PRODUCTO
                                INNER JOIN CAT_PAISES CPS
                                   ON CPS.ID = TCTO.ID_CAT_PAISES
                                      AND CPS.ID = CL.PAIS
                                INNER JOIN TCA_TIPO_OPERACION TTO
                                   ON CP.ID_TIPO_OPERACION = TTO.ID
                                      AND TCTO.ID_TCA_TIPO_OPERACION = TTO.ID
                                INNER JOIN TCA_TAREA_BPM TTB
                                   ON TTB.ID = DOC.ID_TAREA_BPM
                                INNER JOIN TCA_PROCESO_BPM TCB
                                   ON TCB.ID = TTB.ID_PROCESO_BPM
                                INNER JOIN TCO_DOCUMENTO_TAREA TDT
                                   ON TD.ID = TDT.ID_TCA_DOCUMENTO
                                      AND TDT.ID_TAREA_BPM =
                                            NVL (P_IdTarea, TTB.ID)   --TTB.ID
                          WHERE     DOC.BAN_ESTATUS <> 0 -- Se agrega el estado  activo o incativo, mostrar solo activos
                                AND OP.ID_OPERACION = P_ID_Operacion
                                AND TDT.PUEDE_CONSULTAR = 1
                                AND ES_JUSTIFICACION = 0) DBFENIX
                  WHERE DBLINK.ItemNum = DBFENIX.ID_ONBASE(+)
                        AND NVL (ID_CLIENTE, 0) =
                              COALESCE (P_IdCliente, NVL (ID_CLIENTE, 0))
                        AND NVL (ID_TIPO_DOCUMENTO, 0) =
                              COALESCE (P_TipoDocumento,
                                        NVL (ID_TIPO_DOCUMENTO, 0))
                 ORDER BY ID_ETAPA, NOMBRE_TIPO_DOCUMENTO ASC);
      ELSE
         IF (P_IdCliente IS NOT NULL)
         THEN
            /*
            ###############################################################
            #                                  Consultar Documentos por Cliente           F3                                        #
            #                                                                                                                                         #
            ############################################################### */

            SELECT ID_FLEXCUBE
              INTO id_flexcube
              FROM CLIENTES
             WHERE ID_CLIENTE = P_IdCliente;


            SELECT CAST (
                      COLLECT (T_CON_ONBASE1 (ETAPA,
                                              NOMBRE_TIPO_DOCUMENTO,
                                              ID_DOCUMENTO,
                                              ID_TIPO_DOCUMENTO,
                                              CODIGO_DOCUMENTO,
                                              ID_ONBASE,
                                              ID_OPERACION,
                                              ID_PRODUCTO,
                                              ID_PAIS,
                                              FILENAME,
                                              MIME_TYPE,
                                              TAMANIO,
                                              ID_ADJUNTO,
                                              ES_JUSTIFICACION,
                                              COMENTARIO,
                                              FECHA_DOCUMENTO,
                                              FECHA_REGISTRO,
                                              TAREA,
                                              ID_TAREA,
                                              PUEDE_MODIFICAR,
                                              PUEDE_BORRAR,
                                              ItemTypeGroupName,
                                              ItemTypeGroupNum,
                                              ItemTypeName,
                                              ItemNum,
                                              ItemTypeNum,
                                              ItemName,
                                              Status,
                                              ItemDate,
                                              DateStored,
                                              epdocid,
                                              SecurityKW,
                                              Pais,
                                              Linea_Credito,
                                              Nombre,
                                              Numero_Documento,
                                              Periodo,
                                              Resumen,
                                              Tipo,
                                              Codigo_Intervencion,
                                              NOMBRE_USUARIO_CREA,
                                              NOMBRE_USUARIO_MODIFICA,
                                              NUM_SERIE_DOCUMENTO)) AS T_ONBASE)
              INTO L_T_ONBASE
              FROM (  SELECT DISTINCT
                             CASE
                                WHEN ETAPA IS NULL THEN 'En Transito'
                                ELSE ETAPA
                             END
                                AS ETAPA,
                             NVL (ID_ETAPA, 0) ID_ETAPA,
                             CASE
                                WHEN NOMBRE_TIPO_DOCUMENTO IS NULL
                                THEN
                                   'General'
                                ELSE
                                   NOMBRE_TIPO_DOCUMENTO
                             END
                                AS NOMBRE_TIPO_DOCUMENTO,
                             ID_DOCUMENTO,
                             ID_TIPO_DOCUMENTO,
                             CODIGO_DOCUMENTO,
                             ID_ONBASE,                       --AS ID_EXTERNO,
                             ID_OPERACION,
                             ID_PRODUCTO,
                             ID_PAIS,
                             FILENAME,
                             MIME_TYPE,
                             TAMANIO,
                             ID_ADJUNTO,
                             ES_JUSTIFICACION,
                             COMENTARIO,
                             FECHA_DOCUMENTO,
                             FECHA_REGISTRO,
                             TAREA,
                             ID_TAREA,
                             CASE
                                WHEN PUEDE_MODIFICAR = 1 OR ETAPA IS NULL
                                THEN
                                   'true'
                                ELSE
                                   'false'
                             END
                                AS PUEDE_MODIFICAR,
                             CASE
                                WHEN PUEDE_BORRAR = 1 THEN 'true'
                                ELSE 'false'
                             END
                                AS PUEDE_BORRAR,
                             PUEDE_CONSULTAR,
                             ItemTypeGroupName,
                             ItemTypeGroupNum,
                             ItemTypeName,
                             ItemNum,
                             ItemTypeNum,
                             ItemName,
                             Status,
                             ItemDate ItemDate,
                             DateStored,
                             NULL epdocid,
                             NULL SecurityKW,
                             NULL Pais,
                             NULL Linea_Credito,
                             CASE
                                WHEN etapa IS NOT NULL
                                THEN
                                   NVL (
                                      SUBSTR (FILENAME,
                                              1,
                                              (INSTR (FILENAME, '.') - 1)),
                                      FILENAME)
                                ELSE
                                   RTRIM (ItemName)
                             END
                                Nombre,
                             NULL Numero_Documento,
                             NULL Periodo,
                             NULL Resumen,
                             NULL Tipo,
                             NULL Codigo_Intervencion,
                             NOMBRE_USUARIO_CREA,
                             NOMBRE_USUARIO_MODIFICA,
                             NUM_SERIE_DOCUMENTO
                        FROM (SELECT itG.ItemTypeGroupName,    -- nombre grupo
                                     dcT.ItemTypeGroupNum,
                                     dcT.ItemTypeName,          -- nombre tipo
                                     itD.ItemNum,          --"ID_DOC"-- doc id
                                     itD.ItemTypeNum, --"Tipo_documento_Fénix"-- codigo tipo documento -- llaves
                                     itD.ItemName,         -- Nombre documento
                                     itD.Status,
                                     itD.ItemDate ItemDate,          --"Fecha"
                                     itD.DateStored
                                FROM hsi.DocType@OnBase dcT,
                                     hsi.ItemTypeGroup@OnBase itG,
                                     hsi.ItemData@OnBase itD
                               WHERE dcT.ItemTypeGroupNum =
                                        itG.ItemTypeGroupNum
                                     AND itD.ItemTypeNum = dcT.ItemTypeNum
                                     AND itD.STATUS = 0
                                     AND itD.ItemNum IN
                                              (SELECT kiCHAR.ItemNum
                                                 FROM hsi.KeyItem118@OnBase kiCHAR
                                                WHERE kiCHAR.KeyValueChar =
                                                         id_flexcube)) DBLINK,
                             (SELECT TCB.ID AS ID_ETAPA,
                                     TCB.DESCRIPCION AS ETAPA,
                                     TD.DESCRIPCION AS NOMBRE_TIPO_DOCUMENTO,
                                     DOC.ID_DOCUMENTO,
                                     DOC.ID_TIPO_DOCUMENTO,
                                     DOC.CODIGO_DOCUMENTO,
                                     ADJ.ID_ONBASE,
                                     -NULL ID_OPERACION,
                                     NULL ID_PRODUCTO,
                                     TCTO.ID_CAT_PAISES AS ID_PAIS,
                                     ADJ.FILENAME,
                                     ADJ.MIME_TYPE,
                                     DBMS_LOB.getlength (CONTENT) "TAMANIO",
                                     ADJ.ID_ADJUNTO,
                                     DOC.ES_JUSTIFICACION,
                                     DOC.COMENTARIO,
                                     DOC.FECHA_DOCUMENTO,
                                     DOC.FECHA_REGISTRO,
                                     TTB.DESCRIPCION AS TAREA,
                                     TTB.ID AS ID_TAREA,
                                     CL.ID_CLIENTE,
                                     TDT.PUEDE_MODIFICAR,
                                     TDT.PUEDE_BORRAR,
                                     TDT.PUEDE_CONSULTAR,
                                     NVL (DOC.NOMBRE_USUARIO_CREA,
                                          DOC.LOGIN_USUARIO_CREA)
                                        NOMBRE_USUARIO_CREA,
                                     NVL (DOC.NOMBRE_USUARIO_MODIFICA,
                                          DOC.LOGIN_USUARIO_MODIFICA)
                                        NOMBRE_USUARIO_MODIFICA,
                                     DOC.NUM_SERIE_DOCUMENTO
                                FROM DOCUMENTO DOC                       --460
                                     LEFT OUTER JOIN ADJUNTO ADJ
                                        ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                     INNER JOIN TCA_DOCUMENTO TD
                                        ON DOC.ID_TIPO_DOCUMENTO = TD.ID
                                     INNER JOIN TCO_CONFIGURAR_TIPO_ONBASE TCTO
                                        ON TD.id = TCTO.ID_TCA_DOCUMENTO
                                     JOIN DOCUMENTOS_CLIENTE DCTS
                                        ON DCTS.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                                     INNER JOIN CLIENTES CL
                                        ON DCTS.ID_CLIENTE = CL.ID_CLIENTE
                                     INNER JOIN CAT_PAISES CPS
                                        ON CPS.ID = TCTO.ID_CAT_PAISES
                                           AND CPS.ID = CL.PAIS
                                     INNER JOIN TCA_TAREA_BPM TTB
                                        ON TTB.ID = DOC.ID_TAREA_BPM
                                     INNER JOIN TCA_PROCESO_BPM TCB
                                        ON TCB.ID = TTB.ID_PROCESO_BPM
                                     INNER JOIN TCO_DOCUMENTO_TAREA TDT
                                        ON TD.ID = TDT.ID_TCA_DOCUMENTO
                                           AND TDT.ID_TAREA_BPM =
                                                 NVL (P_IdTarea, TTB.ID) --TTB.ID
                               WHERE     DOC.BAN_ESTATUS <> 0 -- Se agrega el estado  activo o incativo, mostrar solo activos
                                     AND CL.ID_CLIENTE = P_IdCliente
                                     AND TDT.PUEDE_CONSULTAR = 1
                                     AND ES_JUSTIFICACION = 0) DBFENIX
                       WHERE DBLINK.ItemNum = DBFENIX.ID_ONBASE(+)
                    ORDER BY ID_ETAPA, NOMBRE_TIPO_DOCUMENTO ASC);
         END IF;
      END IF;

      RETURN L_T_ONBASE;
   EXCEPTION
      WHEN NO_DATA_FOUND
      THEN
         DBMS_OUTPUT.PUT_LINE (
            'no existe el cliente' || id_flexcube || P_IdCliente);
   END F_Consulta_on_Base;

   FUNCTION F_ESTADO_ONBASE (p_item INTEGER, p_type VARCHAR2)
      RETURN VARCHAR2
   IS
      v_query_str   VARCHAR2 (1000);
      v_resultado   VARCHAR2 (1000);
      v_tabla       VARCHAR2 (50);
      v_columna     VARCHAR2 (50);
   BEGIN
      SELECT TABLA, COLUMNA
        INTO v_tabla, v_columna
        FROM TCA_KEY_ONBASE
       WHERE TRIM (KEYTYPE) = p_type;

      v_query_str :=
            'SELECT'
         || ' '
         || v_columna
         || ' '
         || 'FROM '
         || v_tabla
         || ' WHERE ItemNum = '
         || p_item;

      EXECUTE IMMEDIATE v_query_str INTO v_resultado;

      RETURN v_resultado;
   END F_ESTADO_ONBASE;
END PKG_CONSULTA_ONBASE;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY       PKG_DESEMBOLSOS
IS
   PROCEDURE SP_TRANS_GPOECONOMICO_PAIS (
       P_ID_CLIENTE    IN     NUMBER,
      RECORDSET_GE            OUT SYS_REFCURSOR,   
      RECORDSET_PAIS          OUT SYS_REFCURSOR,
      P_CODIGO_RES     OUT NUMBER,
      P_MENSAJE        OUT VARCHAR2)
   IS
      V_ID_CLIENTE    NUMBER (12);
      V_GRUPO_ECONOMICO   NUMBER (12);
      V_PAIS   NUMBER (12);
   BEGIN

   
   SELECT GRUPO_ECONOMICO, PAIS 
     INTO V_GRUPO_ECONOMICO,V_PAIS
     FROM CLIENTES
    WHERE ID_CLIENTE = P_ID_CLIENTE;

   
   IF V_GRUPO_ECONOMICO IS NOT NULL and V_GRUPO_ECONOMICO != 0 THEN 
   
   OPEN RECORDSET_GE FOR
      SELECT   SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO
        FROM CONTRATO_DESEMBOLSO CD,
             TCA_ESTADO_OPERACION TEO,
             TRE_SOLICITUD_LINEA_CREDITO TRSL,
             LINEA_CREDITO LC,
             TCA_TIPO_MONEDA TTM,
             OPERACION OP,
             CONTRATO CON,
                   CLIENTES CLI
             WHERE     CD.ID_TCA_ESTADO = TEO.ID
             AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
             AND TRSL.ID_LINEA = LC.ID
             AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
             AND LC.ID_FLEXCUBE IS NOT NULL
             AND TEO.ID IN (14, 15, 16)
             AND LC.ID_CONTRATO = CON.ID
             AND CON.ID_OPERACION = OP.ID_OPERACION
             AND OP.ID_CLIENTE = CLI.ID_CLIENTE
             AND CLI.ID_CLIENTE in (select ID_CLIENTE from CLIENTES where GRUPO_ECONOMICO = V_GRUPO_ECONOMICO and PAIS = V_PAIS)
             GROUP BY TTM.COD_EXTERNO;
             
             OPEN RECORDSET_PAIS FOR
      SELECT   SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO
        FROM CONTRATO_DESEMBOLSO CD,
             TCA_ESTADO_OPERACION TEO,
             TRE_SOLICITUD_LINEA_CREDITO TRSL,
             LINEA_CREDITO LC,
             TCA_TIPO_MONEDA TTM,
             OPERACION OP,
             CONTRATO CON,
                   CLIENTES CLI
             WHERE     CD.ID_TCA_ESTADO = TEO.ID
             AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
             AND TRSL.ID_LINEA = LC.ID
             AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
             AND LC.ID_FLEXCUBE IS NOT NULL
             AND TEO.ID IN (14, 15, 16)
             AND LC.ID_CONTRATO = CON.ID
             AND CON.ID_OPERACION = OP.ID_OPERACION
             AND OP.ID_CLIENTE = CLI.ID_CLIENTE
             AND CLI.ID_CLIENTE in (select ID_CLIENTE from CLIENTES where PAIS = V_PAIS)
             GROUP BY TTM.COD_EXTERNO; 
             
    ELSE 
             
    OPEN RECORDSET_PAIS FOR
      SELECT   SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO
        FROM CONTRATO_DESEMBOLSO CD,
             TCA_ESTADO_OPERACION TEO,
             TRE_SOLICITUD_LINEA_CREDITO TRSL,
             LINEA_CREDITO LC,
             TCA_TIPO_MONEDA TTM,
             OPERACION OP,
             CONTRATO CON,
                   CLIENTES CLI
             WHERE     CD.ID_TCA_ESTADO = TEO.ID
             AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
             AND TRSL.ID_LINEA = LC.ID
             AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
             AND LC.ID_FLEXCUBE IS NOT NULL
             AND TEO.ID IN (14, 15, 16)
             AND LC.ID_CONTRATO = CON.ID
             AND CON.ID_OPERACION = OP.ID_OPERACION
             AND OP.ID_CLIENTE = CLI.ID_CLIENTE
             AND CLI.ID_CLIENTE in (select ID_CLIENTE from CLIENTES where PAIS = V_PAIS)
             GROUP BY TTM.COD_EXTERNO;        
             
        END IF;
    P_CODIGO_RES := 0;
    
    EXCEPTION
    WHEN OTHERS THEN
    
    P_CODIGO_RES := SQLCODE;
    
    P_MENSAJE := SQLERRM;
   END SP_TRANS_GPOECONOMICO_PAIS;
   
   PROCEDURE SP_CONSULTAR_SALDO_CARTERA(
      P_LINEA_CREDITO    IN VARCHAR2,
      P_LINEA_FINANCIERA IN T_VARCHAR2_TAB,
      P_DESTINO          IN T_VARCHAR2_TAB,
      P_MONEDA           IN T_VARCHAR2_TAB,
      P_PAIS             IN T_VARCHAR2_TAB,
      P_CODIGO_RES      OUT NUMBER,
      P_MENSAJE         OUT VARCHAR2,
      P_SALDO           OUT NUMBER)
  AS
  P_LINEA_FINANCIERA_STRING VARCHAR2(255) := NULL; 
  P_DESTINO_STRING          VARCHAR2(255) := NULL;
  P_MONEDA_STRING           VARCHAR2(255) := NULL;
  P_PAIS_STRING             VARCHAR2(255) := NULL;
  
  BEGIN
  
  IF P_LINEA_FINANCIERA IS NOT NULL THEN 
    P_LINEA_FINANCIERA_STRING := TAB_TO_STRING(P_LINEA_FINANCIERA,',');
  END IF;
  IF P_DESTINO IS NOT NULL THEN 
    P_DESTINO_STRING          := TAB_TO_STRING(P_DESTINO,',');
  END IF;
  IF P_MONEDA IS NOT NULL THEN 
    P_MONEDA_STRING           := TAB_TO_STRING(P_MONEDA,',');
  END IF;
  IF P_MONEDA IS NOT NULL THEN 
    P_PAIS_STRING             := TAB_TO_STRING(P_MONEDA,',');
  END IF;
  P_SALDO                   := NULL;
  
    P_SALDO := middle.ws_k_flexcube.obtieneSaldoCartera( 
      pvCommitment_User_Ref_No      => P_LINEA_CREDITO
      , pvListaLineaFinanciera      => P_LINEA_FINANCIERA_STRING
      , pvListaDestino              => P_DESTINO_STRING
      , pvListaMoneda               => P_MONEDA_STRING
      , pvListaPais                 => P_PAIS_STRING);
    
    IF P_SALDO IS NULL THEN
      P_SALDO := 0;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('SALDO: '|| P_SALDO);

    P_CODIGO_RES := 0;
    P_MENSAJE := '';
  EXCEPTION
  WHEN OTHERS THEN
    P_CODIGO_RES := SQLCODE;
    P_MENSAJE    := SQLERRM;
  END SP_CONSULTAR_SALDO_CARTERA;
  
  PROCEDURE VALIDA_LIMITE_PORCENTAJE (
   P_NUMERO_LINEA_CREDITO  IN  VARCHAR2,
   P_CODIGO_LINEA_FINANCIERA  IN  VARCHAR2,
   P_MONTO_APROBADO_USD  IN  NUMBER,
   P_SALDO_USD  IN  NUMBER,
   P_CODIGO_RES     OUT NUMBER,
   P_TIPO_RES       OUT NUMBER,
   P_MENSAJE        OUT VARCHAR2)
  AS
  BEGIN
        middle.ws_k_umipyme.valida_limite_porcentaje(
        Numero_Linea_Credito      => P_NUMERO_LINEA_CREDITO
          , Codigo_Linea_Financiera   => P_CODIGO_LINEA_FINANCIERA
          , Monto_Aprobado_USD        => P_MONTO_APROBADO_USD
          , Saldo_USD                 => P_SALDO_USD
          , CodigoResultado           => P_CODIGO_RES
          , TipoResultado             => P_TIPO_RES
          , MensajeError              => P_MENSAJE);
  EXCEPTION
  WHEN OTHERS THEN
    P_CODIGO_RES := SQLCODE;
    P_MENSAJE    := SQLERRM;
  END VALIDA_LIMITE_PORCENTAJE;
  
  PROCEDURE SP_CONSULTAR_TRANSFERENCIAS(
      P_ID_DESEMBOLSO    IN NUMBER,
      P_ID_TRANSFERENCIA    IN NUMBER,
      P_ID_CONSOLIDACION_PADRE IN NUMBER,
      RS_TRANSFERENCIAS OUT SYS_REFCURSOR,
      P_CODIGO_RES OUT NUMBER,
      P_MENSAJE OUT VARCHAR2)
  AS
  BEGIN
  IF P_ID_CONSOLIDACION_PADRE IS NOT NULL THEN
  OPEN RS_TRANSFERENCIAS FOR
     SELECT TB.ID ID_TRANFERENCIA_BAN,TB.ID_CONTRATO_DESEMBOLSO,TB.MONTO_TRANSFERENCIA, 
            TB.ID_TCA_TIPO_MONEDA, TM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,  
            TM.COD_EXTERNO COD_EXTERNO_MONEDA, TB.REFERENCIA_MSJ, TB.BHQ_TRANSFERENCIA, 
            TB.EN_CONSOLIDACION,TB.ID_CONSOLIDACION_PADRE,TB.ES_CONSOLIDACION_PADRE,TB.BHQ_TRANSFERENCIA, TB.ID_BANCO_TRANSFERENCIA, 
            TB.NOMBRE_BANCO_TRANSFERENCIA,TB.NUMERO_CUENTA, TB.ID ID_INSTRUCCION_PAGO,TB.ID_OPERACION, 
            TB.TIPO_MENSAJE, TB.TIPO_OPCION_BENEF, 
            TB.NUMERO_CTA_BENEF, TB.IDENTIFICADOR_BENEF, TB.BENEFICIARIO_BENEF, TB.DIRECCION_BENEF, 
            TB.TIPO_OPCION_BAN_BENEF, TB.NUMERO_CTA_BAN_BENEF, TB.IDENTIFICADOR_BAN_BENEF, TB.BENEFICIARIO_BAN_BENEF, 
            TB.DIRECCION_BAN_BENEF, TB.TIPO_OPCION_BAN_INTER, TB.NUMERO_CTA_BAN_INTER, TB.IDENTIFICADOR_BAN_INTER, 
            TB.BENEFICIARIO_BAN_INTER, TB.DIRECCION_BAN_INTER,TB.ESTADO_INSTRUCCION 
            FROM TRANSFERENCIA_BANCARIA TB 
            INNER JOIN CONTRATO_DESEMBOLSO C ON C.ID = TB.ID_CONTRATO_DESEMBOLSO 
            INNER JOIN TCA_TIPO_MONEDA TM ON TM.ID = TB.ID_TCA_TIPO_MONEDA 
            WHERE TB.ID_CONSOLIDACION_PADRE = P_ID_CONSOLIDACION_PADRE;
  ELSIF P_ID_DESEMBOLSO IS NOT NULL THEN
  OPEN RS_TRANSFERENCIAS FOR
  SELECT TB.ID ID_TRANFERENCIA_BAN,TB.ID_CONTRATO_DESEMBOLSO,TB.MONTO_TRANSFERENCIA, TB.ID_TCA_TIPO_MONEDA, 
  TM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,  TM.COD_EXTERNO COD_EXTERNO_MONEDA, TB.REFERENCIA_MSJ, 
  TB.BHQ_TRANSFERENCIA, TB.EN_CONSOLIDACION, TB.ID_BANCO_TRANSFERENCIA, TB.NOMBRE_BANCO_TRANSFERENCIA,  
  TB.NUMERO_CUENTA, TB.ID ID_INSTRUCCION_PAGO,TB.ID_OPERACION, TB.TIPO_MENSAJE, TB.TIPO_OPCION_BENEF, 
  TB.NUMERO_CTA_BENEF, TB.IDENTIFICADOR_BENEF, TB.BENEFICIARIO_BENEF, TB.DIRECCION_BENEF, TB.TIPO_OPCION_BAN_BENEF, 
  TB.NUMERO_CTA_BAN_BENEF, TB.IDENTIFICADOR_BAN_BENEF, TB.BENEFICIARIO_BAN_BENEF, TB.DIRECCION_BAN_BENEF, 
  TB.TIPO_OPCION_BAN_INTER, TB.NUMERO_CTA_BAN_INTER, TB.IDENTIFICADOR_BAN_INTER, TB.BENEFICIARIO_BAN_INTER, 
  TB.DIRECCION_BAN_INTER,TB.ESTADO_INSTRUCCION 
  FROM TRANSFERENCIA_BANCARIA TB 
  INNER JOIN CONTRATO_DESEMBOLSO C ON C.ID = TB.ID_CONTRATO_DESEMBOLSO 
  INNER JOIN TCA_TIPO_MONEDA TM ON TM.ID = TB.ID_TCA_TIPO_MONEDA WHERE C.ID = P_ID_DESEMBOLSO;
            
    ELSE 
    OPEN RS_TRANSFERENCIAS FOR
      SELECT TB.ID ID_TRANFERENCIA_BAN,TB.ID_CONTRATO_DESEMBOLSO,TB.MONTO_TRANSFERENCIA, 
            TB.ID_TCA_TIPO_MONEDA, TM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,  
            TM.COD_EXTERNO COD_EXTERNO_MONEDA, TB.REFERENCIA_MSJ, TB.BHQ_TRANSFERENCIA, 
            TB.EN_CONSOLIDACION,TB.ID_CONSOLIDACION_PADRE,TB.ES_CONSOLIDACION_PADRE,
            TB.ID_BANCO_TRANSFERENCIA, TB.NOMBRE_BANCO_TRANSFERENCIA,  
            TB.NUMERO_CUENTA, TB.ID ID_INSTRUCCION_PAGO,TB.ID_OPERACION, TB.TIPO_MENSAJE, TB.TIPO_OPCION_BENEF, 
            TB.NUMERO_CTA_BENEF, TB.IDENTIFICADOR_BENEF, TB.BENEFICIARIO_BENEF, TB.DIRECCION_BENEF, 
            TB.TIPO_OPCION_BAN_BENEF, TB.NUMERO_CTA_BAN_BENEF, TB.IDENTIFICADOR_BAN_BENEF, TB.BENEFICIARIO_BAN_BENEF, 
            TB.DIRECCION_BAN_BENEF, TB.TIPO_OPCION_BAN_INTER, TB.NUMERO_CTA_BAN_INTER, TB.IDENTIFICADOR_BAN_INTER, 
            TB.BENEFICIARIO_BAN_INTER, TB.DIRECCION_BAN_INTER,TB.ESTADO_INSTRUCCION 
            FROM TRANSFERENCIA_BANCARIA TB 
            INNER JOIN CONTRATO_DESEMBOLSO C ON C.ID = TB.ID_CONTRATO_DESEMBOLSO 
            INNER JOIN TCA_TIPO_MONEDA TM ON TM.ID = TB.ID_TCA_TIPO_MONEDA 
            WHERE TB.ID = P_ID_TRANSFERENCIA;
   END IF;
    P_CODIGO_RES := 0;
    EXCEPTION
  WHEN OTHERS THEN
    P_CODIGO_RES := SQLCODE;
    P_MENSAJE    := SQLERRM;
  END SP_CONSULTAR_TRANSFERENCIAS;
  
  PROCEDURE SP_UPSERT_TRANSFERENCIA(
   T_LISTA_TRANSFERENCIA_BANCARIA  IN  T_TRANSFERENCIA_BANCARIA,
   P_CODIGO_RES                 OUT NUMBER,
   P_TIPO_RES                   OUT NUMBER,
   P_MENSAJE                    OUT VARCHAR2)
  AS
    
  BEGIN
  
    IF T_LISTA_TRANSFERENCIA_BANCARIA.Exists(1) then
      FOR i IN T_LISTA_TRANSFERENCIA_BANCARIA.FIRST..T_LISTA_TRANSFERENCIA_BANCARIA.LAST LOOP
        IF T_LISTA_TRANSFERENCIA_BANCARIA(i).BHQ_TRANSFERENCIA IS NOT NULL THEN
          UPDATE TRANSFERENCIA_BANCARIA SET BHQ_TRANSFERENCIA = T_LISTA_TRANSFERENCIA_BANCARIA(i).BHQ_TRANSFERENCIA WHERE ID = T_LISTA_TRANSFERENCIA_BANCARIA(i).ID_TRANSFERENCIA;           
        END IF;
        IF T_LISTA_TRANSFERENCIA_BANCARIA(i).NUMERO_RESERVA IS NOT NULL THEN
           UPDATE TRANSFERENCIA_BANCARIA SET NUMERO_RESERVA = T_LISTA_TRANSFERENCIA_BANCARIA(i).NUMERO_RESERVA WHERE ID = T_LISTA_TRANSFERENCIA_BANCARIA(i).ID_TRANSFERENCIA;
        END IF;
      END LOOP;
    END IF;
        
    P_CODIGO_RES := 0;
    P_TIPO_RES := 0;
    P_MENSAJE  := 'Procedimiento  ejecutado  correctamente !';
  
  EXCEPTION WHEN OTHERS THEN
  
    P_CODIGO_RES := SQLCODE;
    P_TIPO_RES := 1;
    P_MENSAJE := SQLERRM;
  
  END SP_UPSERT_TRANSFERENCIA;
  
  PROCEDURE SP_LISTA_PEDIENTE_F1(
   P_NUMERO_LINEA_CREDITO       IN  VARCHAR2,
   P_CODIGO_LINEA_FINANCIERA    IN  VARCHAR2,
   RECORDSET                    OUT SYS_REFCURSOR,
   P_CODIGO_RES                 OUT NUMBER,
   P_TIPO_RES                   OUT NUMBER,
   P_MENSAJE                    OUT VARCHAR2,
   P_ACUMULADO_MESSAGE          OUT VARCHAR2)
  AS
   P_NUMERO_CONTRATO              VARCHAR2(255);
   P_FECHA_APERTURA               DATE;
   P_FECHA_VENCIMIENTO            DATE;
   P_ACUMULADO_DESEMBOLSOS        VARCHAR2(32767);
   RECORDSET_RESP                 SYS_REFCURSOR;
  BEGIN
  
  IF P_NUMERO_LINEA_CREDITO IS NULL AND P_CODIGO_LINEA_FINANCIERA IS NULL THEN 
      P_CODIGO_RES := 1;
      P_TIPO_RES := 1;
      P_MENSAJE  := 'Procedimiento  no ejecutado  correctamente debido a valor nulo: NUMERO_LINEA_CREDITO, P_CODIGO_LINEA_FINANCIERA!';
  ELSE
      IF P_NUMERO_LINEA_CREDITO IS NULL THEN
          P_CODIGO_RES := 1;
          P_TIPO_RES := 1;
          P_MENSAJE  := 'Procedimiento  no ejecutado  correctamente debido a valor nulo: NUMERO_LINEA_CREDITO!';
      ELSIF P_CODIGO_LINEA_FINANCIERA IS NULL THEN
          P_CODIGO_RES := 1;
          P_TIPO_RES := 1;
          P_MENSAJE  := 'Procedimiento  no ejecutado  correctamente debido a valor nulo: P_CODIGO_LINEA_FINANCIERA!';
      ELSE 
          middle.ws_k_umipyme.Lista_Pendiente_F1(
            Numero_Linea_Credito      => P_NUMERO_LINEA_CREDITO
          , Codigo_Linea_Financiera   => P_CODIGO_LINEA_FINANCIERA
          , p_Recordset               => RECORDSET_RESP);
          
          RECORDSET := RECORDSET_RESP;
          
          LOOP 
          FETCH RECORDSET_RESP
          INTO  P_NUMERO_CONTRATO ,P_FECHA_APERTURA, P_FECHA_VENCIMIENTO;
          EXIT WHEN RECORDSET_RESP%NOTFOUND;
          P_ACUMULADO_DESEMBOLSOS := P_ACUMULADO_DESEMBOLSOS || '||' || P_NUMERO_CONTRATO;
          
          END LOOP;
          CLOSE RECORDSET_RESP;
          P_ACUMULADO_MESSAGE := 'LineaCredito[' || P_NUMERO_LINEA_CREDITO ||'], LineaFinanciera[' || P_CODIGO_LINEA_FINANCIERA ||'], Desembolso[' || P_ACUMULADO_DESEMBOLSOS || '||]';
          
          P_CODIGO_RES := 0;
          P_TIPO_RES := 0;
          P_MENSAJE  := 'Procedimiento  ejecutado  correctamente !';
      END IF;
  END IF;

  EXCEPTION WHEN OTHERS THEN

      P_CODIGO_RES := SQLCODE;
      P_TIPO_RES := 1;
      P_MENSAJE := SQLERRM;

  END SP_LISTA_PEDIENTE_F1;
END PKG_DESEMBOLSOS;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY PKG_DOCUMENTO
IS
PROCEDURE SP_UPSERT_TBI_DOCUMENTO(
   T_TBI_DOCUMENTO                 IN T_BITACORA_DOCUMENTO,
   ID_BITACORA                  OUT NUMBER,
   P_CODIGO_RES                 OUT NUMBER,
   P_TIPO_RES                   OUT NUMBER,
   P_MENSAJE                    OUT VARCHAR2)
  AS
  V_ACTIVO   NUMBER; 
BEGIN


IF T_TBI_DOCUMENTO.ID IS NULL THEN

SELECT COUNT(*) INTO V_ACTIVO  FROM TBI_DOCUMENTO WHERE ID_DOCUMENTO = T_TBI_DOCUMENTO.ID_DOCUMENTO;

IF V_ACTIVO >0 THEN
     UPDATE TBI_DOCUMENTO SET ES_REG_ACTIVO = 0  WHERE (ID_DOCUMENTO = T_TBI_DOCUMENTO.ID_DOCUMENTO);
END IF;

  INSERT INTO TBI_DOCUMENTO(ID,ID_DOCUMENTO,
  ESTADO,
  NUM_INSTANCIA,
  SE_HA_NOTIFICADO,
  LOGIN_USUARIO,
  NOMBRE_USUARIO,
  ID_TCA_TAREA_BPM,
  BAN_ESTATUS,
  FECHA_REGISTRO,
  DESCRIPCION,
  ES_REG_ACTIVO) 
  VALUES
  (TBI_DOCUMENTO_SEQ.NEXTVAL,
  T_TBI_DOCUMENTO.ID_DOCUMENTO,
  T_TBI_DOCUMENTO.ESTADO,
  T_TBI_DOCUMENTO.NUM_INSTANCIA,
  T_TBI_DOCUMENTO.SE_HA_NOTIFICADO,
  T_TBI_DOCUMENTO.LOGIN_USUARIO,
  T_TBI_DOCUMENTO.NOMBRE_USUARIO,
  T_TBI_DOCUMENTO.ID_TCA_TAREA_BPM,
  T_TBI_DOCUMENTO.BAN_ESTATUS,
  T_TBI_DOCUMENTO.FECHA_REGISTRO,
  T_TBI_DOCUMENTO.DESCRIPCION,
  T_TBI_DOCUMENTO.ES_REG_ACTIVO)RETURNING ID INTO ID_BITACORA;
  
ELSE 
  UPDATE TBI_DOCUMENTO SET ESTADO = T_TBI_DOCUMENTO.ESTADO,
         DESCRIPCION = T_TBI_DOCUMENTO.DESCRIPCION, 
         SE_HA_NOTIFICADO = T_TBI_DOCUMENTO.SE_HA_NOTIFICADO
  WHERE (ID = T_TBI_DOCUMENTO.ID);
END IF;

P_CODIGO_RES := 0;
P_TIPO_RES := 0;
P_MENSAJE  := 'Procedimiento  ejecutado  correctamente !';
  
EXCEPTION WHEN OTHERS THEN
  
P_CODIGO_RES := SQLCODE;
P_TIPO_RES := 1;
P_MENSAJE := SQLERRM;
  
END SP_UPSERT_TBI_DOCUMENTO;
  
END PKG_DOCUMENTO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY       PKG_ENVIAR_CORREO
IS
   PROCEDURE P_CONSTRUIR_CORREO (P_ID_PLATILLA     IN     NUMBER,
                                 P_ID_OPERACION    IN     NUMBER,
                                 P_ID_CLIENTE      IN     NUMBER,
                                 P_TAGS            IN     T_TAGS,
                                 P_ASUNTO          IN OUT VARCHAR2,
                                 P_MENSAJE         IN OUT VARCHAR2,
                                 P_DESTINATARIOS   IN OUT VARCHAR2,
                                 P_CC              IN OUT VARCHAR2)
   IS
      V_QUERY             VARCHAR2 (4000);
      V_QUERY_COMPLETE    VARCHAR2 (4000);
      V_QUERY_REPLACE     VARCHAR2 (4000);
      V_RESULT            VARCHAR2 (4000);
      V_MENSAJE           VARCHAR2 (5072);
      V_EXIST             NUMBER (1);
      V_CATEGORIA         VARCHAR2 (32);
      V_VALOR_CATEGORIA   NUMBER (12);
      v_QUERY_COUNTER     VARCHAR2 (4000);
      V_COUNT             NUMBER (12);
      V_BAN_VALIDA_TAGS   NUMBER (1);
      V_TAGS              T_TAGS;
      V_NO_ACCIONES       NUMBER (5);
      V_RESULT_ACCIONES   VARCHAR2 (1500):= '<br>';
      V_CONTADOR          NUMBER (5) := 0;
      TYPE NOMBRE_TERMINO IS TABLE OF VARCHAR2(256);
      V_TERMINOS NOMBRE_TERMINO;
      V_RESULT_ENMIENDAS  VARCHAR2 (1500):= '<br>';


/*Cursor para obtener los tags genericos*/
      CURSOR TAGS_GENERICOS (
         P_CATEGORIA VARCHAR2)
      IS
         SELECT DESCRIPCION_TAG, SQL_QUERY
           FROM TCA_TAG_PLANTILLA
          WHERE BAN_GENERICO = 1
                AND (CATEGORIA_PLANTILLA = P_CATEGORIA
                     OR CATEGORIA_PLANTILLA IS NULL);

   BEGIN

       /*Se llena variable para determinar si dentro de los parametros existe
       el tags  ID_ACCION */

      SELECT COUNT (TAG)
        INTO V_NO_ACCIONES
        FROM TABLE (CAST (P_TAGS AS T_TAGS))
       WHERE TAG = 'ID_ACCION';

      /*Se obtiene la informaciÃ³n de la plantilla*/
      SELECT NVL (P_ASUNTO, ASUNTO),
             NVL (P_DESTINATARIOS, DESTINATARIOS),
             NVL (P_CC, CC_DESTINATARIOS),
             MENSAJE,
             BAN_VALIDA_TAGS
        INTO P_ASUNTO,
             P_DESTINATARIOS,
             P_CC,
             V_MENSAJE,
             V_BAN_VALIDA_TAGS
        FROM TCA_PLANTILLA_CORREO
       WHERE ID = P_ID_PLATILLA;

       /*Se agrega un salto de liÃ­nea al mensaje */
      P_MENSAJE := P_MENSAJE || CHR (10) || CHR (10);

      /*Si asigna valor a la categoria en base al parametro P_ID_OPERACION*/
      IF P_ID_OPERACION IS NOT NULL
      THEN
         V_CATEGORIA := 'OPERACION';
         V_VALOR_CATEGORIA := P_ID_OPERACION;
      ELSIF P_ID_CLIENTE IS NOT NULL
      THEN
         V_CATEGORIA := 'CLIENTE';
         V_VALOR_CATEGORIA := P_ID_CLIENTE;
      END IF;


    /*Si ciclan tags genericos  (tags que soy repetitivos en las plantillas y que el parametros 
    que recibe es ID_OPERACION o ID_CLIENTE)  y se le pasa como parametro la categoria*/
      FOR GENERICO IN TAGS_GENERICOS (V_CATEGORIA)
      LOOP

         /*Se llena variable con el query a ejecutar, reemplazando el valor de 
         ID_PARAMETRO por el  id del cliente o de la operacion */    
         V_QUERY_REPLACE :=
            REPLACE (GENERICO.SQL_QUERY, ':ID_PARAMETRO', V_VALOR_CATEGORIA);

              /*Se llena variable para contar los registros del query y se ejecuta*/    
         V_QUERY_COUNTER := 'SELECT COUNT(1) FROM (' || V_QUERY_REPLACE || ')';

         EXECUTE IMMEDIATE V_QUERY_COUNTER INTO V_COUNT;

          /*Si existen registros se continua con el flujo*/    
         IF (V_COUNT = 1)
         THEN

                /*Si ejecuta el query del tag y  el valor que retorna se sustituye en le 
                mensaje o variable de cuerpo del correo*/ 
            EXECUTE IMMEDIATE V_QUERY_REPLACE INTO V_RESULT;

            V_MENSAJE :=
               REPLACE (V_MENSAJE,
                        '[' || GENERICO.DESCRIPCION_TAG || ']',
                        V_RESULT);
         END IF;

      END LOOP;

        /*Si la plantilla tiene BAN_VALIDA_TAGS en 1 se deben de ir a consultar TAGS*/
      IF V_BAN_VALIDA_TAGS = 1
      THEN

         /*Se obtienen los TAGS no genericos, no obligatorios  (tags que no vendran en los parametros de entrada) */
         SELECT CAST (
                   COLLECT (
                     -- T_PARAM_CORREO (TTPL.DESCRIPCION_TAG, V_VALOR_CATEGORIA)) AS T_TAGS)
                     T_TAGS_DEFINICION (TTPL.DESCRIPCION_TAG, V_VALOR_CATEGORIA)) AS T_TAGS)
           INTO V_TAGS
           FROM TRE_TAGS_PLANTILLA TTP JOIN TCA_TAG_PLANTILLA TTPL
                   ON (TTP.ID_TCA_TAG_PLANTILLA = TTPL.ID)
          WHERE     TTP.ID_TCA_PLANTILLA_CORREO = P_ID_PLATILLA
                AND TTPL.BAN_GENERICO = 0
                AND TTP.REQUIERE_TAG = 0;

          /*Se ciclan los TAGS no genericos, no obligatorios */
         FOR IND IN 1 .. V_TAGS.COUNT
         LOOP

            /*Se obtiene el  SQL_QUERY por cada TAG*/
            SELECT SQL_QUERY
              INTO V_QUERY
              FROM TCA_TAG_PLANTILLA
             WHERE DESCRIPCION_TAG = V_TAGS (IND).TAG;

                /*Se llena variable con el query a ejecutar, reemplazando el valor de 
                ID_PARAMETRO por el  id del cliente o de la operacion*/    
            V_QUERY_REPLACE :=
               REPLACE (V_QUERY, ':ID_PARAMETRO', V_TAGS (IND).VALOR);

            /*Se llena variable para contar los registros del query y se ejecuta*/    
            V_QUERY_COUNTER :=
               'SELECT COUNT(1) FROM (' || V_QUERY_REPLACE || ')';

            EXECUTE IMMEDIATE V_QUERY_COUNTER INTO V_COUNT;

            /*Si existen registros se continua con el flujo*/    
            IF (V_COUNT = 1)
            THEN

                   /*Si ejecuta el query del tag y  el valor que retorna se sustituye en le 
                mensaje o variable de cuerpo del correo*/ 
               EXECUTE IMMEDIATE V_QUERY_REPLACE INTO V_RESULT;

               V_MENSAJE :=
                  REPLACE (V_MENSAJE,
                           '[' || V_TAGS (IND).TAG || ']',
                           V_RESULT);
            END IF;

         END LOOP;

      END IF;

       /*Se ciclan los tags no genericos, obligatorios (tags que llegaran en los parametros de entrada)*/
      FOR IND IN 1 .. P_TAGS.COUNT
      LOOP

           /*Se valida la existencia de los tags que llegan*/
         SELECT COUNT (DESCRIPCION_TAG)
           INTO V_EXIST
           FROM TCA_TAG_PLANTILLA
          WHERE DESCRIPCION_TAG = P_TAGS (IND).TAG
          /*validacion para evitar que falle si se llega a enviar un tag generico en los parametros*/
              AND BAN_GENERICO != 1;


         IF V_EXIST > 0
         THEN

              /*Se obtiene el  SQL_QUERY por cada TAG*/
            SELECT SQL_QUERY
              INTO V_QUERY
              FROM TCA_TAG_PLANTILLA
             WHERE DESCRIPCION_TAG = P_TAGS (IND).TAG;

             /*Se llena variable con el query a ejecutar, reemplazando el valor de 
                ID_PARAMETRO por el VALOR de los tags de entrada*/    
            V_QUERY_REPLACE :=
               REPLACE (V_QUERY, ':ID_PARAMETRO', P_TAGS (IND).VALOR);

            /*Se llena variable para contar los registros del query y se ejecuta*/    
            V_QUERY_COUNTER :=
               'SELECT COUNT(1) FROM (' || V_QUERY_REPLACE || ')';

            EXECUTE IMMEDIATE V_QUERY_COUNTER INTO V_COUNT;

              /*Si existen registros se continua con el flujo*/  
            IF (V_COUNT > 0)
            THEN

                /*Si existen enmiendas los datos que retorna la ejecucion de la sentencia se almacenan en un type table*/
                 IF  P_TAGS (IND).TAG = 'ID_ENMIENDA_TCC'
                 THEN

                 EXECUTE IMMEDIATE V_QUERY_REPLACE BULK COLLECT INTO V_TERMINOS;

                  /*Si recorre el cursos y se concatenan los valores en una variable*/
                 FOR IND IN 1 .. V_TERMINOS.COUNT
                 LOOP

                    V_RESULT_ENMIENDAS := V_RESULT_ENMIENDAS || V_TERMINOS(IND) || '<br>';

                 END LOOP;

                 /*Se sustituye el tag de ID_ENMIENDA por la concatenacion anterior*/
                 V_MENSAJE :=
                        REPLACE (V_MENSAJE,
                                 '[' || P_TAGS (IND).TAG || ']',
                                 V_RESULT_ENMIENDAS);

                /*Si el numero de los tags ID_ACCION es mayor a 1 y si ademas el tag actual es ID_ACCION */
                ELSIF V_NO_ACCIONES > 1 AND P_TAGS (IND).TAG = 'ID_ACCION'
                THEN

                /*Se ejecuta el query del TAG de ACCION* y se concatenan los resultados por todos los TAGS*/
                  EXECUTE IMMEDIATE V_QUERY_REPLACE INTO V_RESULT;

                  V_RESULT_ACCIONES := V_RESULT_ACCIONES || V_RESULT || '<br>';

                  V_CONTADOR := V_CONTADOR + 1;

                    /*Si el numero de parametros ID_ACCION es igual al numero de vueltas que ha dado el ciclo 
                    se sustituye el tag ID_ACCION por la concatenacion anterior*/
                  IF V_NO_ACCIONES = V_CONTADOR
                  THEN
                     V_MENSAJE :=
                        REPLACE (V_MENSAJE,
                                 '[' || P_TAGS (IND).TAG || ']',
                                 V_RESULT_ACCIONES);
                  END IF;

                  /*Si no se da ninguno de los casos anteriores, se ejecuta el query y se sustituye en el mensaje*/
               ELSE
                  EXECUTE IMMEDIATE V_QUERY_REPLACE INTO V_RESULT;

                  V_MENSAJE :=
                     REPLACE (V_MENSAJE,
                              '[' || P_TAGS (IND).TAG || ']',
                              V_RESULT);
               END IF;

            END IF;

         END IF;

      END LOOP;

     /*Si asigna la variable V_MENSAJE al parametro de salida P_MENSAJE*/
      P_MENSAJE := P_MENSAJE || V_MENSAJE;
      p_MENSAJE :=  regexp_replace(P_MENSAJE,'\[([_,a-z,0-9,A-Z,-]+)\]', '');

   END P_CONSTRUIR_CORREO;


PROCEDURE P_CONSULTAR_ROLES_USUARIOS (P_DESCRIPCION_PLANTILLA   IN     VARCHAR2,
                                      P_ID_OPERACION    IN     NUMBER,
                                      P_ID_CLIENTE      IN     NUMBER,
                                      P_ID_PROCESO IN     NUMBER,
                                      P_BANDERAS          IN     T_TAGS,
                                      P_ACCIONES          IN     T_TAGS,
                                      P_PARA_USUARIOS  OUT SYS_REFCURSOR,
                                      P_ERROR_USUARIOS   OUT SYS_REFCURSOR)
IS

 V_NO_ACCIONES       NUMBER (5);

BEGIN

     /*Se vacian tablas Temporales*/

         EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_PARA_USUARIOS';

         EXECUTE IMMEDIATE 'TRUNCATE TABLE TMP_ERROR_USUARIOS';


    /*Se agrega variable para determinar si  llegaron ACCIONES*/

     SELECT COUNT (TAG)
        INTO V_NO_ACCIONES
        FROM TABLE (CAST (P_ACCIONES AS T_TAGS))
       WHERE TAG = 'ID_ACCION';


     /*Se obtienen los ROLES y USUARIOS relacionados a la plantilla*/

    INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
       SELECT TRB.DESCRIPCION_CORTA
         FROM TCA_PLANTILLA_CORREO TPC
              JOIN TRE_PLANTILLA_CORREO_ROL_BPM TPCRB
                 ON (TPC.ID = TPCRB.ID_TCA_PLANTILLA_CORREO)
              JOIN TCA_ROL_BPM TRB
                 ON (TRB.ID = TPCRB.ID_TCA_ROL_BPM)
        WHERE TPC.DESCRIPCION = P_DESCRIPCION_PLANTILLA
        AND TPC.BAN_ESTATUS = 1;


     INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
        SELECT TPCU.LOGIN_USUARIO
          FROM TCA_PLANTILLA_CORREO TPC 
             JOIN TRE_PLANTILLA_CORREO_USER TPCU
                ON (TPC.ID = TPCU.ID_TCA_PLANTILLA_CORREO)
            WHERE TPC.DESCRIPCION = P_DESCRIPCION_PLANTILLA
             AND TPC.BAN_ESTATUS = 1;


     /*Se obtienen USUARIOS a notificaciÃ³n de ERROR*/

         INSERT INTO TMP_ERROR_USUARIOS (USUARIO_ROL)
        SELECT TPCU.LOGIN_USUARIO
          FROM TCA_PLANTILLA_CORREO TPC 
              JOIN TRE_PLANTILLA_CORREO_USER TPCU
                ON (TPC.ID = TPCU.ID_TCA_PLANTILLA_CORREO)
         WHERE TPC.DESCRIPCION = 'PLANTILLA_ERROR_ENVIO_CORREO'
          AND TPC.BAN_ESTATUS = 1;


    /*Se ciclan banderas*/
    FOR IND IN 1 .. P_BANDERAS.COUNT
    LOOP

        IF P_BANDERAS(IND).TAG = 'BAN_VALIDA_ET' AND P_BANDERAS(IND).VALOR = 1
        THEN

            IF P_ID_OPERACION IS NOT NULL OR P_ID_CLIENTE IS NOT NULL
            THEN

             /*Se obtiene roles del equipo de trabajo*/

            INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
            SELECT ET.USUARIO
              FROM EQUIPO_TRABAJO ET
                   JOIN TCA_PROCESO_BPM TPB
                      ON (ET.ID_TCA_PROCESO_BPM = TPB.ID)
                   LEFT JOIN OPERACION O
                      ON (ET.ID_OPERACION = O.ID_OPERACION)
                   LEFT JOIN CLIENTES C
                      ON (ET.ID_CLIENTE = C.ID_CLIENTE)
             WHERE ET.ID_TCA_PROCESO_BPM = P_ID_PROCESO
                   AND NVL (ET.ID_OPERACION, 0) =
                         NVL (NVL (P_ID_OPERACION, ET.ID_OPERACION), 0)
                   AND NVL (ET.ID_CLIENTE, 0) = NVL (NVL (P_ID_CLIENTE, ET.ID_CLIENTE), 0);

             END IF;


        ELSIF P_BANDERAS(IND).TAG = 'BAN_VALIDA_MCC' AND P_BANDERAS(IND).VALOR = 1
        THEN

             /*Se obtiene a los miembros CC */

            INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
               SELECT  URA.LOGIN_USUARIO
                 FROM USUARIO_REUNION_APROBACION URA
                      JOIN SOLICITUD_APROBACION SA
                         ON (URA.ID_SOLICITUD_APROBACION = SA.ID)
                      JOIN OPERACION O
                         ON (SA.ID_OPERACION = O.ID_OPERACION)
                WHERE     O.ID_OPERACION = P_ID_OPERACION
                      AND URA.CON_NOTIFICACION = 1
                      AND SA.ID_TCA_TIPO_SOLICITUD = 1 -- Tipo Operacion
                      AND SA.BAN_ESTATUS = 1;



            ELSIF  P_BANDERAS(IND).TAG = 'BAN_VALIDA_RA' AND P_BANDERAS(IND).VALOR = 1 AND V_NO_ACCIONES > 0
            THEN

                  /*Se obtienen validadores de las acciones*/

                  INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
                    SELECT TRB.DESCRIPCION_CORTA
                  FROM ACCION A JOIN TCA_ROL_BPM TRB
                          ON (A.ID_TCA_ROL_ASIGNADO = TRB.ID)
                 WHERE A.ID IN (SELECT VALOR
                                FROM TABLE (CAST (P_ACCIONES AS T_TAGS))
                               WHERE TAG = 'ID_ACCION');


            ELSIF  P_BANDERAS(IND).TAG = 'BAN_VALIDA_VA' AND P_BANDERAS(IND).VALOR = 1 AND V_NO_ACCIONES > 0
            THEN

                  /*Se obtienen responsables de las accion*/

            INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
               SELECT TRB.DESCRIPCION_CORTA
                 FROM ACCION A
                      JOIN TCA_CATEGORIA_ACCION TCA
                         ON (TCA.ID = A.ID_TCA_CATEGORIA_ACCION)
                      JOIN TRE_CATEGORIA_VALIDADOR_ROL TRCVR
                         ON (TCA.ID = TRCVR.ID_TCA_CATEGORIA_ACCION)
                      JOIN TCA_ROL_BPM TRB
                         ON (TRB.ID = TRCVR.ID_TCA_ROL_BPM)
                WHERE A.ID IN (SELECT VALOR
                                 FROM TABLE (CAST (P_ACCIONES AS T_TAGS))
                                WHERE TAG = 'ID_ACCION');

           ELSIF  P_BANDERAS(IND).TAG = 'BAN_VALIDA_RO' AND P_BANDERAS(IND).VALOR = 1 
            THEN
                  /*Se obtiene al responsable de la operacion o del cliente*/

                IF P_ID_OPERACION IS NOT NULL
                THEN 

                    INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
                        SELECT O.USUARIO
                            FROM OPERACION O
                        WHERE O.ID_OPERACION = P_ID_OPERACION;
                ELSE
                     INSERT INTO TMP_PARA_USUARIOS (USUARIO_ROL)
                         SELECT C.EJECUTIVO 
                            FROM CLIENTES C
                         WHERE C.ID_CLIENTE = P_ID_CLIENTE;

                END IF;

        END IF;


        COMMIT;

    END LOOP;

/*Se pasa la informacion de los usuarios o roles a los  SYS_REFCURSOR*/

    OPEN P_PARA_USUARIOS FOR
    SELECT USUARIO_ROL FROM TMP_PARA_USUARIOS;

    OPEN P_ERROR_USUARIOS FOR
    SELECT USUARIO_ROL FROM TMP_ERROR_USUARIOS;


END P_CONSULTAR_ROLES_USUARIOS;

PROCEDURE SP_VALIDAR_ENVIO_SUPERV_TCC (
  P_ID_SUPERVISION IN NUMBER,
  P_DESC_PLANTILLA IN VARCHAR,
  P_ID_OPERACION IN NUMBER,
  P_ESTADO            OUT VARCHAR2,
  P_CODIGO            OUT VARCHAR2,
  P_MENSAJE          OUT VARCHAR2)
IS 
  V_ESTADO VARCHAR2(5);
/*--Variables para evaliaciÃ³n de plantilla PLANTILLA_ACTUALIZACION_AVANCE_FISICIO_FINANCIERO--*/
  V_PLANTILLA_ACT_AVANCE_FIS_FIN VARCHAR2(256):='PLANTILLA_ACTUALIZACION_AVANCE_FISICIO_FINANCIERO';
  V_TBI_AVANCE_FISICO VARCHAR2(5);
  V_TBI_AVANCE_FINANCIERO VARCHAR(5);
  V_TIPO_ACCION VARCHAR2(32);
  V_AVANCE_FISICO NUMBER;
  V_AVANCE_FINANCIERO NUMBER;
/*--Variables para evaliaciÃ³n de plantilla PLANTILLA_ INICIO_SEGUIMIENTO_SIEMAS, PLANTILLA_ INICIO_EVALUACION_EXPOST,
PLANTILLA_ INICIO_EVALUACION_MEDIO_TERMINO--*/
  V_PLANTILLA_SEG_SIEMAS VARCHAR2(256):= 'PLANTILLA_ INICIO_SEGUIMIENTO_SIEMAS';
  V_PLANTILLA_SEG_EXPOST VARCHAR2(256):='PLANTILLA_ INICIO_EVALUACION_EXPOST';
  V_PLANTILLA_SEG_MED_TERM VARCHAR2(256):= 'PLANTILLA_ INICIO_EVALUACION_MEDIO_TERMINO';
  V_DESCRIPCION_CORTA VARCHAR2(64);
  V_TERMINO_ID_TCA_TIPO_AVANCE NUMBER (5,0);
  V_TERMINO_ID_TCA_TIPO_PORCENT NUMBER (5,0);
  V_TERMINO_PORCENTAJE NUMBER (7,4);
  V_TERMINO_PORCENTAJE_INICIAL NUMBER (7,4);
  V_TERMINO_PORCENTAJE_FINAL NUMBER (7,4);

BEGIN 

--Se obtienen los valores actuales de la supervisiÃ³n
    SELECT AVANCE_FISICO, AVANCE_FINANCIERO
    INTO V_AVANCE_FISICO,V_AVANCE_FINANCIERO
    FROM SUPERVISION 
    WHERE ID=P_ID_SUPERVISION;




IF P_DESC_PLANTILLA = V_PLANTILLA_ACT_AVANCE_FIS_FIN 
 THEN 
  --Se verifica que la descripciÃ³n de la plantilla corresponda a la actualizaciÃ³n del avance fÃ­sico y financiero
          --Se obtienen los valores anteriores del id de supervisiÃ³n
          SELECT TSC.VALOR_ANTERIOR 
          INTO V_TBI_AVANCE_FISICO 
          FROM TBI_SUPERVISION_CAMPO TSC RIGHT JOIN  TBI_SUPERVISION TS
          ON TSC.ID_BITACORA=TS.ID
          WHERE TSC.CAMPO='AVANCE_FISICO' 
          AND TSC.ID_BITACORA=(SELECT MAX(ID) FROM TBI_SUPERVISION WHERE ID_SUPERVISION=P_ID_SUPERVISION AND TIPO_ACCION='MODIFICAR_SUPERVISION')
          AND TS.ID_SUPERVISION=P_ID_SUPERVISION;  

          SELECT TSC.VALOR_ANTERIOR 
          INTO V_TBI_AVANCE_FISICO 
          FROM TBI_SUPERVISION_CAMPO TSC RIGHT JOIN  TBI_SUPERVISION TS
          ON TSC.ID_BITACORA=TS.ID
          WHERE TSC.CAMPO='AVANCE_FINANCIERO' 
          AND TSC.ID_BITACORA=(SELECT MAX(ID) FROM TBI_SUPERVISION WHERE ID_SUPERVISION=P_ID_SUPERVISION AND TIPO_ACCION='MODIFICAR_SUPERVISION')
          AND TS.ID_SUPERVISION=P_ID_SUPERVISION; 

          --Se evalÃºa si el avance fÃ­sico actual o el financiero actual son diferentes a los valores anteriores 
          IF (V_AVANCE_FISICO != V_TBI_AVANCE_FISICO OR V_AVANCE_FINANCIERO != V_TBI_AVANCE_FINANCIERO)
          THEN 
            V_ESTADO := 'TRUE'; --Si son iguales se regresa el estado true para indicar que se debe realizar la notificaciÃ³n

          ELSE 
            V_ESTADO := 'FALSE'; --Si ninguno de los avances es diferente se regresa el estado false

          END IF;


    ELSE

     IF P_DESC_PLANTILLA = V_PLANTILLA_SEG_SIEMAS --Se verifica que la descripciÃ³n de la plantilla corresponda a la verificaciÃ³n del porcentaje de inicio seguimiento siemas
      THEN
        V_DESCRIPCION_CORTA:='T801'; --Se asigna la descripciÃ³n corta del termino de seguimiento siemas

     ELSIF P_DESC_PLANTILLA = V_PLANTILLA_SEG_EXPOST --Se verifica que la descripciÃ³n de la plantilla corresponda a la verificaciÃ³n del porcentaje de inicio seguimiento EX POST
      THEN
        V_DESCRIPCION_CORTA:='T802'; --Se asigna la descripciÃ³n corta del termino de seguimiento ex post

      ELSIF P_DESC_PLANTILLA = V_PLANTILLA_SEG_MED_TERM --Se verifica que la descripciÃ³n de la plantilla corresponda a la verificaciÃ³n del porcentaje de inicio seguimiento medio tÃ©rmino
      THEN
        V_DESCRIPCION_CORTA:='T803';

      END IF;

      SELECT T.ID_TCA_TIPO_AVANCE, T.ID_TCA_TIPO_PORCENTAJE, PORCENTAJE, PORCENTAJE_INICIAL, PORCENTAJE_FINAL
      INTO V_TERMINO_ID_TCA_TIPO_AVANCE, V_TERMINO_ID_TCA_TIPO_PORCENT, V_TERMINO_PORCENTAJE,V_TERMINO_PORCENTAJE_INICIAL,V_TERMINO_PORCENTAJE_FINAL
      FROM TERMINO T 
      LEFT OUTER JOIN TCA_TERMINO TT
      ON T.ID_TCA_TERMINO=TT.ID
      WHERE TT.DESCRIPCION_CORTA=V_DESCRIPCION_CORTA
      AND T.ID_OPERACION=P_ID_OPERACION
      AND T.BAN_ESTATUS = 1
      AND T.ID_TCA_ESTADO_TCC NOT IN (30, 22); -- Se obtienen los valores para las variables que sirven para verificar si se envÃ­a o no la notificaciÃ³n

      CASE V_TERMINO_ID_TCA_TIPO_PORCENT
          WHEN 1 THEN --Ã¿nico
              CASE V_TERMINO_ID_TCA_TIPO_AVANCE 
                  WHEN 1 THEN --Avance fÃ­sico
                      IF V_AVANCE_FISICO=V_TERMINO_PORCENTAJE
                      THEN 
                          V_ESTADO := 'TRUE'; --Si son iguales se regresa el estado true para indicar que se debe realizar la notificaciÃ³n

                      ELSE 
                          V_ESTADO := 'FALSE'; --Si ninguno de los avances es diferente se regresa el estado false
                      END IF;

                  WHEN 2 THEN  --Avance financiero
                      IF V_AVANCE_FINANCIERO=V_TERMINO_PORCENTAJE
                      THEN 
                          V_ESTADO := 'TRUE'; --Si son iguales se regresa el estado true para indicar que se debe realizar la notificaciÃ³n

                      ELSE 
                          V_ESTADO := 'FALSE'; --Si ninguno de los avances es diferente se regresa el estado false
                      END IF; 

              END CASE;
          WHEN 2 THEN  --Rango       
              CASE V_TERMINO_ID_TCA_TIPO_AVANCE 
                  WHEN 1 THEN --Avance fÃ­sico
                      IF V_AVANCE_FISICO=V_TERMINO_PORCENTAJE
                      THEN 
                          V_ESTADO := 'TRUE'; --Si son iguales se regresa el estado true para indicar que se debe realizar la notificaciÃ³n

                      ELSE 
                          V_ESTADO := 'FALSE'; --Si ninguno de los avances es diferente se regresa el estado false
                      END IF;

                  WHEN 2 THEN  --Avance financiero
                      IF V_AVANCE_FINANCIERO=V_TERMINO_PORCENTAJE
                      THEN 
                          V_ESTADO := 'TRUE'; --Si son iguales se regresa el estado true para indicar que se debe realizar la notificaciÃ³n

                      ELSE 
                          V_ESTADO := 'FALSE'; --Si ninguno de los avances es diferente se regresa el estado false
                      END IF; 

              END CASE;
      END CASE;

    END IF;

  P_ESTADO:=V_ESTADO;
  P_CODIGO := 0;
  P_MENSAJE := 'Procedimiento  ejecutado  correctamente';

  EXCEPTION 
  WHEN OTHERS THEN 
      P_ESTADO:='FALSE';
      P_CODIGO := 1;
      P_MENSAJE := SQLERRM;

END SP_VALIDAR_ENVIO_SUPERV_TCC;

END PKG_ENVIAR_CORREO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY PK_GESTION_COBRO
IS
   PROCEDURE PR_GENERAR_AVISO_COBRO (
      P_FECHAINICIO           IN     DATE,
      P_FECHAFIN              IN     DATE,
      P_ESPUBLICO             IN     VARCHAR2,
      P_TIPOAVISO             IN     VARCHAR2,
      P_LINEA                 IN     VARCHAR2,
      P_CLIENTE               IN     VARCHAR2,
      P_MONEDA                IN     VARCHAR2,
      P_PAIS                  IN     VARCHAR2,
      P_SECTORINSTITUCIONAL   IN     VARCHAR2,
      P_PERIODICIDAD          IN     VARCHAR2,
      P_TIPOSALDO             IN     VARCHAR2,
      P_FONDOS                IN     VARCHAR2,
      P_CODIGOOPERACION       IN     VARCHAR2:= NULL,
      P_USUARIOCREADOR        IN     VARCHAR2,
      P_IDAVISO                  OUT NUMBER,
      P_MENSAJEERROR             OUT VARCHAR2)
   IS
      V_ES_DETALLADO   NUMBER (1);
   BEGIN
      MIDDLE.PKG_AVISO_VENCIMIENTO.PRC_GENERAR_AVISO (P_FECHAINICIO,
                                                      P_FECHAFIN,
                                                      P_ESPUBLICO,
                                                      P_TIPOAVISO,
                                                      P_LINEA,
                                                      P_CLIENTE,
                                                      P_MONEDA,
                                                      P_PAIS,
                                                      P_SECTORINSTITUCIONAL,
                                                      P_PERIODICIDAD,
                                                      P_TIPOSALDO,
                                                      P_FONDOS,
                                                      P_CODIGOOPERACION,
                                                      P_USUARIOCREADOR,
                                                      P_IDAVISO,
                                                      P_MENSAJEERROR);


      IF P_ESPUBLICO = 'N'
      THEN
         V_ES_DETALLADO := 1;
      ELSIF P_ESPUBLICO = 'S'
      THEN
         V_ES_DETALLADO := 0;
      END IF;



      IF P_IDAVISO IS NOT NULL AND P_MENSAJEERROR IS NULL
      THEN
         INSERT INTO LOTE_GESTION_COBRO (ID,
                                               ID_EJECUCION,
                                               ESTADO_EJECUCION,
                                               ID_TCA_MENSAJE_ERROR,
                                               FECHA_REGISTRO,
                                               BAN_ESTATUS,
                                               TIPO_LOTE,
                                               ES_RECIBO_DETALLADO)
             VALUES (LOTE_GESTION_COBRO_SEQ.NEXTVAL,
                     P_IDAVISO,
                     'PROCESO',
                     NULL,
                     SYSDATE,
                     1,
                     'GESTION',
                     V_ES_DETALLADO);
                     
      ELSIF P_IDAVISO IS NOT NULL AND P_MENSAJEERROR IS NOT NULL
      THEN
         INSERT INTO LOTE_GESTION_COBRO (ID,
                                               ID_EJECUCION,
                                               ESTADO_EJECUCION,
                                               ID_TCA_MENSAJE_ERROR,
                                               FECHA_REGISTRO,
                                               BAN_ESTATUS,
                                               TIPO_LOTE,
                                               ES_RECIBO_DETALLADO)
             VALUES (LOTE_GESTION_COBRO_SEQ.NEXTVAL,
                     P_IDAVISO,
                     'ERROR',
                     3,
                     SYSDATE,
                     1,
                     'GESTION',
                     V_ES_DETALLADO);
      ELSE
         INSERT INTO LOTE_GESTION_COBRO (ID,
                                               ID_EJECUCION,
                                               ESTADO_EJECUCION,
                                               ID_TCA_MENSAJE_ERROR,
                                               FECHA_REGISTRO,
                                               BAN_ESTATUS,
                                               TIPO_LOTE,
                                               ES_RECIBO_DETALLADO)
             VALUES (LOTE_GESTION_COBRO_SEQ.NEXTVAL,
                     0,
                     'ERROR',
                     3,
                     SYSDATE,
                     1,
                     'GESTION',
                     V_ES_DETALLADO);
      END IF;
   EXCEPTION
      WHEN OTHERS
      THEN
         INSERT INTO LOTE_GESTION_COBRO (ID,
                                               ID_EJECUCION,
                                               ESTADO_EJECUCION,
                                               ID_TCA_MENSAJE_ERROR,
                                               FECHA_REGISTRO,
                                               BAN_ESTATUS,
                                               TIPO_LOTE,
                                               ES_RECIBO_DETALLADO)
             VALUES (LOTE_GESTION_COBRO_SEQ.NEXTVAL,
                     0,
                     'ERROR',
                     3,
                     SYSDATE,
                     1,
                     'GESTION',
                     V_ES_DETALLADO);

         P_MENSAJEERROR := 'OCURRIO UNA EXCEPCION ' + SQLERRM;
   END PR_GENERAR_AVISO_COBRO;

   PROCEDURE PR_OBTENER_AVISO_COBRO (P_IDAVISO   IN     NUMBER,
                                     XML_AVISO      OUT XMLTYPE)
   IS
   BEGIN
      XML_AVISO := MIDDLE.PKG_AVISO_VENCIMIENTO.GETAVISO (P_IDAVISO);
   END PR_OBTENER_AVISO_COBRO;
END PK_GESTION_COBRO;
/

SHOW ERRORS;


CREATE OR REPLACE PACKAGE BODY       PK_PREPAGO
IS
   PROCEDURE OBTENER_TABLAS_PREPAGO (
      P_ID_PREPAGO         IN     NUMBER,
      P_OBSERVACIONES         OUT SYS_REFCURSOR,
      P_PENALIDAD             OUT SYS_REFCURSOR,
      P_CONDICIONES           OUT SYS_REFCURSOR,
      P_COBERTURAS            OUT SYS_REFCURSOR,
      P_VENTA_CARTERA         OUT SYS_REFCURSOR,
      P_FUENTES_EXTERNAS      OUT SYS_REFCURSOR)
   IS
   BEGIN
      /*Observaciones*/
      OPEN P_OBSERVACIONES FOR
         SELECT ROL.DESCRIPCION_CORTA,
                OB.NOMBRE_USUARIO,
                OB.FECHA_REGISTRO,
                TO_CHAR (OB.FECHA_REGISTRO, 'HH24:MM') AS HORA_REGISTRO,
                OB.OBSERVACION
           FROM OBSERVACION_PREPAGO OB
                JOIN CARGO_PREPAGO CP
                   ON OB.ID = CP.ID_OBSERVACION
                JOIN PREPAGO PR
                   ON CP.ID_PREPAGO = PR.ID
                JOIN TCA_ROL_BPM ROL
                   ON CP.ID_TCA_ROL_BPM = ROL.ID
          WHERE PR.ID = P_ID_PREPAGO;

      /* Detalle de penalidad */

      OPEN P_PENALIDAD FOR
         SELECT VCD.NUMERO_TESORERIA,
                VCD.NUMERO_CONTRATO,
                TTM.DESCRIPCION_CORTA MONEDA,
                TTR.DESCRIPCION RESOLUCION,
                DP.FECHA_INICIO,
                DP.FECHA_FIN,
                DP.PLAZO PLAZO_TRANSCURRIDO,
                DP.FRACCION_LIBOR,
                NVL (DP.SPREAD, 0) SPREAD,
                NVL (DP.TASA_PREPAGO, 0) TASA_PREPAGO,
                NVL (TPC.MONTO_PREPAGO, 0) MONTO_PREPAGO,
                NVL (DP.MONTO_PENALIDAD, 0) PENALIDAD,
                NVL (DP.INTERESES, 0) INTERESES,
                TPC.FECHA_PROXIMO_PAGO PROXIMO_PAGO,
                CASE (SELECT COUNT (VFE.CONTRATO_DESEMBOLSO)
                        FROM VTA_FUENTES_EXTERNAS VFE
                       WHERE VFE.CONTRATO_DESEMBOLSO = VCD.NUMERO_CONTRATO
                      -- AND CODIGO_LINEA_PASIVA NOT IN ('LP-588', 'LP-587'  )
					  )
                   WHEN 0 THEN 'N'
                   ELSE 'S'
                END
                   CON_FUENTES
           FROM PREPAGO PR
                JOIN TRE_PREPAGO_CONTRATO TPC
                   ON (PR.ID = TPC.ID_PREPAGO)
                JOIN VTA_CONTRATO_DESEMBOLSO VCD
                   ON (TPC.CONTRATO_FLEXCUBE = VCD.NUMERO_CONTRATO)
                JOIN DETALLE_PENALIDAD DP
                   ON (TPC.ID = DP.ID_TRE_PREPAGO_CONTRATO)
                JOIN TCA_TIPO_MONEDA TTM
                   ON (TPC.ID_TCA_TIPO_MONEDA = TTM.ID)
                JOIN TCA_TIPO_RESOLUCION TTR
                   ON (TTR.ID = PR.ID_TCA_TIPO_RESOLUCION)
          WHERE PR.ID = P_ID_PREPAGO;


      /* Condiciones Especiales */
      OPEN P_CONDICIONES FOR
         SELECT LC.NUMERO_LINEA_CREDITO,
                LC.DESCRIPCION_COND_ESPECIAL DESCRIPCION_CONDICION
           FROM TRE_PREPAGO_CONTRATO TPC
                JOIN PREPAGO PR
                   ON (TPC.ID_PREPAGO = PR.ID)
                JOIN VTA_CONTRATO_DESEMBOLSO VCD
                   ON (TPC.CONTRATO_FLEXCUBE = VCD.NUMERO_CONTRATO)
                JOIN LINEA_CREDITO LC
                   ON (VCD.CODIGO_LINEA_CREDITO = LC.ID_FLEXCUBE)
          WHERE PR.ID = P_ID_PREPAGO;


      /* Coberturas */
      OPEN P_COBERTURAS FOR
         SELECT LC.NUMERO_LINEA_CREDITO,
                VC.CONTRATO_DESEMBOLSO,
                VC.CODIGO_COBERTURA,
                VC.CONTRAPARTE,
                VC.FECHA_EFECTIVA,
                VC.FECHA_VENCIMIENTO
           FROM VTA_COBERTURAS VC
                LEFT JOIN VTA_CONTRATO_DESEMBOLSO VCD
                   ON (VC.CONTRATO_DESEMBOLSO = VCD.NUMERO_CONTRATO)
                JOIN LINEA_CREDITO LC
                   ON (VCD.CODIGO_LINEA_CREDITO = LC.ID_FLEXCUBE)
                JOIN TRE_PREPAGO_CONTRATO TPC
                   ON (VCD.NUMERO_CONTRATO = TPC.CONTRATO_FLEXCUBE)
                JOIN PREPAGO PR
                   ON (PR.ID = TPC.ID_PREPAGO) AND PR.ID = P_ID_PREPAGO;


      /* Venta de Cartera */
      OPEN P_VENTA_CARTERA FOR
         SELECT LC.NUMERO_LINEA_CREDITO,
                VCD.NUMERO_CONTRATO CONTRATO_DESEMBOLSO,
                VCD.CODIGO_FONDO FONDO
           FROM PREPAGO PR
                JOIN TRE_PREPAGO_CONTRATO TPC
                   ON (PR.ID = TPC.ID_PREPAGO)
                JOIN VTA_CONTRATO_DESEMBOLSO VCD
                   ON (TPC.CONTRATO_FLEXCUBE = VCD.NUMERO_CONTRATO)
                JOIN LINEA_CREDITO LC
                   ON (VCD.CODIGO_LINEA_CREDITO = LC.ID_FLEXCUBE)
          WHERE PR.ID = P_ID_PREPAGO AND VCD.CODIGO_FONDO = '98';

      /* Fuente Externa*/
      OPEN P_FUENTES_EXTERNAS FOR
         SELECT LC.NUMERO_LINEA_CREDITO,
                VCD.NUMERO_CONTRATO CONTRATO_DESEMBOLSO,
                FUE.DESC_FUENTE,
                FUE.CODIGO_LINEA_PASIVA,
                NVL (FUE.MONTO, 0) MONTO
           FROM VTA_FUENTES_EXTERNAS FUE
                LEFT JOIN VTA_CONTRATO_DESEMBOLSO VCD
                   ON FUE.CONTRATO_DESEMBOLSO = VCD.NUMERO_CONTRATO
                JOIN LINEA_CREDITO LC
                   ON (VCD.CODIGO_LINEA_CREDITO = LC.ID_FLEXCUBE)
                JOIN TRE_PREPAGO_CONTRATO TPC
                   ON (VCD.NUMERO_CONTRATO = TPC.CONTRATO_FLEXCUBE)
                JOIN PREPAGO PR
                   ON (PR.ID = TPC.ID_PREPAGO)
          WHERE PR.ID = P_ID_PREPAGO;
   END OBTENER_TABLAS_PREPAGO;


   PROCEDURE OBTENER_INFORMACION_PREPAGO (
      P_ID_PREPAGO   IN     NUMBER,
      P_PREPAGO         OUT SYS_REFCURSOR,
      P_CARGOS          OUT SYS_REFCURSOR,
      P_BANCOS          OUT SYS_REFCURSOR,
      P_INTERESES       OUT NUMBER)
   IS
   BEGIN
      OPEN P_PREPAGO FOR
           SELECT PR.ID ID_PREPAGO,
                  PAIS.DESCRIPCION_CORTA PAIS,
                  CLI.ID_FLEXCUBE,
                  CLI.RAZON_SOCIAL,
                  OPE.ID_OPERACION,
                  OPE.NOMBRE,
                  TTM.DESCRIPCION DESCRIPCION_MONEDA,
                  PR.FECHA_SOLICITUD,
                  PR.FECHA_PREPAGO,
                  TTP.DESCRIPCION_CORTA TIPO_PREPAGO,
                  NVL (PR.MONTO_PREPAGO, 0) MONTO_PREPAGO,
                  TTM.DESCRIPCION_CORTA MONEDA,
                  PR.ID_TCA_TIPO_RESOLUCION,
                  TTR.DESCRIPCION_CORTA DESCRIPCION_RESOLUCION
             FROM TRE_PREPAGO_CONTRATO TPC
                  JOIN PREPAGO PR
                     ON (TPC.ID_PREPAGO = PR.ID)
                  JOIN TCA_TIPO_MONEDA TTM
                     ON (PR.ID_TCA_TIPO_MONEDA = TTM.ID)
                  JOIN TCA_TIPO_PREPAGO TTP
                     ON (PR.ID_TCA_TIPO_PREPAGO = TTP.ID)
                  JOIN VTA_CONTRATO_DESEMBOLSO VCD
                     ON (TPC.CONTRATO_FLEXCUBE = VCD.NUMERO_CONTRATO)
                  JOIN LINEA_CREDITO LC
                     ON (VCD.CODIGO_LINEA_CREDITO = LC.NUMERO_LINEA_CREDITO)
                  JOIN CONTRATO C
                     ON (LC.ID_CONTRATO = C.ID)
                  JOIN OPERACION OPE
                     ON (C.ID_OPERACION = OPE.ID_OPERACION)
                      and TO_CHAR(OPE.ID_OPERACION) =VCD.OPERACION
                  JOIN CLIENTES CLI
                     ON (OPE.ID_CLIENTE = CLI.ID_CLIENTE)
                  JOIN CAT_PAISES PAIS
                     ON (PAIS.ID = CLI.PAIS)
                  LEFT JOIN TCA_TIPO_RESOLUCION TTR
                     ON (TTR.ID = PR.ID_TCA_TIPO_RESOLUCION)
            WHERE PR.ID = P_ID_PREPAGO
         GROUP BY PR.ID,
                  PAIS.DESCRIPCION_CORTA,
                  CLI.ID_FLEXCUBE,
                  CLI.RAZON_SOCIAL,
                  OPE.ID_OPERACION,
                  OPE.NOMBRE,
                  TTM.DESCRIPCION,
                  PR.FECHA_SOLICITUD,
                  PR.FECHA_PREPAGO,
                  TTP.DESCRIPCION_CORTA,
                  PR.MONTO_PREPAGO,
                  TTM.DESCRIPCION_CORTA,
                  PR.ID_TCA_TIPO_RESOLUCION,
                  TTR.DESCRIPCION_CORTA;



      OPEN P_CARGOS FOR
         SELECT TRB.ID,
                TRB.DESCRIPCION,
                NVL (CP.MONTO_CARGO_TRAMITE, 0) CARGOS_TRAMITE,
                (SELECT TTM.DESCRIPCION_CORTA
                   FROM TCA_TIPO_MONEDA TTM
                  WHERE TTM.ID = CP.ID_TCA_TIPO_MONEDA_TRAMITE)
                   MONEDA_CARGOS_TRAMITE,
                NVL (CP.MONTO_CARGO, 0) OTROS_CARGOS,
                (SELECT TTM.DESCRIPCION_CORTA
                   FROM TCA_TIPO_MONEDA TTM
                  WHERE TTM.ID = CP.ID_TCA_TIPO_MONEDA)
                   MONEDA_OTROS_CARGOS
           FROM CARGO_PREPAGO CP
                JOIN TCA_ROL_BPM TRB
                   ON (CP.ID_TCA_ROL_BPM = TRB.ID)
                JOIN PREPAGO PR
                   ON (CP.ID_PREPAGO = PR.ID)
          WHERE PR.ID = P_ID_PREPAGO;


      OPEN P_BANCOS FOR
         SELECT VCP.CUENTA,
                VCP.CUENTA_NOSTRO,
                VCP.NOMBRE_BANCO,
                VCP.CLIENTE,
                VCP.CODIGO_BIC,
                LC.NUMERO_LINEA_CREDITO AS REFERENCIA
           FROM VTA_CUENTAS_PAGO VCP,
                                           TRE_PREPAGO_CONTRATO TPC
                                        JOIN
                                           PREPAGO PR
                                        ON (TPC.ID_PREPAGO = PR.ID)
                                     JOIN
                                        TCA_TIPO_MONEDA TTM
                                     ON (PR.ID_TCA_TIPO_MONEDA = TTM.ID)
                                  JOIN
                                     TCA_TIPO_PREPAGO TTP
                                  ON (PR.ID_TCA_TIPO_PREPAGO = TTP.ID)
                               JOIN
                                  VTA_CONTRATO_DESEMBOLSO VCD
                               ON (TPC.CONTRATO_FLEXCUBE =
                                      VCD.NUMERO_CONTRATO)
                            JOIN
                               LINEA_CREDITO LC
                                      ON (VCD.CODIGO_LINEA_CREDITO = LC.NUMERO_LINEA_CREDITO)
                         JOIN
                            CONTRATO C
                         ON (LC.ID_CONTRATO = C.ID)
                      JOIN
                         OPERACION OPE
                      ON (C.ID_OPERACION = OPE.ID_OPERACION)
                   JOIN
                      CLIENTES CLI
                   ON (OPE.ID_CLIENTE = CLI.ID_CLIENTE)
                JOIN
                   CAT_PAISES PAIS
                ON (PAIS.ID = CLI.PAIS)
          WHERE VCP.CODIGO_MONEDA = VCD.CODIGO_MONEDA
                AND VCP.CODIGO_PAIS = PAIS.COD_EXTERNO
                AND VCP.CODIGO_FONDO =
                      (SELECT CAST (VCD.CODIGO_FONDO AS NUMBER) FROM DUAL)
                AND PR.ID = P_ID_PREPAGO;


   INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                      NOMBRE_INSUMO,
                                      DESCRIPCION_ERROR,
                                      FECHA_REGISTRO)
       VALUES ('SP',
               'paquete prepago',
             P_ID_PREPAGO,
               SYSDATE);

   COMMIT;


      SELECT NVL (SUM (CI.INTERESES), 0) MONTO_INTERESES
        INTO P_INTERESES
        FROM CALCULO_INTERESES CI
             JOIN TRE_PREPAGO_CONTRATO TPC
                ON (CI.ID_TRE_PREPAGO_CONTRATO = TPC.ID)
             JOIN PREPAGO PR
                ON (PR.ID = TPC.ID_PREPAGO)
       WHERE PR.ID = P_ID_PREPAGO;
   END OBTENER_INFORMACION_PREPAGO;
END PK_PREPAGO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       filtra_clientes (
   p_razon_soc    IN     VARCHAR2,
   p_num_id       IN     VARCHAR2,
   p_pais         IN     NUMBER,
   p_abrev        IN     VARCHAR2,
   p_id_flex      IN     VARCHAR2,
   p_ejecutivo    IN     VARCHAR2,
   p_tipoCte_id   IN     VARCHAR2,
   p_recordset       OUT SYS_REFCURSOR)
AS
   d_query     VARCHAR2 (4000);
   condicion   VARCHAR2 (4000);
   status      VARCHAR (1);
   abro        VARCHAR2 (1);
BEGIN
   status := '1';
   abro := '0';
   condicion := '';

   d_query :=
         'SELECT ID_CLIENTE, ID_FLEXCUBE, RAZON_SOCIAL, ABREVIATURA,'
      || ' TIPO_IDENTIFICACION, NUMERO_IDENTIFICACION, SECTOR, PAIS,'
      || ' EJECUTIVO, TIPO_CLIENTE FROM CLIENTES WHERE ';



   IF p_razon_soc IS NOT NULL
   THEN
      condicion :=
         '  ( UPPER(RAZON_SOCIAL) LIKE UPPER(''' || p_razon_soc || ''') ) ';
      abro := '1';
   END IF;

   IF p_num_id IS NOT NULL
   THEN
      IF abro = '1'
      THEN
         condicion := condicion || '  AND ';
      END IF;

      condicion :=
            condicion
         || ' ( UPPER(NUMERO_IDENTIFICACION) = UPPER('''
         || p_num_id
         || ''') ) ';
      abro := '1';
   END IF;

   IF p_pais IS NOT NULL
   THEN
      IF abro = '1'
      THEN
         condicion := condicion || '  AND ';
      END IF;

      condicion := condicion || ' ( PAIS = ''' || p_pais || ''') ';
      abro := '1';
   END IF;

   IF p_abrev IS NOT NULL
   THEN
      IF abro = '1'
      THEN
         condicion := condicion || ' AND ';
         abro := '1';
      END IF;

      condicion :=
            condicion
         || ' ( UPPER(ABREVIATURA) = UPPER('''
         || p_abrev
         || ''') ) ';
      abro := '1';
   END IF;

   IF p_id_flex IS NOT NULL
   THEN
      IF abro = '1'
      THEN
         condicion := condicion || ' AND ';
         abro := '1';
      END IF;

      condicion :=
            condicion
         || ' ( UPPER(ID_FLEXCUBE) = UPPER('''
         || p_id_flex
         || ''') ) ';
      abro := '1';
   END IF;

   IF p_ejecutivo IS NOT NULL
   THEN
      IF abro = '1'
      THEN
         condicion := condicion || ' AND ';
         abro := '1';
      END IF;

      condicion :=
            condicion
         || ' ( UPPER(EJECUTIVO) = UPPER('''
         || p_ejecutivo
         || ''') ) ';
      abro := '1';
   END IF;

   IF p_tipoCte_id IS NOT NULL
   THEN
      IF abro = '1'
      THEN
         condicion := condicion || ' AND ';
         abro := '1';
      END IF;

      condicion := condicion || ' ( TIPO_CLIENTE = ' || p_tipoCte_id || ')';
      abro := '1';
   END IF;



   IF abro = '1'
   THEN
      condicion := ' ( ' || condicion || ' ) ' || ' AND ';
   END IF;

   condicion := condicion || ' ( STATUS = :g_status ) ORDER BY RAZON_SOCIAL';

   d_query := d_query || condicion;

   DBMS_OUTPUT.PUT_LINE (d_query);

   OPEN p_recordset FOR d_query USING status;
END filtra_clientes;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE         FILTRA_OPERACIONES (p_cod_oper IN NUMBER,
                           p_etapa IN NUMBER,
                           p_razon_soc  IN  VARCHAR2,
                           p_lin_cred IN VARCHAR2,
                           p_tip_prod IN NUMBER,
                           p_pais IN NUMBER,
                           p_resp IN VARCHAR2,
               p_nombre_op IN VARCHAR2,
                           p_recordset OUT SYS_REFCURSOR) AS 
               
  d_query VARCHAR2(4000);
  condicion VARCHAR2(4000);
  status VARCHAR(1);
  abro VARCHAR2(1);

BEGIN
  status := '1';
  abro := '0';
  condicion := '';
  
  d_query := 'SELECT a.ID_OPERACION, a.USUARIO, a.ID_PRODUCTO, a.LINEA_CREDITO,'
             || ' a.ETAPA, a.ID_CLIENTE,  a.NOMBRE, b.PAIS,  b.RAZON_SOCIAL'
             || ' FROM OPERACION a, CLIENTES b WHERE ';
            
 

  
  IF (p_cod_oper IS NOT NULL) and p_cod_oper <> 0 THEN
    condicion := condicion || ' ( a.ID_OPERACION = '  || p_cod_oper || ') ';
    abro := '1';
  END IF;
  
  IF (p_etapa IS NOT NULL) and p_etapa <> 0 THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( a.etapa = ' || p_etapa || ' ) ';
    abro := '1';
  END IF;
  
  IF p_razon_soc IS NOT NULL THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( UPPER(b.RAZON_SOCIAL) LIKE UPPER(''' || p_razon_soc || ''') ) ';
    abro := '1';
  END IF;
  
  IF p_lin_cred IS NOT NULL THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( UPPER(a.LINEA_CREDITO) = UPPER(''' || p_lin_cred || ''') ) ';
    abro := '1';
  END IF;
  
  IF (p_tip_prod IS NOT NULL) and p_tip_prod <> 0  THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( a.ID_PRODUCTO = ' || p_tip_prod || ' ) ';
    abro := '1';
  END IF;
  
  IF (p_pais IS NOT NULL) and p_pais <> 0 THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( b.PAIS = ' || p_pais || ' ) ';
    abro := '1';
  END IF;
  
  IF p_resp IS NOT NULL THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( UPPER(a.USUARIO) = UPPER(''' || p_resp || ''') ) ';
    abro := '1';
  END IF;
  
  IF p_nombre_op IS NOT NULL THEN
    IF abro = '1' THEN 
      condicion := condicion || '  AND ';
    END IF;
    condicion := condicion || ' ( UPPER(a.NOMBRE) LIKE UPPER(''%' || p_nombre_op || '%''))';
    abro := '1';
  END IF;
  
  if abro = '1' THEN
    condicion := ' ( ' || condicion || ' ) '  || ' AND ';
  END IF;
  
  condicion := condicion || ' ( a.STATUS = :g_status and a.ID_CLIENTE = b.ID_CLIENTE) ORDER BY a.ID_OPERACION DESC';
  
  d_query := d_query || condicion;
  
  DBMS_OUTPUT.PUT_LINE(d_query);
  
  OPEN p_recordset FOR d_query USING status;
  
END filtra_operaciones;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       P_ADJUNTAR_DOCUMENTO (
   P_ID_TIPO_DOCUMENTO         IN     NUMBER,
   P_COMENTARIO                       VARCHAR2,
   P_FECHA_REGISTRO                   DATE,
   P_BAN_ESTATUS                      NUMBER,
   P_ES_JUSTIFICACION                 NUMBER,
   P_CODIGO_DOCUMENTO                 VARCHAR2,
   P_FECHA_DOCUMENTO                  DATE,
   P_ID_TAREA_BPM                     NUMBER,
   P_ID_TCA_ACCION                    NUMBER,
   P_LOGIN_USUARIO_CREA               VARCHAR2,
   P_NOMBRE_USUARIO_CREA              VARCHAR2,
   P_LOGIN_USUARIO_MODIFICA           VARCHAR2,
   P_NOMBRE_USUARIO_MODIFICA          VARCHAR2,
   P_NUM_SERIE_DOCUMENTO         VARCHAR2,
   P_OPERACION                        NUMBER,
   P_CLIENTE                          NUMBER,
   P_FILENAME                         VARCHAR2,
   P_MIME_TYPE                        VARCHAR2,
   P_CONTENT                   IN     CLOB,
   P_ID_ONBASE                        NUMBER,
   P_STATUS                       OUT NUMBER,
   P_ADJUNTO                      OUT NUMBER)
AS
   V_ID_DOCUMENTO            NUMBER;
   V_ID_DOCUMENTOS           NUMBER;
   V_ID_DOCUMENTOS_CLIENTE   NUMBER;
   V_ID_ADJUNTO              NUMBER;
   l_clob                    BLOB;
     P_MENSAJE             VARCHAR2(100);
     P_CODIGO_RES          NUMBER;
     
BEGIN


   SELECT F_DECODE_BASE64 (P_CONTENT) INTO l_clob FROM DUAL;

   SELECT DOCUMENTO_SEQ.NEXTVAL INTO V_ID_DOCUMENTO FROM DUAL;

   SELECT ADJUNTO_SEQ.NEXTVAL INTO V_ID_ADJUNTO FROM DUAL;

   P_ADJUNTO := V_ID_ADJUNTO;

   INSERT INTO DOCUMENTO (ID_DOCUMENTO,
                          ID_TIPO_DOCUMENTO,
                          COMENTARIO,
                          FECHA_REGISTRO,
                          BAN_ESTATUS,
                          ES_JUSTIFICACION,
                          CODIGO_DOCUMENTO,
                          FECHA_DOCUMENTO,
                          ID_TAREA_BPM,
                          ID_TCA_ACCION,
                          LOGIN_USUARIO_CREA,
                          NOMBRE_USUARIO_CREA,
                          LOGIN_USUARIO_MODIFICA,
                          NOMBRE_USUARIO_MODIFICA, 
                          NUM_SERIE_DOCUMENTO )
       VALUES (V_ID_DOCUMENTO,
               P_ID_TIPO_DOCUMENTO,
               P_COMENTARIO,
               P_FECHA_REGISTRO,
               P_BAN_ESTATUS,
               P_ES_JUSTIFICACION,
               P_CODIGO_DOCUMENTO,
               P_FECHA_DOCUMENTO,
               P_ID_TAREA_BPM,
               P_ID_TCA_ACCION,
               P_LOGIN_USUARIO_CREA,
               P_NOMBRE_USUARIO_CREA,
               P_LOGIN_USUARIO_MODIFICA,
               P_NOMBRE_USUARIO_MODIFICA,
               p_NUM_SERIE_DOCUMENTO);


   IF P_OPERACION IS NOT NULL
   THEN
      SELECT DOCUMENTOS_SEQ.NEXTVAL INTO V_ID_DOCUMENTOS FROM DUAL;

      INSERT INTO DOCUMENTOS (ID_DOCUMENTOS, ID_OPERACION, ID_DOCUMENTO)
          VALUES (V_ID_DOCUMENTOS, P_OPERACION, V_ID_DOCUMENTO);
   ELSE
      SELECT DOCUMENTOS_CLIENTE_SEQ.NEXTVAL
        INTO V_ID_DOCUMENTOS_CLIENTE
        FROM DUAL;

      INSERT INTO DOCUMENTOS_CLIENTE (ID_DOCUMENTOS,
                                      ID_CLIENTE,
                                      ID_DOCUMENTO)
          VALUES (V_ID_DOCUMENTOS_CLIENTE, P_CLIENTE, V_ID_DOCUMENTO);
   END IF;

   INSERT INTO ADJUNTO (ID_ADJUNTO,
                        FILENAME,
                        MIME_TYPE,
                        CONTENT,
                        FECHA_REGISTRO,
                        ID_ONBASE,
                        ID_DOCUMENTO)
       VALUES (V_ID_ADJUNTO,
               P_FILENAME,
               P_MIME_TYPE,
               l_clob,
               P_FECHA_REGISTRO,
               P_ID_ONBASE,
               V_ID_DOCUMENTO);

   COMMIT;

   P_STATUS := 1;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
   
        P_CODIGO_RES := SQLCODE;

      P_MENSAJE := SQLERRM;
      DBMS_OUTPUT.PUT_LINE (SQLERRM);
      
      DBMS_OUTPUT.PUT_LINE (
         'Se ejecuta cuando ocurre una excepcion de tipo NO_DATA_FOUND ');
      P_STATUS := 0;
   WHEN OTHERS
  
   THEN
   
         P_CODIGO_RES := SQLCODE;

      P_MENSAJE := SQLERRM;
      DBMS_OUTPUT.PUT_LINE (SQLERRM);
      
      IF P_OPERACION IS NOT NULL
      THEN
         DELETE FROM DOCUMENTOS
               WHERE ID_DOCUMENTOS = V_ID_DOCUMENTOS;
      ELSE
         DELETE FROM DOCUMENTOS_CLIENTE
               WHERE ID_DOCUMENTOS = V_ID_DOCUMENTOS_CLIENTE;
      END IF;

      DELETE FROM DOCUMENTO
            WHERE ID_DOCUMENTO = V_ID_DOCUMENTO;

      DELETE FROM ADJUNTO
            WHERE ID_ADJUNTO = V_ID_ADJUNTO;

      P_STATUS := 0;
      DBMS_OUTPUT.PUT_LINE ('Error ');
      
            INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'P_ADJUNTAR_DOCUMENTO',
                  P_MENSAJE,
                  SYSDATE);

      COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE P_CONSULTA_VALOR_ATRIBUTO (
   P_CONDICION       IN     INTEGER,
   P_OPERACION   IN     INTEGER,
   RECORDSET            OUT SYS_REFCURSOR)
AS
BEGIN
   OPEN RECORDSET FOR
      SELECT NOMBRE AS VALOR,
             ID,
             'NOMBRE' COLUMNA,
             NULL AS ID_CAT,
             NULL DESCRIPCION,
             NULL DESCRIPCION_CORTA,
             NULL FECHA_REGISTRO,
             NULL BAN_ESTATUS,
             NULL COD_EXTERNO
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND NOMBRE IS NOT NULL
      UNION ALL
      SELECT DESCRIPCION AS VALOR,
             ID,
             'DESCRIPCION' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION =P_OPERACION AND DESCRIPCION IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (FECHA_INICIO) AS VALOR,
             ID,
             'FECHA_INICIO' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND FECHA_INICIO IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (PLAZO) AS VALOR,
             ID,
             'PLAZO' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND PLAZO IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (FECHA_FINAL) AS VALOR,
             ID,
             'FECHA_FINAL' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND FECHA_FINAL IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (ID_TCA_CONTROL_CONDICION) AS VALOR,
             ID,
             'ID_TCA_CONTROL_CONDICION' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND ID_TCA_CONTROL_CONDICION IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (ID_TCA_TIPO_FECHA_INICIO) AS VALOR,
             ID,
             'ID_TCA_TIPO_FECHA_INICIO' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND ID_TCA_TIPO_FECHA_INICIO IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (ID_TCA_FRECUENCIA_PLAZO) AS VALOR,
             ID,
             'ID_TCA_FRECUENCIA_PLAZO' COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM CONDICION
       WHERE ID_OPERACION = P_OPERACION AND ID_TCA_FRECUENCIA_PLAZO IS NOT NULL
       UNION ALL --Se agregan CAT Y TRE
       SELECT NULL AS VALOR,
             NULL,
             'ID_TCA_CONTROL_CONDICION' AS COLUMNA,
             ID,
             DESCRIPCION,
             DESCRIPCION_CORTA,
             FECHA_REGISTRO,
             BAN_ESTATUS,
             COD_EXTERNO
        FROM TCA_CONTROL_CONDICION TCA
      UNION ALL
      SELECT NULL AS VALOR,
             NULL,
             'ID_TCA_TIPO_FECHA_INICIO' AS COLUMNA,
             ID,
             DESCRIPCION,
             DESCRIPCION_CORTA,
             FECHA_REGISTRO,
             BAN_ESTATUS,
             COD_EXTERNO
        FROM TCA_TIPO_FECHA_INICIO
        WHERE COD_EXTERNO ='CONDICION'
      UNION ALL
      SELECT NULL AS VALOR,
             NULL,
             'ID_TCA_FRECUENCIA_PLAZO' AS COLUMNA,
             ID,
             DESCRIPCION,
             DESCRIPCION_CORTA,
             FECHA_REGISTRO,
             BAN_ESTATUS,
             COD_EXTERNO
        FROM TCA_TIPO_FRECUENCIA
              UNION ALL 
      SELECT TO_CHAR (ID_TCA_EVENTO) AS VALOR,
             ID_CONDICION,
             'TRE_TCA_EVENTO_CONDICION' AS COLUMNA,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL,
             NULL
        FROM TRE_TCA_EVENTO_CONDICION TR 
       WHERE ID_CONDICION IN ( SELECT ID FROM CONDICION WHERE ID_OPERACION=P_OPERACION)
       AND ID_TCA_EVENTO IS NOT NULL
       UNION ALL
       SELECT NULL AS VALOR,
             NULL,
             'TRE_TCA_EVENTO_CONDICION' AS COLUMNA,
             ID,
             DESCRIPCION,
             DESCRIPCION_CORTA,
             FECHA_REGISTRO,
             BAN_ESTATUS,
             COD_EXTERNO
        FROM TCA_EVENTO_CONDICION
             UNION ALL
      SELECT DISTINCT TO_CHAR (ID_TCA_CATEGORIA) AS VALOR,
             ID_CONDICION,
             'TRE_CATEGORIA_CONDICION' COLUMNA,
             NULL ID,
             NULL DESCRIPCION,
             NULL DESCRIPCION_CORTA,
             NULL FECHA_REGISTRO,
             NULL BAN_ESTATUS,
             NULL COD_EXTERNO
        FROM TRE_CATEGORIA_CONDICION TR 
       WHERE ID_CONDICION IN ( SELECT ID FROM  CONDICION WHERE ID_OPERACION=P_OPERACION) 
       AND ID_TCA_CATEGORIA IS NOT NULL
      UNION ALL
         SELECT  NULL AS VALOR,
             NULL,
             'TRE_CATEGORIA_CONDICION' COLUMNA,
             CA.ID,
             CA.DESCRIPCION,
             CA.DESCRIPCION_CORTA,
             CA.FECHA_REGISTRO,
             CA.BAN_ESTATUS,
             CA.COD_EXTERNO
        FROM TCA_CATEGORIA_CONDICION CA
      UNION ALL
      SELECT TO_CHAR (ID_FUENTE) AS VALOR,
             ID_CONDICION,
             'TRE_FUENTE_CONDICION' COLUMNA,
             FU.ID,
             FU.DESCRIPCION,
             NULL,
             FU.FECHA_REGISTRO,
             FU.BAN_ESTATUS,
             NULL
        FROM TRE_FUENTE_CONDICION TR INNER JOIN FUENTE FU
                ON (TR.ID_FUENTE = FU.ID)
       WHERE ID_CONDICION IN ( SELECT ID FROM  CONDICION WHERE ID_OPERACION=P_OPERACION)
        AND ID_FUENTE IS NOT NULL
      UNION ALL
      SELECT TO_CHAR (ID_LINEA_CREDITO) AS VALOR,
             ID_CONDICION,
             'TRE_LINEA_CREDITO_CONDICION' COLUMNA,
             LC.ID,
             LC.DESCRIPCION_LINEA,
             NULL,
             LC.FECHA_REGISTRO,
             LC.BAN_ESTATUS,
             NULL
        FROM tre_linea_credito_tcc TR INNER JOIN LINEA_CREDITO LC
                ON (TR.ID_LINEA_CREDITO = LC.ID)
       WHERE ID_CONDICION IN ( SELECT ID FROM CONDICION WHERE ID_OPERACION=P_OPERACION)  
       AND ID_LINEA_CREDITO IS NOT NULL
       UNION ALL 
       SELECT OBSERVACION AS VALOR,
  ID_CONDICION,
 'OBSERVACION_CONDICION' COLUMNA,
  ID ,
  OBSERVACION     ,
  NULL    ,
  FECHA_REGISTRO    ,
  BAN_ESTATUS,
  NULL
   FROM OBSERVACION_CONDICION 
  WHERE ID_CONDICION  IN (  SELECT ID  FROM CONDICION WHERE ID_OPERACION =P_OPERACION )
       AND ES_PRINCIPAL=1
       ;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE P_REGE_TCO_DOCUMENTO_TAREA AS

	conteo number ;

    CURSOR tareas_cur
    IS
		SELECT id
        FROM TCA_TAREA_BPM
        ORDER BY 1 ASC;

	CURSOR docs_cur
	IS
		SELECT id
        FROM TCA_DOCUMENTO
        WHERE (ID>999 or ID=0)
		ORDER BY 1 ASC;

	tarea   tareas_cur%ROWTYPE;
	doc  docs_cur%ROWTYPE;
	CADENA VARCHAR2(200);
	idDocto number;

	BEGIN
		OPEN tareas_cur;
			LOOP
				FETCH tareas_cur INTO tarea;
					EXIT WHEN tareas_cur%NOTFOUND;
						OPEN docs_cur;
							LOOP
								FETCH docs_cur INTO doc;
									EXIT WHEN docs_cur%NOTFOUND;
										idDocto := doc.ID;


										SELECT count(*) cont  into conteo  from TCO_DOCUMENTO_TAREA where ID_TCA_DOCUMENTO=doc.ID and ID_TAREA_BPM=tarea.ID;
										if (conteo=0)
										then 
											-- SE INDICA EL ID DEL DOCTO RESTRINGIDO, SE CREA EL REGISTRO PERO CON EL PERMISO DE CONSULTA EN 0
											If ((idDocto = 1022) OR (idDocto = 1026) OR (idDocto = 1028) OR (idDocto = 1029) OR (idDocto = 1031)) THEN
												--DBMS_OUTPUT.put_line (doc.ID|| tarea.ID );
												CADENA :='INSERT INTO TCO_DOCUMENTO_TAREA(ID, ID_TCA_DOCUMENTO, ID_TAREA_BPM, PUEDE_CREAR, PUEDE_MODIFICAR, PUEDE_BORRAR, PUEDE_CONSULTAR) '||
														'VALUES ( TCO_DOCUMENTO_TAREA_SEQ.NEXTVAL, '||doc.ID||', '||tarea.ID||', 0, 0, 0, 0)';
												EXECUTE IMMEDIATE CADENA;
											ELSE
												--DBMS_OUTPUT.put_line (doc.ID|| tarea.ID );
												CADENA :='INSERT INTO TCO_DOCUMENTO_TAREA(ID, ID_TCA_DOCUMENTO, ID_TAREA_BPM, PUEDE_CREAR, PUEDE_MODIFICAR, PUEDE_BORRAR, PUEDE_CONSULTAR) '||
														'VALUES ( TCO_DOCUMENTO_TAREA_SEQ.NEXTVAL, '||doc.ID||', '||tarea.ID||', 0, 0, 0, 1)';
												EXECUTE IMMEDIATE CADENA;
											END IF;
										end if;                      
							END LOOP;
						CLOSE docs_cur;
			END LOOP;
		CLOSE tareas_cur;
	END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       P_UPSERT_FUENTES (
   P_FUENTES      IN     T_LISTA_FUENTE,
   P_CODIGO_RES      OUT NUMBER,
   P_MENSAJE         OUT VARCHAR2)
IS
   V_DESCRIPCION     VARCHAR2 (293);
   V_ID_FUENTE       NUMBER;
   V_FUENTE_ACTUAL   FUENTE%ROWTYPE;
BEGIN
   FOR IND IN 1 .. P_FUENTES.COUNT
   LOOP
      IF P_FUENTES (IND).ID IS NULL
      THEN
         IF P_FUENTES (IND).DESCRIPCION = ''
         THEN
            SELECT DESCRIPCION
              INTO V_DESCRIPCION
              FROM VCA_FUENTE
             WHERE ID = P_FUENTES (IND).ID_LINEA_PASIVA;
         ELSE
            V_DESCRIPCION := P_FUENTES (IND).DESCRIPCION;
         END IF;

         SELECT FUENTE_SEQ.NEXTVAL INTO V_ID_FUENTE FROM DUAL;

         INSERT INTO FUENTE (ID,
                             ID_LINEA_CREDITO,
                             ID_CONTRATO,
                             ID_LINEA_PASIVA,
                             DESCRIPCION,
                             PORCENTAJE,
                             FECHA_OBTENIDO,
                             MONTO_ASIGNADO,
                             NUMERO_ASIGNACION,
                             COMENTARIO,
                             FECHA_REGISTRO,
                             BAN_ESTATUS)
             VALUES (V_ID_FUENTE,
                     P_FUENTES (IND).ID_LINEA_CREDITO,
                     P_FUENTES (IND).ID_CONTRATO,
                     P_FUENTES (IND).ID_LINEA_PASIVA,
                     V_DESCRIPCION,
                     P_FUENTES (IND).PORCENTAJE,
                     P_FUENTES (IND).FECHA_OBTENIDO,
                     P_FUENTES (IND).MONTO_ASIGNADO,
                     P_FUENTES (IND).NUMERO_ASIGNACION,
                     P_FUENTES (IND).COMENTARIO,
                     SYSDATE,
                     P_FUENTES (IND).BAN_ESTATUS);

         P_CODIGO_RES := 0;
         P_MENSAJE := 'insert exitoso ' || ' ' || V_ID_FUENTE;
      ELSE
         SELECT 
         ID,
                ID_LINEA_CREDITO,
                ID_CONTRATO,
                ID_LINEA_PASIVA,
                DESCRIPCION,
                PORCENTAJE,
                FECHA_OBTENIDO,
                MONTO_ASIGNADO,
                NUMERO_ASIGNACION,
                COMENTARIO,
                FECHA_REGISTRO,
                BAN_ESTATUS
           INTO V_FUENTE_ACTUAL
           FROM FUENTE
          WHERE ID=P_FUENTES (IND).ID;

         UPDATE FUENTE
            SET ID_LINEA_CREDITO =
                   NVL (P_FUENTES (IND).ID_LINEA_CREDITO,V_FUENTE_ACTUAL.ID_LINEA_CREDITO),
                ID_CONTRATO = 
                   NVL (P_FUENTES (IND).ID_CONTRATO,V_FUENTE_ACTUAL.ID_CONTRATO),
                ID_LINEA_PASIVA = 
                   NVL (P_FUENTES (IND).ID_LINEA_PASIVA,V_FUENTE_ACTUAL.ID_LINEA_PASIVA),
                DESCRIPCION = 
                   NVL (P_FUENTES (IND).DESCRIPCION,V_FUENTE_ACTUAL.DESCRIPCION),
                PORCENTAJE =
                   NVL (P_FUENTES (IND).PORCENTAJE,V_FUENTE_ACTUAL.PORCENTAJE),
                FECHA_OBTENIDO =
                   NVL (P_FUENTES (IND).FECHA_OBTENIDO,V_FUENTE_ACTUAL.FECHA_OBTENIDO),
                MONTO_ASIGNADO =
                   NVL (P_FUENTES (IND).MONTO_ASIGNADO,V_FUENTE_ACTUAL.MONTO_ASIGNADO),
                NUMERO_ASIGNACION =
                   NVL (P_FUENTES (IND).NUMERO_ASIGNACION,V_FUENTE_ACTUAL.NUMERO_ASIGNACION),
                COMENTARIO =
                   NVL (P_FUENTES (IND).COMENTARIO,V_FUENTE_ACTUAL.COMENTARIO),
                BAN_ESTATUS =
                   NVL (P_FUENTES (IND).BAN_ESTATUS,V_FUENTE_ACTUAL.BAN_ESTATUS)
          WHERE ID = P_FUENTES (IND).ID;

         P_CODIGO_RES := 0;
         P_MENSAJE := 'actualizacion exitosa';
      END IF;
   END LOOP;
EXCEPTION
   WHEN OTHERS
   THEN
      P_CODIGO_RES := 1;
      P_MENSAJE := SQLERRM;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE P_UPSERT_TRANSACCION_CONDICION 
(
  P_ID_OPERACION IN NUMBER 
, P_ID_SOLICITUD IN NUMBER 
, P_ID_CONTRATO_DESEMBOLSO IN NUMBER 
, P_ID_CONDICION IN T_NUMBER_TAB 
, P_ID_TCA_ESTADO_TCC IN NUMBER
, P_ID_TCA_EVENTO_CONDICION IN NUMBER
, P_AGRUPADOR IN OUT NUMBER
, P_BAN_ESTATUS IN NUMBER
, P_ID_TCA_SUB_ESTADO_TCC IN NUMBER
, P_EN_PROCESO IN NUMBER
, P_CODIGO OUT VARCHAR2 
, P_MENSAJE OUT VARCHAR2 
) IS

V_ID_TRE_TRANSACCION_CONDICION NUMBER;
V_AGRUPADOR NUMBER;
V_ESTATUS NUMBER;
V_EN_PROCESO NUMBER;
V_AGRUPADOR_CONDICION_ACTUAL TRE_TRANSACCION_CONDICION%ROWTYPE;
RECORDSET SYS_REFCURSOR;

BEGIN
  
  IF P_AGRUPADOR IS NULL AND P_ID_CONDICION.COUNT > 0 THEN
  
    SELECT AGRUPADOR_SEQ.NEXTVAL INTO V_AGRUPADOR FROM DUAL;
    V_ESTATUS := 1;
    V_EN_PROCESO := 1;
    
    FOR IND IN 1 .. P_ID_CONDICION.COUNT 
    LOOP
      SELECT TRE_TRANSACCION_CONDICION_SEQ.NEXTVAL INTO V_ID_TRE_TRANSACCION_CONDICION FROM DUAL;
    
      INSERT INTO TRE_TRANSACCION_CONDICION
      VALUES(
        V_ID_TRE_TRANSACCION_CONDICION,
        P_ID_OPERACION, 
        P_ID_SOLICITUD, 
        P_ID_CONTRATO_DESEMBOLSO, 
        P_ID_CONDICION(IND), 
        P_ID_TCA_ESTADO_TCC,
        P_ID_TCA_EVENTO_CONDICION,
        V_AGRUPADOR,
        V_ESTATUS,
        P_ID_TCA_SUB_ESTADO_TCC,
        V_EN_PROCESO
      );
    END LOOP;
    COMMIT;
    P_AGRUPADOR := V_AGRUPADOR;
  ELSE 
    
    IF P_ID_CONDICION.COUNT > 0 THEN
    
      FOR IND IN 1 .. P_ID_CONDICION.COUNT
      LOOP
        
        SELECT ID,ID_OPERACION,ID_SOLICITUD,ID_CONTRATO_DESEMBOLSO,ID_CONDICION,ID_TCA_ESTADO_TCC,ID_TCA_EVENTO_CONDICION,AGRUPADOR,BAN_ESTATUS,ID_TCA_SUB_ESTADO_TCC,EN_PROCESO
        INTO V_AGRUPADOR_CONDICION_ACTUAL
        FROM TRE_TRANSACCION_CONDICION
        WHERE AGRUPADOR = P_AGRUPADOR AND ID_CONDICION = P_ID_CONDICION(IND);
      
        UPDATE TRE_TRANSACCION_CONDICION
          SET ID_OPERACION = NVL(P_ID_OPERACION,V_AGRUPADOR_CONDICION_ACTUAL.ID_OPERACION),
            ID_SOLICITUD = NVL(P_ID_SOLICITUD,V_AGRUPADOR_CONDICION_ACTUAL.ID_SOLICITUD),
            ID_CONTRATO_DESEMBOLSO = NVL(P_ID_CONTRATO_DESEMBOLSO,V_AGRUPADOR_CONDICION_ACTUAL.ID_CONTRATO_DESEMBOLSO),
            ID_CONDICION = NVL(P_ID_CONDICION(IND),V_AGRUPADOR_CONDICION_ACTUAL.ID_CONDICION),
            ID_TCA_ESTADO_TCC = NVL(P_ID_TCA_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_ESTADO_TCC),
            --ID_TCA_EVENTO_CONDICION = NVL(P_ID_TCA_EVENTO_CONDICION,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_EVENTO_CONDICION),
            AGRUPADOR = NVL(P_AGRUPADOR,V_AGRUPADOR_CONDICION_ACTUAL.AGRUPADOR),
            BAN_ESTATUS = NVL(P_BAN_ESTATUS,V_AGRUPADOR_CONDICION_ACTUAL.BAN_ESTATUS),
            ID_TCA_SUB_ESTADO_TCC = NVL(P_ID_TCA_SUB_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_SUB_ESTADO_TCC),
            EN_PROCESO = NVL(P_EN_PROCESO,V_AGRUPADOR_CONDICION_ACTUAL.EN_PROCESO)
            WHERE AGRUPADOR = P_AGRUPADOR AND ID_CONDICION = P_ID_CONDICION(IND);
      END LOOP;
      COMMIT;
      ELSE
      
        OPEN RECORDSET FOR 
        SELECT ID,ID_OPERACION,ID_SOLICITUD,ID_CONTRATO_DESEMBOLSO,ID_CONDICION,ID_TCA_ESTADO_TCC,ID_TCA_EVENTO_CONDICION,AGRUPADOR,BAN_ESTATUS,ID_TCA_SUB_ESTADO_TCC,EN_PROCESO
        --INTO V_AGRUPADOR_CONDICION_ACTUAL
        FROM TRE_TRANSACCION_CONDICION
        WHERE AGRUPADOR = P_AGRUPADOR;
      
      LOOP
        FETCH RECORDSET INTO V_AGRUPADOR_CONDICION_ACTUAL;
        EXIT WHEN RECORDSET%NOTFOUND;
      
        UPDATE TRE_TRANSACCION_CONDICION
          SET ID_OPERACION = NVL(P_ID_OPERACION,V_AGRUPADOR_CONDICION_ACTUAL.ID_OPERACION),
            ID_SOLICITUD = NVL(P_ID_SOLICITUD,V_AGRUPADOR_CONDICION_ACTUAL.ID_SOLICITUD),
            ID_CONTRATO_DESEMBOLSO = NVL(P_ID_CONTRATO_DESEMBOLSO,V_AGRUPADOR_CONDICION_ACTUAL.ID_CONTRATO_DESEMBOLSO),
            --ID_CONDICION = NVL(P_ID_CONDICION(1),V_AGRUPADOR_CONDICION_ACTUAL.ID_CONDICION),
            ID_TCA_ESTADO_TCC = NVL(P_ID_TCA_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_ESTADO_TCC),
            --ID_TCA_EVENTO_CONDICION = NVL(P_ID_TCA_EVENTO_CONDICION,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_EVENTO_CONDICION),
            AGRUPADOR = NVL(P_AGRUPADOR,V_AGRUPADOR_CONDICION_ACTUAL.AGRUPADOR),
            BAN_ESTATUS = NVL(P_BAN_ESTATUS,V_AGRUPADOR_CONDICION_ACTUAL.BAN_ESTATUS),
            ID_TCA_SUB_ESTADO_TCC = NVL(P_ID_TCA_SUB_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_SUB_ESTADO_TCC),
            EN_PROCESO = NVL(P_EN_PROCESO,V_AGRUPADOR_CONDICION_ACTUAL.EN_PROCESO)
            WHERE AGRUPADOR = P_AGRUPADOR;
      END LOOP; 
      COMMIT;
      CLOSE RECORDSET;
        
    END IF;  
    
  END IF;

    P_CODIGO := 0;
    P_MENSAJE := 'Procedimiento  ejecutado  correctamente';
  
  EXCEPTION 
  WHEN OTHERS
    THEN 
      P_CODIGO := 1;
      P_MENSAJE := SQLERRM;
  
END P_UPSERT_TRANSACCION_CONDICION;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE P_VALIDA_CLIENTE_DUPLICADO ( P_ABREVIATURA VARCHAR2,  P_RAZON_SOCIAL VARCHAR2,
   RECORDSET            OUT SYS_REFCURSOR)
   
IS
 P_ID_CLIENTE NUMBER;
 V_ABREVIATURA VARCHAR2 (250 );
 V_VALOR  VARCHAR2 (250 );

BEGIN

SELECT ID_CLIENTE INTO P_ID_CLIENTE  FROM CLIENTES 
WHERE ABREVIATURA =P_ABREVIATURA
AND BAN_ESTATUS=1
AND ROWNUM =1;

  OPEN RECORDSET FOR
SELECT   ID_CLIENTE,   ID_FLEXCUBE,   RAZON_SOCIAL,   ABREVIATURA,   TIPO_PERSONA,   TIPO_CLIENTE,   SECTOR ,   TIPO_INSTITUCION,
  PAIS  ,   GRUPO_ECONOMICO    ,   TIPO_IDENTIFICACION  ,   NUMERO_IDENTIFICACION ,  OFICINA           ,  FECHA_REGISTRO    ,
  FECHA_APROBACION       ,   EJECUTIVO              ,   COMENTARIO_APROBACION  ,   AUTORIZO               ,   BAN_ESTATUS            ,   FECHA_BAJA             ,
  DIA_PAGO    , 'ABREVIATURA' VALOR FROM CLIENTES
  WHERE ID_CLIENTE =P_ID_CLIENTE;
  
  EXCEPTION
WHEN NO_DATA_FOUND THEN

BEGIN

SELECT F_VALIDACION_RASONSOCIAL(P_RAZON_SOCIAL||' ', ' ') INTO V_VALOR FROM DUAL;



       OPEN RECORDSET FOR
SELECT   ID_CLIENTE,   ID_FLEXCUBE,   RAZON_SOCIAL,   ABREVIATURA,   TIPO_PERSONA,   TIPO_CLIENTE,   SECTOR ,   TIPO_INSTITUCION,
  PAIS  ,   GRUPO_ECONOMICO    ,   TIPO_IDENTIFICACION  ,   NUMERO_IDENTIFICACION ,  OFICINA           ,  FECHA_REGISTRO    ,
  FECHA_APROBACION       ,   EJECUTIVO              ,   COMENTARIO_APROBACION  ,   AUTORIZO               ,   BAN_ESTATUS            ,   FECHA_BAJA             ,
  DIA_PAGO  , 'RAZONSOCIAL' VALOR  FROM CLIENTES
  WHERE RAZON_SOCIAL LIKE  '%'||V_VALOR||'%' ;


 EXCEPTION
WHEN NO_DATA_FOUND THEN



   DBMS_OUTPUT.PUT_LINE (V_ABREVIATURA  || ' ' || V_VALOR);
 
END;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE P_VALIDAR_CONDICION (  
               P_CONDICION IN OUT NUMBER ,
               P_OBSERVACION IN OUT VARCHAR2,
               P_LOGIN_USUARIO IN OUT VARCHAR2,
               P_NOMBRE_USUARIO IN OUT VARCHAR2,
               P_FECHA_REGISTRO IN OUT TIMESTAMP,
               P_BAN_ESTATUS IN OUT NUMBER ,
               P_ID_TCA_TAREA_BPM IN OUT NUMBER ,
               P_ES_PRINCIPAL IN OUT NUMBER ,
               P_ROL IN OUT NUMBER , 
               P_ESTADO IN OUT NUMBER, 
               P_ES_VALIDADOR IN OUT NUMBER, 
               P_AGRUPADOR IN NUMBER,
               P_MENSAJE OUT VARCHAR2,
               P_CODE OUT VARCHAR2) AS


V_ID_OC NUMBER;
v_exit NUMBER;
V_ID_EVENTO_CONDICION NUMBER;

BEGIN

    IF P_OBSERVACION IS NOT NULL THEN 
    
      SELECT OBSERVACION_CONDICION_SEQ.NEXTVAL INTO V_ID_OC FROM DUAL;               --V_ID_OC
      
       INSERT INTO OBSERVACION_CONDICION (ID, ID_CONDICION, OBSERVACION, LOGIN_USUARIO, NOMBRE_USUARIO,  FECHA_REGISTRO, BAN_ESTATUS, ID_TCA_TAREA_BPM, ES_PRINCIPAL, AGRUPADOR)
           VALUES (V_ID_OC,
                   P_CONDICION,
                   P_OBSERVACION,
                   P_LOGIN_USUARIO,
                   P_NOMBRE_USUARIO,
                   P_FECHA_REGISTRO,
                   P_BAN_ESTATUS,
                   P_ID_TCA_TAREA_BPM,
                   P_ES_PRINCIPAL,
                   P_AGRUPADOR);
                  
    ELSE 
           
             DBMS_OUTPUT.PUT_LINE ('No se registran Observacion Condiciones ');
           
    END IF;
           
           
       SELECT COUNT ( * ) INTO v_exit
         FROM VALIDACION_CONDICION
        WHERE     ID_CONDICION = P_CONDICION
              AND  ID_ROL_BPM = P_ROL
              AND LOGIN_USUARIO = P_LOGIN_USUARIO
              AND AGRUPADOR = P_AGRUPADOR; --Cuenta si existe una relacion en la BD
    
       IF v_exit > 0 THEN
          UPDATE VALIDACION_CONDICION
             SET ID_OBSERVACION =V_ID_OC,
             ES_VALIDADOR=P_ES_VALIDADOR,
            ESTADO=P_ESTADO,
             FECHA_REGISTRO =P_FECHA_REGISTRO
           WHERE     ID_CONDICION = P_CONDICION
                 AND ID_ROL_BPM = P_ROL
                 AND LOGIN_USUARIO = P_LOGIN_USUARIO
                 AND AGRUPADOR = P_AGRUPADOR;
       ELSE
          INSERT INTO VALIDACION_CONDICION (ID_CONDICION, ID_ROL_BPM, LOGIN_USUARIO, NOMBRE_USUARIO, ID_OBSERVACION, ES_VALIDADOR, ESTADO, FECHA_REGISTRO,AGRUPADOR)
              VALUES (P_CONDICION,
                      P_ROL,
                      P_LOGIN_USUARIO,
                      P_NOMBRE_USUARIO,
                      V_ID_OC,
                      P_ES_VALIDADOR,
                      P_ESTADO,
                      P_FECHA_REGISTRO,
                      P_AGRUPADOR);
       END IF;
      
        IF P_ES_VALIDADOR = 0 AND P_ESTADO = 0
         THEN
            UPDATE TRE_TRANSACCION_CONDICION
               SET ID_TCA_ESTADO_TCC = 23 ,ID_TCA_SUB_ESTADO_TCC=  29
             WHERE ID_CONDICION = P_CONDICION AND AGRUPADOR = P_AGRUPADOR;
             
             COMMIT;
         ELSE
            IF P_ES_VALIDADOR = 0 AND P_ESTADO = 1
            THEN
               UPDATE TRE_TRANSACCION_CONDICION
                  SET ID_TCA_ESTADO_TCC = 23 , ID_TCA_SUB_ESTADO_TCC =  21
                WHERE ID_CONDICION = P_CONDICION AND AGRUPADOR = P_AGRUPADOR;
            ELSE
               IF P_ES_VALIDADOR = 1 AND P_ESTADO = 0
               THEN
                  UPDATE TRE_TRANSACCION_CONDICION
                     SET ID_TCA_ESTADO_TCC = 23, ID_TCA_SUB_ESTADO_TCC =  21
                   WHERE ID_CONDICION = P_CONDICION AND AGRUPADOR = P_AGRUPADOR;
               ELSE
                  UPDATE TRE_TRANSACCION_CONDICION
                     SET ID_TCA_ESTADO_TCC = 23, ID_TCA_SUB_ESTADO_TCC = 25
                   WHERE ID_CONDICION = P_CONDICION AND AGRUPADOR = P_AGRUPADOR;
               END IF;
            END IF;
         END IF;
      
      P_CODE := 0;
      
   EXCEPTION
WHEN NO_DATA_FOUND THEN

  DBMS_OUTPUT.PUT_LINE ('Se ejecuta cuando ocurre una excepcion de tipo NO_DATA_FOUND ');
  P_CODE := 1;
  P_MENSAJE := SQLERRM;

WHEN OTHERS THEN

 P_MENSAJE := SQLERRM;  
 P_CODE := 1;
 DBMS_OUTPUT.PUT_LINE ('Error ');

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       SP_CALCULA_FECHA_VENCIMIENTO (
   P_ID_OPERACION        IN     NUMBER,
   P_ID_ID_TCA_TERMINO   IN     NUMBER,
   v_fecha_inicio        IN     DATE,
   RESUL                    OUT NUMBER)
AS
   Resultado   VARCHAR2 (250);
   
     err_num NUMBER;
   err_msg VARCHAR2(255);
   
BEGIN


   IF P_ID_ID_TCA_TERMINO = 29
   THEN
      UPDATE TERMINO TERUP
SET (TERUP.FECHA_INICIO,
TERUP.FECHA_VENCIMIENTO)=(
SELECT v_fecha_inicio,
       CASE
          WHEN TTF.DESCRIPCION = 'Días'
         THEN
            v_fecha_inicio + TER.PLAZO
          WHEN TTF.DESCRIPCION = 'Meses'
          THEN
            ADD_MONTHS (v_fecha_inicio, TER.PLAZO)
         WHEN TTF.DESCRIPCION = 'Años'
         THEN
            ADD_MONTHS (v_fecha_inicio, (TER.PLAZO * 12))
      END
            FROM TERMINO TER INNER JOIN TCA_TIPO_FRECUENCIA TTF
          ON TER.ID_TCA_FRECUENCIA_PLAZO = TTF.ID
 WHERE     
 --TER.ID_TCA_TERMINO = 1                                -- tipo plazo
     TER.ID_TCA_TIPO_FECHA_INICIO = 8  -- inicio Aprobación para TERMINO
       AND TER.BAN_ESTATUS = 1                            -- Que estén activas
      AND TER.ID_OPERACION = P_ID_OPERACION
       AND TERUP.ID=TER.ID)
       WHERE  TERUP.ID_OPERACION = P_ID_OPERACION AND TERUP.ID_TCA_TIPO_FECHA_INICIO = 8  -- inicio Aprobación para TERMINO
       AND TERUP.BAN_ESTATUS = 1  ;
      
        Resultado:=1;
        
        RESUL:=Resultado;
        
   END IF;

   IF P_ID_ID_TCA_TERMINO = 30
   THEN
      UPDATE TERMINO TERUP
         SET
             (TERUP.FECHA_INICIO,
             TERUP.FECHA_VENCIMIENTO
             ) =
                (SELECT v_fecha_inicio,
                        CASE
                           WHEN TTF.DESCRIPCION = 'Días'
                           THEN
                              v_fecha_inicio + TER.PLAZO
                           WHEN TTF.DESCRIPCION = 'Meses'
                           THEN
                              ADD_MONTHS (v_fecha_inicio, TER.PLAZO)
                           WHEN TTF.DESCRIPCION = 'Años'
                           THEN
                              ADD_MONTHS (v_fecha_inicio, (TER.PLAZO * 12))
                        END
                   FROM TERMINO TER INNER JOIN TCA_TIPO_FRECUENCIA TTF
                           ON TER.ID_TCA_FRECUENCIA_PLAZO = TTF.ID
                  WHERE     TER.ID_TCA_TERMINO = 1               -- tipo plazo
                        AND TER.ID_TCA_TIPO_FECHA_INICIO = 9 -- inicio Aprobación para TERMINO
                        AND TER.BAN_ESTATUS = 1           -- Que estén activas
                        AND TER.ID_OPERACION = P_ID_OPERACION
                        AND TERUP.ID = TER.ID)
       WHERE TERUP.ID_OPERACION = P_ID_OPERACION and TERUP.ID_TCA_TERMINO = 1               -- tipo plazo
                        AND TERUP.ID_TCA_TIPO_FECHA_INICIO = 9 -- inicio Aprobación para TERMINO
                        AND TERUP.BAN_ESTATUS = 1    
       
       
       ;

      Resultado := 1;
      RESUL := Resultado;
   END IF;


   IF P_ID_ID_TCA_TERMINO = 31
   THEN
      UPDATE TERMINO TERUP
         SET
             (TERUP.FECHA_INICIO,
             TERUP.FECHA_VENCIMIENTO
             ) =
                (SELECT v_fecha_inicio,
                        CASE
                           WHEN TTF.DESCRIPCION = 'Días'
                           THEN
                              v_fecha_inicio + TER.PLAZO
                           WHEN TTF.DESCRIPCION = 'Meses'
                           THEN
                              ADD_MONTHS (v_fecha_inicio, TER.PLAZO)
                           WHEN TTF.DESCRIPCION = 'Años'
                           THEN
                              ADD_MONTHS (v_fecha_inicio, (TER.PLAZO * 12))
                        END
                   FROM TERMINO TER INNER JOIN TCA_TIPO_FRECUENCIA TTF
                           ON TER.ID_TCA_FRECUENCIA_PLAZO = TTF.ID
                  WHERE     TER.ID_TCA_TERMINO = 1               -- tipo plazo
                        AND TER.ID_TCA_TIPO_FECHA_INICIO = 13 -- inicio Aprobación para TERMINO
                        AND TER.BAN_ESTATUS = 1           -- Que estén activas
                        AND TER.ID_OPERACION = P_ID_OPERACION
                        AND TERUP.ID = TER.ID)
       WHERE TERUP.ID_OPERACION = P_ID_OPERACION AND 
        TERUP.ID_TCA_TERMINO = 1               -- tipo plazo
                        AND TERUP.ID_TCA_TIPO_FECHA_INICIO = 13 -- inicio Aprobación para TERMINO
                        AND TERUP.BAN_ESTATUS = 1
       ;

      Resultado := 1;
      RESUL := Resultado;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE ('No existen Datos ');


      Resultado := 0;
      RESUL := Resultado;
      
     err_num := SQLCODE;
     err_msg := SQLERRM;

     INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
             VALUES('SP','SP_CALCULA_FECHA_VENCIMIENTO','Contrato: '||' Error:'||TO_CHAR(err_num)||' '||SUBSTR(err_msg,1,520),TO_DATE(SYSDATE,'DD-MM-YY 
HH24:MI'));

COMMIT;

  WHEN OTHERS THEN

     err_num := SQLCODE;
     err_msg := SQLERRM;

     INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
             VALUES('SP','SP_CALCULA_FECHA_VENCIMIENTO','Contrato: '||' Error:'||TO_CHAR(err_num)||' '||SUBSTR(err_msg,1,520),TO_DATE(SYSDATE,'DD-MM-YY 
HH24:MI'));

COMMIT;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_calcularCuotas (vdFecha_Inicio       IN     DATE,
                          vvTipo_Frecuencia    IN     VARCHAR2,
                          vnFrecuencia         IN     NUMBER,
                          pdFechaVencimiento   IN     DATE,
                          pnFlags              IN     NUMBER:= 0,
                          vnCuotas                OUT NUMBER,
                          pcMensaje            IN OUT VARCHAR2)
AS



   vvformatofechaMes    VARCHAR2 (50) := 'mm/dd/yy';

   veException EXCEPTION;
   vnPeriodos           NUMBER;
   ldFecha              DATE;
BEGIN 

   IF vvTipo_frecuencia NOT IN ('D', 'M', 'Y', 'B')    THEN
      pcMensaje:=(   pcMensaje
                           || ','
                           || 'calcularCuotas: el campo tipo de frecuencia('
                           || vvTipo_Frecuencia
                           || ') solo acepta los siguientes valores (D, M, Y, B)');
   --      concatenar (          pcMensaje, 'calcularCuotas: el campo tipo de frecuencia('          || vvTipo_Frecuencia          || ') solo acepta los siguientes valores (D, M, Y, B)');

   END IF;

   CASE
      WHEN vvTipo_Frecuencia = 'B'
      THEN
         vnCuotas := 1;

         IF NVL (vdFecha_Inicio, SYSDATE) <>
               NVL (pdFechaVencimiento, SYSDATE)
         THEN
            --            concatenar (   pcMensaje,  'Para Tipo Frecuencia Bullet la Fehca de Inicio('  || TO_CHAR (vdFecha_Inicio, vvformatofechaMes)    || ') debe ser igual a la Fecha de Vencimiento('  || TO_CHAR (pdFechaVencimiento, vvformatofechaMes)   || ') para el :componente; ');

       pcMensaje:=(pcMensaje
                                 || 'Para Tipo Frecuencia Bullet la Fecha de Inicio('
                                 || TO_CHAR (vdFecha_Inicio,
                                             vvformatofechaMes)
                                 || ') debe ser igual a la Fecha de Vencimiento('
                                 || TO_CHAR (pdFechaVencimiento,
                                             vvformatofechaMes)
                                 || ') para el :componente; ');
         END IF;

         IF pcMensaje IS NOT NULL
         THEN
            RAISE veexception;
         END IF;
      WHEN vvTipo_Frecuencia = 'M'
      THEN
         vnPeriodos := MONTHS_BETWEEN (pdFechaVencimiento, vdFecha_Inicio);
      WHEN vvTipo_Frecuencia = 'D'
      THEN
         vnPeriodos := pdFechaVencimiento - vdFecha_Inicio;
      WHEN vvTipo_Frecuencia = 'Y'
      THEN
         vnPeriodos :=
            MONTHS_BETWEEN (pdFechaVencimiento, vdFecha_Inicio) / 12;

         IF vnPeriodos <= 0
         THEN
            --concatenar ( pcMensaje,  'Las cuotas para la frecuencia anual, debe ser mayor que cero; pdFechaVencimiento = '  || TO_CHAR (pdFechaVencimiento, vvformatofechaMes)  || ' vdFecha_Inicio = ' || TO_CHAR (vdFecha_Inicio, vvformatofechaMes)  || ' para el :componente; ');
            pcMensaje:=(pcMensaje
                                 || 'Las cuotas para la frecuencia anual, debe ser mayor que cero; pdFechaVencimiento = '
                                 || TO_CHAR (pdFechaVencimiento,
                                             vvformatofechaMes)
                                 || ' vdFecha_Inicio = '
                                 || TO_CHAR (vdFecha_Inicio,
                                             vvformatofechaMes)
                                 || ' para el :componente; ');

            RAISE veexception;
         END IF;
      WHEN vvTipo_Frecuencia IS NULL
      THEN
         NULL;
      ELSE
       pcMensaje:=(
            pcMensaje || 'vvTipo_Frecuencia=' || vvTipo_Frecuencia);
   --         concatenar (pcMensaje, 'vvTipo_Frecuencia=' || vvTipo_Frecuencia);
   END CASE;

   IF vnFrecuencia <> 0 AND vvTipo_Frecuencia <> 'B'
   THEN
      vnCuotas := CEIL (vnPeriodos / vnFrecuencia); -- Se elimina el +1 debido a que con la función ceil se esta obteniendo el numero inmediato superior y ya no es necesario sumarle 1 para obtener el entero

      ldFecha :=          bcie.modificarFecha (pdFecha        => vdFecha_Inicio,
                         pnPlazo        => (vnFrecuencia * (vnCuotas)), -- al eliminar el +1 en el renglon anterior este -1 deja de ser necesario
                         pvTipo_Plazo   => vvTipo_Frecuencia);

      IF pdFechaVencimiento = ldFecha
      THEN
         vnCuotas := vnCuotas - 0;
      END IF;

      ldFecha :=
         bcie.modificarFecha (pdFecha        => vdFecha_Inicio,
                              pnPlazo        => (vnFrecuencia * vnCuotas),
                              pvTipo_Plazo   => vvTipo_Frecuencia);

      IF pdFechaVencimiento > ldFecha
      THEN
         vnCuotas := vnCuotas + 1;
      END IF;
   ELSIF vvTipo_Frecuencia <> 'B'
   THEN
      --      concatenar (pcMensaje,              'La frecuencia para el componente :componente es 0');

     pcMensaje:=(
         pcMensaje || 'La frecuencia para el componente :componente es 0');
   END IF;

   IF vvTipo_frecuencia = 'B' AND vnFrecuencia <> 1
   THEN
      --      concatenar ( pcMensaje,  'La frecuencia para el tipo de frecuencia bullet debe ser 1 actualmente es ('  || vnFrecuencia     || ') para el :componente');
      pcMensaje:=(pcMensaje
                           || 'La frecuencia para el tipo de frecuencia bullet debe ser 1 actualmente es ('
                           || vnFrecuencia
                           || ') para el :componente');
   ELSIF CEIL (vnPeriodos) < vnFrecuencia AND pnFlags <> 1
   THEN
      --      concatenar (  pcMensaje,   'La fecha de vencimiento('     || TO_CHAR (pdFechaVencimiento, vvformatofechaMes)   || ') debe ser mayor o igual a 1 periodicidad('   || TO_CHAR (vdFecha_Inicio, vvformatofechaMes)  || '+'  || vnFrecuencia
      --         || vvTipo_Frecuencia
      --         || ') para el componente :componente '
      --         || 'vnPeriodos:'
      --         || vnPeriodos
      --         || ',vnFrecuencia:'
      --         || vnFrecuencia);

     pcMensaje:=(   pcMensaje
                           || 'La fecha de vencimiento('
                           || TO_CHAR (pdFechaVencimiento, vvformatofechaMes)
                           || ') debe ser mayor o igual a 1 periodicidad('
                           || TO_CHAR (vdFecha_Inicio, vvformatofechaMes)
                           || '+'
                           || vnFrecuencia
                           || vvTipo_Frecuencia
                           || ') para el componente :componente '
                           || 'vnPeriodos:'
                           || vnPeriodos
                           || ',vnFrecuencia:'
                           || vnFrecuencia);
   ELSIF vnCuotas = 0
   THEN
      --      concatenar (pcMensaje,  'El calculo de cuotas para :componente resulto en cero');

      pcMensaje:=(pcMensaje
                           || 'El calculo de cuotas para :componente resulto en cero');
   END IF;

   IF pcMensaje IS NOT NULL
   THEN
      RAISE veException;
   END IF;

   pcMensaje :=
         'calcularCuotas(vdFecha_Inicio => '''
      || TO_CHAR (vdFecha_Inicio, vvformatofechaMes)
      || ''', vvTipo_Frecuencia => '''
      || vvTipo_Frecuencia
      || ''', vnFrecuencia => '''
      || vnFrecuencia
      || ''', pdFechaVencimiento => '''
      || TO_CHAR (pdFechaVencimiento, vvformatofechaMes)
      || ''', vnCuotas => '''
      || vnCuotas
      || ''', pcMensaje => '''
      || pcMensaje
      || '); vnPeriodos:='
      || vnPeriodos;
   --DBMS_OUTPUT.PUT_LINE(pcMensaje);
   pcMensaje := NULL;


   DBMS_OUTPUT.put_line (pcMensaje);

   DBMS_OUTPUT.put_line (vnCuotas);
/*
            dbms_output.put_line(
                vdFecha_Inicio||' i-(vnFrecuencia:vvTipo_Frecuencia='||vnFrecuencia||vvTipo_Frecuencia||')*(vnCuotas:'||vnCuotas||') - '||
                ' -modificarFecha'||
                modificarFecha(
                 pdFecha       => vdFecha_Inicio
               , pnPlazo       => (vnFrecuencia*vnCuotas)
               , pvTipo_Plazo  => vvTipo_Frecuencia
               )||' -v '||pdFechaVencimiento);
*/
EXCEPTION
   WHEN veException
   THEN
      vnCuotas := NULL;
   WHEN OTHERS
   THEN
      pcMensaje :=
            pcMensaje
         || ' Error desconcido --> '
         || SQLERRM
         || DBMS_UTILITY.FORMAT_ERROR_BACKTRACE;
      vnCuotas := NULL;

--      DBMS_OUTPUT.put_line (pcMensaje);
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CALCULAR_PLAZO_CONDICIONES (
   P_CONDICIONES   IN     T_CONDICION, 
   P_ID_OPERACION  IN          NUMBER,
   P_ESTADO            OUT VARCHAR2,
   P_CODIGO            OUT VARCHAR2,
   P_MENSAJE          OUT VARCHAR2)
IS

V_FECHA_INICIO DATE;
V_FECHA_FINAL  DATE;
V_PLAZO NUMBER(3);
V_FRECUENCIA_PLAZO NUMBER(5);
V_PLAZO_FECHA_INICIAL DATE;
V_PLAZO_FECHA_FINAL DATE;
V_CON_PLAZO_ACTUAL NUMBER(1):=0;
V_FECHA_INICIO_PLAZO_ACTUAL DATE;
V_FECHA_FINAL_PLAZO_ACTUAL DATE;
V_CONTADOR_VALIDADORES NUMBER(2):=0;
V_ESTADO VARCHAR2(11);

CURSOR C_PLAZOS
IS
SELECT FECHA_INICIO_PLAZO, FECHA_FINAL_PLAZO
  FROM TMP_PLAZO_CONDICION;

BEGIN

FOR IND IN 1 .. P_CONDICIONES.COUNT 
    LOOP

    DELETE FROM  TMP_PLAZO_CONDICION;
    COMMIT;

    V_CON_PLAZO_ACTUAL := 0;

/* si la FECHA_VIGENCIA existe y  es mayor o igual a la fecha actual*/

   IF  P_CONDICIONES(IND).FECHA_VIGENCIA IS NOT NULL 
   AND 
   P_CONDICIONES(IND).FECHA_VIGENCIA >= TRUNC(SYSDATE)
    THEN
        V_ESTADO:= 'CUMPLIDA';

   ELSE  

        /*Si la condicion no tiene FECHA_VIGENCIA o no se cumple la condicion anterior 
        Se debe validar el  TIPO_FECHA_INICIO  para determinar como se obtendra la FECHA_INICIO*/


        IF P_CONDICIONES(IND).ID_TCA_TIPO_FECHA_INICIO =  1  -- Aprobación
        THEN
                  SELECT T.FECHA
                   INTO V_FECHA_INICIO
                  FROM TERMINO T LEFT JOIN TCA_TERMINO TT
                          ON T.ID_TCA_TERMINO = TT.ID
                 WHERE  T.ID_OPERACION = P_ID_OPERACION
                       AND T.BAN_ESTATUS = 1                                -- Termino Activo
                       AND ID_TCA_ESTADO_TCC NOT IN (30, 22)      -- Estados TCC que No Aplican
                       AND TT.DESCRIPCION_CORTA = 'T602';            -- Tipo Termino Aprobación


        ELSIF P_CONDICIONES(IND).ID_TCA_TIPO_FECHA_INICIO =  3  -- Primer desembolso
        THEN
                SELECT MIN(CD.FECHA_EFECTIVA) FECHA_EFECTIVA
                INTO V_FECHA_INICIO
                  FROM OPERACION O
                       JOIN SOLICITUD_DESEMBOLSO SD
                          ON (O.ID_OPERACION = SD.ID_OPERACION)
                       JOIN TRE_SOLICITUD_LINEA_CREDITO TSLC
                          ON (SD.ID = TSLC.ID_SOLICITUD)
                       JOIN CONTRATO_DESEMBOLSO CD
                          ON (TSLC.ID_CONTRATO_DESEMBOLSO = CD.ID)
                 WHERE O.ID_OPERACION = P_ID_OPERACION
                 AND CD.CONTRATO_FLEXCUBE IS NOT NULL;


        ELSIF P_CONDICIONES(IND).ID_TCA_TIPO_FECHA_INICIO =  2  -- Escrituración
        THEN
                SELECT T.FECHA
                INTO V_FECHA_INICIO
                  FROM TERMINO T LEFT JOIN TCA_TERMINO TT
                          ON T.ID_TCA_TERMINO = TT.ID
                 WHERE T.ID_OPERACION = P_ID_OPERACION
                       AND T.BAN_ESTATUS = 1                                 -- Termino Activo
                       AND ID_TCA_ESTADO_TCC NOT IN (30, 22)      --Estados TCC que No Aplican
                       AND TT.DESCRIPCION_CORTA = 'T603';             --Tipo Termino Firma del Contrato

        ELSIF P_CONDICIONES(IND).ID_TCA_TIPO_FECHA_INICIO =  7  --Fecha específica
        THEN
                SELECT FECHA_INICIO
                  INTO V_FECHA_INICIO
                  FROM CONDICION
                 WHERE ID = P_CONDICIONES (IND).ID;

         END IF;

        /*Si las condiciones no tienen fecha final, se tomara la fecha actual como fecha final, 
        ademas se obtiene la fecha final del primer periodo*/

        SELECT
                 NVL (FECHA_FINAL, TRUNC (SYSDATE)), PLAZO,
                   ID_TCA_FRECUENCIA_PLAZO,
                   (CASE
                       WHEN ID_TCA_FRECUENCIA_PLAZO = 1
                       THEN
                         V_FECHA_INICIO + PLAZO
                       WHEN ID_TCA_FRECUENCIA_PLAZO = 2
                       THEN
                          ADD_MONTHS ( V_FECHA_INICIO , PLAZO)
                       WHEN ID_TCA_FRECUENCIA_PLAZO = 3
                       THEN
                          ADD_MONTHS ( V_FECHA_INICIO , (PLAZO * 12))
                    END)
              INTO V_FECHA_FINAL,
                   V_PLAZO,
                   V_FRECUENCIA_PLAZO,
                   V_PLAZO_FECHA_FINAL
              FROM CONDICION
             WHERE ID = P_CONDICIONES (IND).ID;


         /*Se inserta el primer plazo*/

         IF V_PLAZO_FECHA_FINAL < V_FECHA_FINAL
         THEN

            INSERT INTO TMP_PLAZO_CONDICION
                VALUES (V_FECHA_INICIO, V_PLAZO_FECHA_FINAL);

            COMMIT;
         ELSE 

         INSERT INTO TMP_PLAZO_CONDICION
                VALUES (V_FECHA_INICIO, V_FECHA_FINAL);

            COMMIT;

        END IF;


        V_PLAZO_FECHA_INICIAL:=  V_PLAZO_FECHA_FINAL;


         /*Se genera ciclo para generar los plazos*/

        WHILE V_PLAZO_FECHA_FINAL < V_FECHA_FINAL
        LOOP

            SELECT
               (CASE
                   WHEN ID_TCA_FRECUENCIA_PLAZO = 1
                   THEN
                     V_PLAZO_FECHA_INICIAL + PLAZO
                   WHEN ID_TCA_FRECUENCIA_PLAZO = 2
                   THEN
                      ADD_MONTHS ( V_PLAZO_FECHA_INICIAL , PLAZO)
                   WHEN ID_TCA_FRECUENCIA_PLAZO = 3
                   THEN
                      ADD_MONTHS ( V_PLAZO_FECHA_INICIAL , (PLAZO * 12))
                END)
          INTO V_PLAZO_FECHA_FINAL
          FROM CONDICION
         WHERE ID = P_CONDICIONES (IND).ID;

            IF V_PLAZO_FECHA_FINAL <V_FECHA_FINAL
            THEN

            INSERT INTO TMP_PLAZO_CONDICION
            VALUES (V_PLAZO_FECHA_INICIAL, V_PLAZO_FECHA_FINAL);

             V_PLAZO_FECHA_INICIAL:=  V_PLAZO_FECHA_FINAL;

         ELSE 

          INSERT INTO TMP_PLAZO_CONDICION
            VALUES (V_PLAZO_FECHA_INICIAL, V_FECHA_FINAL);

         END IF;

        END LOOP;

        COMMIT;


       /*Se obtiene plazo actual*/

        FOR PLAZO IN C_PLAZOS
        LOOP

            IF TRUNC(SYSDATE) >=PLAZO.FECHA_INICIO_PLAZO AND  TRUNC(SYSDATE) <=PLAZO.FECHA_FINAL_PLAZO
            THEN
               V_FECHA_INICIO_PLAZO_ACTUAL := PLAZO.FECHA_INICIO_PLAZO;
                V_FECHA_FINAL_PLAZO_ACTUAL := PLAZO. FECHA_FINAL_PLAZO;
                V_CON_PLAZO_ACTUAL := 1;
            END IF;

        END LOOP;


          SELECT COUNT(FECHA_REGISTRO)
          INTO  V_CONTADOR_VALIDADORES
              FROM VALIDACION_CONDICION
             WHERE     ID_CONDICION = P_CONDICIONES (IND).ID
                   AND ESTADO = 1
                   AND FINALIZO_TAREA = 1
                   AND ES_VALIDADOR = 1;


           /*Se revisa que a fecha de registro de cada uno de los validadores este dentro del plazo actual*/

            IF V_CONTADOR_VALIDADORES > 0
            THEN

                FOR VALIDADOR IN 
                 (
                 SELECT FECHA_REGISTRO
                  FROM VALIDACION_CONDICION
                 WHERE     ID_CONDICION = P_CONDICIONES (IND).ID
                       AND ESTADO = 1
                       AND FINALIZO_TAREA = 1
                       AND ES_VALIDADOR = 1
                      )
                LOOP
                    IF TRUNC(VALIDADOR.FECHA_REGISTRO)>=V_FECHA_INICIO_PLAZO_ACTUAL AND TRUNC(VALIDADOR.FECHA_REGISTRO)<=V_FECHA_FINAL_PLAZO_ACTUAL
                    THEN
                        V_ESTADO:= 'CUMPLIDA'; 

                    ELSE
                         V_ESTADO:= 'NO_CUMPLIDA'; 

                    END IF;

                     EXIT WHEN  V_ESTADO= 'NO_CUMPLIDA'; 
                END LOOP;

            /*En caso de que no existan validadores, con base a la fecha actual se determina el estado*/
           ELSE

                IF V_CON_PLAZO_ACTUAL = 1
                THEN   
                    V_ESTADO:= 'NO_CUMPLIDA';  

                 ELSIF TRUNC(SYSDATE) > V_FECHA_FINAL
                 THEN 
                     V_ESTADO:= 'CUMPLIDA';   

                 ELSIF TRUNC(SYSDATE) < V_FECHA_INICIO
                 THEN
                    V_ESTADO:= 'CUMPLIDA';   

				 ELSE
                    V_ESTADO:= 'NO_CUMPLIDA'; 

                 END IF;


           END IF;

   END IF;

 EXIT WHEN  V_ESTADO= 'NO_CUMPLIDA'; 

END LOOP;

    P_ESTADO:= V_ESTADO;
    P_CODIGO := 0;
    P_MENSAJE := 'Procedimiento  ejecutado  correctamente';

  EXCEPTION 
  WHEN OTHERS
    THEN 
      P_CODIGO := 1;
      P_MENSAJE := SQLERRM;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       SP_CALCULO_DE_INTERES (
   p_prepago         NUMBER,
   p_Recordset   OUT SYS_REFCURSOR)
AS
   l_cursor            SYS_REFCURSOR;
   pvContrato          VARCHAR2 (100);
   pdFechaHasta        DATE;
   Contract_Ref_No     VARCHAR2 (100);
   Numero_Tesoreria    VARCHAR2 (100);
   base                VARCHAR2 (100);
   tasa                NUMBER;
   saldo_acumulado     NUMBER;
   fecha_desde         DATE;
   fecha_hasta         DATE;
   intereses_por_dia   NUMBER;
   dias_calculados     NUMBER;
   proyectado          NUMBER;
   moneda              VARCHAR2 (50);
BEGIN
   DELETE FROM TEM_CALCULO_INTER
         WHERE ID_SOLICITUD_PREPAGO = p_prepago;

   COMMIT;

   FOR REC
      IN (SELECT DISTINCT
                 PRE.MONTO_PREPAGO,
                 PRE.FECHA_PREPAGO AS pdFechaHasta,
                 TPC.CONTRATO_FLEXCUBE AS V_CONTRATO
            FROM PREPAGO PRE, TRE_PREPAGO_CONTRATO TPC
           WHERE PRE.ID = TPC.ID_PREPAGO
                 AND TPC.CONTRATO_FLEXCUBE IS NOT NULL 
                 AND PRE.ID=p_prepago
                 )
   LOOP
      middle.fc_p_proyeccion_interes (REC.V_CONTRATO,
                                      REC.pdFechaHasta,
                                      p_recordset   => l_cursor);

      LOOP
         FETCH l_cursor
         INTO Contract_Ref_No,
              Numero_Tesoreria,
              base,
              tasa,
              saldo_acumulado,
              fecha_desde,
              fecha_hasta,
              intereses_por_dia,
              dias_calculados,
              proyectado,
              moneda;

         EXIT WHEN l_cursor%NOTFOUND;



         INSERT INTO TEM_CALCULO_INTER
             VALUES (Contract_Ref_No,
                     Numero_Tesoreria,
                     base,
                     tasa,
                     saldo_acumulado,
                     fecha_desde,
                     fecha_hasta,
                     intereses_por_dia,
                     dias_calculados,
                     proyectado,
                     moneda,
                     p_prepago);

         COMMIT;
      DBMS_OUTPUT.PUT_LINE(   Contract_Ref_No
                               || ' '
                               || Numero_Tesoreria
                               || ' '
                               || base
                               || ' '
                              || tasa
                               || ' '
                               || saldo_acumulado
                               || ''
                               || fecha_desde
                               || ' '
                               || fecha_hasta
                              || '        ----  '
                              || intereses_por_dia
                              || '     '
                              || dias_calculados
                               || ' '
                               || proyectado
                              || ' '
                               || moneda);
      END LOOP;

      CLOSE l_cursor;
   END LOOP;

   OPEN p_Recordset FOR
      SELECT TPC.CONTRATO_FLEXCUBE Contract_desembolso,
             base,
             tasa,
             tpc.MONTO_PREPAGO monto_prepagar,
             fecha_desde,
             PRE.FECHA_PREPAGO fecha_hasta,
             dias_calculados,
             moneda,
             proyectado AS intereses,
             TPC.ID ID_TRE_PRE_CONT,
            TPC.ES_PAGO_TOTAL,
            TPC.FECHA_PROXIMO_PAGO
        FROM TEM_CALCULO_INTER TEMCI, PREPAGO PRE, TRE_PREPAGO_CONTRATO TPC
       WHERE     PRE.ID = TPC.ID_PREPAGO
             AND TEMCI.ID_SOLICITUD_PREPAGO = PRE.ID
             AND TEMCI.CONTRACT_REF_NO = TPC.CONTRATO_FLEXCUBE
             AND PRE.ID = p_prepago;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       SP_CALCULO_DE_INTERES_ENV_COB (
   p_contrato        VARCHAR2,
   P_fechaIntCalcAl  DATE,
   p_Recordset   OUT SYS_REFCURSOR)
AS
   l_cursor            SYS_REFCURSOR;
   pvContrato          VARCHAR2 (100);
   pdFechaHasta        DATE;
   Contract_Ref_No     VARCHAR2 (100);
   Numero_Tesoreria    VARCHAR2 (100);
   base                VARCHAR2 (100);
   tasa                NUMBER;
   saldo_acumulado     NUMBER;
   fecha_desde         DATE;
   fecha_hasta         DATE;
   intereses_por_dia   NUMBER;
   dias_calculados     NUMBER;
   proyectado          NUMBER;
   moneda              VARCHAR2 (50);
BEGIN
   DELETE FROM TEM_CALCULO_INTER
         WHERE ID_SOLICITUD_PREPAGO IS NULL AND CONTRACT_REF_NO = p_contrato;

   COMMIT;

    
   FOR REC IN (SELECT FECHA_EFECTIVA, CONTRATO_FLEXCUBE
                 FROM contrato_desembolso
                WHERE CONTRATO_FLEXCUBE = p_contrato)
     
   LOOP
      middle.fc_p_proyeccion_interes (REC.CONTRATO_FLEXCUBE,
                                      P_fechaIntCalcAl,
                                      p_recordset   => l_cursor);
                                      
      LOOP
         FETCH l_cursor
         INTO Contract_Ref_No,
              Numero_Tesoreria,
              base,
              tasa,
              saldo_acumulado,
              fecha_desde,
              fecha_hasta,
              intereses_por_dia,
              dias_calculados,
              proyectado,
              moneda;

         EXIT WHEN l_cursor%NOTFOUND;



         INSERT INTO TEM_CALCULO_INTER
             VALUES (Contract_Ref_No,
                     Numero_Tesoreria,
                     base,
                     tasa,
                     saldo_acumulado,
                     fecha_desde,
                     fecha_hasta,
                     intereses_por_dia,
                     dias_calculados,
                     proyectado,
                     moneda,
                     NULL);

         COMMIT;
         DBMS_OUTPUT.PUT_LINE(   Contract_Ref_No
                              || ' '
                              || Numero_Tesoreria
                              || ' '
                              || base
                              || ' '
                              || tasa
                              || ' '
                              || saldo_acumulado
                              || ''
                              || fecha_desde
                              || ' '
                              || fecha_hasta
                              || '        ----  '
                              || intereses_por_dia
                              || '     '
                              || dias_calculados
                              || ' '
                              || proyectado
                              || ' '
                              || moneda);
      END LOOP;

      CLOSE l_cursor;
   END LOOP;

   OPEN p_Recordset FOR
      SELECT CONTRACT_REF_NO Contract_desembolso,
             base,
             tasa,
             fecha_desde,
             fecha_hasta,
             dias_calculados,
             moneda,
             proyectado AS intereses,
             INTERESES_POR_DIA,
             DIAS_CALCULADOS
        FROM TEM_CALCULO_INTER
       WHERE CONTRACT_REF_NO = p_contrato;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTA_DESEMBOLSO (
   P_ID_DESEMBOLSO  IN  T_NUMBER_TAB,
   P_CODIGO_RES     OUT NUMBER,
   P_MENSAJE        OUT VARCHAR2,
   RECORDSET        OUT SYS_REFCURSOR,
   RECORDSET2       OUT SYS_REFCURSOR)
AS
BEGIN

OPEN RECORDSET FOR 
   SELECT CD.ID ID_DESEMBOLSO,
  CD.MONTO_DESEMBOLSAR,
  CD.PROGRAMADO,
  CD.FECHA_EFECTIVA FECHA_EFECTIVA_DESEMBOLSO,
  CD.FECHA_ESTIMADA_DESEMBOLSAR,
  CD.FECHA_ESTIMADA_DISP_RECURSOS,
  CD.FECHA_INICIO_PROCESO_DESEM,
  CD.ID_TCA_ESTADO ,
  CD.MONTO_DESEMBOLSAR_USD,
  CD.FONDO,
  CD.CUENTA_CON_RECURSOS_EXTERNOS RECURSOS_EXTERNOS,
  CD.CUENTA_CLIENTE,
  CD.FECHA_DISPONIBILIDAD_FONDOS,
  CD.ORIGEN_TRANFERENCIA_CLIENTE,
  CD.CONTRATO_FLEXCUBE,
  CD.LOGIN_USUARIO USUARIO,
  CD.REFERENCIA,
  TEO.DESCRIPCION DESCRIPCION_ESTADO,
  TEO.DESCRIPCION_CORTA DESCRIPCION_CORTA_ESTADO,
  TEO.COD_EXTERNO CODIGO_EXTERNO_ESTADO,
  TEO.BAN_ESTATUS BAN_ESTATUS_ESTADO,
  CD.ID_TCA_TIPO_MONEDA,
  CD.PROGRAMA_OPERACION,
  CD.DESTINO_FINANCIAMIENTO,
  CD.ID_TRANSFERENCIA_FT05,
  CD.BHQ_TRANSFERENCIA_FT05,
  CD.FECHA_EFECTIVA_FT05,
  TTM.ID ID_TCA_MONEDA,
  TTM.DESCRIPCION DESCRIPCION_MONEDA,
  TTM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,
  TTM.COD_EXTERNO COD_EXTERNO_MONEDA,
  TTM.BAN_ESTATUS BAN_ESTATUS_MONEDA,
  LC.ID ID_LINEA_CREDITO,
  LC.CODIGO_ASIGNACION ,
  F.ID FUENTE,
  F.ID_CONTRATO,
  F.ID_LINEA_PASIVA,
  F.MONTO_ASIGNADO MONTO_ASIGNADO_FUENTE,
  F.NUMERO_ASIGNACION,
  F.PORCENTAJE,
  F.DESCRIPCION DESCRIPCION_FUENTE,
  F.COMENTARIO COMENTARIO_FUENTE,
  F.FECHA_OBTENIDO,
  TVF.ES_EXTERNO,
  TLP.MONTO_DESEMBOLSAR MONTO_DESEMBOLSAR_FUENTE,
  TLP.MONTO_DISPONIBLE MONTO_DISPONIBLE_FUENTE,
  TLP.RESERVA_TOTAL RESERVA_TOTAL_FUENTE,
  CF.ID ID_CONDICION_FINANCIERA,
  CF.ID_PRODUCTO_FLEXCUBE,
  CF.ID_TCA_ESPECIFICACION_FECHA,
  CF.FECHA_VENCIMIENTO,
  CF.FECHA_PRIMER_PAGO_CAPITAL,
  CF.FECHA_PROXIMO_PAGO_INTERES,
  CF.FECHA_PROXIMA_REVISION_SPREAD,
  CF.FECHA_PROXIMA_REVISION_TASA,
  CF.FRECUENCIA_PAGO_CAPITAL,
  CF.FRECUENCIA_REVISION_TASA,
  CF.FRECUENCIA_PLAZO,
  CF.FRECUENCIA_PERIODO_GRACIA,
  CF.FRECUENCIA_PAGO_INTERES,
  CF.FRECUENCIA_REVISION_SPREAD,
  CF.TRATAMIENTO_DIAS_FERIADOS,
  (CASE WHEN CF.CODIGO_TASA_REFERENCIA_SPREAD IS NULL THEN  NVL( CF.SPREAD_TASA, 0) ELSE NVL(TDSF.VALOR_ACTUAL, 0)  END) AS SPREAD_TASA ,
  CF.CODIGO_TASA_REFERENCIA_SPREAD,
  CF.SPREAD_MORA,
  CF.LIMITE_TASA_MAXIMA TASA_MAXIMA,
  CF.LIMITE_TASA_MINIMA TASA_MINIMA,
  CF.MONTO_DESCUENTO MONTO_ESPECIAL,
  CF.CODIGO_TASA_REFERENCIA,
  CF.VALOR_TASA TASA_FIJA,
  TDF.DESCRIPCION DESC_CORTA_TASA_REFERENCIA,
  TDF.DESCRIPCION_TASA DESCRIPCION_TASA_REFERENCIA,
  TDF.VALOR_ACTUAL VALOR_TASA_REFERENCIA,
  CF.ID_TCA_BASE_CALCULO,
  TBC.DESCRIPCION DESCRIPCION_BASE_CALCULO,
  TBC.DESCRIPCION_CORTA DESCRIPCION_CORTA_BASE_CALCULO,
  TBC.COD_EXTERNO COD_EXTERNO_BASE_CALCULO,
  CF.ID_TCA_FRECUENCIA_PAGO_CAPITAL,
  TF.DESCRIPCION DESCRIPCION_F_PAGO_CAPITAL,
  TF.DESCRIPCION_CORTA DES_CORTA_F_PAGO_CAPITAL,
  TF.COD_EXTERNO COD_EXTERNO_F_PAGO_CAPITAL,
  CF.ID_TCA_FRECUENCIA_REV_TASA,
  TFR.DESCRIPCION DESCRIPCION_FREC_REV_TASA,
  TFR.DESCRIPCION_CORTA DES_CORTA_FREC_REV_TASA,
  TFR.COD_EXTERNO COD_EXTERNO_FREC_REV_TASA,
  CF.ID_TCA_FRECUENCIA_PLAZO,
  TFP.DESCRIPCION DESCRIPCION_FRECUENCIA_PLAZO,
  TFP.DESCRIPCION_CORTA DESCRIPCION_CORTA_FREC_PLAZO,
  TFP.COD_EXTERNO COD_EXTERNO_FREC_PLAZO,
  CF.ID_TCA_FRECUENCIA_PERIODO_GRA,
  TFG.DESCRIPCION DESCRIPCION_PERIODO_GRA,
  TFG.DESCRIPCION_CORTA DESCRIPCION_CORTA_PERIODO_GRA,
  TFG.COD_EXTERNO COD_EXTERNO_PERIODO_GRA,
  CF.ID_TCA_FRECUENCIA_PAGO_INTERES,
  TFI.DESCRIPCION DESCRIPCION_FREC_PAGO_INTERES,
  TFI.DESCRIPCION_CORTA DES_CORTA_FREC_PAGO_INTERES,
  TFI.COD_EXTERNO COD_EXTERNO_FREC_PAGO_INTERES,
  CF.ID_TCA_FRECUENCIA_REV_SPREAD,
  TFS.DESCRIPCION DESCRIPCION_FRE_REV_SPREAD,
  TFS.DESCRIPCION_CORTA DES_CORTA_FRE_REV_SPREAD,
  TFS.COD_EXTERNO COD_EXTERNO_FRE_REV_SPREAD,
  CF.ID_TCA_TIPO_TASA_DESEMBOLSO ID_TIPO_TASA_DESEMBOLSO,
  TTD.DESCRIPCION DESCRIPCION_TASA_DESEMBOLSO,
  TTD.DESCRIPCION_CORTA DESC_CORTA_TASA_DESEMBOLSO,
  TTD.COD_EXTERNO COD_EXTERNO_TASA_DESEMBOLSO,
  FCD.CODIGO CODIGO_PROD_FLEX,
  FCD.DESCRIPCION DESCRIPCION_PROD_FLEX,
  FCD.TIPO_TASA TIPO_TASA_PROD_FLEX,
  FCD.COMPONENTE_PRINCIPAL PRINCIPAL_PROD_FLEX,
  FCD.CODIGO_COMPONENTE CODIGO_COMPONENTE_PROD_FLEX,
  CD.ID_CAT_ACTIVIDAD_ECONOMICA,
  AE.DESCRIPCION DES_ACTIVIDAD_ECONOMICA,
  AE.DESCRIPCION_CORTA DES_CORTA_ACTIVIDAD_ECONOMICA,
  AE.COD_EXTERNO COD_EXT_ACTIVIDAD_ECONOMICA,
  CD.ID_CAT_AREA_FOCALIZACION,
  AF.DESCRIPCION DES_AREA_FOCALIZACION,
  AF.DESCRIPCION_CORTA DES_CORTA_AREA_FOCALIZACION,
  AF.COD_EXTERNO COD_EXTERNO_AREA_FOCALIZACION,
  CD.ID_CAT_EJE_ESTRATEGICO,
  EE.DESCRIPCION DES_EJE_ESTRATEGICO,
  EE.DESCRIPCION_CORTA DES_CORTA_EJE_ESTRATEGICO,
  EE.COD_EXTERNO COD_EXTERNO_EJE_ESTRATEGICO,
  CG.ID CARGO_DESEMBOLSO,
  CG.COMPONENTE,
  CG.MONTO_CARGO,
  CG.FECHA_REGISTRO FECHA_REGISTRO_CARGO,
  CF.ID_TCA_TIPO_CALENDARIO,
  CF.SE_PUEDE_MOVER_ENTRE_MESES,
  TC.DESCRIPCION DESCRIPCION_CALENDARIO,
  TC.DESCRIPCION_CORTA DESCRIPCION_CORTA_CALENDARIO,
  TC.COD_EXTERNO COD_EXTERNO_CALENDARIO, CD.ID_TCA_MODALIDAD_FINAN
FROM CONTRATO_DESEMBOLSO CD
INNER JOIN TRE_SOLICITUD_LINEA_CREDITO TSL
ON (TSL.ID_CONTRATO_DESEMBOLSO = CD.ID)
INNER JOIN LINEA_CREDITO LC
ON (LC.ID = TSL.ID_LINEA)
LEFT JOIN TRE_LINEA_PASIVA TLP
ON (TLP.ID_CONTRATO = CD.ID)
LEFT JOIN FUENTE F
ON (F.ID = TLP.ID_FUENTE)
INNER JOIN TCA_ESTADO_OPERACION TEO
ON (TEO.ID = CD.ID_TCA_ESTADO)
INNER JOIN TCA_TIPO_MONEDA TTM
ON (TTM.ID  = CD.ID_TCA_TIPO_MONEDA)
LEFT JOIN CONDICIONES_FINANCIERAS CF
ON CD.ID = CF.ID_CONTRATO_DESEMBOLSO
LEFT JOIN TCA_TIPO_TASA_DESEMBOLSO TTD
ON CF.ID_TCA_TIPO_TASA_DESEMBOLSO = TTD.ID
LEFT JOIN VTA_PROD_FLEX_COMPONENTE_DESEM FCD
ON CF.ID_PRODUCTO_FLEXCUBE = FCD.ID
LEFT JOIN TCA_TIPO_FRECUENCIA TF
ON TF.ID = CF.ID_TCA_FRECUENCIA_PAGO_CAPITAL
LEFT JOIN TCA_TIPO_FRECUENCIA TFR
ON TFR.ID = CF.ID_TCA_FRECUENCIA_REV_TASA
LEFT JOIN TCA_TIPO_FRECUENCIA TFP
ON TFP.ID = CF.ID_TCA_FRECUENCIA_PLAZO
LEFT JOIN TCA_TIPO_FRECUENCIA TFG
ON TFG.ID = CF.ID_TCA_FRECUENCIA_PERIODO_GRA
LEFT JOIN TCA_TIPO_FRECUENCIA TFI
ON TFI.ID = CF.ID_TCA_FRECUENCIA_PAGO_INTERES
LEFT JOIN TCA_TIPO_FRECUENCIA TFS
ON TFS.ID = CF.ID_TCA_FRECUENCIA_REV_SPREAD
LEFT JOIN TCA_BASE_CALCULO TBC
ON TBC.ID = CF.ID_TCA_BASE_CALCULO
LEFT JOIN VCA_TASAS_DESEMBOLSO_FLEXCUBE TDF
ON TDF.CODIGO = CF.CODIGO_TASA_REFERENCIA
LEFT JOIN VCA_TASAS_SPREAD_DESEM_FLEX TDSF
ON TDSF.CODIGO=CF.CODIGO_TASA_REFERENCIA_SPREAD
LEFT JOIN CAT_ACTIVIDAD_ECONOMICA AE
ON AE.ID = CD.ID_CAT_ACTIVIDAD_ECONOMICA
LEFT JOIN CAT_EJE_ESTRATEGICO EE
ON EE.ID = CD.ID_CAT_EJE_ESTRATEGICO
LEFT JOIN CAT_AREA_FOCALIZACION AF
ON AF.ID = CD.ID_CAT_AREA_FOCALIZACION
LEFT JOIN CARGO_DESEMBOLSO CG
ON CG.ID_CONTRATO_DESEMBOLSO = CD.ID
LEFT JOIN TCA_TIPO_CALENDARIO TC
ON TC.ID = CF.ID_TCA_TIPO_CALENDARIO
LEFT JOIN VCA_FUENTE TVF
ON TVF.ID = F.ID_LINEA_PASIVA
WHERE CD.ID in( select * from table(P_ID_DESEMBOLSO))
AND TTM.DESCRIPCION_CORTA = NVL(TDF.CODIGO_MONEDA ,TTM.DESCRIPCION_CORTA);

OPEN RECORDSET2 FOR 

SELECT CC.ID CALENDARIO_COMPLEJO, CC.TIPO_PAGO TIPO_PAGO_CALENDARIO, 
DC.FECHA_PAGO FECHA_PAGO_CALENDARIO,DC.MONTO_PAGO MONTO_PAGO_CALENDARIO, CC.ID_CONDICION_FINANCIERA,
CF.ID_CONTRATO_DESEMBOLSO
FROM CALENDARIO_COMPLEJO CC
INNER JOIN CONDICIONES_FINANCIERAS CF
ON CF.ID = CC.ID_CONDICION_FINANCIERA
INNER JOIN DETALLE_CALENDARIO DC
ON (CC.ID = DC.ID_CALENDARIO_COMPLEJO)
WHERE CF.ID_CONTRATO_DESEMBOLSO in( select * from table(P_ID_DESEMBOLSO))
ORDER BY DC.FECHA_PAGO ASC;

P_CODIGO_RES := 0;

EXCEPTION
WHEN OTHERS THEN

P_CODIGO_RES := SQLCODE;

P_MENSAJE := SQLERRM;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_ADJUNTO (
   PID_ADJUNTO   IN     INTEGER,
   RECORDSET        OUT SYS_REFCURSOR)
AS
   v_operacion   NUMBER;
   v_cliente NUMBER;
   
   P_CODIGO_RES NUMBER;
   
   P_MENSAJE VARCHAR2(100);
   
BEGIN
   SELECT COUNT ( * )
     INTO v_operacion
     FROM DOCUMENTOS Documentos
          JOIN DOCUMENTO Documento
             ON (Documento.ID_DOCUMENTO = Documentos.ID_DOCUMENTO)
          JOIN ADJUNTO Adjunto
             ON (Adjunto.ID_DOCUMENTO = Documento.ID_DOCUMENTO)
    WHERE Adjunto.ID_ADJUNTO = PID_ADJUNTO;
    
    
           
    SELECT count(*)
        INTO v_cliente
         FROM     DOCUMENTOS_CLIENTE DOCUMENTOS_CLIENTE
         JOIN DOCUMENTO DOCUMENTO
          ON (DOCUMENTO.ID_DOCUMENTO = DOCUMENTOS_CLIENTE.ID_DOCUMENTO)
          JOIN ADJUNTO ADJUNTO
          ON (ADJUNTO.ID_DOCUMENTO = DOCUMENTO.ID_DOCUMENTO)
         WHERE  Adjunto.ID_ADJUNTO = PID_ADJUNTO;


   IF v_operacion = 1
   THEN
      OPEN RECORDSET FOR
         SELECT CatPaises.COD PAIS,
                CatPaises.DESCRIPCION_CORTA PAIS_DESC,
                CatDoc.Descripcion,
                Adjunto.MIME_TYPE,
                CatTipoOper.COD_EXTERNO,
                Operacion.ACTIVIDAD_ECONOMICA,
                Operacion.ID_OPERACION,
                Clientes.ID_FLEXCUBE,
                Clientes.RAZON_SOCIAL,
                Operacion.NOMBRE,
                Documento.FECHA_REGISTRO,
                Documento.ID_DOCUMENTO,
                Adjunto.FILENAME,
                CASE
                   WHEN Adjunto.CONTENT IS NOT NULL
                   THEN
                      base64encoder (Adjunto.CONTENT)
                   ELSE
                      NULL
                END
                   AS CONTENIDO,
                ConfTipoOnBase.ID ID_CATTIPOONBASE,
                ConfTipoOnBase.ID_TIPO_ON_BASE ID_TIPO_ON_BASE,
                accionDoc.ID ACCION,
                Documento.COMENTARIO,
                ADJUNTO.ID_ONBASE,
                Adjunto.ID_ADJUNTO,
                CATDOC.DESCRIPCION TIPO_DOCUMENTO,
                TCAPBPM.DESCRIPCION AS PROCESO_BPM,
                TARBPM.ID as ID_TAREA
           FROM OPERACION Operacion
                JOIN CLIENTES Clientes
                   ON (Operacion.ID_CLIENTE = Clientes.ID_CLIENTE)
                JOIN CAT_PAISES CatPaises
                   ON (Clientes.PAIS = CatPaises.ID)
                JOIN CAT_OFICINA CatOficina
                   ON (Clientes.OFICINA = CatOficina.ID)
                JOIN CAT_ACTIVIDAD_ECONOMICA CatActividadEconomica
                   ON (Operacion.ACTIVIDAD_ECONOMICA =
                          CatActividadEconomica.ID)
                JOIN DOCUMENTOS Documentos
                   ON (Documentos.ID_OPERACION = Operacion.ID_OPERACION)
                JOIN DOCUMENTO Documento
                   ON (Documento.ID_DOCUMENTO = Documentos.ID_DOCUMENTO)
                JOIN ADJUNTO Adjunto
                   ON (Adjunto.ID_DOCUMENTO = Documento.ID_DOCUMENTO)
                JOIN TCA_DOCUMENTO CatDoc
                   ON (CatDoc.ID = Documento.ID_TIPO_DOCUMENTO)
                JOIN TCA_TIPO_OPERACION CatTipoOper
                   ON (CatTipoOper.ID =
                          CatActividadEconomica.ID_TIPO_OPERACION)
                JOIN TCO_CONFIGURAR_TIPO_ONBASE ConfTipoOnBase
                   ON (ConfTipoOnBase.ID_TCA_DOCUMENTO = CatDoc.ID
                       AND ConfTipoOnBase.ID_CAT_PAISES = CatPaises.ID
                       AND CatTipoOper.ID = ConfTipoOnBase.ID_TCA_TIPO_OPERACION
                       AND ConfTipoOnBase.BAN_STATUS =1)
                JOIN TCA_ACCION_DOCUMENTO accionDoc
                   ON (accionDoc.ID = Documento.ID_TCA_ACCION)
                JOIN TCA_TAREA_BPM TARBPM
                   ON (TARBPM.ID = DOCUMENTO.ID_TAREA_BPM)
                JOIN TCA_PROCESO_BPM TCAPBPM
                   ON (TCAPBPM.ID = TARBPM.ID_PROCESO_BPM)
          WHERE Adjunto.ID_ADJUNTO = PID_ADJUNTO;
   END IF;
   
   
   
   
      IF v_cliente = 1
   THEN
      OPEN RECORDSET FOR
   SELECT  CATPAISES.COD PAIS,CATPAISES.DESCRIPCION_CORTA PAIS_DESC,
   CATDOC.DESCRIPCION, 
  ADJUNTO.MIME_TYPE,
--  CATTIPOOPER.COD_EXTERNO,
  CLIENTES.ID_FLEXCUBE,
  CLIENTES.RAZON_SOCIAL,
DOCUMENTO.FECHA_REGISTRO ,
 DOCUMENTO.ID_DOCUMENTO ,
  ADJUNTO.FILENAME,
 case  when Adjunto.CONTENT is not null then 
  base64encoder(Adjunto.CONTENT) 
  else  null end  as CONTENIDO,
  CONFTIPOONBASE.ID ID_CATTIPOONBASE,
    CONFTIPOONBASE.ID_TIPO_ON_BASE ID_TIPO_ON_BASE,
  ACCIONDOC.ID ACCION,
  DOCUMENTO.COMENTARIO,
  ADJUNTO.ID_ONBASE,
  ADJUNTO.ID_ADJUNTO,
  CATDOC.DESCRIPCION TIPO_DOCUMENTO,
  TCAPBPM.DESCRIPCION AS PROCESO_BPM,
  TARBPM.ID as ID_TAREA
  FROM  CLIENTES CLIENTES
         JOIN CAT_PAISES CATPAISES
          ON (CLIENTES.PAIS = CATPAISES.ID)
       JOIN CAT_OFICINA CATOFICINA
          ON (CLIENTES.OFICINA = CATOFICINA.ID)
        JOIN DOCUMENTOS_CLIENTE DOCUMENTOS_CLIENTE
          ON (DOCUMENTOS_CLIENTE.ID_CLIENTE = CLIENTES.ID_CLIENTE)
        JOIN DOCUMENTO DOCUMENTO
          ON (DOCUMENTO.ID_DOCUMENTO = DOCUMENTOS_CLIENTE.ID_DOCUMENTO)
        JOIN ADJUNTO ADJUNTO
          ON (ADJUNTO.ID_DOCUMENTO = DOCUMENTO.ID_DOCUMENTO)
        JOIN TCA_DOCUMENTO CATDOC
          ON (CATDOC.ID = DOCUMENTO.ID_TIPO_DOCUMENTO )
        JOIN TCO_CONFIGURAR_TIPO_ONBASE CONFTIPOONBASE
          ON (    CONFTIPOONBASE.ID_TCA_DOCUMENTO = CATDOC.ID
              AND CONFTIPOONBASE.ID_CAT_PAISES = CATPAISES.ID
              AND CONFTIPOONBASE.BAN_STATUS =1)
        JOIN TCA_ACCION_DOCUMENTO ACCIONDOC
          ON (ACCIONDOC.ID = DOCUMENTO.ID_TCA_ACCION)
          JOIN TCA_TAREA_BPM TARBPM
         ON (TARBPM.ID   = DOCUMENTO.ID_TAREA_BPM     )
         JOIN TCA_PROCESO_BPM TCAPBPM 
         ON (TCAPBPM.ID=TARBPM.ID_PROCESO_BPM)
WHERE ADJUNTO.ID_ADJUNTO = PID_ADJUNTO AND rownum=1;

END IF;



EXCEPTION
WHEN OTHERS THEN

P_CODIGO_RES := SQLCODE;

P_MENSAJE := SQLERRM;

  INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,   NOMBRE_INSUMO,      DESCRIPCION_ERROR,        FECHA_REGISTRO)
       VALUES ('SP',                'SP_CONSULTAR_ADJUNTO',                P_MENSAJE,                SYSDATE);

   COMMIT;

END SP_CONSULTAR_ADJUNTO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_COMISION_MOMENTO (
   P_ID_MOMENTO_COBRO  IN    T_NUMBER_TAB,
   P_ID_OPERACION  IN    T_NUMBER_TAB,
   P_CODIGO_RES     OUT NUMBER,
   P_MENSAJE        OUT VARCHAR2,
   RECORDSET        OUT SYS_REFCURSOR)
AS
BEGIN

OPEN RECORDSET FOR 
SELECT 
  COMI.ID AS ID_COMISION,
  COMI.ID_OPERACION,
  COMI.NOMBRE,
  COMI.DESCRIPCION AS DESCRIPCION_COMISION,
  COMI.ID_TCA_COMISION,
  COMI.ID_TCA_MONEDA,
  COMI.MONTO_COMISION,
  COMI.ID_TCA_MONTO_BASE,
  COMI.FECHA_VALOR,
  COMI.FECHA_VENCIMIENTO,
  COMI.FECHA_INICIO_CAPITAL,
  COMI.FECHA_INICIO_COMISION,
  COMI.ID_TCA_TIPO_FRECUENCIA,
  COMI.FRECUENCIA_PAGO,
  COMI.ID_TCA_FONDO,
  COMI.COMISION_COMPARTIDA,
  COMI.CODIGO_DESEMBOLSO,
  COMI.NUMERO_TESORERIA,
  COMI.CODIGO_CONTRATO,
  COMI.ID_TCA_TIPO_TASA,
  COMI.ID_TCA_BASE_CALCULO,
  COMI.RESPONSABLE_COMISION,
  COMI.ID_TCA_SUB_ESTADO_TCC,
  COMI.FECHA_REGISTRO AS FECHA_REGISTRO_COMISION,
  COMI.BAN_ESTATUS AS BAN_ESTATUS_COMISION,
  COMI.ID_COMISION_ENMENDADA,
  COMI.FECHA_ENMIENDA,
  COMI.BAN_SUGERIDA,
  TMC.ID          AS ID_MOMENTO_COBRO,
  TMC.DESCRIPCION AS DESCRIPCION_MOMENTO_COBRO,
  TMC.DESCRIPCION_CORTA AS DESCRIP_CORTA_MOMENTO_COBRO,
  TMC.BAN_ESTATUS AS BAN_ESTATUS_MOMENTO_COBRO,
  TMC.COD_EXTERNO AS COD_EXTERNO_MOMENTO_COBRO,
  TET.ID AS ID_TCA_ESTADO_TCC,
  TET.DESCRIPCION AS DESCRIPCION_ESTADO,
  TET.DESCRIPCION_CORTA AS DESCRIPCION_CORTA_ESTADO,
  TET.FECHA_REGISTRO AS FECHA_REGISTRO_ESTADO,
  TET.BAN_ESTATUS AS BAN_ESTATUS_ESTADO,
  TET.COD_EXTERNO AS COD_EXTERNO_ESTADO
FROM COMISION COMI
INNER JOIN TCA_MOMENTO_COBRO TMC
ON COMI.ID_TCA_MOMENTO_COBRO = TMC.ID
INNER JOIN TCA_ESTADO_TCC TET
ON COMI.ID_TCA_ESTADO_TCC = TET.ID
WHERE TET.ID != 6
AND COMI.ID_OPERACION IN (SELECT * FROM TABLE(P_ID_OPERACION))
AND TMC.ID IN (SELECT * FROM TABLE(P_ID_MOMENTO_COBRO));

P_CODIGO_RES := 0;

EXCEPTION
WHEN OTHERS THEN

P_CODIGO_RES := SQLCODE;

P_MENSAJE := SQLERRM;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_CUMPLIMIENTO 
(
  P_ID_CONDICION     IN T_NUMBER_TAB,
  P_CODIGO_RES       OUT NUMBER, 
  P_MENSAJE          OUT VARCHAR2, 
  RECORDSET          OUT SYS_REFCURSOR) 
AS 
BEGIN
  
  OPEN RECORDSET FOR 
  SELECT
  ID,
  ID_OPERACION,
  ID_SOLICITUD,
  ID_CONTRATO_DESEMBOLSO,
  ID_CONDICION,
  ID_TCA_ESTADO_TCC,
  ID_TCA_EVENTO_CONDICION,
  AGRUPADOR,
  BAN_ESTATUS,
  ID_TCA_SUB_ESTADO_TCC,
  EN_PROCESO
  FROM
  TRE_TRANSACCION_CONDICION
  WHERE ID_CONDICION IN (SELECT * FROM TABLE(P_ID_CONDICION)) AND BAN_ESTATUS = 1;
  
  P_CODIGO_RES := 0;
  
  EXCEPTION
WHEN OTHERS THEN

P_CODIGO_RES := SQLCODE;

P_MENSAJE := SQLERRM;

  
END SP_CONSULTAR_CUMPLIMIENTO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       SP_CONSULTAR_DOCUMENTO (
   P_ID_CLIENTE     IN     NUMBER,
   P_ID_OPERACION   IN     NUMBER,
   P_CONTENT        IN     NUMBER,
   P_ID_FLUJO       IN     NUMBER,
   P_CODIGO_RES        OUT NUMBER,
   P_MENSAJE           OUT VARCHAR2,
   RECORDSET           OUT SYS_REFCURSOR)
AS
BEGIN
   IF P_ID_CLIENTE IS NOT NULL
   THEN
      CASE P_CONTENT
         WHEN 1
         THEN
            OPEN RECORDSET FOR
               SELECT DOC.ID_DOCUMENTO,
                      DC.ID_CLIENTE,
                      DOC.ID_TIPO_DOCUMENTO,
                      DOC.COMENTARIO,
                      DOC.FECHA_REGISTRO,
                      DOC.BAN_ESTATUS,
                      DOC.ES_JUSTIFICACION,
                      DOC.CODIGO_DOCUMENTO,
                      DOC.FECHA_DOCUMENTO,
                      DOC.ID_TAREA_BPM,
                      DOC.ID_TCA_ACCION,
                      DOC.LOGIN_USUARIO_CREA,
                      DOC.NOMBRE_USUARIO_CREA,
                      DOC.LOGIN_USUARIO_MODIFICA,
                      DOC.NOMBRE_USUARIO_MODIFICA,
                      DOC.NUM_SERIE_DOCUMENTO,
                      ADJ.FILENAME,
                      ADJ.MIME_TYPE,
                      ADJ.ID_ADJUNTO,
                      ADJ.CONTENT,
                      ADJ.ID_ONBASE
                 FROM DOCUMENTO DOC
                      JOIN DOCUMENTOS_CLIENTE DC
                         ON DC.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                      JOIN ADJUNTO ADJ
                         ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                WHERE     DC.ID_CLIENTE = P_ID_CLIENTE
                      AND DOC.BAN_ESTATUS = 1
                              AND NVL(DOC.NUM_SERIE_DOCUMENTO, 0) = NVL(NVL (P_ID_FLUJO, DOC.NUM_SERIE_DOCUMENTO),0);
         WHEN 0
         THEN
            OPEN RECORDSET FOR
               SELECT DOC.ID_DOCUMENTO,
                      DC.ID_CLIENTE,
                      DOC.ID_TIPO_DOCUMENTO,
                      DOC.COMENTARIO,
                      DOC.FECHA_REGISTRO,
                      DOC.BAN_ESTATUS,
                      DOC.ES_JUSTIFICACION,
                      DOC.CODIGO_DOCUMENTO,
                      DOC.FECHA_DOCUMENTO,
                      DOC.ID_TAREA_BPM,
                      DOC.ID_TCA_ACCION,
                      DOC.LOGIN_USUARIO_CREA,
                      DOC.NOMBRE_USUARIO_CREA,
                      DOC.LOGIN_USUARIO_MODIFICA,
                      DOC.NOMBRE_USUARIO_MODIFICA,
                      DOC.NUM_SERIE_DOCUMENTO,
                      ADJ.FILENAME,
                      ADJ.MIME_TYPE,
                      ADJ.ID_ADJUNTO,
                      ADJ.ID_ONBASE
                 FROM DOCUMENTO DOC
                      JOIN DOCUMENTOS_CLIENTE DC
                         ON DC.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                      JOIN ADJUNTO ADJ
                         ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                WHERE     DC.ID_CLIENTE = P_ID_CLIENTE
                      AND ADJ.ID_ONBASE IS NULL
                      AND DOC.BAN_ESTATUS = 1
                            AND NVL(DOC.NUM_SERIE_DOCUMENTO, 0) = NVL(NVL (P_ID_FLUJO, DOC.NUM_SERIE_DOCUMENTO),0);
      END CASE;
   ELSE
      CASE P_CONTENT
         WHEN 1
         THEN
            OPEN RECORDSET FOR
               SELECT DOC.ID_DOCUMENTO,
                      DOCS.ID_OPERACION,
                      DOC.ID_TIPO_DOCUMENTO,
                      DOC.COMENTARIO,
                      DOC.FECHA_REGISTRO,
                      DOC.BAN_ESTATUS,
                      DOC.ES_JUSTIFICACION,
                      DOC.CODIGO_DOCUMENTO,
                      DOC.FECHA_DOCUMENTO,
                      DOC.ID_TAREA_BPM,
                      DOC.ID_TCA_ACCION,
                      DOC.LOGIN_USUARIO_CREA,
                      DOC.NOMBRE_USUARIO_CREA,
                      DOC.LOGIN_USUARIO_MODIFICA,
                      DOC.NOMBRE_USUARIO_MODIFICA,
                      DOC.NUM_SERIE_DOCUMENTO,
                      ADJ.FILENAME,
                      ADJ.MIME_TYPE,
                      ADJ.ID_ADJUNTO,
                      ADJ.CONTENT,
                      ADJ.ID_ONBASE
                 FROM DOCUMENTO DOC
                      JOIN DOCUMENTOS DOCS
                         ON DOCS.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                      JOIN ADJUNTO ADJ
                         ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                WHERE     DOCS.ID_OPERACION = P_ID_OPERACION
                      AND ADJ.ID_ONBASE IS NULL
                      AND DOC.BAN_ESTATUS = 1
                     AND NVL(DOC.NUM_SERIE_DOCUMENTO, 0) = NVL(NVL (P_ID_FLUJO, DOC.NUM_SERIE_DOCUMENTO),0);
         WHEN 0
         THEN
            OPEN RECORDSET FOR
               SELECT DOC.ID_DOCUMENTO,
                      DOCS.ID_OPERACION,
                      DOC.ID_TIPO_DOCUMENTO,
                      DOC.COMENTARIO,
                      DOC.FECHA_REGISTRO,
                      DOC.BAN_ESTATUS,
                      DOC.ES_JUSTIFICACION,
                      DOC.CODIGO_DOCUMENTO,
                      DOC.FECHA_DOCUMENTO,
                      DOC.ID_TAREA_BPM,
                      DOC.ID_TCA_ACCION,
                      DOC.LOGIN_USUARIO_CREA,
                      DOC.NOMBRE_USUARIO_CREA,
                      DOC.LOGIN_USUARIO_MODIFICA,
                      DOC.NOMBRE_USUARIO_MODIFICA,
                      DOC.NUM_SERIE_DOCUMENTO,
                      ADJ.FILENAME,
                      ADJ.MIME_TYPE,
                      ADJ.ID_ADJUNTO,
                      ADJ.ID_ONBASE
                 FROM DOCUMENTO DOC
                      JOIN DOCUMENTOS DOCS
                         ON DOCS.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                      JOIN ADJUNTO ADJ
                         ON ADJ.ID_DOCUMENTO = DOC.ID_DOCUMENTO
                WHERE     DOCS.ID_OPERACION = P_ID_OPERACION
                      AND ADJ.ID_ONBASE IS NULL
                      AND DOC.BAN_ESTATUS = 1
                    AND NVL(DOC.NUM_SERIE_DOCUMENTO, 0) = NVL(NVL (P_ID_FLUJO, DOC.NUM_SERIE_DOCUMENTO),0);
      END CASE;
   END IF;

   P_CODIGO_RES := 0;
EXCEPTION
   WHEN OTHERS
   THEN
      P_CODIGO_RES := SQLCODE;

      P_MENSAJE := SQLERRM;
END SP_CONSULTAR_DOCUMENTO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_HERRAMIENTA_CE (
P_COD_EXTERNO_ACTIVIDAD IN VARCHAR2,
P_COD_EXTERNO_AREA IN VARCHAR2,
P_COD_EXTERNO_EJE IN VARCHAR2,
RECORDSET_ACTIVIDAD   OUT SYS_REFCURSOR,
RECORDSET_AREA        OUT SYS_REFCURSOR,
RECORDSET_EJE         OUT SYS_REFCURSOR,
P_CODIGO_RES          OUT NUMBER,
P_MENSAJE             OUT VARCHAR2)

IS

BEGIN 

IF P_COD_EXTERNO_ACTIVIDAD IS NOT NULL THEN

OPEN RECORDSET_ACTIVIDAD FOR

  SELECT ID ID_ACTIVIDAD, DESCRIPCION DESCRIPCION_ACTIVIDAD,DESCRIPCION_CORTA DESCRIPCION_CORTA_ACTIVIDAD, COD_EXTERNO COD_EXTERNO_ACTIVIDAD, BAN_ESTATUS BAN_ESTATUS_ACTIVIDAD
  FROM CAT_ACTIVIDAD_ECONOMICA
  WHERE COD_EXTERNO = P_COD_EXTERNO_ACTIVIDAD;
  
END IF;

IF P_COD_EXTERNO_AREA IS NOT NULL THEN

OPEN RECORDSET_AREA FOR 
  
  SELECT ID ID_AREA, DESCRIPCION DESCRIPCION_AREA,DESCRIPCION_CORTA DESCRIPCION_CORTA_AREA, COD_EXTERNO COD_EXTERNO_AREA, BAN_ESTATUS BAN_ESTATUS_AREA
  FROM CAT_AREA_FOCALIZACION
  WHERE COD_EXTERNO = P_COD_EXTERNO_AREA;
  
  
END IF;

IF P_COD_EXTERNO_EJE IS NOT NULL THEN

OPEN RECORDSET_EJE FOR 

SELECT ID ID_EJE, DESCRIPCION DESCRIPCION_EJE,DESCRIPCION_CORTA DESCRIPCION_CORTA_EJE, COD_EXTERNO COD_EXTERNO_EJE, BAN_ESTATUS BAN_ESTATUS_EJE
FROM CAT_EJE_ESTRATEGICO
WHERE COD_EXTERNO = P_COD_EXTERNO_EJE;

END IF;

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      P_CODIGO_RES := 0;
      P_MENSAJE :=
         'Error en el procedimiento Consultar Herramienta Clasificacion Estrategica (HCE), No existen datos!';
   WHEN OTHERS
   THEN
      P_CODIGO_RES := 0;
      P_MENSAJE := 'Error en el procedimiento Consultar Herramienta Clasificacion Estrategica (HCE)!';
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_IMPORTE_TRANSITO(
   P_IDLINEA              IN NUMBER,
   P_LINEA_FINANCIERA     IN VARCHAR2,
   P_PAIS                 IN VARCHAR2, 
   P_MONEDA               IN VARCHAR2, 
   P_CODIGO_RES          OUT NUMBER,
   P_Mensaje             OUT VARCHAR2, 
   P_FECHA_ESTIMADA          DATE,   
   RECORDSET1            OUT SYS_REFCURSOR,   
   RECORDSET             OUT SYS_REFCURSOR
   )
AS
   v_Monto_transito         NUMBER;
   v_con_linea              NUMBER;
   RECORDSET_SELECT         VARCHAR2(2000);
BEGIN
   SELECT COUNT ( * )
     INTO v_con_linea
     FROM LINEA_CREDITO LC
    WHERE ID = P_IDLINEA AND LC.ID_FLEXCUBE IS NOT NULL;

   IF (v_con_linea > 0) THEN
   
      RECORDSET_SELECT :='SELECT SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO';
      RECORDSET_SELECT := RECORDSET_SELECT ||' FROM CONTRATO_DESEMBOLSO CD,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' TCA_ESTADO_OPERACION TEO,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' TRE_SOLICITUD_LINEA_CREDITO TRSL,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' LINEA_CREDITO LC,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' TCA_TIPO_MONEDA TTM,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' CONTRATO CON,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' OPERACION OPE,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' CLIENTES CLI,';
      RECORDSET_SELECT := RECORDSET_SELECT ||' CAT_PAISES CPA';
      RECORDSET_SELECT := RECORDSET_SELECT ||' WHERE CD.ID_TCA_ESTADO = TEO.ID';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND TRSL.ID_LINEA = LC.ID';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND CD.ID_TCA_TIPO_MONEDA = TTM.ID';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND LC.ID_FLEXCUBE IS NOT NULL';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND LC.ID_CONTRATO = CON.ID';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND CON.ID_OPERACION = OPE.ID_OPERACION';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND OPE.ID_CLIENTE = CLI.ID_CLIENTE';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND CLI.PAIS = CPA.ID';
      RECORDSET_SELECT := RECORDSET_SELECT ||' AND TEO.ID IN (14, 15, 16)';
      
      IF (P_IDLINEA IS NOT NULL) THEN 
        RECORDSET_SELECT := RECORDSET_SELECT ||' AND LC.ID = '||P_IDLINEA||'';
      END IF;
      IF (P_LINEA_FINANCIERA IS NOT NULL) THEN 
        RECORDSET_SELECT := RECORDSET_SELECT ||' AND NVL('''||P_LINEA_FINANCIERA||''',CD.PROGRAMA_OPERACION) LIKE (''%''||CD.PROGRAMA_OPERACION||''%'')';
      END IF;
      IF (P_FECHA_ESTIMADA IS NOT NULL) THEN 
        RECORDSET_SELECT := RECORDSET_SELECT ||' AND TO_CHAR (CD.FECHA_ESTIMADA_DESEMBOLSAR , ''MM-YYYY'')   = '''||TO_CHAR (P_FECHA_ESTIMADA , 'MM-YYYY')||'''';
      END IF;
      IF (P_PAIS IS NOT NULL) THEN 
        RECORDSET_SELECT := RECORDSET_SELECT ||' AND NVL('''||P_PAIS||''',CPA.COD_EXTERNO) LIKE (''%''||CPA.COD_EXTERNO||''%'')';
      END IF;
      IF (P_MONEDA IS NOT NULL) THEN 
        RECORDSET_SELECT := RECORDSET_SELECT ||' AND NVL('''||P_MONEDA||''',TTM.COD_EXTERNO) LIKE (''%''||TTM.COD_EXTERNO||''%'')';
      END IF;
      --DBMS_OUTPUT.PUT_LINE(RECORDSET_SELECT);
      RECORDSET_SELECT := RECORDSET_SELECT ||' GROUP BY TTM.COD_EXTERNO';
      OPEN RECORDSET FOR RECORDSET_SELECT;

      OPEN RECORDSET1 FOR
         SELECT CD.ID ID_CONTRATO_DESEMBOLSO,
                CD.PROGRAMADO,
                CD.FECHA_ESTIMADA_DESEMBOLSAR,
                CD.FECHA_EFECTIVA,
                CD.FECHA_REGISTRO,
                CD.BAN_ESTATUS,
                CD.MONTO_DESEMBOLSAR,
                CD.ID_TCA_TIPO_MONEDA,
				CD.DESTINO_FINANCIAMIENTO,
                TTM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,
                CD.ID_TCA_ESTADO,
                TEO.DESCRIPCION_CORTA DESCRIPCION_CORTA_ESTADO,
                LC.NUMERO_LINEA_CREDITO,
                LC.ID ID_LINEA_CREDITO
           FROM CONTRATO_DESEMBOLSO CD,
                TCA_ESTADO_OPERACION TEO,
                TRE_SOLICITUD_LINEA_CREDITO TRSL,
                LINEA_CREDITO LC,
                TCA_TIPO_MONEDA TTM,
                CONTRATO CON,
                OPERACION OPE,
                CLIENTES CLI,
                CAT_PAISES CPA
          WHERE     CD.ID_TCA_ESTADO = TEO.ID
                AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
                AND TRSL.ID_LINEA = LC.ID
                AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
                AND LC.ID_CONTRATO = CON.ID
                AND CON.ID_OPERACION = OPE.ID_OPERACION
                AND OPE.ID_CLIENTE = CLI.ID_CLIENTE
                AND CLI.PAIS = CPA.ID
                AND LC.ID = P_IDLINEA;

--      P_Monto_transito := v_Monto_transito;

      P_CODIGO_RES := 1;

      P_MENSAJE := 'Procedimiento ejecutado correctamente ';
   ELSE
      P_CODIGO_RES := 1;
      P_MENSAJE :=
            'La linea de credito '
         || ' '
         || P_IDLINEA
         || ' '
         || ' No tiene asignado un ID_FLEXCUBE';
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      P_CODIGO_RES := 0;
      P_MENSAJE :=
         'Error en el procedimiento Consultar Importe Transito, No existen datos!';
   WHEN OTHERS
   THEN
      P_CODIGO_RES := 0;
      P_MENSAJE := 'Error en el procedimiento Consultar Importe Transito!';
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONSULTAR_VOTACIONES (
   P_USUARIO              IN     VARCHAR2,
   P_HISTORIAL            IN     NUMBER,
   P_APROBACION_CLIENTE   IN     NUMBER,
   P_VOTACION                OUT SYS_REFCURSOR)
IS
BEGIN

   IF P_APROBACION_CLIENTE = 0 AND P_HISTORIAL = 0
   THEN
      OPEN P_VOTACION FOR
         SELECT SA.ID ID_SOLICITUD_APROBACION,
                SA.ID_OPERACION,
                OP.NOMBRE,
                SA.ID_TCA_TIPO_SOLICITUD,
                TTS.DESCRIPCION,
                SA.ID_TCA_NIVEL_APROBACION,
                SA.ES_REUNION_VIRTUAL,
                SA.FECHA_INICIO,
                SA.FECHA_TERMINO,
                SA.HORA_REUNION,
                SA.LUGAR_REUNION,
                SA.LOGIN_USUARIO_ASIGNA,
                SA.FECHA_ASIGNACION,
                SA.FECHA_CIERRE,
                SA.LOGIN_USUARIO_CIERRE,
                SA.FECHA_REGISTRO,
                SA.BAN_ESTATUS BAN_ESTATUS_SOLI,
                URA.ID_TCA_ROL_BPM,
                URA.LOGIN_USUARIO,
                URA.FECHA_REGISTRO FECHA_REGISTRO_USUARIO_REU,
                URA.BAN_ESTATUS,
                URA.EMITE_VOTO,
                URA.ID ID_USUARIO_REUNION,
                TNA.DESCRIPCION DESC_NIVEL_APROB,
                URA.MARCADO_COMO_LEIDO
           FROM SOLICITUD_APROBACION SA
                JOIN USUARIO_REUNION_APROBACION URA
                   ON (SA.ID = URA.ID_SOLICITUD_APROBACION)
                JOIN TCA_TIPO_SOLICITUD_APROBACION TTS
                   ON (TTS.ID = SA.ID_TCA_TIPO_SOLICITUD)
                JOIN TCA_NIVEL_APROBACION TNA
                   ON (TNA.ID = SA.ID_TCA_NIVEL_APROBACION)
                JOIN OPERACION OP
                   ON (OP.ID_OPERACION = SA.ID_OPERACION)
          WHERE     SA.FECHA_CIERRE IS NULL
                AND SA.BAN_ESTATUS = 1
                AND URA.LOGIN_USUARIO = P_USUARIO
          ORDER BY SA.FECHA_INICIO DESC;
   ELSIF P_APROBACION_CLIENTE = 0 AND P_HISTORIAL = 1
   THEN
      OPEN P_VOTACION FOR
         SELECT SA.ID ID_SOLICITUD_APROBACION,
                SA.ID_OPERACION,
                OP.NOMBRE,
                SA.ID_TCA_TIPO_SOLICITUD,
                TTS.DESCRIPCION,
                SA.ID_TCA_NIVEL_APROBACION,
                SA.ES_REUNION_VIRTUAL,
                SA.FECHA_INICIO,
                SA.FECHA_TERMINO,
                SA.HORA_REUNION,
                SA.LUGAR_REUNION,
                SA.LOGIN_USUARIO_ASIGNA,
                SA.FECHA_ASIGNACION,
                SA.FECHA_CIERRE,
                SA.LOGIN_USUARIO_CIERRE,
                SA.FECHA_REGISTRO,
                SA.BAN_ESTATUS BAN_ESTATUS_SOLI,
                URA.ID_TCA_ROL_BPM,
                URA.LOGIN_USUARIO,
                URA.FECHA_REGISTRO FECHA_REGISTRO_USUARIO_REU,
                URA.BAN_ESTATUS,
                URA.EMITE_VOTO,
                URA.ID ID_USUARIO_REUNION,
                TNA.DESCRIPCION DESC_NIVEL_APROB,
                URA.MARCADO_COMO_LEIDO
           FROM SOLICITUD_APROBACION SA
                JOIN USUARIO_REUNION_APROBACION URA
                   ON (SA.ID = URA.ID_SOLICITUD_APROBACION)
                JOIN TCA_TIPO_SOLICITUD_APROBACION TTS
                   ON (TTS.ID = SA.ID_TCA_TIPO_SOLICITUD)
                JOIN TCA_NIVEL_APROBACION TNA
                   ON (TNA.ID = SA.ID_TCA_NIVEL_APROBACION)
                JOIN OPERACION OP
                   ON (OP.ID_OPERACION = SA.ID_OPERACION)
          WHERE     SA.FECHA_CIERRE IS NOT NULL
                AND URA.LOGIN_USUARIO = P_USUARIO
          ORDER BY   SA.FECHA_INICIO DESC;
   ELSIF P_APROBACION_CLIENTE = 1 AND P_HISTORIAL = 0
   THEN
      OPEN P_VOTACION FOR
         SELECT SA.ID ID_SOLICITUD_APROBACION,
                SA.ID_CLIENTE,
                CLI.RAZON_SOCIAL,
                SA.ID_TCA_TIPO_SOLICITUD,
                TTS.DESCRIPCION,
                SA.ID_TCA_NIVEL_APROBACION,
                SA.ES_REUNION_VIRTUAL,
                SA.FECHA_INICIO,
                SA.FECHA_TERMINO,
                SA.HORA_REUNION,
                SA.LUGAR_REUNION,
                SA.LOGIN_USUARIO_ASIGNA,
                SA.FECHA_ASIGNACION,
                SA.FECHA_CIERRE,
                SA.LOGIN_USUARIO_CIERRE,
                SA.FECHA_REGISTRO,
                SA.BAN_ESTATUS BAN_ESTATUS_SOLI,
                URA.ID_TCA_ROL_BPM,
                URA.LOGIN_USUARIO,
                URA.FECHA_REGISTRO FECHA_REGISTRO_USUARIO_REU,
                URA.BAN_ESTATUS,
                URA.EMITE_VOTO,
                URA.ID ID_USUARIO_REUNION,
                TNA.DESCRIPCION DESC_NIVEL_APROB,
                URA.MARCADO_COMO_LEIDO
           FROM SOLICITUD_APROBACION SA
                JOIN USUARIO_REUNION_APROBACION URA
                   ON (SA.ID = URA.ID_SOLICITUD_APROBACION)
                JOIN TCA_TIPO_SOLICITUD_APROBACION TTS
                   ON (TTS.ID = SA.ID_TCA_TIPO_SOLICITUD)
                JOIN TCA_NIVEL_APROBACION TNA
                   ON (TNA.ID = SA.ID_TCA_NIVEL_APROBACION)
                JOIN CLIENTES CLI
                   ON (CLI.ID_CLIENTE = SA.ID_CLIENTE)
          WHERE     SA.FECHA_CIERRE IS NULL
                AND SA.BAN_ESTATUS = 1
                AND URA.LOGIN_USUARIO = P_USUARIO
          ORDER BY   SA.FECHA_INICIO DESC;
   ELSIF P_APROBACION_CLIENTE = 1 AND P_HISTORIAL = 1
   THEN
      OPEN P_VOTACION FOR
         SELECT SA.ID ID_SOLICITUD_APROBACION,
                SA.ID_CLIENTE,
                CLI.RAZON_SOCIAL,
                SA.ID_TCA_TIPO_SOLICITUD,
                TTS.DESCRIPCION,
                SA.ID_TCA_NIVEL_APROBACION,
                SA.ES_REUNION_VIRTUAL,
                SA.FECHA_INICIO,
                SA.FECHA_TERMINO,
                SA.HORA_REUNION,
                SA.LUGAR_REUNION,
                SA.LOGIN_USUARIO_ASIGNA,
                SA.FECHA_ASIGNACION,
                SA.FECHA_CIERRE,
                SA.LOGIN_USUARIO_CIERRE,
                SA.FECHA_REGISTRO,
                SA.BAN_ESTATUS BAN_ESTATUS_SOLI,
                URA.ID_TCA_ROL_BPM,
                URA.LOGIN_USUARIO,
                URA.FECHA_REGISTRO FECHA_REGISTRO_USUARIO_REU,
                URA.BAN_ESTATUS,
                URA.EMITE_VOTO,
                URA.ID ID_USUARIO_REUNION,
                TNA.DESCRIPCION DESC_NIVEL_APROB,
                URA.MARCADO_COMO_LEIDO
           FROM SOLICITUD_APROBACION SA
                JOIN USUARIO_REUNION_APROBACION URA
                   ON (SA.ID = URA.ID_SOLICITUD_APROBACION)
                JOIN TCA_TIPO_SOLICITUD_APROBACION TTS
                   ON (TTS.ID = SA.ID_TCA_TIPO_SOLICITUD)
                JOIN TCA_NIVEL_APROBACION TNA
                   ON (TNA.ID = SA.ID_TCA_NIVEL_APROBACION)
                JOIN CLIENTES CLI
                   ON (CLI.ID_CLIENTE = SA.ID_CLIENTE)
          WHERE     SA.FECHA_CIERRE IS NOT NULL
                AND URA.LOGIN_USUARIO = P_USUARIO
          ORDER BY   SA.FECHA_INICIO DESC;
   END IF;
END SP_CONSULTAR_VOTACIONES;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONTRATO_DESEMBOLSO (
   P_ID_OPERACION    IN     NUMBER,
   P_ID_RESOLUCION   IN     INTEGER,
   P_ID_MONEDA       IN     NUMBER,
   P_ID_PREPAGO      IN     NUMBER,
   P_F_RENOVACION    IN     DATE,
   P_F_PREPAGO       IN     DATE,
   P_CODIGO_RES         OUT NUMBER,
   P_MENSAJE            OUT VARCHAR2,
   RECORDSET            OUT SYS_REFCURSOR)
AS
   V_ID_RESOLUCION   NUMBER;
   V_CAP_NV_F_P      DATE;
   V_FECHA_FIRMA     DATE;
   V_FECHA_RES       DATE;
   V_F_PREPAGO       DATE;
   V_F_RENOVACION    DATE;
BEGIN
   V_CAP_NV_F_P := P_F_PREPAGO;
   V_F_RENOVACION := P_F_RENOVACION;

   IF P_ID_RESOLUCION = 1 AND (P_F_PREPAGO IS NOT NULL OR P_F_PREPAGO <> '')
   THEN
      V_F_PREPAGO := NULL;
   ELSE
      V_F_PREPAGO := P_F_PREPAGO;
   END IF;


   IF P_ID_RESOLUCION = 3
   THEN
      V_ID_RESOLUCION := NULL;
      V_F_PREPAGO := NULL;
      V_F_RENOVACION := NULL;
   ELSE
      V_ID_RESOLUCION := P_ID_RESOLUCION;
   END IF;


   IF (P_ID_PREPAGO IS NULL OR P_ID_PREPAGO = '')
      AND (V_F_RENOVACION IS NULL OR V_F_RENOVACION = '')
   THEN
      OPEN RECORDSET FOR
         SELECT *
           FROM (SELECT LC.ID AS ID_LINEA_CREDITO,
                        LC.ID_CONTRATO,
                        VCD.CODIGO_LINEA_CREDITO NUMERO_LINEA_CREDITO,
                        LC.DESCRIPCION_LINEA,
                        LC.ID_FLEXCUBE,
                        LC.MONTO_LINEA,
                        NULL AS ID_CONTRATO_DESEMBOLSO,
                        VCD.NUMERO_CONTRATO AS CONTRATO_DESEMBOLSO,
                        F_ID_RESOLUCION (CON.FECHA_FIRMA) AS ID_RESOLUCION,
                        (SELECT DESCRIPCION
                           FROM TCA_TIPO_RESOLUCION
                          WHERE F_ID_RESOLUCION (CON.FECHA_FIRMA) = ID)
                           AS RESOLUCION,
                        VCD.FECHA_APERTURA AS FECHA_EFECTIVA,
                        VCD.FECHA_VENCIMIENTO AS VENCIMIENTO,
                        (SELECT FECHA_PROXIMO_PAGO
                           FROM VTA_FECHA_PROXIMO_PAGO FPPAGO
                          WHERE FPPAGO.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO)
                           AS PROXIMO_PAGO,
                        VCD.CODIGO_MONEDA AS MONEDA,
                        TTM.ID AS ID_MONEDA,
                        NULL AS MONTO_PREPAGO,           --revisar informacion
                        NULL AS ES_PAGO_TOTAL,
                        LC.FONDO FONDO_CONTABLE,
                        CON.FECHA_FIRMA ESCRITURACION,
                        (SELECT calc.basis_amount
                           FROM middle.fc_v_Contract_ICCF_Calc calc
                          WHERE calc.Contract_Ref_No = VCD.NUMERO_CONTRATO
                                AND calc.Component LIKE '%INT'
                                AND calc.start_date =
                                      (SELECT MAX (calc2.start_date)
                                         FROM middle.fc_v_Contract_ICCF_Calc calc2,
                                              middle.fc_v_Fecha_Sistema
                                        WHERE calc2.contract_ref_no =
                                                 calc.contract_ref_no
                                              AND calc2.component =
                                                    calc.component
                                              AND calc2.start_date <
                                                    NVL (V_CAP_NV_F_P,
                                                         calc.start_date)
                                              AND calc2.schedule_date > today))
                           AS CAPITAL_NV_FECHA_PREPA,
                           VCD.USER_REF_NO
                   FROM CONTRATO CON,
                        LINEA_CREDITO LC,
                        (  SELECT cad.Contract_Ref_No,
                                  MIN (due_date) Fecha_Proximo_Pago
                             FROM middle.Fc_v_Plan_Pago cad,
                                  MIDDLE.FC_V_FECHA_SISTEMA cal
                            WHERE     cad.Due_Date >= cal.Today
                                  AND NVL (cad.Amount_Due, 0)
                                     - NVL (cad.Amount_Settled, 0) > 0
                                  AND due_date = NVL (V_F_PREPAGO, due_date)
                         GROUP BY cad.Contract_Ref_No) VFP, --    VTA_FECHA_PROXIMO_PAGO VFP,
                        TCA_TIPO_MONEDA TTM,
                        VTA_CONTRATO_DESEMBOLSO VCD
                  WHERE     CON.ID = LC.ID_CONTRATO
                        AND VFP.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO
                        AND CON.ID_OPERACION = P_ID_OPERACION
                        AND TTM.COD_EXTERNO = VCD.CODIGO_MONEDA
                        AND VCD.CODIGO_LINEA_CREDITO =
                              LC.NUMERO_LINEA_CREDITO
                        AND TTM.ID = NVL (P_ID_MONEDA, TTM.ID)
                        AND VCD.MODULE_CODE = 'LD'
                        AND VCD.PRODUCT_TYPE = 'L' --                        AND VFP.FECHA_PROXIMO_PAGO =                              NVL (V_F_PREPAGO, VFP.FECHA_PROXIMO_PAGO)
                                                  )
          WHERE ID_RESOLUCION = NVL (V_ID_RESOLUCION, ID_RESOLUCION);

      P_CODIGO_RES := 0;

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_CONTRATO_DESEMBOLSO',
                     'por fecha escrituracion 1'
                  || 'P_ID_OPERACION'
                  || P_ID_OPERACION
                  || '  '
                  || 'P_ID_RESOLUCION'
                  || P_ID_RESOLUCION
                  || '  '
                  || 'P_ID_MONEDA '
                  || P_ID_MONEDA
                  || 'P_ID_PREPAGO'
                  || P_ID_PREPAGO
                  || 'P_F_RENOVACION'
                  || P_F_RENOVACION
                  || 'P_F_PREPAGO'
                  || P_F_PREPAGO,
                  SYSDATE);

      COMMIT;
   END IF;


   IF (P_ID_PREPAGO IS NOT NULL OR P_ID_PREPAGO <> '')
   --      AND (V_F_RENOVACION IS NOT NULL OR V_F_RENOVACION <> '')
   --      AND V_ID_RESOLUCION = 1
   THEN
      V_ID_RESOLUCION := NULL;

      OPEN RECORDSET FOR
         SELECT *
           FROM (SELECT LC.ID AS ID_LINEA_CREDITO,
                        LC.ID_CONTRATO,
                        VCD.CODIGO_LINEA_CREDITO AS NUMERO_LINEA_CREDITO,
                        LC.DESCRIPCION_LINEA,
                        LC.ID_FLEXCUBE,
                        LC.MONTO_LINEA,
                        NULL AS ID_CONTRATO_DESEMBOLSO,
                        VCD.NUMERO_CONTRATO AS CONTRATO_DESEMBOLSO,
                        F_ID_RESOLUCION (CON.FECHA_FIRMA) AS ID_RESOLUCION,
                        (SELECT DESCRIPCION
                           FROM TCA_TIPO_RESOLUCION
                          WHERE F_ID_RESOLUCION (CON.FECHA_FIRMA) = ID)
                           AS RESOLUCION,
                        VCD.FECHA_APERTURA AS FECHA_EFECTIVA,
                        VCD.FECHA_VENCIMIENTO AS VENCIMIENTO,
                        --  VFP.FECHA_PROXIMO_PAGO AS PROXIMO_PAGO,
                        (SELECT FECHA_PROXIMO_PAGO
                           FROM VTA_FECHA_PROXIMO_PAGO FPPAGO
                          WHERE FPPAGO.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO)
                           AS PROXIMO_PAGO,
                        VCD.CODIGO_MONEDA AS MONEDA,
                        TTM.ID AS ID_MONEDA,
                        TPC.MONTO_PREPAGO AS MONTO_PREPAGO, --revisar informacion
                        TPC.ES_PAGO_TOTAL AS ES_PAGO_TOTAL,
                        LC.FONDO FONDO_CONTABLE,
                        CON.FECHA_FIRMA ESCRITURACION,
                        (SELECT calc.basis_amount
                           FROM middle.fc_v_Contract_ICCF_Calc calc
                          WHERE calc.Contract_Ref_No = VCD.NUMERO_CONTRATO
                                AND calc.Component LIKE '%INT'
                                AND calc.start_date =
                                      (SELECT MAX (calc2.start_date)
                                         FROM middle.fc_v_Contract_ICCF_Calc calc2,
                                              middle.fc_v_Fecha_Sistema
                                        WHERE calc2.contract_ref_no =
                                                 calc.contract_ref_no
                                              AND calc2.component =
                                                    calc.component
                                              AND calc2.start_date <
                                                    NVL (V_CAP_NV_F_P,
                                                         calc.start_date)
                                              AND calc2.schedule_date > today))
                           AS CAPITAL_NV_FECHA_PREPA,
                                    VCD.USER_REF_NO
                   FROM CONTRATO CON,
                        LINEA_CREDITO LC,
                        (  SELECT cad.Contract_Ref_No,
                                  MIN (due_date) Fecha_Proximo_Pago
                             FROM middle.Fc_v_Plan_Pago cad,
                                  MIDDLE.FC_V_FECHA_SISTEMA cal
                            WHERE     cad.Due_Date >= cal.Today
                                  AND NVL (cad.Amount_Due, 0)
                                     - NVL (cad.Amount_Settled, 0) > 0
                                  AND due_date = NVL (V_F_PREPAGO, due_date)
                         GROUP BY cad.Contract_Ref_No) VFP, ---    VTA_FECHA_PROXIMO_PAGO VFP,
                        TCA_TIPO_MONEDA TTM,
                        --                        TCA_TIPO_RESOLUCION TRS,
                        VTA_CONTRATO_DESEMBOLSO VCD,
                        TRE_PREPAGO_CONTRATO TPC
                  WHERE     CON.ID = LC.ID_CONTRATO
                        AND VFP.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO -- LC.ID_FLEXCUBE
                        AND CON.ID_OPERACION = P_ID_OPERACION
                        AND TTM.COD_EXTERNO = VCD.CODIGO_MONEDA
                        AND VCD.CODIGO_LINEA_CREDITO =
                              LC.NUMERO_LINEA_CREDITO
                        AND TTM.ID = NVL (P_ID_MONEDA, TTM.ID)
                        AND TPC.CONTRATO_FLEXCUBE(+) = VCD.NUMERO_CONTRATO
                        AND TPC.ID_PREPAGO =
                              NVL (P_ID_PREPAGO, TPC.ID_PREPAGO)
                        AND VCD.MODULE_CODE = 'LD'
                        AND VCD.PRODUCT_TYPE = 'L')
          WHERE ID_RESOLUCION = NVL (V_ID_RESOLUCION, ID_RESOLUCION);

      P_CODIGO_RES := 0;

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_CONTRATO_DESEMBOLSO',
                     'por fecha escrituracion 2'
                  || 'P_ID_OPERACION'
                  || P_ID_OPERACION
                  || '  '
                  || 'P_ID_RESOLUCION'
                  || P_ID_RESOLUCION
                  || '  '
                  || 'P_ID_MONEDA '
                  || P_ID_MONEDA
                  || 'P_ID_PREPAGO'
                  || P_ID_PREPAGO
                  || 'P_F_RENOVACION'
                  || P_F_RENOVACION
                  || 'P_F_PREPAGO'
                  || P_F_PREPAGO,
                  SYSDATE);

      COMMIT;
   END IF;



   IF     (P_ID_PREPAGO IS NULL OR P_ID_PREPAGO = '')
      AND (V_F_RENOVACION IS NOT NULL OR V_F_RENOVACION <> '')
      AND V_ID_RESOLUCION = 1
   THEN
      V_ID_RESOLUCION := NULL;



      OPEN RECORDSET FOR
         SELECT *
           FROM (SELECT LC.ID AS ID_LINEA_CREDITO,
                        LC.ID_CONTRATO,
                        VCD.CODIGO_LINEA_CREDITO NUMERO_LINEA_CREDITO,
                        LC.DESCRIPCION_LINEA,
                        LC.ID_FLEXCUBE,
                        LC.MONTO_LINEA,
                        NULL AS ID_CONTRATO_DESEMBOLSO,
                        VCD.NUMERO_CONTRATO AS CONTRATO_DESEMBOLSO,
                        F_ID_RESOLUCION (CON.FECHA_FIRMA) AS ID_RESOLUCION,
                        (SELECT DESCRIPCION
                           FROM TCA_TIPO_RESOLUCION
                          WHERE F_ID_RESOLUCION (CON.FECHA_FIRMA) = ID)
                           AS RESOLUCION,
                        VCD.FECHA_APERTURA AS FECHA_EFECTIVA,
                        VCD.FECHA_VENCIMIENTO AS VENCIMIENTO,
                        (SELECT FECHA_PROXIMO_PAGO
                           FROM VTA_FECHA_PROXIMO_PAGO FPPAGO
                          WHERE FPPAGO.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO)
                           AS PROXIMO_PAGO, -- VFP.FECHA_PROXIMO_PAGO AS PROXIMO_PAGO,
                        VCD.CODIGO_MONEDA AS MONEDA,
                        TTM.ID AS ID_MONEDA,
                        NULL AS MONTO_PREPAGO,           --revisar informacion
                        NULL AS ES_PAGO_TOTAL,
                        LC.FONDO FONDO_CONTABLE,
                        CON.FECHA_FIRMA ESCRITURACION,
                        (SELECT calc.basis_amount
                           FROM middle.fc_v_Contract_ICCF_Calc calc
                          WHERE calc.Contract_Ref_No = VCD.NUMERO_CONTRATO
                                AND calc.Component LIKE '%INT'
                                AND calc.start_date =
                                      (SELECT MAX (calc2.start_date)
                                         FROM middle.fc_v_Contract_ICCF_Calc calc2,
                                              middle.fc_v_Fecha_Sistema
                                        WHERE calc2.contract_ref_no =
                                                 calc.contract_ref_no
                                              AND calc2.component =
                                                    calc.component
                                              AND calc2.start_date <
                                                    NVL (V_CAP_NV_F_P,
                                                         calc.start_date)
                                              AND calc2.schedule_date > today))
                           AS CAPITAL_NV_FECHA_PREPA,
                                    VCD.USER_REF_NO
                   FROM CONTRATO CON,
                        LINEA_CREDITO LC,
                        (  SELECT cad.Contract_Ref_No,
                                  MIN (due_date) Fecha_Proximo_Pago
                             FROM middle.Fc_v_Plan_Pago cad,
                                  MIDDLE.FC_V_FECHA_SISTEMA cal
                            WHERE     cad.Due_Date >= cal.Today
                                  AND NVL (cad.Amount_Due, 0)
                                     - NVL (cad.Amount_Settled, 0) > 0
                                  AND due_date = NVL (V_F_PREPAGO, due_date)
                         GROUP BY cad.Contract_Ref_No) VFP, ---  VTA_FECHA_PROXIMO_PAGO VFP,
                        TCA_TIPO_MONEDA TTM,
                        VTA_CONTRATO_DESEMBOLSO VCD
                  WHERE     CON.ID = LC.ID_CONTRATO
                        AND VFP.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO
                        AND CON.ID_OPERACION = P_ID_OPERACION
                        AND TTM.COD_EXTERNO = VCD.CODIGO_MONEDA
                        AND VCD.CODIGO_LINEA_CREDITO =
                              LC.NUMERO_LINEA_CREDITO
                        AND TTM.ID = NVL (P_ID_MONEDA, TTM.ID)
                        AND VCD.MODULE_CODE = 'LD'
                        AND VCD.PRODUCT_TYPE = 'L'
                        --                        AND VFP.FECHA_PROXIMO_PAGO =        NVL (V_F_PREPAGO, VFP.FECHA_PROXIMO_PAGO)
                        AND TO_DATE (VCD.FECHA_APERTURA, 'dd/mm/yy') >=
                              TO_DATE (V_F_RENOVACION, 'dd/mm/yy'))
          WHERE ID_RESOLUCION = NVL (V_ID_RESOLUCION, ID_RESOLUCION);

      P_CODIGO_RES := 0;


      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_CONTRATO_DESEMBOLSO',
                     'por fecha escrituracion 3'
                  || 'P_ID_OPERACION'
                  || P_ID_OPERACION
                  || '  '
                  || 'P_ID_RESOLUCION'
                  || P_ID_RESOLUCION
                  || '  '
                  || 'P_ID_MONEDA '
                  || P_ID_MONEDA
                  || 'P_ID_PREPAGO'
                  || P_ID_PREPAGO
                  || 'P_F_RENOVACION'
                  || P_F_RENOVACION
                  || 'P_F_PREPAGO'
                  || P_F_PREPAGO,
                  SYSDATE);

      COMMIT;
   END IF;


   IF     (P_ID_PREPAGO IS NULL OR P_ID_PREPAGO = '')
      AND (V_F_RENOVACION IS NOT NULL OR V_F_RENOVACION <> '')
      AND V_ID_RESOLUCION = 2
   THEN
      V_ID_RESOLUCION := NULL;

      OPEN RECORDSET FOR
         SELECT *
           FROM (SELECT LC.ID AS ID_LINEA_CREDITO,
                        LC.ID_CONTRATO,
                        VCD.CODIGO_LINEA_CREDITO NUMERO_LINEA_CREDITO,
                        LC.DESCRIPCION_LINEA,
                        LC.ID_FLEXCUBE,
                        LC.MONTO_LINEA,
                        NULL AS ID_CONTRATO_DESEMBOLSO,
                        VCD.NUMERO_CONTRATO AS CONTRATO_DESEMBOLSO,
                        F_ID_RESOLUCION (CON.FECHA_FIRMA) AS ID_RESOLUCION,
                        (SELECT DESCRIPCION
                           FROM TCA_TIPO_RESOLUCION
                          WHERE F_ID_RESOLUCION (CON.FECHA_FIRMA) = ID)
                           AS RESOLUCION,
                        VCD.FECHA_APERTURA AS FECHA_EFECTIVA,
                        VCD.FECHA_VENCIMIENTO AS VENCIMIENTO,
                        (SELECT FECHA_PROXIMO_PAGO
                           FROM VTA_FECHA_PROXIMO_PAGO FPPAGO
                          WHERE FPPAGO.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO)
                           AS PROXIMO_PAGO, -- VFP.FECHA_PROXIMO_PAGO AS PROXIMO_PAGO,
                        VCD.CODIGO_MONEDA AS MONEDA,
                        TTM.ID AS ID_MONEDA,
                        NULL AS MONTO_PREPAGO,           --revisar informacion
                        NULL AS ES_PAGO_TOTAL,
                        LC.FONDO FONDO_CONTABLE,
                        CON.FECHA_FIRMA ESCRITURACION,
                        (SELECT calc.basis_amount
                           FROM middle.fc_v_Contract_ICCF_Calc calc
                          WHERE calc.Contract_Ref_No = VCD.NUMERO_CONTRATO
                                AND calc.Component LIKE '%INT'
                                AND calc.start_date =
                                      (SELECT MAX (calc2.start_date)
                                         FROM middle.fc_v_Contract_ICCF_Calc calc2,
                                              middle.fc_v_Fecha_Sistema
                                        WHERE calc2.contract_ref_no =
                                                 calc.contract_ref_no
                                              AND calc2.component =
                                                    calc.component
                                              AND calc2.start_date <
                                                    NVL (V_CAP_NV_F_P,
                                                         calc.start_date)
                                              AND calc2.schedule_date > today))
                           AS CAPITAL_NV_FECHA_PREPA,
                                    VCD.USER_REF_NO
                   FROM CONTRATO CON,
                        LINEA_CREDITO LC,
                        (  SELECT cad.Contract_Ref_No,
                                  MIN (due_date) Fecha_Proximo_Pago
                             FROM middle.Fc_v_Plan_Pago cad,
                                  MIDDLE.FC_V_FECHA_SISTEMA cal
                            WHERE     cad.Due_Date >= cal.Today -- Este cambio es temporal
                                  AND NVL (cad.Amount_Due, 0)
                                     - NVL (cad.Amount_Settled, 0) > 0
                                  AND due_date = NVL (V_F_PREPAGO, due_date)
                         GROUP BY cad.Contract_Ref_No) VFP, ---  VTA_FECHA_PROXIMO_PAGO VFP,
                        TCA_TIPO_MONEDA TTM,
                        VTA_CONTRATO_DESEMBOLSO VCD
                  WHERE     CON.ID = LC.ID_CONTRATO
                        AND VFP.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO
                        AND CON.ID_OPERACION = P_ID_OPERACION
                        AND TTM.COD_EXTERNO = VCD.CODIGO_MONEDA
                        AND VCD.CODIGO_LINEA_CREDITO =
                              LC.NUMERO_LINEA_CREDITO
                        AND TTM.ID = NVL (P_ID_MONEDA, TTM.ID)
                        AND VCD.MODULE_CODE = 'LD'
                        AND VCD.PRODUCT_TYPE = 'L'
                        --                        AND VFP.FECHA_PROXIMO_PAGO =                              NVL (V_F_PREPAGO, VFP.FECHA_PROXIMO_PAGO)
                        AND VCD.FECHA_APERTURA <= V_F_RENOVACION)
          WHERE ID_RESOLUCION = NVL (V_ID_RESOLUCION, ID_RESOLUCION);

      P_CODIGO_RES := 0;

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_CONTRATO_DESEMBOLSO',
                     'por fecha escrituracion 4'
                  || 'P_ID_OPERACION'
                  || P_ID_OPERACION
                  || '  '
                  || 'P_ID_RESOLUCION'
                  || P_ID_RESOLUCION
                  || '  '
                  || 'P_ID_MONEDA '
                  || P_ID_MONEDA
                  || 'P_ID_PREPAGO'
                  || P_ID_PREPAGO
                  || 'P_F_RENOVACION'
                  || P_F_RENOVACION
                  || 'P_F_PREPAGO'
                  || P_F_PREPAGO,
                  SYSDATE);

      COMMIT;
   END IF;
      /*
**********************************************************************
**************************Comentarios***********************************
-capital no vencido a fecha de prepago
Para el capital vencido se debe utilizar la vista,  ,  middle.fc_v_Contract_Balance, el contract_ref_no
es el BHQ del desembolso y el saldo en USD es LCY_Principal_Outstandin_Bal

**********************************************************************
**********************************************************************
      */
--Se coloca filtro
--David 22 May 17, 11:40
--Los campos para realizar el filtro son: MODULE_CODE = 'LD' y PRODUCT_TYPE = C o L; donde C es commitment y L es Loan

--NOTA: Cuando se implemente lo de formalizaciones parciales , para el caso de las IFI se tomara la fecha de renovacion

EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      P_CODIGO_RES := SQLCODE;

      P_MENSAJE := SQLERRM;
      DBMS_OUTPUT.PUT_LINE (SQLERRM);
   WHEN OTHERS
   THEN
      P_CODIGO_RES := SQLCODE;

      P_MENSAJE := SQLERRM;
      DBMS_OUTPUT.PUT_LINE (SQLERRM);

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_CONTRATO_DESEMBOLSO',
                  P_MENSAJE,
                  SYSDATE);

      COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CONTRATO_DESEM_PROX_PAGO (
	P_ID_MONEDA       		IN NUMBER,
	P_ID_OPERACION    		IN NUMBER,
	P_CONTRATO_DESEMBOLSO 	IN VARCHAR2,
	P_F_SOLICITUD      		IN DATE,
	P_F_PREPAGO       		IN DATE,	
	P_CODIGO_RES      		OUT NUMBER,
	P_MENSAJE         		OUT VARCHAR2,
	RECORDSET         		OUT SYS_REFCURSOR)
AS
  
BEGIN
	OPEN RECORDSET FOR
		SELECT ROWNUM ID, 
			VCD.CODIGO_LINEA_CREDITO NUMERO_LINEA_CREDITO,
			VCD.NUMERO_CONTRATO AS CONTRATO_DESEMBOLSO,
			VCD.FECHA_APERTURA AS FECHA_EFECTIVA,
			VCD.FECHA_VENCIMIENTO AS VENCIMIENTO,
			VFP.Fecha_Proximo_Pago AS PROXIMO_PAGO,
			CON.FECHA_FIRMA ESCRITURACION,
			LC.FONDO FONDO_CONTABLE,
			VCD.USER_REF_NO,  			-- Es mostrado en lugar del CONTRATO_DESEMBOLSO
			 '0' as Moneda,'0' as Capital_No_Vencido, '0' as Pago_total, '0' as Monto_prepago
		FROM CONTRATO CON, LINEA_CREDITO LC,
			(SELECT cad.Contract_Ref_No,
				due_date Fecha_Proximo_Pago
				FROM MIDDLE.FC_V_PLAN_PAGO CAD,	MIDDLE.FC_V_FECHA_SISTEMA cal
				WHERE cad.Due_Date >= cal.Today
				AND NVL (cad.Amount_Due, 0) - NVL (cad.Amount_Settled, 0) > 0
				--AND cad.Due_Date >= NVL ( TO_DATE(P_F_SOLICITUD, 'dd/MM/YYYY'), due_date)
				--AND cad.Due_Date <= NVL ( TO_DATE(P_F_PREPAGO, 'dd/MM/YYYY'), due_date)
                AND cad.Due_Date >= NVL ( P_F_SOLICITUD, cad.due_date)
                AND cad.Due_Date <= NVL ( P_F_PREPAGO, cad.due_date)                                
				GROUP BY cad.Contract_Ref_No, cad.Due_Date 
				ORDER BY cad.DUE_DATE) VFP, TCA_TIPO_MONEDA TTM, VTA_CONTRATO_DESEMBOLSO VCD
		WHERE CON.ID = LC.ID_CONTRATO
		AND VFP.CONTRACT_REF_NO = VCD.NUMERO_CONTRATO
		AND CON.ID_OPERACION = P_ID_OPERACION 
		AND TTM.COD_EXTERNO = VCD.CODIGO_MONEDA
		AND VCD.CODIGO_LINEA_CREDITO = LC.NUMERO_LINEA_CREDITO
		AND TTM.ID = NVL (P_ID_MONEDA, TTM.ID)
		AND VCD.MODULE_CODE = 'LD'
		AND VCD.PRODUCT_TYPE = 'L' 
		AND VCD.NUMERO_CONTRATO = P_CONTRATO_DESEMBOLSO;


EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
		P_CODIGO_RES := SQLCODE;
		P_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE (SQLERRM);
   WHEN OTHERS
   THEN
		P_CODIGO_RES := SQLCODE;
		P_MENSAJE := SQLERRM;
		DBMS_OUTPUT.PUT_LINE (SQLERRM);

		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
		VALUES ('SP',
				'SP_CONTRATO_DESEM_PROX_PAGO',
                SUBSTR (P_MENSAJE, 1, 500),
                SYSDATE);

		COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_CREAR_FT05(
P_ID_DESEMBOLSO IN NUMBER,
P_ID_TRANSFERENCIA_FT05 IN OUT NUMBER,
P_BHQ_TRANSFERENCIA IN VARCHAR2,
P_CODIGO_RES OUT NUMBER,
P_MENSAJE OUT VARCHAR2)

IS  

v_fechaDsiponibilidad date;

BEGIN

IF P_ID_DESEMBOLSO IS NOT NULL THEN 
    SELECT FECHA_DISPONIBILIDAD_FONDOS  INTO v_fechaDsiponibilidad FROM CONTRATO_DESEMBOLSO  WHERE ID = P_ID_DESEMBOLSO;

    IF P_ID_TRANSFERENCIA_FT05 IS NULL THEN

        SELECT TRANSFERENCIA_BANCARIA_SEQ.NEXTVAL  INTO P_ID_TRANSFERENCIA_FT05 FROM DUAL;
  
        UPDATE CONTRATO_DESEMBOLSO
        SET ID_TRANSFERENCIA_FT05 = P_ID_TRANSFERENCIA_FT05,
            FECHA_EFECTIVA_FT05 = v_fechaDsiponibilidad
        WHERE ID = P_ID_DESEMBOLSO;
        
        P_CODIGO_RES := 0;
        P_MENSAJE := 'Actualización exitosa';
        

    ELSE
        IF P_BHQ_TRANSFERENCIA IS NOT NULL THEN
        
            UPDATE CONTRATO_DESEMBOLSO
            SET BHQ_TRANSFERENCIA_FT05 = P_BHQ_TRANSFERENCIA,
            FECHA_EFECTIVA_FT05 = v_fechaDsiponibilidad
            WHERE ID = P_ID_DESEMBOLSO
            AND ID_TRANSFERENCIA_FT05 = P_ID_TRANSFERENCIA_FT05;
            
            P_CODIGO_RES := 0;
            P_MENSAJE := 'Datos de TRANSFERENCIA_FT05 actualizados correctamente';
            
        
        END IF;
        P_CODIGO_RES := 0;
        P_MENSAJE := 'SIN BHQ';
    END IF;

ELSE

P_CODIGO_RES := 1;
P_MENSAJE := 'Id del contrato desembolso es requerido';


END IF;

EXCEPTION
   WHEN OTHERS
   THEN
      P_CODIGO_RES := 1;
      P_MENSAJE := SQLERRM;

END;
/

SHOW ERRORS;



CREATE OR REPLACE PROCEDURE SP_DUPLICAR_LINEA_CREDITO (
   P_N_LINEA      IN     VARCHAR2,
   P_DESCRIP      IN     VARCHAR2,
   P_MONTO        IN     NUMBER,
   P_N_CONTRATO   IN     NUMBER,
   P_CODIGO_RES      OUT NUMBER,
   P_MENSAJE         OUT VARCHAR2)
IS
   V_ID_LINEA_CREDITO   NUMBER;
   V_N_LINEA_CR         NUMBER;
   V_N_APROBA           NUMBER;
   V_ID_TERMINO         NUMBER;
BEGIN
   SELECT LINEA_CREDITO_SEQ.NEXTVAL INTO V_N_LINEA_CR FROM DUAL;

   SELECT LN.ID, TR.ID_APROBACION
     INTO V_ID_LINEA_CREDITO, V_N_APROBA
     FROM LINEA_CREDITO LN, TRE_LINEA_CREDITO_APROBACION TR
    WHERE     ID_CONTRATO = P_N_CONTRATO
          AND LN.ID = TR.ID_LINEA_CREDITO
          AND ROWNUM = 1;

   --   SELECT ID_APROBACION
   --     INTO V_N_APROBA
   --     FROM TRE_LINEA_CREDITO_APROBACION
   --    WHERE ID_LINEA_CREDITO = V_ID_LINEA_CREDITO;

   INSERT INTO LINEA_CREDITO (ID,
                              ID_CONTRATO,
                              NUMERO_LINEA_CREDITO,
                              DESCRIPCION_LINEA,
                              MONTO_LINEA,
                              FECHA_REGISTRO,
                              BAN_ESTATUS)
       VALUES (V_N_LINEA_CR,
               P_N_CONTRATO,
               P_N_LINEA,
               P_DESCRIP,
               P_MONTO,
               SYSDATE,
               1);


   INSERT INTO TRE_LINEA_CREDITO_APROBACION (ID,
                                             ID_LINEA_CREDITO,
                                             ID_APROBACION)
       VALUES (TRE_LINEA_CREDITO_APROBA_SEQ.NEXTVAL, V_N_LINEA_CR, V_N_APROBA);

   COMMIT;

   FOR REC IN (SELECT ID_TERMINO
                 FROM TRE_LINEA_CREDITO_TCC TrE
                WHERE TRe.ID_LINEA_CREDITO = V_ID_LINEA_CREDITO)
   LOOP
      SELECT TERMINO_SEQ.NEXTVAL INTO V_ID_TERMINO FROM DUAL;

      INSERT INTO TERMINO (ID,
                           ID_OPERACION,
                           NOMBRE,
                           DESCRIPCION,
                           ID_TCA_TERMINO,
                           ID_TCA_TIPO_FECHA_INICIO,
                           FECHA_INICIO,
                           PLAZO,
                           ID_TCA_FRECUENCIA_PLAZO,
                           FECHA_VENCIMIENTO, --10
                     ID_TCA_MONEDA,
                     MONTO,
                     TASA,
                     ID_TCA_TIPO_TASA,
                     FECHA,
                     FRECUENCIA_REVISION,
                     ID_TCA_FRECUENCIA_REVISION,
                     FECHA_INICIO_REVISION,
                     FRECUENCIA_PAGO_INTERES,
                     ID_TCA_FRECUENCIA_PAGO_INTERES,--20
                     FECHA_INICIO_PAGO_INTERES ,
                     FRECUENCIA_AMORTIZACION,
                     ID_TCA_FRECUENCIA_AMORTIZACION,
                     MORA,
                     PORCENTAJE_COBERTURA,
                     SE_APLICAN_RECURSOS_CONCESION,
                     SE_APLICAN_RECURSOS_EXTERNOS,
                     TIPO_CONTRAPARTE,
                     MONTO_MINIMO_DESEMBOLSO,
                     MONTO_MAXIMO_DESEMBOLSO,
                     TASA_MINIMA_DESEMBOLSO,
                     TASA_MAXIMA_DESEMBOLSO, --32
                     ID_TCA_ESTADO_TCC,
                     ID_TCA_SUB_ESTADO_TCC,
                     FECHA_REGISTRO,
                     BAN_ESTATUS,
                     ID_TERMINO_ENMENDADO,
                     FECHA_ENMIENDA, CLIENTE_GESTIONA_CONTRATACION)                    
         (SELECT V_ID_TERMINO,
                 ID_OPERACION,
                 NOMBRE,
                 DESCRIPCION,
                 ID_TCA_TERMINO,
                 ID_TCA_TIPO_FECHA_INICIO,
                 FECHA_INICIO,
                 PLAZO,
                 ID_TCA_FRECUENCIA_PLAZO,
                 FECHA_VENCIMIENTO,
                 ID_TCA_MONEDA,
                 MONTO,
                 TASA,
                 ID_TCA_TIPO_TASA,
                 FECHA,
                 FRECUENCIA_REVISION,
                 ID_TCA_FRECUENCIA_REVISION,
                 FECHA_INICIO_REVISION,
                 FRECUENCIA_PAGO_INTERES,
                 ID_TCA_FRECUENCIA_PAGO_INTERES,
                 FECHA_INICIO_PAGO_INTERES,
                 FRECUENCIA_AMORTIZACION,
                 ID_TCA_FRECUENCIA_AMORTIZACION,
                 MORA,
                 PORCENTAJE_COBERTURA,
                 SE_APLICAN_RECURSOS_CONCESION,
                 SE_APLICAN_RECURSOS_EXTERNOS,
                 TIPO_CONTRAPARTE,
                 MONTO_MINIMO_DESEMBOLSO,
                 MONTO_MAXIMO_DESEMBOLSO,
                 TASA_MINIMA_DESEMBOLSO,
                 TASA_MAXIMA_DESEMBOLSO,
                 ID_TCA_ESTADO_TCC,
                 ID_TCA_SUB_ESTADO_TCC,
                 SYSDATE,
                 BAN_ESTATUS,
                 ID_TERMINO_ENMENDADO,
                 FECHA_ENMIENDA,
                 CLIENTE_GESTIONA_CONTRATACION
            FROM TERMINO
           WHERE ID = REC.ID_TERMINO);

      COMMIT;

      INSERT INTO TRE_LINEA_CREDITO_TCC (ID,
                                         ID_LINEA_CREDITO,
                                         ID_TERMINO,
                                         FECHA_REGISTRO,
                                         BAN_ESTATUS)
          VALUES (TRE_LINEA_CREDITO_TCC_SEQ.NEXTVAL,
                  V_N_LINEA_CR,
                  V_ID_TERMINO,
                  SYSDATE,
                  1);

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_DUPLICAR_LINEA_CREDITO',
                  '-0' || P_MENSAJE,
                  SYSDATE);

      COMMIT;


      COMMIT;
   END LOOP;



   P_CODIGO_RES := 0;
   P_MENSAJE := 'insert exitoso ';
EXCEPTION
   WHEN OTHERS
   THEN
      P_CODIGO_RES := 1;
      P_MENSAJE := SQLERRM;

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'SP_DUPLICAR_LINEA_CREDITO',
                  P_MENSAJE,
                  SYSDATE);

      COMMIT;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_ELIMINAR_DOCUMENTOS (P_ADJUNTOS IN T_LISTA_ADJUNTO, P_RESULTADO OUT VARCHAR2)
IS


BEGIN

   FOR I IN 1 .. P_ADJUNTOS.COUNT
   LOOP
   
      UPDATE ADJUNTO
         SET CONTENT = NULL
       WHERE ID_ADJUNTO= P_ADJUNTOS (I).ID_ADJUNTO;

      UPDATE DOCUMENTO
         SET BAN_ESTATUS = 0
       WHERE ID_DOCUMENTO = (SELECT ID_DOCUMENTO
                               FROM ADJUNTO
                              WHERE ID_ADJUNTO = P_ADJUNTOS (I).ID_ADJUNTO);


END LOOP;

P_RESULTADO:= 'OK';

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_GENERA_CUESTIONARIO (
   NUM_OPERACION   IN     INTEGER,
   NUM_PRODUCTO    IN     INTEGER, 
REGENERAR IN NUMBER ,
   RECORDSET          OUT SYS_REFCURSOR)
AS
   CURSOR CUR_PREGUNTAS
   IS
          SELECT a.ID_PREGUNTA
            FROM PREGUNTA a INNER JOIN CUESTIONARIO b ON(b.ID_CUESTIONARIO=a.ID_CUESTIONARIO)
           WHERE b.ID_OPERACION = NUM_OPERACION
      FOR UPDATE OF A.ID_PREGUNTA;

   SECTOR                INT;
   TIPO_INSTITUCION      INT;
   num_cliente           INT;
   res_delete            NUMBER;
   actualizarOperacion   INT;
   v_Regenerar number;

   cnumber               NUMBER;
   V_ID_CUESTIONARIO     NUMBER;
   cant number;
BEGIN
 IF REGENERAR=1 THEN
--TOMA EL ID DEL CUESTIONARIO ACTIVO
SELECT ID_CUESTIONARIO INTO v_Regenerar  FROM CUESTIONARIO WHERE BAN_ESTATUS=1 AND ID_OPERACION=NUM_OPERACION;



      END IF;

  -- INACTIVAR EL CUESTIONARIO ACTUAL
      UPDATE CUESTIONARIO SET BAN_ESTATUS=0 WHERE ID_OPERACION=NUM_OPERACION;
      
   --ASIGNANDO TIPO DE INSTITUCION
   SELECT B.TIPO_INSTITUCION, B.SECTOR, B.ID_CLIENTE
     INTO TIPO_INSTITUCION, SECTOR, num_cliente
     FROM    OPERACION A
          INNER JOIN
             CLIENTES B
          ON A.ID_CLIENTE = B.ID_CLIENTE AND A.ID_OPERACION = NUM_OPERACION;

   --INSERTANDO EN CUESTIONARIO
  SELECT CUESTIONARIO_SEQ.NEXTVAL INTO V_ID_CUESTIONARIO FROM DUAL;
--
   INSERT INTO CUESTIONARIO (ID_CUESTIONARIO, ID_OPERACION, FECHA_REGISTRO, BAN_ESTATUS)
  VALUES(V_ID_CUESTIONARIO, NUM_OPERACION, CURRENT_DATE, 1);


   -- VALIDAR TIPO DE INSTITUCION Y SECTOR
   IF (TIPO_INSTITUCION = 4 AND SECTOR = 1)
   THEN
      actualizarOperacion := 1;

      INSERT INTO PREGUNTA (PREGUNTA,
                            RESPUESTA,
                            JUSTIFICACION,
                            EVIDENCIA,
                            USUARIO,
                            FECHA_REGISTRO,
                            ID_CAT_PREGUNTA,
                            ID_CUESTIONARIO)           --,PRINCIPIO, CRITERIO)
           SELECT A.PREGUNTA,
                  '' RESPUESTA,
                  '' JUSTIFICACION,
                  num_cliente AS EVIDENCIA,
                  E.DESCRIPCION USUARIO,
                  SYSDATE FECHA_REGISTRO,
                  A.ID,
                  V_ID_CUESTIONARIO --,A.PRINCIPIO, A.CRITERIO
             FROM  CAT_PREGUNTAS A
                 INNER JOIN PREGUNTA_PRODUCTO B
                    ON A.ID = B.ID_PREGUNTA
                     INNER JOIN TCA_ROL_BPM E
                       ON A.ID_RESPONSABLE=E.ID
                       AND A.STATUS = '1'
                        AND B.ID_PRODUCTO = NUM_PRODUCTO
                        AND E.ID<>11
         ORDER BY ID_PRINCIPIO, ID_CRITERIO, NUM_ORDEN;
   --A.ID;
COMMIT;
   ELSE
      actualizarOperacion := 0;

      INSERT INTO PREGUNTA (PREGUNTA,
                            RESPUESTA,
                            JUSTIFICACION,
                            EVIDENCIA,
                            USUARIO,
                            FECHA_REGISTRO,
                            ID_CAT_PREGUNTA,
                            ID_CUESTIONARIO)             --PRINCIPIO,CRITERIO)
           SELECT A.PREGUNTA,
                  '' RESPUESTA,
                  '' JUSTIFICACION,
                  num_cliente AS EVIDENCIA,
                  E.DESCRIPCION USUARIO,
                  SYSDATE FECHA_REGISTRO,
                  A.ID,
                  V_ID_CUESTIONARIO                              --,A.PRINCIPIO, A.CRITERIO
             FROM CAT_PREGUNTAS A
                  INNER JOIN PREGUNTA_PRODUCTO B
                     ON A.ID = B.ID_PREGUNTA
                         INNER JOIN TCA_ROL_BPM E
                        ON A.ID_RESPONSABLE=E.ID
                       AND A.STATUS = '1'
                        AND B.ID_PRODUCTO = NUM_PRODUCTO
         ORDER BY ID_PRINCIPIO, ID_CRITERIO, NUM_ORDEN;      
         COMMIT;          --A.ID;
   END IF;
--
IF REGENERAR=1 THEN 

UPDATE PREGUNTA  PA
SET (RESPUESTA, JUSTIFICACION) =( SELECT  RESPUESTA, JUSTIFICACION FROM PREGUNTA PR  
                                                            WHERE PR.ID_CUESTIONARIO = v_Regenerar
                                                            AND PR.PREGUNTA =PA.PREGUNTA)
WHERE ID_CUESTIONARIO = V_ID_CUESTIONARIO;

COMMIT;


END IF;




   --RETORNAR PREGUNTAS


   OPEN RECORDSET FOR
      SELECT A.ID_PREGUNTA ID, A.PREGUNTA PREGUNTA, A.USUARIO RESPONSABLE --, A.PRINCIPIO PRINCIPIO, A.CRITERIO CRITERIO
        FROM    PREGUNTA A
             INNER JOIN
                CUESTIONARIO B
             ON (    A.ID_CUESTIONARIO = B.ID_CUESTIONARIO
                 AND B.ID_OPERACION = NUM_OPERACION);
END SP_GENERA_CUESTIONARIO;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_INSERTAR_DECLARACION (
   P_ID_OPERACION     IN     NUMBER,
   P_ID_DECLARACION   IN     NUMBER,
   P_FECHA_REGISTRO   IN       DATE
 )
AS
   c_id_operacion                   NUMBER;
   c_id_declaracion                 NUMBER;
   c_id_tre_declaracion_operacion   NUMBER;
   cant                             NUMBER;
BEGIN
   /*
     *
     * CONSULTA A LA TABLA DE DECLARACION, SI EXISTE EL REGISTRO, ACTUALICE LOS CAMPOS
     * SI NO, SINCRONICE EN LA TABLA LOS DATOS DE LA VISTA
     *
   */


   SELECT COUNT (ID)
     INTO c_id_declaracion
     FROM DECLARACION
    WHERE ID_DECLARACION = P_ID_DECLARACION;

   IF c_id_declaracion = 0
   THEN
      SELECT DECLARACION_SEQ.NEXTVAL INTO c_id_declaracion FROM DUAL;

      INSERT INTO DECLARACION (ID,
                               ID_DECLARACION,
                               ESTADO_DECLARACION,
                               DESCRIPCION_DECLARACION,
                               ESTADO_BUSQUEDA_CONTRAPARTES,
                               DESCRIPCION_BUSQUEDA,
                               NIVEL_RIESGO,
                               DESCRIPCION_RIESGO,
                               FECHA_REGISTRO,
                               FECHA_FIRMA_DECLARACION,
                               FECHA_VENCIMIENTO,
                               COMENTARIO_DECLARACION,
                               COMENTARIO_BUSQUEDA,
                               SE_ELEVA_OTRA_INSTANCIA,
                               TIPO_ORIGEN,
                               ES_SOLO_LECTURA,
                               BAN_ESTATUS)
         (SELECT c_id_declaracion,
                 CODIGO_DECLARACION,
                 CODIGO_ESTADO_DECLARACION,
                 ESTADO_DECLARACION,
                 CODIGO_ESTADO_BUSQUEDA,
                 ESTADO_BUSQUEDA,
                 CODIGO_TIPO_RIESGO,
                 NIVEL_RIESGO,
                 p_fecha_registro,
                 FECHA_FIRMA,
                 FECHA_VENCIMIENTO,
                 JUSTIFICACION_DECLARACION,
                 JUSTIFICACION_BUSQUEDA,
                 0,
                 'ASOCIACION',
                 1,
                 1
            FROM MIDDLE.LA_V_DECLARACION_JURADA
           WHERE CODIGO_REFERENCIA = P_ID_OPERACION
                 AND CODIGO_DECLARACION = P_ID_DECLARACION);
                 
            DBMS_OUTPUT.PUT_LINE( 'insert exitoso ' || ' ' || c_id_declaracion);

   ELSE
      SELECT ID
        INTO c_id_declaracion
        FROM DECLARACION
       WHERE ID_DECLARACION = P_ID_DECLARACION;

      UPDATE DECLARACION
         SET
             (fecha_vencimiento,
             nivel_riesgo,
             descripcion_riesgo,
             ESTADO_DECLARACION,
             DESCRIPCION_DECLARACION,
             ESTADO_BUSQUEDA_CONTRAPARTES,
             DESCRIPCION_BUSQUEDA
             ) =
                (SELECT FECHA_VENCIMIENTO,
                        CODIGO_TIPO_RIESGO,
                        NIVEL_RIESGO,
                        CODIGO_ESTADO_DECLARACION,
                        ESTADO_DECLARACION,
                        CODIGO_ESTADO_BUSQUEDA,
                        ESTADO_BUSQUEDA
                   FROM MIDDLE.LA_V_DECLARACION_JURADA
                  WHERE CODIGO_REFERENCIA = P_ID_OPERACION
                        AND CODIGO_DECLARACION = P_ID_DECLARACION)
       WHERE ID = c_id_declaracion;

   DBMS_OUTPUT.PUT_LINE('actualizacion exitosa');
   END IF;

   /*
     *  CONSULTA LA TABLA DE TRE_DECLARACION_OPERACION, SI NO EXISTE REGISTRO
     *  INSERTA EN LA TABLA
     *
   */

   SELECT COUNT (ID_OPERACION)
     INTO c_id_operacion
     FROM TRE_DECLARACION_OPERACION
    WHERE ID_OPERACION = P_ID_OPERACION AND ID_DECLARACION = c_id_declaracion;



   IF c_id_operacion = 0
   THEN
      SELECT TRE_DECLARACION_OPERACION_SEQ.NEXTVAL
        INTO c_id_tre_declaracion_operacion
        FROM DUAL;

      INSERT INTO TRE_DECLARACION_OPERACION (ID,
                                             ID_OPERACION,
                                             ID_DECLARACION,
                                             ES_VIGENTE)
          VALUES (c_id_tre_declaracion_operacion,
                  P_ID_OPERACION,
                  c_id_declaracion,
                  1);
   END IF;
EXCEPTION
   WHEN OTHERS
   THEN
       DBMS_OUTPUT.PUT_LINE( 'Error en el procedimiento Insertar Declaración!');
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_MONEDA_CALENDARIO (P_ANIO NUMBER ) is
	   lst_dia     	VARCHAR2 (100);
	   lst_letra   	VARCHAR2 (100);
	   lst_cadena	  VARCHAR2 (50);	   
	   dia          DATE;
	   
	BEGIN
	
		DELETE FROM TCA_MONEDA_CALENDARIO WHERE ANIO = P_ANIO;
		COMMIT;

		FOR rec IN (SELECT CODIGO_MONEDA,
						  ANIO,
						  MES,
						  DIAS
					 FROM middle.FC_MV_MONEDA_CALENDARIO
					 WHERE  ANIO =P_ANIO
					 )
		LOOP
			lst_dia:=rec.DIAS;	
			
			FOR lin_pos IN 1 .. LENGTH (lst_dia)
		    LOOP
				lst_letra := SUBSTR (lst_dia, lin_pos, 1);		  
			  
				BEGIN
					dia:= TO_DATE(to_char(lin_pos) || '/' || to_char(rec.MES) || '/' || to_char(rec.ANIO), 'DD/MM/YYYY');
					-- * INGRESA A 4 POSICIONES  
					INSERT INTO  TCA_MONEDA_CALENDARIO (ID, CODIGO_MONEDA, MES, ANIO, DIA, TIPO) 
					VALUES (TCA_MONEDA_CALENDARIO_SEQ.NEXTVAL, rec.CODIGO_MONEDA, rec.MES, rec.ANIO, dia, lst_letra);
					
				EXCEPTION
					WHEN OTHERS
					THEN
						DBMS_OUTPUT.put_line ('Fecha a ingresar con error: ' || to_char(lin_pos) || '/' || to_char(rec.MES) || '/' || to_char(rec.ANIO) || ', para la moneda: ' || rec.CODIGO_MONEDA);
						DBMS_OUTPUT.put_line (SQLERRM);
						
				END;			
				-- DBMS_OUTPUT.put_line (dia);
			END LOOP;
		END LOOP;
		COMMIT;
	END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       SP_OBTENER_RECIBO_PAGO (
   P_FECHA_INICIO    IN     DATE,
   P_FECHA_FIN       IN     DATE,
   P_LISTA_RECIBOS      OUT SYS_REFCURSOR)
IS
BEGIN
   OPEN P_LISTA_RECIBOS FOR
      SELECT FECHA_EFECTIVA,
             LINEA,
             NUMERO_PRESTAMO,
             NUMERO_TESORERIA,
             NUMERO_RECIBO,
             VALOR_ADEUDADO,
             SALDO_DESCRIPCION,
             MONEDA_ADEUDADA,
             PCA_VALOR_CAMBIO,
             CODIGO_MONEDA,
             MONEDA_PAGADA,
             VALOR_PAGADO
        FROM VTA_RECIBO_PAGO_F_EFECTIVA VRPFE
       WHERE VRPFE.FECHA_EFECTIVA BETWEEN P_FECHA_INICIO AND P_FECHA_FIN;
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_TRE_EXCEPCION_SOLICITUD (
   P_LISTA_EXCEPCION_S   IN      T_LISTA_EXCEPCION_S,
   P_CODIGO_RES             OUT NUMBER,
   P_MENSAJE                OUT VARCHAR2)
AS
   V_ID_SOLICITUD           NUMBER (12);
   V_EXCEPTUADO             NUMBER (12);
err_num NUMBER;
   V_INSTANCIA_PROCESO      VARCHAR2 (50);
   V_EN_PROCESO_EXCEPCION   NUMBER (1);
   
   V_ID_REGLA NUMBER;
   
BEGIN



   IF (P_LISTA_EXCEPCION_S.COUNT > 0)
   THEN
      FOR IN_LIS IN 1 .. P_LISTA_EXCEPCION_S.COUNT
      LOOP
         IF P_LISTA_EXCEPCION_S (IN_LIS).ID IS NOT NULL
         THEN
         
         SELECT ID_SOLICITUD , ID_TCA_REGLA INTO V_ID_SOLICITUD , V_ID_REGLA FROM TRE_EXCEPCION_SOLICITUD 
         WHERE  ID = P_LISTA_EXCEPCION_S (IN_LIS).ID;
         
         
--            V_ID_SOLICITUD := P_LISTA_EXCEPCION_S (IN_LIS).ID;

            V_EXCEPTUADO := P_LISTA_EXCEPCION_S (IN_LIS).EXCEPTUADO;

            UPDATE TRE_EXCEPCION_SOLICITUD
               SET EXCEPTUADO = NVL(P_LISTA_EXCEPCION_S (IN_LIS).EXCEPTUADO ,EXCEPTUADO)  ,
                   INSTANCIA_PROCESO =NVL( P_LISTA_EXCEPCION_S (IN_LIS).INSTANCIA_PROCESO, INSTANCIA_PROCESO ),
                   EN_PROCESO_EXCEPCION = NVL(                      P_LISTA_EXCEPCION_S (IN_LIS).EN_PROCESO_EXCEPCION, EN_PROCESO_EXCEPCION)
             WHERE ID = P_LISTA_EXCEPCION_S (IN_LIS).ID;



IF V_EXCEPTUADO IS NOT NULL  THEN 

            UPDATE TRE_REGLA_DESEMBOLSO
               SET EXCEPTUADO = V_EXCEPTUADO,
                   FECHA_EXCEPCION = SYSDATE,
                   USUARIOEXCEPTUA =
                      (SELECT USUARIO
                         FROM TBI_PROCESO_OPERACION
                        WHERE INSTANCIA_PROCESO =
                                 P_LISTA_EXCEPCION_S (
                                    IN_LIS).INSTANCIA_PROCESO
                              AND ID_TAREA = 165
                              AND BAN_ES_FIN_ACTIVIDAD = 1)
             WHERE ID_DESEMBOLSO IN (SELECT ID_CONTRATO_DESEMBOLSO
                                       FROM TRE_SOLICITUD_LINEA_CREDITO
                                      WHERE ID_SOLICITUD = V_ID_SOLICITUD)
                                      AND ID_TCA_REGLA =V_ID_REGLA ;
                                      
                                      END IF;
         END IF;
      END LOOP;
   END IF;
   
P_CODIGO_RES := 1;
    P_MENSAJE := 'Procedimiento  ejecutado  correctamente !';  
    
    
    EXCEPTION

   WHEN OTHERS
   THEN
   
   P_CODIGO_RES := 0;
      err_num := SQLCODE;
      P_MENSAJE := SQLERRM;

      INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,
                                         NOMBRE_INSUMO,
                                         DESCRIPCION_ERROR,
                                         FECHA_REGISTRO)
          VALUES ('SP',
                  'TRE_EXCEPCION_SOLICITUD_SP',
                     'Solicitud: '
                  || NULL
                  || ' Error:'
                  || TO_CHAR (err_num)
                  || ' '
                  || SUBSTR (P_MENSAJE, 1, 520),
                  TO_DATE (SYSDATE, 'DD-MM-YY HH24:MI'));
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_UPSERT_REGLAS_DESEMBOLSO(
P_LISTA_REGLA_DESEMBOLSO IN T_LISTA_REGLAS_DESEMBOLSO,
P_LISTA_REGLA_DESEMBOLSO_OUT OUT T_LISTA_REGLAS_DESEMBOLSO,
P_CODIGO_RES OUT NUMBER,
P_MENSAJE OUT VARCHAR2
)

IS 
V_ID_REGLA_DESEMBOLSO NUMBER;
V_REGLA_DESEMBOLSO_ACTUAL   TRE_REGLA_DESEMBOLSO%ROWTYPE;

BEGIN

  --DBMS_OUTPUT.ENABLE (BUFFER_SIZE >= NULL);

  P_LISTA_REGLA_DESEMBOLSO_OUT := T_LISTA_REGLAS_DESEMBOLSO();
  P_LISTA_REGLA_DESEMBOLSO_OUT.EXTEND(P_LISTA_REGLA_DESEMBOLSO.COUNT);
  
  IF (P_LISTA_REGLA_DESEMBOLSO.COUNT > 0) THEN

    FOR IND IN 1 .. P_LISTA_REGLA_DESEMBOLSO.COUNT
    LOOP
      IF P_LISTA_REGLA_DESEMBOLSO (IND).ID IS NULL
      THEN
  
          SELECT TRE_REGLA_DESEMBOLSO_SEQ.NEXTVAL INTO V_ID_REGLA_DESEMBOLSO FROM DUAL;
  
            INSERT INTO TRE_REGLA_DESEMBOLSO
            VALUES (V_ID_REGLA_DESEMBOLSO,
                    P_LISTA_REGLA_DESEMBOLSO(IND).ID_DESEMBOLSO,
                    P_LISTA_REGLA_DESEMBOLSO(IND).ID_TCA_REGLA,
                    P_LISTA_REGLA_DESEMBOLSO(IND).EXCEPTUADO,
                    P_LISTA_REGLA_DESEMBOLSO(IND).USUARIO_EXCEPTUA,
                    P_LISTA_REGLA_DESEMBOLSO(IND).FECHA_EXCEPCION);
          
                    P_LISTA_REGLA_DESEMBOLSO_OUT(IND) := P_LISTA_REGLA_DESEMBOLSO(IND);
                    P_LISTA_REGLA_DESEMBOLSO_OUT(IND).ID := V_ID_REGLA_DESEMBOLSO;
  
      ELSE
  
            SELECT ID,ID_DESEMBOLSO, ID_TCA_REGLA,EXCEPTUADO,USUARIOEXCEPTUA,FECHA_EXCEPCION 
            INTO V_REGLA_DESEMBOLSO_ACTUAL
            FROM  TRE_REGLA_DESEMBOLSO 
            WHERE ID = P_LISTA_REGLA_DESEMBOLSO(IND).ID;
  
            UPDATE TRE_REGLA_DESEMBOLSO
            SET ID_DESEMBOLSO = NVL(P_LISTA_REGLA_DESEMBOLSO(IND).ID_DESEMBOLSO,V_REGLA_DESEMBOLSO_ACTUAL.ID_DESEMBOLSO),
                ID_TCA_REGLA = NVL (P_LISTA_REGLA_DESEMBOLSO(IND).ID_TCA_REGLA,V_REGLA_DESEMBOLSO_ACTUAL.ID_TCA_REGLA),
                EXCEPTUADO = NVL (P_LISTA_REGLA_DESEMBOLSO(IND).EXCEPTUADO,V_REGLA_DESEMBOLSO_ACTUAL.EXCEPTUADO),
                USUARIOEXCEPTUA = NVL (P_LISTA_REGLA_DESEMBOLSO(IND).USUARIO_EXCEPTUA,V_REGLA_DESEMBOLSO_ACTUAL.USUARIOEXCEPTUA),
                FECHA_EXCEPCION = NVL (P_LISTA_REGLA_DESEMBOLSO(IND).FECHA_EXCEPCION,V_REGLA_DESEMBOLSO_ACTUAL.FECHA_EXCEPCION)
                WHERE ID = P_LISTA_REGLA_DESEMBOLSO(IND).ID;
      
                P_LISTA_REGLA_DESEMBOLSO_OUT(IND) := P_LISTA_REGLA_DESEMBOLSO(IND);
                P_LISTA_REGLA_DESEMBOLSO_OUT(IND).ID := P_LISTA_REGLA_DESEMBOLSO(IND).ID;
                
      END IF;   
          DBMS_OUTPUT.PUT_LINE ('ID_TRE ' || P_LISTA_REGLA_DESEMBOLSO (IND).ID);
 
    END LOOP;
 
 END IF;
 
    P_CODIGO_RES := 0;
    P_MENSAJE := 'Procedimiento  ejecutado  correctamente !';
    

    
EXCEPTION
   WHEN OTHERS
   THEN
      P_CODIGO_RES := 1;
      P_MENSAJE := SQLERRM;
 
 END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       SP_UPSERT_TRAN_DES (
   P_ID_TRANSACCIONC   IN     NUMBER,
   P_ID_CONT_DES       IN     NUMBER,
   P_PLATAFORMA        IN     VARCHAR2,
   P_TRANSACCION       IN     VARCHAR2,
   P_BAN_ESTATUS       IN     NUMBER,
   P_DETALLETR         IN  T_LISTA_DETALLETRANS,
   P_CODIGO_RES           OUT NUMBER,
   P_MENSAJE              OUT VARCHAR2,
   P_DETALLETR_OUT     OUT T_LISTA_DETALLETRANS)
IS
   v_count_D   NUMBER;
   V_id_transaccion number ;
   V_id_detalle number ;
   V_id_Sqac number ;
   V_id_cont_des number ;
    v_index  number := 1;
   v_plataforma varchar2(50); 
   v_transaccion varchar2(50);
   v_fecha_registro date;
   v_ban_estatus number;
       
BEGIN

   P_DETALLETR_OUT := T_LISTA_DETALLETRANS();
   P_DETALLETR_OUT.EXTEND(P_DETALLETR.COUNT);

        IF (P_ID_TRANSACCIONC IS NULL) THEN

        SELECT TRANSACCION_CONTRATO_SEQ.NEXTVAL INTO V_id_transaccion FROM DUAL;

        INSERT INTO TRANSACCION_CONTRATO
          VALUES (V_id_transaccion,
                  P_ID_CONT_DES,
                  P_PLATAFORMA,
                  P_TRANSACCION,
                  SYSDATE,
                  P_BAN_ESTATUS);

        ELSE
         V_id_transaccion:= P_ID_TRANSACCIONC;

            SELECT ID, ID_CONTRATO_DESEMBOLSO, PLATAFORMA, TRANSACCION, FECHA_REGISTRO, BAN_ESTATUS
            INTO  V_id_transaccion,V_id_cont_des, v_plataforma, v_transaccion,v_fecha_registro,  v_ban_estatus
            FROM TRANSACCION_CONTRATO WHERE ID = V_id_transaccion;

            IF (P_ID_CONT_DES IS NOT NULL) THEN
            V_id_cont_des:= P_ID_CONT_DES;
            END IF;

             IF(P_PLATAFORMA IS NOT NULL) THEN
             v_plataforma:= P_PLATAFORMA;
            END IF;

            IF(P_TRANSACCION IS NOT NULL) THEN
            v_transaccion:= P_TRANSACCION;
            END IF;

            IF(P_BAN_ESTATUS IS NOT NULL) THEN  
            v_ban_estatus:= P_BAN_ESTATUS;
            END IF;

          UPDATE TRANSACCION_CONTRATO
          
             SET ID_CONTRATO_DESEMBOLSO =V_id_cont_des,           /* P_ID_CONT_DES*/
                    PLATAFORMA = v_plataforma,      
                    TRANSACCION =v_transaccion,
                    BAN_ESTATUS = v_ban_estatus
             WHERE ID = P_ID_TRANSACCIONC;
          
         END IF;


     IF (P_DETALLETR.COUNT > 0) THEN
       FOR IND IN 1 .. P_DETALLETR.COUNT
          LOOP
           
                 IF  P_DETALLETR(IND).ID IS NOT NULL
                  THEN
                   V_id_detalle := P_DETALLETR (IND).ID;

                 UPDATE DETALLE_TRANSACCION
                  SET ID_TRANSACCION = P_DETALLETR (IND).ID_TRANSACCION, AGRUPADOR = P_DETALLETR (IND).AGRUPADOR,
                   PARAMETRO_NOMBRE = P_DETALLETR (IND).PARAMETRO_NOMBRE, PARAMETRO_VALOR= P_DETALLETR (IND).PARAMETRO_VALOR
                   WHERE ID = P_DETALLETR (IND) .ID;

                   P_DETALLETR_OUT(IND) := P_DETALLETR(IND);
                   P_DETALLETR_OUT(IND).ID := V_id_detalle;
                   P_DETALLETR_OUT(IND).ID_TRANSACCION :=V_id_transaccion;
                   P_DETALLETR_OUT(IND).PARAMETRO_NOMBRE := 'DETALLE_TRANSACCION';
                   P_DETALLETR_OUT(IND).PARAMETRO_VALOR := 'UPDATE';

                   ELSE

                   SELECT DETALLE_TRANSACCION_SEQ.NEXTVAL INTO V_id_detalle FROM DUAL;

                   INSERT INTO DETALLE_TRANSACCION
                   VALUES (V_id_detalle,
                   V_id_transaccion,
                   P_DETALLETR (IND).AGRUPADOR,
                   P_DETALLETR (IND).PARAMETRO_NOMBRE,
                   P_DETALLETR (IND).PARAMETRO_VALOR);

                 END IF;

              P_DETALLETR_OUT(IND) := P_DETALLETR(IND);
              P_DETALLETR_OUT(IND).ID := V_id_detalle;
              P_DETALLETR_OUT(IND).ID_TRANSACCION :=V_id_transaccion;
              P_DETALLETR_OUT(IND).PARAMETRO_NOMBRE := 'DETALLE_TRANSACCION';
              P_DETALLETR_OUT(IND).PARAMETRO_VALOR := 'INSERT';

          END LOOP;

    END IF;
    
    P_CODIGO_RES := 1;
    P_MENSAJE := 'Procedimiento  ejecutado  correctamente !';
END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE SP_VALIDAR_VOTACION (
   P_USUARIO_REUNION   IN     NUMBER,
   P_USUARIO           IN     VARCHAR2,
   P_RESULTADO            OUT NUMBER,
   P_MENSAJE              OUT VARCHAR2)
IS
   V_EMITE_VOTO     NUMBER;
BEGIN
   SELECT URA.EMITE_VOTO
     INTO V_EMITE_VOTO
     FROM USUARIO_REUNION_APROBACION URA
          WHERE URA.LOGIN_USUARIO = P_USUARIO
          AND URA.ID = P_USUARIO_REUNION;

   IF V_EMITE_VOTO = 1 
   THEN
      P_RESULTADO := 1;
      P_MENSAJE := 'Datos Validos';
      
   ELSIF V_EMITE_VOTO = 0 
   THEN
      P_RESULTADO := 0;
      P_MENSAJE := 'No cuenta con permisos necesarios para realizar la votaciÃ³n';
   
   END IF;
   
  EXCEPTION WHEN OTHERS THEN
  P_RESULTADO:= SQLCODE;
  P_MENSAJE:= SQLERRM;

END;
/

SHOW ERRORS;


CREATE OR REPLACE PROCEDURE       VALIDAR_SIMILITUDES_CLIENTES (razon_social     IN      VARCHAR2,
                                                p_recordset  OUT     SYS_REFCURSOR) AS

    v_count   NUMBER;
  len       NUMBER;
  d_query   VARCHAR2(4000);
  condicion VARCHAR2(4000);
  abro      VARCHAR2(1);
  p_array   array_table;
  
BEGIN
  select regexp_substr(razon_social,'[^ ]+', 1, level) bulk collect into p_array from dual
                          connect by regexp_substr(razon_social, '[^ ]+', 1, level) is not null;
  condicion := '';
    len := p_array.COUNT;
    v_count := 0;
  
  d_query := 'SELECT RAZON_SOCIAL FROM CLIENTES';
  

    FOR i IN 1 .. len
    LOOP
    IF p_array(i) IS NOT NULL AND LENGTH(p_array(i)) >3 THEN
      DBMS_OUTPUT.put_line (p_array (i));
      IF i = 1 THEN
        condicion := condicion || ' WHERE ';
      END IF;
      IF i > 1 THEN
        condicion := condicion || ' AND ';
      END IF;
      condicion :=  condicion || ' ( UPPER(RAZON_SOCIAL) LIKE UPPER(''%' || p_array(i) || '%'') ) ';
    END IF;
    END LOOP;
  d_query := d_query || condicion;
  DBMS_OUTPUT.put_line ('d_query:' || d_query);
  
  OPEN p_recordset FOR d_query;
  
END;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION       base64encoder(p_blob IN BLOB)
RETURN CLOB
IS
l_clob CLOB;
l_step PLS_INTEGER := 12000; -- make sure you set a multiple of 3 not higher than 24573
BEGIN
FOR i IN 0 .. TRUNC((DBMS_LOB.getlength(p_blob) - 1 )/l_step) LOOP
l_clob := l_clob || UTL_RAW.cast_to_varchar2(UTL_ENCODE.base64_encode(DBMS_LOB.substr(p_blob, l_step, i * l_step + 1)));
END LOOP;
RETURN l_clob;


EXCEPTION
WHEN OTHERS THEN

l_clob :=NULL;

RETURN l_clob;

END;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION         "F_ACTUALIZA_PERSP_CLI" 
(
  P_ID_CLIENTE IN CLIENTES.ID_CLIENTE%TYPE 
, P_ID_FLUJO IN  SEGUIMIENTO_CREDITICIO.ID_FLUJO%TYPE 
) RETURN VARCHAR2 
AS 
V_C_ID_TCA_PERSPECTIVA CLIENTES.ID_TCA_PERSPECTIVA%TYPE;
V_S_ID_TCA_PERSPECTIVA SEGUIMIENTO_CREDITICIO.ID_TCA_PERSPECTIVA%TYPE;
BEGIN
    SELECT C.ID_TCA_PERSPECTIVA,S.ID_TCA_PERSPECTIVA
    INTO V_C_ID_TCA_PERSPECTIVA,V_S_ID_TCA_PERSPECTIVA
    FROM CLIENTES C, SEGUIMIENTO_CREDITICIO S
    WHERE C.ID_CLIENTE=S.ID_CLIENTE AND S.TIPO_INICIO='NORMAL' AND C.ID_CLIENTE=P_ID_CLIENTE
    AND S.ID_FLUJO=P_ID_FLUJO
    AND s.ID= (select max(id) from SEGUIMIENTO_CREDITICIO where ID_CLIENTE=P_ID_CLIENTE and TIPO_INICIO='NORMAL' and ID_FLUJO=P_ID_FLUJO );
    IF V_C_ID_TCA_PERSPECTIVA<>V_S_ID_TCA_PERSPECTIVA THEN
        UPDATE CLIENTES
        SET ID_TCA_PERSPECTIVA=V_S_ID_TCA_PERSPECTIVA 
        WHERE ID_CLIENTE=P_ID_CLIENTE;
        COMMIT;
        RETURN 'SI';
    ELSIF V_C_ID_TCA_PERSPECTIVA IS NULL AND V_S_ID_TCA_PERSPECTIVA IS NOT NULL THEN
        UPDATE CLIENTES
        SET ID_TCA_PERSPECTIVA=V_S_ID_TCA_PERSPECTIVA 
        WHERE ID_CLIENTE=P_ID_CLIENTE;
        COMMIT;
        RETURN 'SI';
    ELSE
        RETURN 'NO';
    END IF;
EXCEPTION
  WHEN OTHERS THEN
      RETURN 'NO';
END F_ACTUALIZA_PERSP_CLI;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION        F_ASIGNA_USUARIO (P_OPERACION    VARCHAR2,
                                             ID_ROL INTEGER)
   RETURN VARCHAR2
IS
   V_USUARIO   VARCHAR2 (250);
--Responsable de Operación
--Abogado
--GERIES
BEGIN
  IF ID_ROL = 1
   THEN      
      SELECT DISTINCT NOMBRE_USUARIO
        INTO V_USUARIO
        FROM TBI_PROCESO_OPERACION
       WHERE     ID_OPERACION = P_OPERACION
             AND ID_TAREA = 1
             AND ID_PROCESO = 1
             AND BAN_ES_FIN_ACTIVIDAD=1
         and     rownum=1;

      RETURN V_USUARIO;
   ELSE
      IF ID_ROL = 11
      THEN
         SELECT DISTINCT NOMBRE_USUARIO
           INTO V_USUARIO
           FROM TBI_PROCESO_OPERACION
          WHERE     ID_OPERACION = P_OPERACION
                AND ID_TAREA = 3
                AND ID_PROCESO = 1
             AND BAN_ES_FIN_ACTIVIDAD=1
             and    rownum=1;

         RETURN V_USUARIO;
      ELSE
         IF ID_ROL = 16
         THEN
            SELECT DISTINCT NOMBRE_USUARIO
              INTO V_USUARIO
              FROM TBI_PROCESO_OPERACION
             WHERE     ID_OPERACION = P_OPERACION
                   AND ID_TAREA = 4
                   AND ID_PROCESO = 1
           AND BAN_ES_FIN_ACTIVIDAD=1
                  and  rownum=1;

            RETURN V_USUARIO;
         ELSE
       IF ID_ROL = 13
         THEN 
         
              SELECT DISTINCT USUARIO
              INTO V_USUARIO
              FROM TBI_PROCESO_OPERACION
             WHERE     ID_OPERACION = P_OPERACION
                   AND (ID_TAREA = 39 OR  ID_TAREA = 41)
                   AND ID_PROCESO =  7
           AND BAN_ES_FIN_ACTIVIDAD=1
                  and  rownum=1;

            RETURN V_USUARIO;
            ELSE
         
         
         
         
         
         
            RETURN V_USUARIO;
            END IF;
         END IF;
      END IF;
      END IF;
   END ;
/

SHOW ERRORS;


CREATE OR REPLACE function f_decode_base64(p_clob_in in clob) return blob is
    v_blob blob;
    v_result blob;
    v_offset integer;
    v_buffer_size binary_integer := 48;
    v_buffer_varchar varchar2(48);
    v_buffer_raw raw(48);
  begin
    if p_clob_in is null then
      return null;
    end if;
    dbms_lob.createtemporary(v_blob, true);
    v_offset := 1;
    for i in 1 .. ceil(dbms_lob.getlength(p_clob_in) / v_buffer_size) loop
      dbms_lob.read(p_clob_in, v_buffer_size, v_offset, v_buffer_varchar);
      v_buffer_raw := utl_raw.cast_to_raw(v_buffer_varchar);
      v_buffer_raw := utl_encode.base64_decode(v_buffer_raw);
      dbms_lob.writeappend(v_blob, utl_raw.length(v_buffer_raw), v_buffer_raw);
      v_offset := v_offset + v_buffer_size;
    end loop;
    v_result := v_blob;
    dbms_lob.freetemporary(v_blob);
    return v_result;
  end ;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_ETIQUETAS_COMISION
(
  P_ID IN VARCHAR2  
, P_ETIQUETA IN VARCHAR2  
) RETURN VARCHAR2 IS
  
  V_TIPO VARCHAR (250);

BEGIN
  CASE WHEN (P_ETIQUETA = 'Tipo de Comisión') THEN
    SELECT TC.DESCRIPCION INTO V_TIPO FROM TCA_TIPO_COMISION TTC
    JOIN TCA_COMISION TC ON (TC.ID_TCA_TIPO_COMISION = TTC.ID)
    JOIN COMISION COM ON (COM.ID_TCA_COMISION = TC.ID)
    WHERE COM.ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Descripción') THEN
    SELECT NOMBRE INTO V_TIPO FROM COMISION 
      WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Nombre') THEN
    SELECT NOMBRE INTO V_TIPO FROM COMISION 
      WHERE ID = P_ID;
      
  WHEN (P_ETIQUETA = 'Comisión Compartida') THEN
  SELECT CASE WHEN COMISION_COMPARTIDA = 1 THEN 'SI' ELSE 'NO' END AS COMISION_COMPARTIDA 
  INTO V_TIPO FROM COMISION
    WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Momento de Cobro') THEN
  SELECT TMC.DESCRIPCION INTO V_TIPO FROM TCA_MOMENTO_COBRO TMC
  JOIN COMISION COM ON (COM.ID_TCA_MOMENTO_COBRO = TMC.ID)
  WHERE COM.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Tipo Valor') THEN
  SELECT TTT.DESCRIPCION INTO V_TIPO FROM TCA_TIPO_TASA TTT
  JOIN COMISION COM ON (COM.ID_TCA_TIPO_TASA = TTT.ID)
  WHERE COM.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Valor')THEN
  SELECT CONCAT(PORCENTAJE_SOBRE_MONTO_BASE, '%') INTO V_TIPO FROM COMISION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Tipo Monto Base') THEN
  SELECT TMBC.DESCRIPCION INTO V_TIPO FROM TCA_MONTO_BASE_COMISION TMBC
  JOIN COMISION COM ON (TMBC.ID = COM.ID_TCA_MONTO_BASE)
  WHERE COM.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Importe del Monto') THEN
  SELECT TO_CHAR(MONTO_BASE,'$999,999,999,999,999.99') INTO V_TIPO FROM COMISION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Monto de la Comisión')THEN
  SELECT TO_CHAR(MONTO_COMISION,'$999,999,999,999,999.99') INTO V_TIPO FROM COMISION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Moneda')THEN
  SELECT TTM.DESCRIPCION_CORTA INTO V_TIPO FROM TCA_TIPO_MONEDA TTM
  JOIN COMISION COM ON (COM.ID_TCA_MONEDA = TTM.ID)
  WHERE COM.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Base de Cálculo')THEN
  SELECT TBC.DESCRIPCION INTO V_TIPO FROM TCA_BASE_CALCULO TBC
  JOIN COMISION COM ON(COM.ID_TCA_BASE_CALCULO = TBC.ID)
  WHERE COM.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fecha de vigencia del préstamo')THEN
  SELECT FECHA_VALOR INTO V_TIPO FROM COMISION  
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fecha de vencimiento')THEN
  SELECT FECHA_VENCIMIENTO INTO V_TIPO FROM COMISION  
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fecha de inicio de capital')THEN
  SELECT FECHA_INICIO_CAPITAL INTO V_TIPO FROM COMISION  
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Frecuencia de Pago')THEN
  SELECT FRECUENCIA_PAGO INTO V_TIPO FROM COMISION  
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Tipo de Frecuencia de Pago')THEN
  SELECT TTF.DESCRIPCION INTO V_TIPO FROM TCA_TIPO_FRECUENCIA TTF
  JOIN COMISION COM ON(COM.ID_TCA_TIPO_FRECUENCIA = TTF.ID)
  WHERE COM.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fondo al que aplica')THEN
  SELECT VF.CODE_DESC INTO V_TIPO FROM VCA_FONDO VF
  JOIN COMISION COM ON(COM.ID_TCA_FONDO = VF.MIS_CODE)
  WHERE COM.ID = P_ID;
  
  ELSE NULL;
  
  END CASE;
  
  RETURN V_TIPO;
END F_ETIQUETAS_COMISION;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_ETIQUETAS_CONDICION
(
  P_ID IN VARCHAR2  
, P_ETIQUETA IN VARCHAR2  
) RETURN VARCHAR2 IS
  
  V_TIPO VARCHAR(1024);
  TYPE NUM_TAB IS TABLE OF NUMBER;
  
  /*CURSOR C1
  IS
    SELECT TCC.DESCRIPCION FROM CONDICION CON
    JOIN TRE_CATEGORIA_CONDICION TCCO ON (tcco.id_CONDICION = con.id)
    JOIN TCA_CATEGORIA_CONDICION TCC ON (TCCO.ID_TCA_CATEGORIA = TCC.ID)
    WHERE CON.ID = P_ID;*/

BEGIN

  --OPEN C1;
  --FETCH C1 INTO V_TIPO;

  CASE WHEN (P_ETIQUETA = 'Sección')THEN
  SELECT NOMBRE INTO V_TIPO FROM CONDICION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Descripción')THEN
  SELECT DESCRIPCION INTO V_TIPO FROM CONDICION
  WHERE ID = P_ID;
  
 /* WHEN (P_ETIQUETA = 'Categoría')THEN
  RETURN V_TIPO;*/
  
  --CLOSE C1;
  
  WHEN (P_ETIQUETA = 'Tipo de Control')THEN
  SELECT TCC.DESCRIPCION INTO V_TIPO FROM TCA_CONTROL_CONDICION TCC
  JOIN CONDICION CON ON(CON.ID_TCA_CONTROL_CONDICION = TCC.ID)
  WHERE CON.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Tipo Fecha Inicio')THEN
  SELECT TTFI.DESCRIPCION INTO V_TIPO FROM TCA_TIPO_FECHA_INICIO TTFI
  JOIN CONDICION CON ON(CON.ID_TCA_TIPO_FECHA_INICIO = TTFI.ID)
  WHERE CON.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fecha Inicio')THEN
  SELECT FECHA_INICIO INTO V_TIPO FROM CONDICION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Nombre')THEN
  SELECT NOMBRE INTO V_TIPO FROM CONDICION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Plazo')THEN
  SELECT PLAZO INTO V_TIPO FROM CONDICION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Tipo Plazo')THEN
  SELECT TTF.DESCRIPCION INTO V_TIPO FROM TCA_TIPO_FRECUENCIA TTF
  JOIN CONDICION CON ON(CON.ID_TCA_FRECUENCIA_PLAZO = TTF.ID)
  WHERE CON.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fecha Final')THEN
  SELECT FECHA_FINAL INTO V_TIPO FROM CONDICION
  WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Categoría')THEN
  SELECT LISTAGG(TCC.DESCRIPCION, ', ') WITHIN GROUP (ORDER BY TCC.DESCRIPCION) AS DESCRIPCION
    INTO V_TIPO FROM CONDICION CON
    JOIN TRE_CATEGORIA_CONDICION TRCC ON (CON.ID = TRCC.ID_CONDICION)
    JOIN TCA_CATEGORIA_CONDICION TCC ON (TRCC.ID_TCA_CATEGORIA = TCC.ID)
    WHERE CON.ID = P_ID;
    
  WHEN (P_ETIQUETA ='Eventos')THEN
  SELECT LISTAGG(TEC.DESCRIPCION, ', ') WITHIN GROUP (ORDER BY TEC.DESCRIPCION) AS DESCRIPCION 
    INTO V_TIPO FROM CONDICION CON
    JOIN TRE_TCA_EVENTO_CONDICION TREC ON (CON.ID = TREC.ID_CONDICION)
    JOIN TCA_EVENTO_CONDICION TEC ON (TREC.ID_TCA_EVENTO = TEC.ID)
    WHERE CON.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fuente')THEN
  SELECT LISTAGG(FNT.DESCRIPCION, ', ') WITHIN GROUP (ORDER BY FNT.DESCRIPCION) AS DESCRIPCION
    INTO V_TIPO FROM CONDICION CON
    JOIN TRE_FUENTE_CONDICION TFC ON (CON.ID = TFC.ID_CONDICION)
    JOIN FUENTE FNT ON (TFC.ID_FUENTE = FNT.ID)
    WHERE ID_CONDICION = P_ID;
    
  WHEN (P_ETIQUETA = 'Línea')THEN
  SELECT LISTAGG(LIN.DESCRIPCION_LINEA, ', ') WITHIN GROUP (ORDER BY LIN.DESCRIPCION_LINEA) AS DESCRIPCION_LINEA
    INTO V_TIPO FROM CONDICION CON
    JOIN TRE_LINEA_CREDITO_TCC TLCT ON (CON.ID = TLCT.ID_CONDICION)
    JOIN LINEA_CREDITO LIN ON (TLCT.ID_LINEA_CREDITO = LIN.ID)
    WHERE CON.ID = P_ID;
    
  /*WHEN (P_ETIQUETA = 'Observaciones')THEN
  SELECT OBS_CON.OBSERVACION INTO V_TIPO FROM CONDICION CON
    JOIN OBSERVACION_CONDICION OBS_CON ON (CON.ID = OBS_CON.ID_CONDICION)
    WHERE CON.ID = P_ID;*/
  
  ELSE NULL;

  END CASE;
  RETURN V_TIPO;
END F_ETIQUETAS_CONDICION;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_ETIQUETAS_TERMINO
(P_ID VARCHAR2, P_ETIQUETA VARCHAR2)

RETURN VARCHAR2 
  IS
    V_TIPO  VARCHAR2 (250);
BEGIN
 
  CASE WHEN (P_ETIQUETA = 'Tipo Fecha de Inicio') THEN
  SELECT DISTINCT TTFI.DESCRIPCION
        INTO V_TIPO
        FROM TERMINO TER
        LEFT JOIN TCA_TERMINO TT
        ON (TER.ID_TCA_TERMINO = TT.ID)
        LEFT JOIN TCO_ATRIBUTO_TCC TAT
        ON (TAT.ID_TCA_TERMINO = TT.ID)
        LEFT JOIN TCA_TIPO_FECHA_INICIO TTFI
        ON (TER.ID_TCA_TIPO_FECHA_INICIO = TTFI.ID)
        WHERE TER.ID = P_ID;
        
  WHEN (P_ETIQUETA = 'Fecha de Inicio') THEN     
    SELECT FECHA_INICIO INTO V_TIPO FROM TERMINO WHERE ID = P_ID;  
    
  WHEN (P_ETIQUETA = 'Nombre' OR P_ETIQUETA = 'Nombre del Término' ) THEN 
    SELECT NOMBRE INTO V_TIPO FROM TERMINO WHERE ID = P_ID;  
    
  WHEN (P_ETIQUETA = 'Plazo' OR P_ETIQUETA = 'Plazo de la Línea' 
        OR P_ETIQUETA = 'Plazo de financiamiento' OR P_ETIQUETA = 'Plazo de la Garantía'
        OR P_ETIQUETA = 'Período de Gracia') THEN
    SELECT PLAZO INTO V_TIPO FROM TERMINO WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Tipo Plazo' OR P_ETIQUETA = 'Tipo Plazo de la Línea' 
          OR P_ETIQUETA = 'Tipo Plazo de financiamiento' OR P_ETIQUETA = 'Tipo Plazo de la garantía'
          OR P_ETIQUETA = 'Tipo de Período de Gracia' OR P_ETIQUETA = 'Tipo Frecuencia de Revisión'
          OR P_ETIQUETA = 'Tipo Frecuencia de Pago de Interés' OR P_ETIQUETA = 'Tipo Frecuencia de Amortización') THEN
    SELECT TFP.DESCRIPCION
        INTO V_TIPO
        FROM TCA_TIPO_FRECUENCIA TFP
        JOIN TERMINO TER
        ON (TER.ID_TCA_FRECUENCIA_PLAZO = TFP.ID)
        WHERE TER.ID = P_ID;
        
  WHEN (P_ETIQUETA = 'Fecha de vencimiento' OR P_ETIQUETA = 'Fecha máxima' OR P_ETIQUETA = 'Fecha') THEN
    SELECT FECHA_VENCIMIENTO INTO V_TIPO FROM TERMINO WHERE ID = P_ID;
    IF V_TIPO IS NULL THEN 
      SELECT FECHA INTO V_TIPO FROM TERMINO WHERE ID = P_ID AND ID_TCA_TERMINO <> 9; 
    END IF;
    
  WHEN (P_ETIQUETA = 'Descripción') THEN
    SELECT DESCRIPCION INTO V_TIPO FROM TERMINO WHERE ID = P_ID;  
      
  WHEN (P_ETIQUETA = 'Moneda') THEN
    SELECT TTM.DESCRIPCION_CORTA INTO V_TIPO FROM TCA_TIPO_MONEDA TTM
      JOIN TERMINO TER ON (TER.ID_TCA_MONEDA = TTM.ID)
      WHERE TER.ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Monto') THEN
    SELECT TO_CHAR(MONTO,'$999,999,999,999,999.99')  INTO V_TIPO FROM TERMINO
      WHERE ID = P_ID;
      
  WHEN (P_ETIQUETA = 'Tasa') THEN
    SELECT TASA INTO V_TIPO FROM TERMINO
      WHERE ID = P_ID;
      
  WHEN (P_ETIQUETA = 'Tipo de Tasa') THEN
    SELECT TTT.DESCRIPCION INTO V_TIPO FROM TCA_TIPO_TASA TTT
      JOIN TERMINO TER ON (TER.ID_TCA_TIPO_TASA = TTT.ID)
    WHERE TER.ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Frecuencia de Revisión') THEN
    SELECT FRECUENCIA_REVISION INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
  
  WHEN (P_ETIQUETA = 'Fecha de Inicio de Revisión')THEN
    SELECT FECHA_INICIO_REVISION INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Frecuencia de Pago de Interés')THEN
    SELECT FRECUENCIA_PAGO_INTERES INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Fecha de Inicio de Pago de Interés')THEN
    SELECT FECHA_INICIO_PAGO_INTERES INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Frecuencia de Amortización') THEN
    SELECT FRECUENCIA_AMORTIZACION INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Tipo de Contraparte') THEN
    SELECT TIPO_CONTRAPARTE INTO V_TIPO FROM TERMINO 
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Monto mínimo por desembolso')THEN
    SELECT TO_CHAR(MONTO_MINIMO_DESEMBOLSO,'$999,999,999,999,999.99') INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Monto máximo por desembolso')THEN
    SELECT TO_CHAR(MONTO_MAXIMO_DESEMBOLSO,'$999,999,999,999,999.99') INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Tasa mímina por desembolso') THEN
    SELECT CONCAT(TASA_MINIMA_DESEMBOLSO, '%') INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Tasa máxima por desembolso')THEN
    SELECT CONCAT(TASA_MAXIMA_DESEMBOLSO, '%') INTO V_TIPO FROM TERMINO
    WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Fecha de Ingreso' OR P_ETIQUETA = 'Fecha de Aprobación' OR
        P_ETIQUETA = 'Fecha de firma del contrato' OR P_ETIQUETA = 'Fecha de Vigencia') THEN
    SELECT FECHA INTO V_TIPO FROM TERMINO WHERE ID = P_ID;
    
  WHEN (P_ETIQUETA = 'Aplican recursos concesionales') THEN
    SELECT  CASE WHEN SE_APLICAN_RECURSOS_CONCESION = 1 THEN 'SI' ELSE 'NO' END AS SE_APLICAN_RECURSOS_CONCESION INTO V_TIPO FROM TERMINO WHERE ID = P_ID; 
  
  ELSE NULL;
  END CASE;
  RETURN V_TIPO;
  
END F_ETIQUETAS_TERMINO;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION       F_ID_RESOLUCION(FECHA_FIRMA    date)
                        
   RETURN NUMBER
IS

ID NUMBER ;
V_ID_RESOLUCION NUMBER;

V_FECHA_FIRMA DATE ;
V_IDRES NUMBER;
V_FECHA_RES DATE;
BEGIN

SELECT FECHA_REGISTRO INTO V_FECHA_RES FROM CONFIGURACION
WHERE LLAVE ='PREPAGO';
                          

IF 
FECHA_FIRMA>  V_FECHA_RES
 THEN 
 
 ID :=1;
 
 RETURN ID;
 
 ELSE 
  
  ID :=2;
 
 RETURN ID;
   END IF;
   END;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_VALIDA_AGRUPADOR 
(
  AGRUPADOR IN NUMBER DEFAULT 0 
) RETURN NUMBER AS 
BEGIN
  IF AGRUPADOR = 0
    THEN 
      RETURN NULL;
  ELSE 
      RETURN AGRUPADOR;
  END IF;
END F_VALIDA_AGRUPADOR;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION F_VALIDACION_RASONSOCIAL
(
P_RasonSocial varchar2 ,
p_delimitador varchar2 
) RETURN VARCHAR2
IS
l_idx VARCHAR2 (250);
l_idxnum  VARCHAR2 (250);
v_rason varchar2(32767) := P_RasonSocial;
Al_value  varchar2(250);
BEGIN
loop                
l_idx := instr(v_rason,p_delimitador);           
IF l_idx > 0 THEN                   
Al_value:=substr(v_rason,1,l_idx-1);                      
v_rason := substr(v_rason,l_idx+LENGTH(p_delimitador));      
l_idxnum := LENGTH(Al_value);     

IF Al_value NOT IN ('COOPERATIVA', 'BANCO', 'INSTITUCIÓN', 'FUNDACIÓN', 'EMPRESA', 'FINANCIERA', 'FEDERACIÓN', 'SOCIEDAD', 'UNIVERSIDAD', 'ASOCIACIÓN', 'CORPORACIÓN', 'COMERCIALIZADORA',
 'GOBIERNO', 'ESCUELA', 'INSTITUTO', 'REPÚBLICA', 'GRUPO', 'SECRETARÍA', 'FONDO', 'COMPAÑÍA', 'CAJA') AND l_idxnum>3  THEN 
     RETURN Al_value;
     EXIT;
     END IF;  
ELSE

IF Al_value  IN ('COOPERATIVA', 'BANCO', 'INSTITUCIÓN', 'FUNDACIÓN', 'EMPRESA', 'FINANCIERA', 'FEDERACIÓN', 'SOCIEDAD', 'UNIVERSIDAD', 'ASOCIACIÓN', 'CORPORACIÓN', 'COMERCIALIZADORA',
 'GOBIERNO', 'ESCUELA', 'INSTITUTO', 'REPÚBLICA', 'GRUPO', 'SECRETARÍA', 'FONDO', 'COMPAÑÍA', 'CAJA') THEN 
     RETURN NULL;
     EXIT;
     
     ELSE Al_value:=Al_value;

exit;
     END IF;  
     

END IF;
END loop ;
RETURN Al_value;
END ;
/

SHOW ERRORS;


CREATE OR REPLACE FUNCTION tab_to_string (p_varchar2_tab IN t_varchar2_tab, p_delimiter IN VARCHAR2 DEFAULT ',') RETURN VARCHAR2 IS
	l_string VARCHAR2(32767);
	BEGIN
		FOR i IN p_varchar2_tab.FIRST .. p_varchar2_tab.LAST LOOP
			IF i != p_varchar2_tab.FIRST THEN
				l_string := l_string || p_delimiter;
			END IF;
			l_string := l_string || p_varchar2_tab(i);
		END LOOP;
	RETURN l_string;
END tab_to_string;
/

SHOW ERRORS;



CREATE OR REPLACE TRIGGER TCA_BASE_CALCULO_TGR 
   BEFORE INSERT
   ON TCA_BASE_CALCULO
   FOR EACH ROW
BEGIN
   SELECT TCA_BASE_CALCULO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TRE_SOL_LINEA_CREDITO_TGR
AFTER INSERT   ON TRE_SOLICITUD_LINEA_CREDITO FOR EACH ROW
DECLARE
	CONTRATO NUMBER(12,0);
	ID_EXCEPTUADO NUMBER(1,0);
	ID_REGLA_EXCEP NUMBER(5,0);
	SOLICITUD NUMBER(12,0);
	IN_INSTANCIA VARCHAR(256);
	IN_USUARIO VARCHAR2(255) := 'SYS';
	VALUE VARCHAR2(1);
	err_num NUMBER;
	err_msg VARCHAR2(255);

	CURSOR c2 IS
		SELECT ID_TCA_REGLA, EXCEPTUADO, INSTANCIA_PROCESO 
		FROM TRE_EXCEPCION_SOLICITUD
		WHERE ID_SOLICITUD = SOLICITUD AND EN_PROCESO_EXCEPCION = 0 AND EXCEPTUADO =1;

	-- Se heredan las excepciones realizadas a la solicitud de desembolso, a los nuevos contratos de desembolso que se registren y asocien a dicha solicitud de desembolso.
BEGIN

	CONTRATO := :NEW.ID_CONTRATO_DESEMBOLSO;
	SOLICITUD :=  :NEW.ID_SOLICITUD;

	--SELECT 'Y' INTO VALUE FROM TRE_EXCEPCION_SOLICITUD WHERE ID_SOLICITUD = SOLICITUD AND  EN_PROCESO_EXCEPCION = 0 AND EXCEPTUADO = 1;

	--IF VALUE = 'Y' THEN

		OPEN c2;
			LOOP
				FETCH c2 INTO ID_REGLA_EXCEP,ID_EXCEPTUADO, IN_INSTANCIA;
				EXIT WHEN c2%notfound;

				IF ID_EXCEPTUADO =1 THEN

					SELECT USUARIO INTO IN_USUARIO FROM TBI_PROCESO_OPERACION WHERE INSTANCIA_PROCESO = IN_INSTANCIA  AND ID_TAREA = 165 AND BAN_ES_FIN_ACTIVIDAD = 1;

					UPDATE TRE_REGLA_DESEMBOLSO SET EXCEPTUADO = ID_EXCEPTUADO, USUARIOEXCEPTUA = IN_USUARIO, FECHA_EXCEPCION = SYSDATE  WHERE ID_TCA_REGLA = ID_REGLA_EXCEP AND       
					ID_DESEMBOLSO = CONTRATO;

					DBMS_OUTPUT.PUT_LINE(ID_REGLA_EXCEP || ' - ' || ID_EXCEPTUADO || ' - ' || IN_INSTANCIA || ' - ' || IN_USUARIO );
				END IF;

			END LOOP;
		CLOSE c2;
	--END IF;

EXCEPTION 
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SQLERRM;

		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','TRIGGER TRE_SOL_LINEA_CREDITO_TGR','Solicitud: ' || SOLICITUD || ' - Contrato: '||CONTRATO||' - Error: '||TO_CHAR(err_num)||' '||SUBSTR(err_msg,1,520),TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER "TCA_CAMPOS_TGR" 
   BEFORE INSERT
   ON TCA_CAMPOS
   FOR EACH ROW
BEGIN
   SELECT TCA_CAMPOS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER " TRE_CAT_PRODUCTO_TCA_CAMP_TGR" 
   BEFORE INSERT
   ON TRE_CAT_PRODUCTO_TCA_CAMPOS
   FOR EACH ROW
BEGIN
   SELECT TRE_CAT_PRODUCTO_TCA_CAMP_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER DOCUMENTOS_ID_DOCUMENTOS_TRG BEFORE
INSERT ON DOCUMENTOS FOR EACH ROW
BEGIN SELECT DOCUMENTOS_SEQ.NEXTVAL into :NEW.ID_DOCUMENTOS From Dual ;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CONTRATO_DESEMBOLSO_TGR
AFTER INSERT   ON CONTRATO_DESEMBOLSO FOR EACH ROW
DECLARE
	CONTRATO NUMBER(12,0);
	ID_REGLA NUMBER(5,0);
	err_num NUMBER;
	err_msg VARCHAR2(255);

	CURSOR c1 IS
		SELECT ID 
		FROM TCA_REGLA_PROCESO
		WHERE TIPO = 'DESEMBOLSO';

BEGIN
	-- A cada contrato de desembolso que se inserte, se le asignan las reglas a verificar para el proceso de desembolsos
	CONTRATO := :NEW.ID;
	--SELECT :NEW.ID INTO CONTRATO FROM DUAL;
	OPEN c1;
		LOOP
			FETCH c1 INTO ID_REGLA;
			EXIT WHEN c1%notfound;

			INSERT INTO TRE_REGLA_DESEMBOLSO (ID,ID_DESEMBOLSO,ID_TCA_REGLA,EXCEPTUADO,USUARIOEXCEPTUA,FECHA_EXCEPCION)
            VALUES (TRE_REGLA_DESEMBOLSO_SEQ.NEXTVAL,CONTRATO,ID_REGLA,0,NULL,NULL);

		END LOOP;
   CLOSE c1;

EXCEPTION 
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SQLERRM;

		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','TRIGGER CONTRATO_DESEMBOLSO_TRG','Contrato: '||CONTRATO||' Error:'||TO_CHAR(err_num)||' '||SUBSTR(err_msg,1,520),TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TBI_PROC_OPER_TIEMPOS_TGR
   BEFORE INSERT
   ON TBI_PROCESO_OPERACION    FOR EACH ROW
DECLARE
   v_id_inicio         NUMBER;
   v_id_operacion      NUMBER;
   v_id_proceso        NUMBER;
   v_ban_es_proceso    NUMBER;
   v_fecha_fin         NUMBER;
   v_fecha_inicio      NUMBER;
   v_id_fin            NUMBER;
   V_RES_MILES         NUMBER;
   v_tarea             NUMBER;
   v_instancia         VARCHAR2 (50);
   v_idinstExistente   NUMBER;
BEGIN
   v_id_fin := :NEW.ID;
   v_id_operacion := :NEW.ID_OPERACION;
   v_id_proceso := :NEW.ID_PROCESO;
   v_ban_es_proceso := :NEW.BAN_ES_PROCESO;
   v_tarea := :NEW.ID_TAREA;
   v_instancia := :NEW.INSTANCIA_TAREA;

   IF v_id_proceso NOT IN (24, 9)
   THEN
      IF :NEW.BAN_ES_FIN_ACTIVIDAD = 1
      THEN
         SELECT (EXTRACT (
                    DAY FROM CURRENT_TIMESTAMP
                             - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                 * 86400000)
                + (EXTRACT (
                      HOUR FROM CURRENT_TIMESTAMP
                                - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                   * 3600000)
                + (EXTRACT (
                      MINUTE FROM CURRENT_TIMESTAMP
                                  - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                   * 60000)
                + (EXTRACT (
                      SECOND FROM CURRENT_TIMESTAMP
                                  - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                   * (1000))
                   AS FECHA_FIN
           INTO v_fecha_fin
           FROM DUAL;

         SELECT ID,
                (EXTRACT (
                    DAY FROM CURRENT_TIMESTAMP
                             - TO_TIMESTAMP (FECHA_REGISTRO))
                 * 86400000)
                + (EXTRACT (
                      HOUR FROM CURRENT_TIMESTAMP
                                - TO_TIMESTAMP (FECHA_REGISTRO))
                   * 3600000)
                + (EXTRACT (
                      MINUTE FROM CURRENT_TIMESTAMP
                                  - TO_TIMESTAMP (FECHA_REGISTRO))
                   * 60000)
                + (EXTRACT (
                      SECOND FROM CURRENT_TIMESTAMP
                                  - TO_TIMESTAMP (FECHA_REGISTRO))
                   * (1000))
                   AS FECHA_INICIO
           INTO v_id_inicio, v_fecha_inicio
           FROM TBI_PROCESO_OPERACION
          WHERE     BAN_FINALIZADO = 0
                AND BAN_ES_FIN_ACTIVIDAD = 0
                AND ID_OPERACION = v_id_operacion                     --500010
                AND ID_PROCESO = v_id_proceso                              --1
                AND BAN_ES_PROCESO = v_ban_es_proceso
                AND NVL (ID_TAREA, 000) = NVL (v_tarea, NVL (ID_TAREA, 000))
                AND ID <> v_id_fin
                AND ROWNUM = 1;

         V_RES_MILES := (v_fecha_inicio - v_fecha_fin);

         IF v_ban_es_proceso = 0
         THEN                                           --- 0 es igual a Tarea
            UPDATE TBI_PROCESO_OPERACION
               SET TIEMPO_TAREA = V_RES_MILES, BAN_FINALIZADO = 1
             WHERE ID IN (v_id_inicio);

            :NEW.TIEMPO_TAREA := V_RES_MILES;

            :NEW.BAN_FINALIZADO := 1;
         ELSIF v_ban_es_proceso = 1
         THEN                                        --1 corresponde a proceso
            UPDATE TBI_PROCESO_OPERACION
               SET TIEMPO_PROCESO = V_RES_MILES, BAN_FINALIZADO = 1
             WHERE ID IN (v_id_inicio);

            :NEW.TIEMPO_PROCESO := V_RES_MILES;

            :NEW.BAN_FINALIZADO := 1;
         END IF;

         :NEW.ID_INICIO := v_id_inicio;
      ELSE
         :NEW.ID_INICIO := NULL;
         DBMS_OUTPUT.PUT_LINE ('Dato de inicio ');

         IF :NEW.BAN_ES_FIN_ACTIVIDAD = 0
            AND:NEW.ID_PROCESO NOT IN (26, 25, 24) ---  Se coloca una excepción a la regla ;) procesos que inician más de una ves
         THEN
            SELECT ID
              INTO v_idinstExistente
              FROM TBI_PROCESO_OPERACION
             WHERE     BAN_FINALIZADO = 0
                   AND BAN_ES_FIN_ACTIVIDAD = 0
                   AND ID_OPERACION = v_id_operacion                  --500010
                   AND ID_PROCESO = v_id_proceso                           --1
                   AND BAN_ES_PROCESO = v_ban_es_proceso
                   AND ID_TAREA = v_tarea
                   AND INSTANCIA_TAREA = v_instancia
                   AND ROWNUM = 1;

            UPDATE TBI_PROCESO_OPERACION
               SET BAN_FINALIZADO = 1
             WHERE ID = v_idinstExistente;
         END IF;
      END IF;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE ('No existen Datos ');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_PREGUNTAS_TGR
   BEFORE INSERT
   ON CAT_PREGUNTAS    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_PREGUNTAS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_INST_FINANC_TGR
   BEFORE INSERT
   ON TCA_INSTRUMENTO_FINANCIERO    FOR EACH ROW
BEGIN
   SELECT FENIX.TCA_INSTRUMENTO_FINANCIERO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TRE_PREGUNTA_OPCION_TGR
   BEFORE INSERT
   ON TRE_PREGUNTA_OPCION    FOR EACH ROW
BEGIN
   SELECT FENIX.TRE_PREGUNTA_OPCION_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_TIPO_CLIENTE_TGR
   BEFORE INSERT
   ON CAT_TIPO_CLIENTE    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_TIP_CLI_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER PREGUNTA_ID_PREGUNTA_TRG BEFORE
  INSERT ON PREGUNTA FOR EACH ROW
WHEN (
NEW.ID_PREGUNTA IS NULL
      )
BEGIN Select PREGUNTA_SEQ.NEXTVAL into :NEW.ID_PREGUNTA From Dual;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CONTACTOS_DEL_TGR 
AFTER DELETE ON CONTACTOS_CLIENTE
FOR EACH ROW
DECLARE 

v_id_tbi_cliente NUMBER;
v_id_cliente     NUMBER;
v_id_flexcube    VARCHAR(40);
v_ejecutivo      VARCHAR2(20);
v_autorizo       VARCHAR2(20);
v_id_contacto        NUMBER;
v_nombre_contacto    VARCHAR2(60);
v_telefono_contacto  VARCHAR2(20);
v_correo_contacto    VARCHAR2(40);
v_fecha_reg_contacto DATE;
v_cargo_contacto     VARCHAR2(40);

BEGIN

    SELECT C.ID_CONTACTO,C.NOMBRE, C.TELEFONO, C.CORREO_ELECTRONICO, C.FECHA_REGISTRO, C.CARGO
    INTO v_id_contacto, v_nombre_contacto, v_telefono_contacto, v_correo_contacto, v_fecha_reg_contacto, v_cargo_contacto
    FROM CONTACTOS C
    WHERE C.ID_CONTACTO = :OLD.ID_CONTACTO;

    SELECT CT.ID_CLIENTE, CT.ID_FLEXCUBE, CT.EJECUTIVO, CT.AUTORIZO
    INTO v_id_cliente,v_id_flexcube,v_ejecutivo, v_autorizo
    FROM CLIENTES CT
    WHERE CT.ID_CLIENTE = :OLD.ID_CLIENTE;

      SELECT TBI_CLIENTE_SEQ.NEXTVAL INTO v_id_tbi_cliente FROM DUAL;
      
      INSERT INTO TBI_CLIENTE  VALUES(v_id_tbi_cliente,v_id_cliente,v_id_flexcube,'ELIMINAR_CONTACTO',v_ejecutivo,SYSDATE,v_autorizo,NULL,NULL);
  
      INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_CONTACTO',NULL,v_id_contacto);
      INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'NOMBRE',NULL,v_nombre_contacto);
      INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'CORREO_ELECTRONICO',NULL,v_correo_contacto);
      INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'CARGO',NULL,v_cargo_contacto);
      INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TELEFONO',NULL,v_telefono_contacto);
      INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_REGISTRO',NULL,v_fecha_reg_contacto);

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER APROBACION_TGR
BEFORE INSERT OR  UPDATE ON APROBACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [APROBACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [APROBACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [APROBACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER ASOCIADAS_ID_ASOCIADAS_TRG BEFORE
  INSERT ON ASOCIADAS FOR EACH ROW
WHEN (
NEW.ID_ASOCIADAS IS NULL
      )
BEGIN SELECT ASOCIADAS_SEQ.NEXTVAL into :NEW.ID_ASOCIADAS from dual ;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_TIPO_OPERACION_TGR
   BEFORE INSERT
   ON TCA_TIPO_OPERACION    FOR EACH ROW
BEGIN
   SELECT FENIX.TCA_TIPO_OPERACION_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_TIPO_INSTITUCION_TGR
   BEFORE INSERT
   ON CAT_TIPO_INSTITUCION    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_TIP_INST_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_TIPO_GARANTIA_TGR
   BEFORE INSERT
   ON CAT_TIPO_GARANTIA    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_TIPO_GARANTIA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER PREGUNTA_PRODUCTO_TGR
   BEFORE INSERT
   ON PREGUNTA_PRODUCTO    FOR EACH ROW
BEGIN
   SELECT FENIX.PREGUNTA_PRODUCTO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_RANGO_PAISES_TGR
   BEFORE INSERT
   ON TCA_RANGO_PAISES    FOR EACH ROW
BEGIN
   SELECT FENIX.TCA_RANGO_PAISES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TRE_HERRAMIENTA_TGR
   BEFORE INSERT
   ON TRE_HERRAMIENTA    FOR EACH ROW
BEGIN
   SELECT FENIX.TRE_HERRAMIENTA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TBI_PR_CLIENTE_TIEMPOS_TGR
   BEFORE INSERT
 ON TBI_PROCESO_CLIENTE    FOR EACH ROW
DECLARE
   v_id_inicio        NUMBER;
   v_id_cliente     NUMBER;
   v_id_proceso       NUMBER;
   v_ban_es_proceso   NUMBER;
   v_fecha_fin        NUMBER;
   v_fecha_inicio     NUMBER;
   v_id_fin           NUMBER;
   V_RES_MILES        NUMBER;
   v_tarea NUMBER;
   v_instancia varchar2(50);
   v_idinstExistente number;
BEGIN
   v_id_fin := :NEW.ID;
   v_id_cliente := :NEW.ID_CLIENTE;
   v_id_proceso := :NEW.ID_PROCESO;
   v_ban_es_proceso := :NEW.BAN_ES_PROCESO;
   v_tarea:=:NEW.ID_TAREA;
   v_instancia:=:NEW.INSTANCIA_TAREA;

   IF :NEW.BAN_ES_FIN_ACTIVIDAD = 1
   THEN
      SELECT (EXTRACT (
                 DAY FROM CURRENT_TIMESTAMP
                          - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
              * 86400000)
             + (EXTRACT (
                   HOUR FROM CURRENT_TIMESTAMP
                             - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                * 3600000)
             + (EXTRACT (
                   MINUTE FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                * 60000)
             + (EXTRACT (
                   SECOND FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                * (1000))
                AS FECHA_FIN
        INTO v_fecha_fin
        FROM DUAL;

      SELECT ID,
             (EXTRACT (
                 DAY FROM CURRENT_TIMESTAMP - TO_TIMESTAMP (FECHA_REGISTRO))
              * 86400000)
             + (EXTRACT (
                   HOUR FROM CURRENT_TIMESTAMP
                             - TO_TIMESTAMP (FECHA_REGISTRO))
                * 3600000)
             + (EXTRACT (
                   MINUTE FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (FECHA_REGISTRO))
                * 60000)
             + (EXTRACT (
                   SECOND FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (FECHA_REGISTRO))
                * (1000))
                AS FECHA_INICIO
        INTO v_id_inicio, v_fecha_inicio
        FROM TBI_PROCESO_CLIENTE
       WHERE     BAN_FINALIZADO = 0
             AND BAN_ES_FIN_ACTIVIDAD = 0
             AND ID_CLIENTE = v_id_cliente                        --500010
             AND ID_PROCESO = v_id_proceso                                 --1
             AND BAN_ES_PROCESO = v_ban_es_proceso
            AND nvl (ID_TAREA, 000)=nvl(v_tarea, nvl(ID_TAREA,000))
             AND ID <> v_id_fin and rownum=1 ;

      V_RES_MILES := (v_fecha_inicio - v_fecha_fin);

      IF v_ban_es_proceso = 0
      THEN                                              --- 0 es igual a Tarea
         UPDATE TBI_PROCESO_CLIENTE
            SET TIEMPO_TAREA = V_RES_MILES, BAN_FINALIZADO = 1
          WHERE ID IN (v_id_inicio);

         :NEW.TIEMPO_TAREA := V_RES_MILES;

         :NEW.BAN_FINALIZADO := 1;
      ELSIF v_ban_es_proceso = 1
      THEN                                           --1 corresponde a proceso
         UPDATE TBI_PROCESO_CLIENTE
            SET TIEMPO_PROCESO = V_RES_MILES, BAN_FINALIZADO = 1
          WHERE ID IN (v_id_inicio);

         :NEW.TIEMPO_PROCESO := V_RES_MILES;

         :NEW.BAN_FINALIZADO := 1;
      END IF;
      :NEW.ID_INICIO := v_id_inicio;
   ELSE
   
    :NEW.ID_INICIO := null;
      DBMS_OUTPUT.PUT_LINE ('Dato de inicio ');
      
      IF   :NEW.BAN_ES_FIN_ACTIVIDAD = 0
      THEN
       SELECT ID  into v_idinstExistente
       FROM TBI_PROCESO_CLIENTE
       where    BAN_FINALIZADO = 0
             AND BAN_ES_FIN_ACTIVIDAD = 0
             AND ID_CLIENTE = v_id_cliente                        --500010
             AND ID_PROCESO = v_id_proceso                                 --1
             AND BAN_ES_PROCESO = v_ban_es_proceso
            AND ID_TAREA=v_tarea
       AND INSTANCIA_TAREA=v_instancia;
       
          UPDATE TBI_PROCESO_CLIENTE
            SET BAN_FINALIZADO = 1
          WHERE ID =v_idinstExistente;
   
       END IF;
   END IF;

   
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE ('No existen Datos ');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCO_TIPO_PREGUNTA_TGR
   BEFORE INSERT
   ON TCO_TIPO_PREGUNTA    FOR EACH ROW
BEGIN
   SELECT FENIX.TCO_TIPO_PREGUNTA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER COMENTARIO_CLIENTE_TGR
BEFORE INSERT OR  UPDATE ON COMENTARIO_CLIENTE
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [COMENTARIO_CLIENTE]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [COMENTARIO_CLIENTE]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [COMENTARIO_CLIENTE]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER COMENTARIO_OPERACION_TGR
BEFORE INSERT OR  UPDATE ON COMENTARIO_OPERACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [COMENTARIO_OPERACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [COMENTARIO_OPERACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [COMENTARIO_OPERACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER DECISION_REUNION_APRO_TGR
BEFORE INSERT OR  UPDATE ON DECISION_REUNION_APROBACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [DECISION_REUNION_APROBACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [DECISION_REUNION_APROBACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [DECISION_REUNION_APROBACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER DOCUMENTO_TGR
BEFORE INSERT OR  UPDATE ON DOCUMENTO
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO_CREA is not null) THEN
    :NEW.LOGIN_USUARIO_CREA:=LOWER(:NEW.LOGIN_USUARIO_CREA);
    dbms_output.put_line('Se modifica el campo [login usuario crea] a minúsculas en [DOCUMENTO]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario crea] en [DOCUMENTO]');
  END IF; 
  
  IF (:NEW.LOGIN_USUARIO_MODIFICA is not null) THEN
    :NEW.LOGIN_USUARIO_MODIFICA:=LOWER(:NEW.LOGIN_USUARIO_MODIFICA);
    dbms_output.put_line('Se modifica el campo [login usuario modifica] a minúsculas en [DOCUMENTO]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario modifica] en [DOCUMENTO]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [DOCUMENTO]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER OBSERVACION_CONDICION_TGR
BEFORE INSERT OR  UPDATE ON OBSERVACION_CONDICION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [OBSERVACION_CONDICION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [OBSERVACION_CONDICION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [OBSERVACION_CONDICION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER RESPUESTA_COMENTARIO_TGR
BEFORE INSERT OR  UPDATE ON RESPUESTA_COMENTARIO
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [RESPUESTA_COMENTARIO]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [RESPUESTA_COMENTARIO]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [RESPUESTA_COMENTARIO]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER RESPUESTA_COMENTARIO_CLI_TGR
BEFORE INSERT OR  UPDATE ON RESPUESTA_COMENTARIO_CLIENTE
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [RESPUESTA_COMENTARIO_CLIENTE]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [RESPUESTA_COMENTARIO_CLIENTE]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [RESPUESTA_COMENTARIO_CLIENTE]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER SOLICITUD_APROBACION_TGR
BEFORE INSERT OR  UPDATE ON SOLICITUD_APROBACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO_ASIGNA is not null) THEN
    :NEW.LOGIN_USUARIO_ASIGNA:=LOWER(:NEW.LOGIN_USUARIO_ASIGNA);
    dbms_output.put_line('Se modifica el campo [login usuario asigna] a minúsculas en [SOLICITUD_APROBACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario asigna] en [SOLICITUD_APROBACION]');
  END IF; 
  
  IF (:NEW.LOGIN_USUARIO_CIERRE is not null) THEN
    :NEW.LOGIN_USUARIO_CIERRE:=LOWER(:NEW.LOGIN_USUARIO_CIERRE);
    dbms_output.put_line('Se modifica el campo [login usuario cierre] a minúsculas en [SOLICITUD_APROBACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario cierre] en [SOLICITUD_APROBACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [SOLICITUD_APROBACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TBI_CLIENTE_TGR
BEFORE INSERT OR  UPDATE ON TBI_CLIENTE
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_SOLICITANTE is not null) THEN
    :NEW.LOGIN_SOLICITANTE:=LOWER(:NEW.LOGIN_SOLICITANTE);
    dbms_output.put_line('Se modifica el campo [login usuario solicitante] a minúsculas en [TBI_CLIENTE]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario solicitante] en [TBI_CLIENTE]');
  END IF; 
  
  IF (:NEW.LOGIN_APROBADOR is not null) THEN
    :NEW.LOGIN_APROBADOR:=LOWER(:NEW.LOGIN_APROBADOR);
    dbms_output.put_line('Se modifica el campo [login usuario aprobador] a minúsculas en [TBI_CLIENTE]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario aprobador] en [TBI_CLIENTE]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [TBI_CLIENTE]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TBI_PROCESO_OPERACION_TGR
BEFORE INSERT OR  UPDATE ON TBI_PROCESO_OPERACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.USUARIO is not null) THEN
    :NEW.USUARIO:=LOWER(:NEW.USUARIO);
    dbms_output.put_line('Se modifica el campo [usuario] a minúsculas en [TBI_PROCESO_OPERACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [usuario] en [TBI_PROCESO_OPERACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [usuario] a minúsculas en [TBI_PROCESO_OPERACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_MIEMBRO_REUNION_TGR
BEFORE INSERT OR  UPDATE ON TCA_MIEMBRO_REUNION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [TCA_MIEMBRO_REUNION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [TCA_MIEMBRO_REUNION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [TCA_MIEMBRO_REUNION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER USUARIO_REUNION_APRO_TGR
BEFORE INSERT OR  UPDATE ON USUARIO_REUNION_APROBACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [USUARIO_REUNION_APROBACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [USUARIO_REUNION_APROBACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [USUARIO_REUNION_APROBACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER VALIDACION_CONDICION_TGR
BEFORE INSERT OR  UPDATE ON VALIDACION_CONDICION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO is not null) THEN
    :NEW.LOGIN_USUARIO:=LOWER(:NEW.LOGIN_USUARIO);
    dbms_output.put_line('Se modifica el campo [login usuario] a minúsculas en [VALIDACION_CONDICION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario] en [VALIDACION_CONDICION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
    err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [VALIDACION_CONDICION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER VOTO_APROBACION_TGR
BEFORE INSERT OR  UPDATE ON VOTO_APROBACION
FOR EACH ROW
DECLARE
  err_num NUMBER;
  err_msg VARCHAR2(255);
BEGIN
  IF (:NEW.LOGIN_USUARIO_EMITE is not null) THEN
    :NEW.LOGIN_USUARIO_EMITE:=LOWER(:NEW.LOGIN_USUARIO_EMITE);
    dbms_output.put_line('Se modifica el campo [login usuario emite] a minúsculas en [VOTO_APROBACION]');
  ELSE
    dbms_output.put_line('Hay modificaciones pero que no afectan al campo [login usuario emite] en [VOTO_APROBACION]');
  END IF; 
EXCEPTION
  WHEN OTHERS THEN
	err_num := SQLCODE;
	err_msg := SUBSTR(SQLERRM,1,250);
    
	DBMS_OUTPUT.put_line('Error al modificar el campo [login usuario] a minúsculas en [VOTO_APROBACION]');
	DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
    DBMS_OUTPUT.put_line(err_msg);
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TBI_PRO_OP_TIEM_EJECD_TGR
   BEFORE INSERT
   ON TBI_PROCESO_OPERACION    FOR EACH ROW
DECLARE
   v_id_inicio         NUMBER;
   v_id_operacion      NUMBER;
   v_id_proceso        NUMBER;
   v_ban_es_proceso    NUMBER;
   v_fecha_fin         NUMBER;
   v_fecha_inicio      NUMBER;
   v_id_fin            NUMBER;
   V_RES_MILES         NUMBER;
   v_tarea             NUMBER;
   v_instancia         VARCHAR2 (50);
   v_instanciaPR       VARCHAR2 (50);
   v_idinstExistente   NUMBER;
BEGIN
   v_id_fin := :NEW.ID;
   v_id_operacion := :NEW.ID_OPERACION;
   v_id_proceso := :NEW.ID_PROCESO;
   v_ban_es_proceso := :NEW.BAN_ES_PROCESO;
   v_tarea := :NEW.ID_TAREA;
   v_instancia := :NEW.INSTANCIA_TAREA;
   v_instanciaPR := :NEW.INSTANCIA_PROCESO;

   IF :NEW.BAN_ES_FIN_ACTIVIDAD = 1 AND v_id_proceso IN (24, 9)
   THEN
      SELECT (EXTRACT (
                 DAY FROM CURRENT_TIMESTAMP
                          - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
              * 86400000)
             + (EXTRACT (
                   HOUR FROM CURRENT_TIMESTAMP
                             - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                * 3600000)
             + (EXTRACT (
                   MINUTE FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                * 60000)
             + (EXTRACT (
                   SECOND FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (:NEW.FECHA_REGISTRO))
                * (1000))
                AS FECHA_FIN
        INTO v_fecha_fin
        FROM DUAL;

      SELECT ID,
             (EXTRACT (
                 DAY FROM CURRENT_TIMESTAMP - TO_TIMESTAMP (FECHA_REGISTRO))
              * 86400000)
             + (EXTRACT (
                   HOUR FROM CURRENT_TIMESTAMP
                             - TO_TIMESTAMP (FECHA_REGISTRO))
                * 3600000)
             + (EXTRACT (
                   MINUTE FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (FECHA_REGISTRO))
                * 60000)
             + (EXTRACT (
                   SECOND FROM CURRENT_TIMESTAMP
                               - TO_TIMESTAMP (FECHA_REGISTRO))
                * (1000))
                AS FECHA_INICIO
        INTO v_id_inicio, v_fecha_inicio
        FROM TBI_PROCESO_OPERACION
       WHERE     BAN_FINALIZADO = 0
             AND BAN_ES_FIN_ACTIVIDAD = 0
             AND ID_OPERACION = v_id_operacion                        --500010
             AND ID_PROCESO = v_id_proceso                                 --1
             AND BAN_ES_PROCESO = v_ban_es_proceso
             AND NVL (ID_TAREA, 000) = NVL (v_tarea, NVL (ID_TAREA, 000))
             AND ID <> v_id_fin
             AND ID_PROCESO in ( 24, 9)
             AND INSTANCIA_PROCESO = v_instanciaPR;

      V_RES_MILES := (v_fecha_inicio - v_fecha_fin);



      IF v_ban_es_proceso = 0
      THEN                                              --- 0 es igual a Tarea
         UPDATE TBI_PROCESO_OPERACION
            SET TIEMPO_TAREA = V_RES_MILES, BAN_FINALIZADO = 1
          WHERE ID IN (v_id_inicio);

         :NEW.TIEMPO_TAREA := V_RES_MILES;

         :NEW.BAN_FINALIZADO := 1;
         :NEW.ID_INICIO := v_id_inicio;
      ELSIF v_ban_es_proceso = 1
      THEN                                           --1 corresponde a proceso
         UPDATE TBI_PROCESO_OPERACION
            SET TIEMPO_PROCESO = V_RES_MILES, BAN_FINALIZADO = 1
          WHERE ID IN (v_id_inicio);

         :NEW.TIEMPO_PROCESO := V_RES_MILES;

         :NEW.BAN_FINALIZADO := 1;
         :NEW.ID_INICIO := v_id_inicio;
      END IF;



  
   END IF;



   IF :NEW.BAN_ES_FIN_ACTIVIDAD = 0 AND v_id_proceso IN (24, 9)
   THEN
      SELECT NOMBRE_PROCESO,
             USUARIO,
             NOMBRE_USUARIO,
             STRING01,
             STRING02,
             STRING03
        INTO :NEW.NOMBRE_PROCESO,
             :NEW.USUARIO,
             :NEW.NOMBRE_USUARIO,
             :NEW.STRING01,
             :NEW.STRING02,
             :NEW.STRING03
        FROM TBI_PROCESO_OPERACION
       WHERE     BAN_FINALIZADO = 0
             AND BAN_ES_FIN_ACTIVIDAD = 0
             AND ID_OPERACION = v_id_operacion                        --500010
             AND ID_PROCESO IN (24, 9)                                  --1
             AND BAN_ES_PROCESO = 1
             AND INSTANCIA_PROCESO IS NULL
             AND BAN_ES_FIN_ACTIVIDAD = 0
             AND ID_TAREA IS NULL;

      DELETE  FROM TBI_PROCESO_OPERACION 
      WHERE     BAN_FINALIZADO = 0
          AND BAN_ES_FIN_ACTIVIDAD = 0
             AND ID_OPERACION = v_id_operacion                        --500010
             AND ID_PROCESO IN (24, 9)                                         --1
            AND BAN_ES_PROCESO = 1
             AND INSTANCIA_PROCESO IS NULL
            AND BAN_ES_FIN_ACTIVIDAD = 0
            AND ID_TAREA IS NULL;
   END IF;
EXCEPTION
   WHEN NO_DATA_FOUND
   THEN
      DBMS_OUTPUT.PUT_LINE ('No existen Datos ');
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_ACTIVIDAD_ECONOMICA_TGR
   BEFORE INSERT
   ON CAT_ACTIVIDAD_ECONOMICA    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_ACT_ECON_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_AREA_FOCALIZACION_TGR
   BEFORE INSERT
   ON CAT_AREA_FOCALIZACION    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_AREA_FOC_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_CRITERIO_TGR
   BEFORE INSERT
   ON CAT_CRITERIO    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_CRITERIO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_EJE_ESTRATEGICO_TGR
   BEFORE INSERT
   ON CAT_EJE_ESTRATEGICO    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_EJE_ESTR_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_EJERCICIO_POA_TGR
   BEFORE INSERT
   ON CAT_EJERCICIO_POA    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_EJERCICIO_POA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_GRUPO_ECONOMICO_TGR
   BEFORE INSERT
   ON CAT_GRUPO_ECONOMICO    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_GRUP_ECON_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_INICIATIVA_ESTRATEGICA_TGR
   BEFORE INSERT
   ON CAT_INICIATIVA_ESTRATEGICA    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_INI_ESTR_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_PAISES_TGR
   BEFORE INSERT
   ON CAT_PAISES    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_PAISES_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_PRINCIPIO_TGR
   BEFORE INSERT
   ON CAT_PRINCIPIO    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_PRINCIPIO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_PRODUCTO_TGR
   BEFORE INSERT
   ON CAT_PRODUCTO    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_PRODUCTO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_SECTOR_INSTITUCIONAL_TGR
   BEFORE INSERT
   ON CAT_SECTOR_INSTITUCIONAL    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_SECTOR_INST_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_SECTOR_MERCADO_TGR
   BEFORE INSERT
   ON CAT_SECTOR_MERCADO    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_SEC_MERC_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_PRODUCTO_PROGRAMA_TGR
		BEFORE INSERT ON TCA_PRODUCTO_PROGRAMA FOR EACH ROW
DECLARE
			v_count NUMBER;
		BEGIN
			SELECT COUNT(*) INTO v_count FROM TRE_HERRAMIENTA WHERE CODIGO_PROGRAMA = :NEW.CODIGO_PROGRAMA;
			IF (v_count = 0 )THEN
				DBMS_OUTPUT.put_line('Advertencia: El código de programa: ''' || :NEW.CODIGO_PROGRAMA || ''', no existe en la tabla de configuración de la herramienta de clasificación estratégica (HCE)-(TRE_HERRAMIENTA)');		
			END IF;

		END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER DOCUMEN_CLI_ID_DOCUMENTOS_TRG BEFORE
		INSERT ON DOCUMENTOS_CLIENTE FOR EACH ROW
BEGIN SELECT DOCUMENTOS_CLIENTE_SEQ.NEXTVAL into :NEW.ID_DOCUMENTOS From Dual ;
	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CONTACTOS_INS_TGR AFTER
  INSERT ON CONTACTOS_CLIENTE FOR EACH ROW
DECLARE v_id_tbi_cliente NUMBER;
  v_id_cliente         NUMBER;
  v_id_flexcube        VARCHAR2(40);
  v_ejecutivo          VARCHAR2(20);
  v_autorizo           VARCHAR2(20);
  v_id_contacto        NUMBER;
  v_nombre_contacto    VARCHAR2(60);
  v_telefono_contacto  VARCHAR2(20);
  v_correo_contacto    VARCHAR2(40);
  v_fecha_reg_contacto DATE;
  v_cargo_contacto     VARCHAR2(40);

BEGIN
 

    SELECT TBI_CLIENTE_SEQ.NEXTVAL INTO v_id_tbi_cliente FROM DUAL;

    SELECT C.ID_CONTACTO,C.NOMBRE, C.TELEFONO, C.CORREO_ELECTRONICO, C.FECHA_REGISTRO, C.CARGO
    INTO v_id_contacto, v_nombre_contacto, v_telefono_contacto, v_correo_contacto, v_fecha_reg_contacto, v_cargo_contacto
    FROM CONTACTOS C
    WHERE C.ID_CONTACTO = :NEW.ID_CONTACTO;

    SELECT CT.ID_CLIENTE, CT.ID_FLEXCUBE, CT.EJECUTIVO, CT.AUTORIZO
    INTO v_id_cliente,v_id_flexcube,v_ejecutivo, v_autorizo
    FROM CLIENTES CT
    WHERE CT.ID_CLIENTE = :NEW.ID_CLIENTE;

    INSERT INTO TBI_CLIENTE  VALUES(v_id_tbi_cliente,v_id_cliente,v_id_flexcube,'AGREGAR_CONTACTO',v_ejecutivo,SYSDATE,v_autorizo,NULL,NULL);
  
    INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_CONTACTO',v_id_contacto,NULL);
    INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'NOMBRE',v_nombre_contacto,NULL);
    INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'CORREO_ELECTRONICO',v_correo_contacto,NULL);
    INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'CARGO',v_cargo_contacto,NULL);
    INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TELEFONO', v_telefono_contacto,NULL);
    INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_REGISTRO',v_fecha_reg_contacto,NULL);

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CONTACTOS_UPD_TGR 
AFTER UPDATE ON CONTACTOS
FOR EACH ROW
DECLARE 

v_id_tbi_cliente NUMBER;
v_id_cliente     NUMBER;
v_id_flexcube    VARCHAR(40);
v_ejecutivo      VARCHAR2(20);
v_autorizo       VARCHAR2(20);


BEGIN
      
      SELECT CCT.ID_CLIENTE 
      INTO v_id_cliente
      FROM CONTACTOS_CLIENTE CCT
      WHERE CCT.ID_CONTACTO = :NEW.ID_CONTACTO;
      
      SELECT CT.ID_CLIENTE, CT.ID_FLEXCUBE, CT.EJECUTIVO, CT.AUTORIZO 
      INTO v_id_cliente, v_id_flexcube, v_ejecutivo, v_autorizo
      FROM CLIENTES CT
      WHERE CT.ID_CLIENTE = v_id_cliente;
      
      
      SELECT TBI_CLIENTE_SEQ.NEXTVAL INTO v_id_tbi_cliente FROM DUAL;

      INSERT INTO TBI_CLIENTE  VALUES(v_id_tbi_cliente,v_id_cliente,v_id_flexcube,'MODIFICAR_CONTACTO',v_ejecutivo,SYSDATE,v_autorizo,NULL,NULL); 

      IF UPDATING('NOMBRE')THEN  
        INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'NOMBRE',:NEW.NOMBRE,:OLD.NOMBRE);
      END IF;  
      IF UPDATING ('CORREO_ELECTRONICO')THEN
        INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'CORREO_ELECTRONICO',:NEW.CORREO_ELECTRONICO,:OLD.CORREO_ELECTRONICO);
      END IF;  
      IF UPDATING ('CARGO')THEN
        INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'CARGO',:NEW.CARGO,:OLD.CARGO);
      END IF;  
      IF UPDATING ('TELEFONO')THEN
        INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TELEFONO',:NEW.TELEFONO,:OLD.TELEFONO);
      END IF; 
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_PROCESO_BPM_TGR

   BEFORE INSERT 

   ON TCA_PROCESO_BPM

   FOR EACH ROW
BEGIN 

   SELECT TCA_PROCESO_BPM_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL; 

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_ACCION_DOCUMENTO_TGR
   BEFORE INSERT
   ON TCA_ACCION_DOCUMENTO
   FOR EACH ROW
BEGIN
   SELECT TCA_ACCION_DOCUMENTO_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER COMISION_CODIGO_DESEMBOLSO_TGR 
   BEFORE INSERT 

   ON COMISION 

   FOR EACH ROW
BEGIN 

   SELECT CODIGO_DESEMBOLSO_SEQ.NEXTVAL INTO :NEW.CODIGO_DESEMBOLSO FROM DUAL; 

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_SCR_TGR
   BEFORE INSERT
   ON TCA_SCR
   FOR EACH ROW
BEGIN
   SELECT TCA_SCR_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TCA_PERSPECTIVA_TRG
   BEFORE INSERT
   ON TCA_PERSPECTIVA
   FOR EACH ROW
BEGIN
   SELECT TCA_PERSPECTIVA_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_TIPO_PERSONA_TGR
   BEFORE INSERT
   ON CAT_TIPO_PERSONA    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_TIP_PERS_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CLIENTE_UPD_TGR 
	AFTER UPDATE ON CLIENTES FOR EACH ROW
DECLARE 
	v_id_tbi_cliente NUMBER;	
	v_ban_estatus    NUMBER; 

	BEGIN

	  SELECT TBI_CLIENTE_SEQ.NEXTVAL INTO v_id_tbi_cliente FROM DUAL;

	  v_ban_estatus := :NEW.BAN_ESTATUS;

	IF ( v_ban_estatus = 0) THEN

		INSERT INTO TBI_CLIENTE  VALUES(v_id_tbi_cliente,:NEW.ID_CLIENTE,:NEW.ID_FLEXCUBE,'ELIMINAR_CLIENTE',:NEW.EJECUTIVO,SYSDATE,:NEW.AUTORIZO,NULL,NULL); 
		INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'BAN_ESTATUS',:NEW.BAN_ESTATUS,:OLD.BAN_ESTATUS);
	ELSE    

		INSERT INTO TBI_CLIENTE  VALUES(v_id_tbi_cliente,:NEW.ID_CLIENTE,:NEW.ID_FLEXCUBE,'MODIFICAR_CLIENTE',:NEW.EJECUTIVO,SYSDATE,:NEW.AUTORIZO,NULL,NULL); 

	IF UPDATING ('ID_FLEXCUBE') THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES (v_id_tbi_cliente,'ID_FLEXCUBE',:NEW.ID_FLEXCUBE,:OLD.ID_FLEXCUBE);
	END IF;  
	IF UPDATING ('RAZON_SOCIAL')THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'RAZON_SOCIAL',:NEW.RAZON_SOCIAL,:OLD.RAZON_SOCIAL);
	END IF;  
	IF UPDATING('ABREVIATURA')THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ABREVIATURA',:NEW.ABREVIATURA,:OLD.ABREVIATURA);
	END IF;  
	IF UPDATING('TIPO_PERSONA')THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_PERSONA',:NEW.TIPO_PERSONA,:OLD.TIPO_PERSONA);
	END IF;  
	IF UPDATING('TIPO_CLIENTE')THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_CLIENTE',:NEW.TIPO_CLIENTE,:OLD.TIPO_CLIENTE);
	END IF;  
	IF UPDATING('SECTOR')THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'SECTOR',:NEW.SECTOR,:OLD.SECTOR);
	END IF;  
	IF UPDATING('TIPO_INSTITUCION')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_INSTITUCION',:NEW.TIPO_INSTITUCION,:OLD.TIPO_INSTITUCION);
	END IF;  
	IF UPDATING('PAIS')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'PAIS',:NEW.PAIS,:OLD.PAIS);
	END IF;  
	IF UPDATING('GRUPO_ECONOMICO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'GRUPO_ECONOMICO',:NEW.GRUPO_ECONOMICO,:OLD.GRUPO_ECONOMICO);
	END IF;  
	IF UPDATING('TIPO_IDENTIFICACION')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_IDENTIFICACION',:NEW.TIPO_IDENTIFICACION,:OLD.TIPO_IDENTIFICACION);
	END IF;  
	IF UPDATING('NUMERO_IDENTIFICACION')THEN
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'NUMERO_IDENTIFICACION',:NEW.NUMERO_IDENTIFICACION,:OLD.NUMERO_IDENTIFICACION);
	END IF;  
	IF UPDATING('OFICINA')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'OFICINA',:NEW.OFICINA,:OLD.OFICINA);
	END IF;  
	IF UPDATING('FECHA_REGISTRO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO);
	END IF;  
	IF UPDATING('FECHA_APROBACION')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_APROBACION',:NEW.FECHA_APROBACION,:OLD.FECHA_APROBACION);
	END IF;  
	IF UPDATING('EJECUTIVO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'EJECUTIVO',:NEW.EJECUTIVO,:OLD.EJECUTIVO);
	END IF;  
	IF UPDATING('COMENTARIO_APROBACION')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'COMENTARIO_APROBACION',:NEW.COMENTARIO_APROBACION,:OLD.COMENTARIO_APROBACION);
	END IF;  
	IF UPDATING('AUTORIZO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'AUTORIZO',:NEW.AUTORIZO,:OLD.AUTORIZO);
	END IF;  
	IF UPDATING('BAN_ESTATUS')THEN 
	   INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'BAN_ESTATUS',:NEW.BAN_ESTATUS,:OLD.BAN_ESTATUS);
	END IF;  
	IF UPDATING('FECHA_BAJA')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_BAJA',:NEW.FECHA_BAJA,:OLD.FECHA_BAJA);
	END IF;  
	IF UPDATING('DIA_PAGO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'DIA_PAGO',:NEW.DIA_PAGO,:OLD.DIA_PAGO);
	END IF;
	IF UPDATING('ESTA_DETERIORADO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ESTA_DETERIORADO',:NEW.ESTA_DETERIORADO,:OLD.ESTA_DETERIORADO);
	END IF;
	IF UPDATING('ID_TCA_SCR')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_TCA_SCR',:NEW.ID_TCA_SCR,:OLD.ID_TCA_SCR);
	END IF;
	IF UPDATING('ID_TCA_PERSPECTIVA')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_TCA_PERSPECTIVA',:NEW.ID_TCA_PERSPECTIVA,:OLD.ID_TCA_PERSPECTIVA);
	END IF;
	IF UPDATING('REQUIERE_ENVIO_AUTOMATICO')THEN  
	  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'REQUIERE_ENVIO_AUTOMATICO',:NEW.REQUIERE_ENVIO_AUTOMATICO,:OLD.REQUIERE_ENVIO_AUTOMATICO);
	END IF;

	END IF;

	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER SUPERVISION_UPD_TGR 
	AFTER UPDATE ON SUPERVISION FOR EACH ROW
DECLARE 
	v_id_tbi_supervision NUMBER;	
	err_num NUMBER;
	err_msg VARCHAR2(255);

	BEGIN
		IF (:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO IS NOT NULL) 
		THEN

			SELECT TBI_SUPERVISION_SEQ.NEXTVAL INTO v_id_tbi_supervision FROM DUAL;

			INSERT INTO TBI_SUPERVISION (ID, ID_SUPERVISION, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_supervision,:NEW.ID,'MODIFICAR_SUPERVISION',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,SYSDATE);  

			IF UPDATING ('ID_OPERACION') THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'ID_OPERACION',:NEW.ID_OPERACION,:OLD.ID_OPERACION);
			END IF;  
			IF UPDATING ('ID_TCA_SCT')THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'ID_TCA_SCT',:NEW.ID_TCA_SCT,:OLD.ID_TCA_SCT);
			END IF;  
			IF UPDATING('CALIFICACION_FINAL')THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'CALIFICACION_FINAL',:NEW.CALIFICACION_FINAL,:OLD.CALIFICACION_FINAL);
			END IF;  
			IF UPDATING('FECHA_REGISTRO')THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO);
			END IF;  
			IF UPDATING('FECHA_VISITA')THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'FECHA_VISITA',:NEW.FECHA_VISITA,:OLD.FECHA_VISITA);
			END IF;  
			IF UPDATING('FECHA_AVANCE')THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'FECHA_AVANCE',:NEW.FECHA_AVANCE,:OLD.FECHA_AVANCE);
			END IF;  
			IF UPDATING('FECHA_INFORME')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'FECHA_INFORME',:NEW.FECHA_INFORME,:OLD.FECHA_INFORME);
			END IF;  
			IF UPDATING('AVANCE_FISICO')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'AVANCE_FISICO',:NEW.AVANCE_FISICO,:OLD.AVANCE_FISICO);
			END IF;  
			IF UPDATING('AVANCE_FINANCIERO')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'AVANCE_FINANCIERO',:NEW.AVANCE_FINANCIERO,:OLD.AVANCE_FINANCIERO);
			END IF;  
			IF UPDATING('TIPO_ACTUALIZACION')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'TIPO_ACTUALIZACION',:NEW.TIPO_ACTUALIZACION,:OLD.TIPO_ACTUALIZACION);
			END IF;  
			IF UPDATING('ES_PROYECTO_EN_OPERACION')THEN
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'ES_PROYECTO_EN_OPERACION',:NEW.ES_PROYECTO_EN_OPERACION,:OLD.ES_PROYECTO_EN_OPERACION);
			END IF;  
			IF UPDATING('INSTANCIA_PROCESO')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'INSTANCIA_PROCESO',:NEW.INSTANCIA_PROCESO,:OLD.INSTANCIA_PROCESO);
			END IF;  
			IF UPDATING('BAN_ESTATUS')THEN 
			   INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'BAN_ESTATUS',:NEW.BAN_ESTATUS,:OLD.BAN_ESTATUS); 
			END IF;  		
			IF UPDATING('LOGIN_USUARIO')THEN 
			   INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'LOGIN_USUARIO',:NEW.LOGIN_USUARIO,:OLD.LOGIN_USUARIO);
			END IF;  	
			IF UPDATING('NOMBRE_USUARIO')THEN 
			   INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'NOMBRE_USUARIO',:NEW.NOMBRE_USUARIO,:OLD.NOMBRE_USUARIO);
			END IF;  	
			IF UPDATING('LOGIN_USUARIO_ULTIMO_CAMBIO')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'LOGIN_USUARIO_ULTIMO_CAMBIO',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:OLD.LOGIN_USUARIO_ULTIMO_CAMBIO);
			END IF;  
			IF UPDATING('NOMBRE_USUARIO_ULTIMO_CAMBIO')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'NOMBRE_USUARIO_ULTIMO_CAMBIO',:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,:OLD.NOMBRE_USUARIO_ULTIMO_CAMBIO);
			END IF;  
			IF UPDATING('FECHA_ULTIMO_CAMBIO')THEN  
			  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_supervision,'FECHA_ULTIMO_CAMBIO',:NEW.FECHA_ULTIMO_CAMBIO,:OLD.FECHA_ULTIMO_CAMBIO);
			END IF;  
		END IF;

	EXCEPTION
		WHEN OTHERS THEN
			err_num := SQLCODE;
			err_msg := SUBSTR(SQLERRM,1,250);


			DBMS_OUTPUT.put_line('Error al actualizar en la tabla de bitácora de supervisión');		
			DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
			DBMS_OUTPUT.put_line(err_msg);


			INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
			VALUES('TRG','SUPERVISION_UPD_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
			COMMIT;

	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CAT_OFICINA_TGR
   BEFORE INSERT
   ON CAT_OFICINA    FOR EACH ROW
BEGIN
   SELECT FENIX.CAT_OFI_SEQ.NEXTVAL INTO :NEW.ID FROM DUAL;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TERMINO_INS_TGR
AFTER INSERT ON TERMINO
FOR EACH ROW
DECLARE
	v_id_tbi_termino NUMBER;	
	err_num NUMBER;
	err_msg VARCHAR2(255);

BEGIN

	SELECT TBI_TERMINO_SEQ.NEXTVAL INTO v_id_tbi_termino FROM DUAL;

	-- ID_TCA_TERMINO = 1 - T101, 30 - T603

	IF (:NEW.ID_TCA_TERMINO = 1) THEN 
		INSERT INTO TBI_TERMINO(ID, ID_TERMINO, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_termino,:NEW.ID,'AGREGAR TERMINO T101',:NEW.LOGIN_USUARIO,:NEW.NOMBRE_USUARIO,SYSDATE);  
	ELSIF (:NEW.ID_TCA_TERMINO = 30) THEN
		INSERT INTO TBI_TERMINO(ID, ID_TERMINO, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_termino,:NEW.ID,'AGREGAR TERMINO T603',:NEW.LOGIN_USUARIO,:NEW.NOMBRE_USUARIO,SYSDATE);  
	END IF;

	IF (:NEW.ID_TCA_TERMINO = 1) OR (:NEW.ID_TCA_TERMINO = 30)
	THEN 

		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID',:NEW.ID,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_OPERACION',:NEW.ID_OPERACION,NULL);	  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'NOMBRE',:NEW.NOMBRE,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'DESCRIPCION',:NEW.DESCRIPCION,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TERMINO',:NEW.ID_TCA_TERMINO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_FECHA_INICIO',:NEW.ID_TCA_TIPO_FECHA_INICIO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_INICIO',:NEW.FECHA_INICIO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PLAZO',:NEW.PLAZO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_PLAZO',:NEW.ID_TCA_FRECUENCIA_PLAZO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_VENCIMIENTO',:NEW.FECHA_VENCIMIENTO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_MONEDA',:NEW.ID_TCA_MONEDA,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MONTO',:NEW.MONTO,NULL);    
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TASA',:NEW.TASA,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_TASA',:NEW.ID_TCA_TIPO_TASA,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA',:NEW.FECHA,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FRECUENCIA_REVISION',:NEW.FRECUENCIA_REVISION,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_REVISION',:NEW.ID_TCA_FRECUENCIA_REVISION,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_INICIO_REVISION',:NEW.FECHA_INICIO_REVISION,NULL); 
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FRECUENCIA_PAGO_INTERES',:NEW.FRECUENCIA_PAGO_INTERES,NULL);  	  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_PAGO_INTERES',:NEW.ID_TCA_FRECUENCIA_PAGO_INTERES,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_INICIO_PAGO_INTERES',:NEW.FECHA_INICIO_PAGO_INTERES,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FRECUENCIA_AMORTIZACION',:NEW.FRECUENCIA_AMORTIZACION,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_AMORTIZACION',:NEW.ID_TCA_FRECUENCIA_AMORTIZACION,NULL); 
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MORA',:NEW.MORA,NULL);  	  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_COBERTURA',:NEW.PORCENTAJE_COBERTURA,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'SE_APLICAN_RECURSOS_CONCESION',:NEW.SE_APLICAN_RECURSOS_CONCESION,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'SE_APLICAN_RECURSOS_EXTERNOS',:NEW.SE_APLICAN_RECURSOS_EXTERNOS,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TIPO_CONTRAPARTE',:NEW.TIPO_CONTRAPARTE,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MONTO_MINIMO_DESEMBOLSO',:NEW.MONTO_MINIMO_DESEMBOLSO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MONTO_MAXIMO_DESEMBOLSO',:NEW.MONTO_MAXIMO_DESEMBOLSO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TASA_MINIMA_DESEMBOLSO',:NEW.TASA_MINIMA_DESEMBOLSO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TASA_MAXIMA_DESEMBOLSO',:NEW.TASA_MAXIMA_DESEMBOLSO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_ESTADO_TCC',:NEW.ID_TCA_ESTADO_TCC,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_SUB_ESTADO_TCC',:NEW.ID_TCA_SUB_ESTADO_TCC,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'BAN_ESTATUS',:NEW.BAN_ESTATUS,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TERMINO_ENMENDADO',:NEW.ID_TERMINO_ENMENDADO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_ENMIENDA',:NEW.FECHA_ENMIENDA,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'CLIENTE_GESTIONA_CONTRATACION',:NEW.CLIENTE_GESTIONA_CONTRATACION,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'REQUIERE_FONDO_PRESUPUESTARIO',:NEW.REQUIERE_FONDO_PRESUPUESTARIO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'REQ_FORMALIZACION_AUTOMATICA',:NEW.REQ_FORMALIZACION_AUTOMATICA,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'REQUIERE_ORDEN_INICIO',:NEW.REQUIERE_ORDEN_INICIO,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_MODIFICACION',:NEW.PORCENTAJE_MODIFICACION,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_AVANCE',:NEW.ID_TCA_TIPO_AVANCE,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_PORCENTAJE',:NEW.ID_TCA_TIPO_PORCENTAJE,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE',:NEW.PORCENTAJE,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_INICIAL',:NEW.PORCENTAJE_INICIAL,NULL);  
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_FINAL',:NEW.PORCENTAJE_FINAL,NULL);  		
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'LOGIN_USUARIO',:NEW.LOGIN_USUARIO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'NOMBRE_USUARIO',:NEW.NOMBRE_USUARIO,NULL);		
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'LOGIN_USUARIO_ULTIMO_CAMBIO',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'NOMBRE_USUARIO_ULTIMO_CAMBIO',:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,NULL);
		INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_ULTIMO_CAMBIO',:NEW.FECHA_ULTIMO_CAMBIO,NULL);
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);


		DBMS_OUTPUT.put_line('Error al insertar en la tabla de bitácora de término');
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);

        INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','TERMINO_INS_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER TERMINO_UPD_TGR
AFTER UPDATE ON TERMINO
FOR EACH ROW
DECLARE
	v_id_tbi_termino NUMBER;	
	err_num NUMBER;
	err_msg VARCHAR2(255);

BEGIN

	SELECT TBI_TERMINO_SEQ.NEXTVAL INTO v_id_tbi_termino FROM DUAL;

	-- ID_TCA_TERMINO = 1 - T101, 30 - T603

	IF (:NEW.ID_TCA_TERMINO = 1) 	THEN 
		INSERT INTO TBI_TERMINO(ID, ID_TERMINO, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_termino,:NEW.ID,'MODIFICAR TERMINO T101',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,SYSDATE);  
	ELSIF (:NEW.ID_TCA_TERMINO = 30) THEN
		INSERT INTO TBI_TERMINO(ID, ID_TERMINO, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_termino,:NEW.ID,'MODIFICAR TERMINO T603',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,SYSDATE);  
	END IF;

	IF (:NEW.ID_TCA_TERMINO = 1) OR (:NEW.ID_TCA_TERMINO = 30)
	THEN 

		IF UPDATING ('ID_OPERACION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_OPERACION',:NEW.ID_OPERACION,:OLD.ID_OPERACION);	  
		END IF;
		IF UPDATING ('NOMBRE') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'NOMBRE',:NEW.NOMBRE,:OLD.NOMBRE);
		END IF;	
		IF UPDATING ('DESCRIPCION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'DESCRIPCION',:NEW.DESCRIPCION,:OLD.DESCRIPCION);
		END IF;
		IF UPDATING ('ID_TCA_TERMINO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TERMINO',:NEW.ID_TCA_TERMINO,:OLD.ID_TCA_TERMINO);
		END IF;
		IF UPDATING ('ID_TCA_TIPO_FECHA_INICIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_FECHA_INICIO',:NEW.ID_TCA_TIPO_FECHA_INICIO,:OLD.ID_TCA_TIPO_FECHA_INICIO);
		END IF;
		IF UPDATING ('FECHA_INICIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_INICIO',:NEW.FECHA_INICIO,:OLD.FECHA_INICIO);
		END IF;
		IF UPDATING ('PLAZO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PLAZO',:NEW.PLAZO,:OLD.PLAZO);
		END IF;
		IF UPDATING ('ID_TCA_FRECUENCIA_PLAZO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_PLAZO',:NEW.ID_TCA_FRECUENCIA_PLAZO,:OLD.ID_TCA_FRECUENCIA_PLAZO);  
		END IF;
		IF UPDATING ('FECHA_VENCIMIENTO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_VENCIMIENTO',:NEW.FECHA_VENCIMIENTO,:OLD.FECHA_VENCIMIENTO);  
		END IF;
		IF UPDATING ('ID_TCA_MONEDA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_MONEDA',:NEW.ID_TCA_MONEDA,:OLD.ID_TCA_MONEDA);  
		END IF;
		IF UPDATING ('MONTO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MONTO',:NEW.MONTO,:OLD.MONTO);    
		END IF;
		IF UPDATING ('TASA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TASA',:NEW.TASA,:OLD.TASA);
		END IF;
		IF UPDATING ('ID_TCA_TIPO_TASA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_TASA',:NEW.ID_TCA_TIPO_TASA,:OLD.ID_TCA_TIPO_TASA);
		END IF;
		IF UPDATING ('FECHA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA',:NEW.FECHA,:OLD.FECHA);  
		END IF;
		IF UPDATING ('FRECUENCIA_REVISION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FRECUENCIA_REVISION',:NEW.FRECUENCIA_REVISION,:OLD.FRECUENCIA_REVISION);  
		END IF;
		IF UPDATING ('ID_TCA_FRECUENCIA_REVISION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_REVISION',:NEW.ID_TCA_FRECUENCIA_REVISION,:OLD.ID_TCA_FRECUENCIA_REVISION);  
		END IF;        
		IF UPDATING ('FECHA_INICIO_REVISION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_INICIO_REVISION',:NEW.FECHA_INICIO_REVISION,:OLD.FECHA_INICIO_REVISION); 
		END IF;        
		IF UPDATING ('FRECUENCIA_PAGO_INTERES') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FRECUENCIA_PAGO_INTERES',:NEW.FRECUENCIA_PAGO_INTERES,:OLD.FRECUENCIA_PAGO_INTERES);  	  
		END IF;
		IF UPDATING ('ID_TCA_FRECUENCIA_PAGO_INTERES') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_PAGO_INTERES',:NEW.ID_TCA_FRECUENCIA_PAGO_INTERES,:OLD.ID_TCA_FRECUENCIA_PAGO_INTERES);  
		END IF;
		IF UPDATING ('FECHA_INICIO_PAGO_INTERES') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_INICIO_PAGO_INTERES',:NEW.FECHA_INICIO_PAGO_INTERES,:OLD.FECHA_INICIO_PAGO_INTERES);  
		END IF;
		IF UPDATING ('FRECUENCIA_AMORTIZACION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FRECUENCIA_AMORTIZACION',:NEW.FRECUENCIA_AMORTIZACION,:OLD.FRECUENCIA_AMORTIZACION);  
		END IF;
		IF UPDATING ('ID_TCA_FRECUENCIA_AMORTIZACION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_FRECUENCIA_AMORTIZACION',:NEW.ID_TCA_FRECUENCIA_AMORTIZACION,:OLD.ID_TCA_FRECUENCIA_AMORTIZACION); 
		END IF;
		IF UPDATING ('MORA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MORA',:NEW.MORA,:OLD.MORA);  	  
		END IF;
		IF UPDATING ('PORCENTAJE_COBERTURA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_COBERTURA',:NEW.PORCENTAJE_COBERTURA,:OLD.PORCENTAJE_COBERTURA);  
		END IF;
		IF UPDATING ('SE_APLICAN_RECURSOS_CONCESION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'SE_APLICAN_RECURSOS_CONCESION',:NEW.SE_APLICAN_RECURSOS_CONCESION,:OLD.SE_APLICAN_RECURSOS_CONCESION);  
		END IF;
		IF UPDATING ('SE_APLICAN_RECURSOS_EXTERNOS') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'SE_APLICAN_RECURSOS_EXTERNOS',:NEW.SE_APLICAN_RECURSOS_EXTERNOS,:OLD.SE_APLICAN_RECURSOS_EXTERNOS);  
		END IF;
		IF UPDATING ('TIPO_CONTRAPARTE') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TIPO_CONTRAPARTE',:NEW.TIPO_CONTRAPARTE,:OLD.TIPO_CONTRAPARTE);  
		END IF;
		IF UPDATING ('MONTO_MINIMO_DESEMBOLSO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MONTO_MINIMO_DESEMBOLSO',:NEW.MONTO_MINIMO_DESEMBOLSO,:OLD.MONTO_MINIMO_DESEMBOLSO);  
		END IF;
		IF UPDATING ('MONTO_MAXIMO_DESEMBOLSO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'MONTO_MAXIMO_DESEMBOLSO',:NEW.MONTO_MAXIMO_DESEMBOLSO,:OLD.MONTO_MAXIMO_DESEMBOLSO);  
		END IF;
		IF UPDATING ('TASA_MINIMA_DESEMBOLSO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TASA_MINIMA_DESEMBOLSO',:NEW.TASA_MINIMA_DESEMBOLSO,:OLD.TASA_MINIMA_DESEMBOLSO);  
		END IF;
		IF UPDATING ('TASA_MAXIMA_DESEMBOLSO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'TASA_MAXIMA_DESEMBOLSO',:NEW.TASA_MAXIMA_DESEMBOLSO,:OLD.TASA_MAXIMA_DESEMBOLSO);  
		END IF;
		IF UPDATING ('ID_TCA_ESTADO_TCC') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_ESTADO_TCC',:NEW.ID_TCA_ESTADO_TCC,:OLD.ID_TCA_ESTADO_TCC);  
		END IF;
		IF UPDATING ('ID_TCA_SUB_ESTADO_TCC') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_SUB_ESTADO_TCC',:NEW.ID_TCA_SUB_ESTADO_TCC,:OLD.ID_TCA_SUB_ESTADO_TCC);  
		END IF;
		IF UPDATING ('FECHA_REGISTRO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO);  
		END IF;
		IF UPDATING ('BAN_ESTATUS') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'BAN_ESTATUS',:NEW.BAN_ESTATUS,:OLD.BAN_ESTATUS);  
		END IF;
		IF UPDATING ('ID_TERMINO_ENMENDADO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TERMINO_ENMENDADO',:NEW.ID_TERMINO_ENMENDADO,:OLD.ID_TERMINO_ENMENDADO);  
		END IF;
		IF UPDATING ('FECHA_ENMIENDA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_ENMIENDA',:NEW.FECHA_ENMIENDA,:OLD.FECHA_ENMIENDA);  
		END IF;
		IF UPDATING ('CLIENTE_GESTIONA_CONTRATACION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'CLIENTE_GESTIONA_CONTRATACION',:NEW.CLIENTE_GESTIONA_CONTRATACION,:OLD.CLIENTE_GESTIONA_CONTRATACION);  
		END IF;
		IF UPDATING ('REQUIERE_FONDO_PRESUPUESTARIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'REQUIERE_FONDO_PRESUPUESTARIO',:NEW.REQUIERE_FONDO_PRESUPUESTARIO,:OLD.REQUIERE_FONDO_PRESUPUESTARIO);  
		END IF;
		IF UPDATING ('REQ_FORMALIZACION_AUTOMATICA') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'REQ_FORMALIZACION_AUTOMATICA',:NEW.REQ_FORMALIZACION_AUTOMATICA,:OLD.REQ_FORMALIZACION_AUTOMATICA);  
		END IF;
		IF UPDATING ('REQUIERE_ORDEN_INICIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'REQUIERE_ORDEN_INICIO',:NEW.REQUIERE_ORDEN_INICIO,:OLD.REQUIERE_ORDEN_INICIO);  
		END IF;
		IF UPDATING ('PORCENTAJE_MODIFICACION') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_MODIFICACION',:NEW.PORCENTAJE_MODIFICACION,:OLD.PORCENTAJE_MODIFICACION);  
		END IF;
		IF UPDATING ('ID_TCA_TIPO_AVANCE') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_AVANCE',:NEW.ID_TCA_TIPO_AVANCE,:OLD.ID_TCA_TIPO_AVANCE);  
		END IF;
		IF UPDATING ('ID_TCA_TIPO_PORCENTAJE') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'ID_TCA_TIPO_PORCENTAJE',:NEW.ID_TCA_TIPO_PORCENTAJE,:OLD.ID_TCA_TIPO_PORCENTAJE);  
		END IF;
		IF UPDATING ('PORCENTAJE') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE',:NEW.PORCENTAJE,:OLD.PORCENTAJE);  
		END IF;
		IF UPDATING ('PORCENTAJE_INICIAL') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_INICIAL',:NEW.PORCENTAJE_INICIAL,:OLD.PORCENTAJE_INICIAL);  
		END IF;
		IF UPDATING ('PORCENTAJE_FINAL') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'PORCENTAJE_FINAL',:NEW.PORCENTAJE_FINAL,:OLD.PORCENTAJE_FINAL);  
		END IF;
		IF UPDATING ('LOGIN_USUARIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'LOGIN_USUARIO',:NEW.LOGIN_USUARIO,:OLD.LOGIN_USUARIO);
		END IF;
		IF UPDATING ('NOMBRE_USUARIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'NOMBRE_USUARIO',:NEW.NOMBRE_USUARIO,:OLD.NOMBRE_USUARIO);		
		END IF;		
		IF UPDATING ('LOGIN_USUARIO_ULTIMO_CAMBIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'LOGIN_USUARIO_ULTIMO_CAMBIO',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:OLD.LOGIN_USUARIO_ULTIMO_CAMBIO);
		END IF;
		IF UPDATING ('NOMBRE_USUARIO_ULTIMO_CAMBIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'NOMBRE_USUARIO_ULTIMO_CAMBIO',:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,:OLD.NOMBRE_USUARIO_ULTIMO_CAMBIO);
		END IF;
		IF UPDATING ('FECHA_ULTIMO_CAMBIO') THEN
			INSERT INTO TBI_TERMINO_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_termino,'FECHA_ULTIMO_CAMBIO',:NEW.FECHA_ULTIMO_CAMBIO,:OLD.FECHA_ULTIMO_CAMBIO);
		END IF;
	END IF;

EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);

		DBMS_OUTPUT.put_line('Error al actualizar en la tabla de bitácora de término');
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);

		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','TERMINO_UPD_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;

END;
/
SHOW ERRORS;



CREATE OR REPLACE TRIGGER SEGUIMIENTO_CRED_UPD_TGR 
	AFTER UPDATE ON SEGUIMIENTO_CREDITICIO FOR EACH ROW
DECLARE 
	v_id_tbi_seg_cred NUMBER;	
	err_num NUMBER;   
	err_msg VARCHAR2(255);

BEGIN        

		SELECT TBI_SEGUIMIENTO_CRED_SEQ.NEXTVAL INTO v_id_tbi_seg_cred FROM DUAL;

		INSERT INTO TBI_SEGUIMIENTO_CREDITICIO (ID, ID_SEGUIMIENTO, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_seg_cred,:NEW.ID,'MODIFICAR_SEGUIMIENTO', :NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,SYSDATE);  


		IF UPDATING ('ID_CLIENTE') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_CLIENTE',:NEW.ID_CLIENTE,:OLD.ID_CLIENTE);
		END IF;  
		IF UPDATING ('TIPO_INICIO') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'TIPO_INICIO',:NEW.TIPO_INICIO,:OLD.TIPO_INICIO);
		END IF;  
		IF UPDATING ('TIPO_REVISION') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'TIPO_REVISION',:NEW.TIPO_REVISION,:OLD.TIPO_REVISION);
		END IF;  
		IF UPDATING ('ID_TCA_SCR') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_TCA_SCR',:NEW.ID_TCA_SCR,:OLD.ID_TCA_SCR);
		END IF;  
		IF UPDATING ('ID_TCA_ESTADO_SCR') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_TCA_ESTADO_SCR',:NEW.ID_TCA_ESTADO_SCR,:OLD.ID_TCA_ESTADO_SCR);
		END IF;  
		IF UPDATING ('ID_TCA_PERSPECTIVA') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_TCA_PERSPECTIVA',:NEW.ID_TCA_PERSPECTIVA,:OLD.ID_TCA_PERSPECTIVA);
		END IF;  
		IF UPDATING ('ES_CALIFICACION_DIVIDIDA') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ES_CALIFICACION_DIVIDIDA',:NEW.ES_CALIFICACION_DIVIDIDA,:OLD.ES_CALIFICACION_DIVIDIDA);
		END IF;  
		IF UPDATING ('FECHA_APROBADO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'FECHA_APROBADO',:NEW.FECHA_APROBADO,:OLD.FECHA_APROBADO);
		END IF;  
		IF UPDATING ('INSTANCIA_PROCESO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'INSTANCIA_PROCESO',:NEW.INSTANCIA_PROCESO,:OLD.INSTANCIA_PROCESO);
		END IF;  
		IF UPDATING ('LOGIN_USUARIO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'LOGIN_USUARIO',:NEW.LOGIN_USUARIO,:OLD.LOGIN_USUARIO);
		END IF;  
		IF UPDATING ('NOMBRE_USUARIO') THEN
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'NOMBRE_USUARIO',:NEW.NOMBRE_USUARIO,:OLD.NOMBRE_USUARIO);
		END IF;  
		IF UPDATING ('FECHA_REGISTRO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,:OLD.FECHA_REGISTRO);
		END IF;  
		IF UPDATING ('BAN_ESTATUS') THEN 
		   INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'BAN_ESTATUS',:NEW.BAN_ESTATUS,:OLD.BAN_ESTATUS);
		END IF;  
		IF UPDATING ('ID_FLUJO') THEN 
		   INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_FLUJO',:NEW.ID_FLUJO,:OLD.ID_FLUJO);
		END IF;  	
		IF UPDATING ('LOGIN_USUARIO_ULTIMO_CAMBIO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'LOGIN_USUARIO_ULTIMO_CAMBIO',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,:OLD.LOGIN_USUARIO_ULTIMO_CAMBIO);
		END IF;  
		IF UPDATING ('NOMBRE_USUARIO_ULTIMO_CAMBIO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'NOMBRE_USUARIO_ULTIMO_CAMBIO',:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,:OLD.NOMBRE_USUARIO_ULTIMO_CAMBIO);
		END IF;  
		IF UPDATING ('FECHA_ULTIMO_CAMBIO') THEN  
		  INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'FECHA_ULTIMO_CAMBIO',:NEW.FECHA_ULTIMO_CAMBIO,:OLD.FECHA_ULTIMO_CAMBIO);
		END IF;  


EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);


		DBMS_OUTPUT.put_line('Error al actualizar en la tabla de bitácora de seguimiento crediticio.');		
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);


		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','SEGUIMIENTO_CRED_UPD_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER SUPERVISION_INS_TGR
AFTER INSERT ON SUPERVISION FOR EACH ROW
DECLARE
	v_id_tbi_supervision NUMBER;
	err_num NUMBER;
	err_msg VARCHAR2(255);

BEGIN

  SELECT TBI_SUPERVISION_SEQ.NEXTVAL INTO v_id_tbi_supervision FROM DUAL;

  INSERT INTO TBI_SUPERVISION (ID, ID_SUPERVISION, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES (v_id_tbi_supervision,:NEW.ID,'AGREGAR_SUPERVISION',:NEW.LOGIN_USUARIO,:NEW.NOMBRE_USUARIO,SYSDATE);  

  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'ID',:NEW.ID,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'ID_OPERACION',:NEW.ID_OPERACION,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'ID_TCA_SCT',:NEW.ID_TCA_SCT,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'CALIFICACION_FINAL',:NEW.CALIFICACION_FINAL,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'FECHA_VISITA',:NEW.FECHA_VISITA,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'FECHA_AVANCE',:NEW.FECHA_AVANCE,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'FECHA_INFORME',:NEW.FECHA_INFORME,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'AVANCE_FISICO',:NEW.AVANCE_FISICO,NULL);  
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'AVANCE_FINANCIERO',:NEW.AVANCE_FINANCIERO,NULL);  
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'TIPO_ACTUALIZACION',:NEW.TIPO_ACTUALIZACION,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'ES_PROYECTO_EN_OPERACION',:NEW.ES_PROYECTO_EN_OPERACION,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'INSTANCIA_PROCESO',:NEW.INSTANCIA_PROCESO,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'BAN_ESTATUS',:NEW.BAN_ESTATUS,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'LOGIN_USUARIO',:NEW.LOGIN_USUARIO,NULL);  
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'NOMBRE_USUARIO',:NEW.NOMBRE_USUARIO,NULL);    
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'LOGIN_USUARIO_ULTIMO_CAMBIO',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,NULL);   
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'NOMBRE_USUARIO_ULTIMO_CAMBIO',:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,NULL);
  INSERT INTO TBI_SUPERVISION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_supervision,'FECHA_ULTIMO_CAMBIO',:NEW.FECHA_ULTIMO_CAMBIO,NULL);


EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);


		DBMS_OUTPUT.put_line('Error al insertar en la tabla de bitácora de supervisión');		
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);


		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','SUPERVISION_INS_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER OPERACION_INS_TGR
AFTER INSERT ON OPERACION FOR EACH ROW
DECLARE
	v_id_tbi_operacion NUMBER;
	err_num NUMBER;
	err_msg VARCHAR2(255);
BEGIN

  SELECT TBI_OPERACION_SEQ.NEXTVAL INTO v_id_tbi_operacion FROM DUAL;

  INSERT INTO TBI_OPERACION (ID, ID_OPERACION, TIPO_ACCION, FECHA_REGISTRO) VALUES (v_id_tbi_operacion,:NEW.ID_OPERACION,'AGREGAR_OPERACION', SYSDATE);  

  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ID_OPERACION',:NEW.ID_OPERACION,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'USUARIO',:NEW.USUARIO,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'NOMBRE',:NEW.NOMBRE,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ID_CLIENTE',:NEW.ID_CLIENTE,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ID_PRODUCTO',:NEW.ID_PRODUCTO,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'FECHA_INICIO',:NEW.FECHA_INICIO,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'SCR',:NEW.SCR,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'SCR_ESTATUS',:NEW.SCR_ESTATUS,NULL);  
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ETAPA',:NEW.ETAPA,NULL);
  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ESTADO',:NEW.ESTADO,NULL);

EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);


		DBMS_OUTPUT.put_line('Error al insertar en la tabla de bitácora de operación');
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);


		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','OPERACION_INS_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;
END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER CLIENTE_INS_TGR
AFTER INSERT ON CLIENTES FOR EACH ROW
DECLARE
  v_id_tbi_cliente NUMBER;

BEGIN

  SELECT TBI_CLIENTE_SEQ.NEXTVAL INTO v_id_tbi_cliente FROM DUAL;

  INSERT INTO TBI_CLIENTE  VALUES(v_id_tbi_cliente,:NEW.ID_CLIENTE,:NEW.ID_FLEXCUBE,'AGREGAR_CLIENTE',:NEW.EJECUTIVO,SYSDATE,:NEW.AUTORIZO,NULL,NULL);  

  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_CLIENTE',:NEW.ID_CLIENTE,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_FLEXCUBE',:NEW.ID_FLEXCUBE,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'RAZON_SOCIAL',:NEW.RAZON_SOCIAL,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ABREVIATURA',:NEW.ABREVIATURA,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_PERSONA',:NEW.TIPO_PERSONA,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_CLIENTE',:NEW.TIPO_CLIENTE,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'SECTOR',:NEW.SECTOR,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_INSTITUCION',:NEW.TIPO_INSTITUCION,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'PAIS',:NEW.PAIS,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'GRUPO_ECONOMICO',:NEW.GRUPO_ECONOMICO,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'TIPO_IDENTIFICACION',:NEW.TIPO_IDENTIFICACION,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'NUMERO_IDENTIFICACION',:NEW.NUMERO_IDENTIFICACION,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'OFICINA',:NEW.OFICINA,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_APROBACION',:NEW.FECHA_APROBACION,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'EJECUTIVO',:NEW.EJECUTIVO,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'COMENTARIO_APROBACION',:NEW.COMENTARIO_APROBACION,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'AUTORIZO',:NEW.AUTORIZO,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'BAN_ESTATUS',:NEW.BAN_ESTATUS,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'FECHA_BAJA',:NEW.FECHA_BAJA,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'DIA_PAGO',:NEW.DIA_PAGO,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ESTA_DETERIORADO',:NEW.ESTA_DETERIORADO,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_TCA_SCR',:NEW.ID_TCA_SCR,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'ID_TCA_PERSPECTIVA',:NEW.ID_TCA_PERSPECTIVA,NULL);
  INSERT INTO TBI_CLIENTE_CAMPO VALUES(v_id_tbi_cliente,'REQUIERE_ENVIO_AUTOMATICO',:NEW.REQUIERE_ENVIO_AUTOMATICO,NULL);

END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER SEGUIMIENTO_CRED_INS_TGR
AFTER INSERT ON SEGUIMIENTO_CREDITICIO FOR EACH ROW
DECLARE
	v_id_tbi_seg_cred NUMBER;
  	err_num NUMBER;
	err_msg VARCHAR2(255);

BEGIN

	SELECT TBI_SEGUIMIENTO_CRED_SEQ.NEXTVAL INTO v_id_tbi_seg_cred FROM DUAL;

	INSERT INTO TBI_SEGUIMIENTO_CREDITICIO(ID, ID_SEGUIMIENTO, TIPO_ACCION, LOGIN_SOLICITANTE, NOMBRE_SOLICITANTE, FECHA_REGISTRO) VALUES(v_id_tbi_seg_cred,:NEW.ID,'AGREGAR_SEGUIMIENTO',:NEW.LOGIN_USUARIO,:NEW.NOMBRE_USUARIO,SYSDATE);  

	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID',:NEW.ID,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_CLIENTE',:NEW.ID_CLIENTE,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'TIPO_INICIO',:NEW.TIPO_INICIO,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'TIPO_REVISION',:NEW.TIPO_REVISION,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_TCA_SCR',:NEW.ID_TCA_SCR,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_TCA_ESTADO_SCR',:NEW.ID_TCA_ESTADO_SCR,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_TCA_PERSPECTIVA',:NEW.ID_TCA_PERSPECTIVA,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ES_CALIFICACION_DIVIDIDA',:NEW.ES_CALIFICACION_DIVIDIDA,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'FECHA_APROBADO',:NEW.FECHA_APROBADO,NULL);  
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'INSTANCIA_PROCESO',:NEW.INSTANCIA_PROCESO,NULL);  
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'LOGIN_USUARIO',:NEW.LOGIN_USUARIO,NULL);  
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'NOMBRE_USUARIO',:NEW.NOMBRE_USUARIO,NULL);    
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'FECHA_REGISTRO',:NEW.FECHA_REGISTRO,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'BAN_ESTATUS',:NEW.BAN_ESTATUS,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'ID_FLUJO',:NEW.ID_FLUJO,NULL);  
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'LOGIN_USUARIO_ULTIMO_CAMBIO',:NEW.LOGIN_USUARIO_ULTIMO_CAMBIO,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'NOMBRE_USUARIO_ULTIMO_CAMBIO',:NEW.NOMBRE_USUARIO_ULTIMO_CAMBIO,NULL);
	INSERT INTO TBI_SEGUIMIENTO_CRED_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_seg_cred,'FECHA_ULTIMO_CAMBIO',:NEW.FECHA_ULTIMO_CAMBIO,NULL);

EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);


		DBMS_OUTPUT.put_line('Error al insertar en la tabla de bitácora de seguimiento crediticio.');		
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);


		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','SEGUIMIENTO_CRED_INS_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;


END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER SEGUIMIENTO_CRED_DEL_TGR 
AFTER DELETE ON SEGUIMIENTO_CREDITICIO FOR EACH ROW
DECLARE 
	err_num NUMBER;   
	err_msg VARCHAR2(255);

	BEGIN		
		DELETE FROM TBI_SEGUIMIENTO_CRED_CAMPO WHERE ID_BITACORA IN (SELECT ID FROM TBI_SEGUIMIENTO_CREDITICIO WHERE ID_SEGUIMIENTO = :OLD.ID);
		DELETE FROM TBI_SEGUIMIENTO_CREDITICIO WHERE ID_SEGUIMIENTO = :OLD.ID;

	EXCEPTION
		WHEN OTHERS THEN
			err_num := SQLCODE;
			err_msg := SUBSTR(SQLERRM,1,250);


			DBMS_OUTPUT.put_line('Error al borrar en la tabla de bitácora de seguimiento crediticio.');		
			DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
			DBMS_OUTPUT.put_line(err_msg);


			INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
			VALUES('TRG','SEGUIMIENTO_CRED_DEL_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
			COMMIT;


	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER SUPERVISION_DEL_TGR 
AFTER DELETE ON SUPERVISION FOR EACH ROW
DECLARE 
	err_num NUMBER;   
	err_msg VARCHAR2(255);

	BEGIN		
		DELETE FROM TBI_SUPERVISION_CAMPO WHERE ID_BITACORA IN  (SELECT ID FROM TBI_SUPERVISION WHERE ID_SUPERVISION = :OLD.ID);
		DELETE FROM TBI_SUPERVISION WHERE ID_SUPERVISION = :OLD.ID;

	EXCEPTION
		WHEN OTHERS THEN
			err_num := SQLCODE;
			err_msg := SUBSTR(SQLERRM,1,250);


			DBMS_OUTPUT.put_line('Error al borrar en la tabla de bitácora de supervisión');		
			DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
			DBMS_OUTPUT.put_line(err_msg);


			INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
			VALUES('TRG','SUPERVISION_DEL_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
			COMMIT;

	END;
/
SHOW ERRORS;


CREATE OR REPLACE TRIGGER OPERACION_UPD_TGR 
	AFTER UPDATE ON OPERACION FOR EACH ROW
DECLARE 
	v_id_tbi_operacion NUMBER;	
	err_num NUMBER;
	err_msg VARCHAR2(255);

	BEGIN

		SELECT TBI_OPERACION_SEQ.NEXTVAL INTO v_id_tbi_operacion FROM DUAL;	  

		INSERT INTO TBI_OPERACION (ID, ID_OPERACION, TIPO_ACCION, FECHA_REGISTRO) VALUES (v_id_tbi_operacion, :NEW.ID_OPERACION, 'MODIFICAR_OPERACION', SYSDATE);  

		IF UPDATING ('USUARIO') THEN
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'USUARIO',:NEW.USUARIO,:OLD.USUARIO);
		END IF;  
		IF UPDATING ('NOMBRE')THEN
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_operacion,'NOMBRE',:NEW.NOMBRE,:OLD.NOMBRE);
		END IF;  
		IF UPDATING('ID_CLIENTE')THEN
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_operacion,'ID_CLIENTE',:NEW.ID_CLIENTE,:OLD.ID_CLIENTE);
		END IF;  
		IF UPDATING('ID_PRODUCTO')THEN
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_operacion,'ID_PRODUCTO',:NEW.ID_PRODUCTO,:OLD.ID_PRODUCTO);
		END IF;  
		IF UPDATING('FECHA_INICIO')THEN
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_operacion,'FECHA_INICIO',:NEW.FECHA_INICIO,:OLD.FECHA_INICIO);
		END IF;  
		IF UPDATING('SCR')THEN
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_operacion,'SCR',:NEW.SCR,:OLD.SCR);
		END IF;  
		IF UPDATING('SCR_ESTATUS')THEN  
		  INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES(v_id_tbi_operacion,'SCR_ESTATUS',:NEW.SCR_ESTATUS,:OLD.SCR_ESTATUS);
		END IF;
		IF UPDATING('ETAPA')THEN  
			INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ETAPA',:NEW.ETAPA,:OLD.ETAPA);
		END IF;
		IF UPDATING('ESTADO')THEN  
			INSERT INTO TBI_OPERACION_CAMPO (ID_BITACORA, CAMPO, VALOR_NUEVO, VALOR_ANTERIOR) VALUES (v_id_tbi_operacion,'ESTADO',:NEW.ESTADO,:OLD.ESTADO);
		END IF;


	EXCEPTION
	WHEN OTHERS THEN
		err_num := SQLCODE;
		err_msg := SUBSTR(SQLERRM,1,250);


		DBMS_OUTPUT.put_line('Error al actualizar en la tabla de bitácora de operación');
		DBMS_OUTPUT.put_line('Error: '||TO_CHAR(err_num));
		DBMS_OUTPUT.put_line(err_msg);


		INSERT INTO TBI_SEGUIMIENTO_ERROR (TIPO_INSUMO,NOMBRE_INSUMO,DESCRIPCION_ERROR,FECHA_REGISTRO)
		VALUES('TRG','OPERACION_UPD_TGR','Error: '||TO_CHAR(err_num)||' '|| err_msg,TO_DATE(SYSDATE,'DD-MM-YYYY HH24:MI:SS'));
		COMMIT;

	END;
/
SHOW ERRORS;