create or replace PROCEDURE P_UPSERT_TRANSACCION_CONDICION 
(
  P_ID_OPERACION IN NUMBER 
, P_ID_SOLICITUD IN NUMBER 
, P_ID_CONTRATO_DESEMBOLSO IN NUMBER 
, P_ID_CONDICION IN T_NUMBER_TAB 
, P_ID_TCA_ESTADO_TCC IN NUMBER
, P_ID_TCA_EVENTO_CONDICION IN NUMBER
, P_AGRUPADOR IN OUT NUMBER
, P_BAN_ESTATUS IN NUMBER
, P_ID_TCA_SUB_ESTADO_TCC IN NUMBER
, P_EN_PROCESO IN NUMBER
, P_CODIGO OUT VARCHAR2 
, P_MENSAJE OUT VARCHAR2 
) IS

V_ID_TRE_TRANSACCION_CONDICION NUMBER;
V_AGRUPADOR NUMBER;
V_ESTATUS NUMBER;
V_EN_PROCESO NUMBER;
V_AGRUPADOR_CONDICION_ACTUAL TRE_TRANSACCION_CONDICION%ROWTYPE;
RECORDSET SYS_REFCURSOR;

BEGIN
  
  IF P_AGRUPADOR IS NULL AND P_ID_CONDICION.COUNT > 0 THEN
  
    SELECT AGRUPADOR_SEQ.NEXTVAL INTO V_AGRUPADOR FROM DUAL;
    V_ESTATUS := 1;
    V_EN_PROCESO := 1;
    
    FOR IND IN 1 .. P_ID_CONDICION.COUNT 
    LOOP
      SELECT TRE_TRANSACCION_CONDICION_SEQ.NEXTVAL INTO V_ID_TRE_TRANSACCION_CONDICION FROM DUAL;
    
      INSERT INTO TRE_TRANSACCION_CONDICION
      VALUES(
        V_ID_TRE_TRANSACCION_CONDICION,
        P_ID_OPERACION, 
        P_ID_SOLICITUD, 
        P_ID_CONTRATO_DESEMBOLSO, 
        P_ID_CONDICION(IND), 
        P_ID_TCA_ESTADO_TCC,
        P_ID_TCA_EVENTO_CONDICION,
        V_AGRUPADOR,
        V_ESTATUS,
        P_ID_TCA_SUB_ESTADO_TCC,
        V_EN_PROCESO
      );
    END LOOP;
    COMMIT;
    P_AGRUPADOR := V_AGRUPADOR;
  ELSE 
    
    IF P_ID_CONDICION.COUNT > 0 THEN
    
      FOR IND IN 1 .. P_ID_CONDICION.COUNT
      LOOP
        
        SELECT ID,ID_OPERACION,ID_SOLICITUD,ID_CONTRATO_DESEMBOLSO,ID_CONDICION,ID_TCA_ESTADO_TCC,ID_TCA_EVENTO_CONDICION,AGRUPADOR,BAN_ESTATUS,ID_TCA_SUB_ESTADO_TCC,EN_PROCESO
        INTO V_AGRUPADOR_CONDICION_ACTUAL
        FROM TRE_TRANSACCION_CONDICION
        WHERE AGRUPADOR = P_AGRUPADOR AND ID_CONDICION = P_ID_CONDICION(IND);
      
        UPDATE TRE_TRANSACCION_CONDICION
          SET ID_OPERACION = NVL(P_ID_OPERACION,V_AGRUPADOR_CONDICION_ACTUAL.ID_OPERACION),
            ID_SOLICITUD = NVL(P_ID_SOLICITUD,V_AGRUPADOR_CONDICION_ACTUAL.ID_SOLICITUD),
            ID_CONTRATO_DESEMBOLSO = NVL(P_ID_CONTRATO_DESEMBOLSO,V_AGRUPADOR_CONDICION_ACTUAL.ID_CONTRATO_DESEMBOLSO),
            ID_CONDICION = NVL(P_ID_CONDICION(IND),V_AGRUPADOR_CONDICION_ACTUAL.ID_CONDICION),
            ID_TCA_ESTADO_TCC = NVL(P_ID_TCA_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_ESTADO_TCC),
            --ID_TCA_EVENTO_CONDICION = NVL(P_ID_TCA_EVENTO_CONDICION,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_EVENTO_CONDICION),
            AGRUPADOR = NVL(P_AGRUPADOR,V_AGRUPADOR_CONDICION_ACTUAL.AGRUPADOR),
            BAN_ESTATUS = NVL(P_BAN_ESTATUS,V_AGRUPADOR_CONDICION_ACTUAL.BAN_ESTATUS),
            ID_TCA_SUB_ESTADO_TCC = NVL(P_ID_TCA_SUB_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_SUB_ESTADO_TCC),
            EN_PROCESO = NVL(P_EN_PROCESO,V_AGRUPADOR_CONDICION_ACTUAL.EN_PROCESO)
            WHERE AGRUPADOR = P_AGRUPADOR AND ID_CONDICION = P_ID_CONDICION(IND);
      END LOOP;
      COMMIT;
      ELSE
      
        OPEN RECORDSET FOR 
        SELECT ID,ID_OPERACION,ID_SOLICITUD,ID_CONTRATO_DESEMBOLSO,ID_CONDICION,ID_TCA_ESTADO_TCC,ID_TCA_EVENTO_CONDICION,AGRUPADOR,BAN_ESTATUS,ID_TCA_SUB_ESTADO_TCC,EN_PROCESO
        --INTO V_AGRUPADOR_CONDICION_ACTUAL
        FROM TRE_TRANSACCION_CONDICION
        WHERE AGRUPADOR = P_AGRUPADOR;
      
      LOOP
        FETCH RECORDSET INTO V_AGRUPADOR_CONDICION_ACTUAL;
        EXIT WHEN RECORDSET%NOTFOUND;
      
        UPDATE TRE_TRANSACCION_CONDICION
          SET ID_OPERACION = NVL(P_ID_OPERACION,V_AGRUPADOR_CONDICION_ACTUAL.ID_OPERACION),
            ID_SOLICITUD = NVL(P_ID_SOLICITUD,V_AGRUPADOR_CONDICION_ACTUAL.ID_SOLICITUD),
            ID_CONTRATO_DESEMBOLSO = NVL(P_ID_CONTRATO_DESEMBOLSO,V_AGRUPADOR_CONDICION_ACTUAL.ID_CONTRATO_DESEMBOLSO),
            --ID_CONDICION = NVL(P_ID_CONDICION(1),V_AGRUPADOR_CONDICION_ACTUAL.ID_CONDICION),
            ID_TCA_ESTADO_TCC = NVL(P_ID_TCA_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_ESTADO_TCC),
            --ID_TCA_EVENTO_CONDICION = NVL(P_ID_TCA_EVENTO_CONDICION,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_EVENTO_CONDICION),
            AGRUPADOR = NVL(P_AGRUPADOR,V_AGRUPADOR_CONDICION_ACTUAL.AGRUPADOR),
            BAN_ESTATUS = NVL(P_BAN_ESTATUS,V_AGRUPADOR_CONDICION_ACTUAL.BAN_ESTATUS),
            ID_TCA_SUB_ESTADO_TCC = NVL(P_ID_TCA_SUB_ESTADO_TCC,V_AGRUPADOR_CONDICION_ACTUAL.ID_TCA_SUB_ESTADO_TCC),
            EN_PROCESO = NVL(P_EN_PROCESO,V_AGRUPADOR_CONDICION_ACTUAL.EN_PROCESO)
            WHERE AGRUPADOR = P_AGRUPADOR;
      END LOOP; 
      COMMIT;
      CLOSE RECORDSET;
        
    END IF;  
    
  END IF;

    P_CODIGO := 0;
    P_MENSAJE := 'Procedimiento  ejecutado  correctamente';
  
  EXCEPTION 
  WHEN OTHERS
    THEN 
      P_CODIGO := 1;
      P_MENSAJE := SQLERRM;
  
END P_UPSERT_TRANSACCION_CONDICION;