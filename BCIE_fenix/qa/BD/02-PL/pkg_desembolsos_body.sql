create or replace PACKAGE BODY PKG_DESEMBOLSOS
IS
   PROCEDURE SP_TRANS_GPOECONOMICO_PAIS (
       P_ID_CLIENTE    IN     NUMBER,
      RECORDSET_GE            OUT SYS_REFCURSOR,   
      RECORDSET_PAIS          OUT SYS_REFCURSOR,
      P_CODIGO_RES     OUT NUMBER,
      P_MENSAJE        OUT VARCHAR2)
   IS
      V_ID_CLIENTE    NUMBER (12);
      V_GRUPO_ECONOMICO   NUMBER (12);
      V_PAIS   NUMBER (12);
   BEGIN

   
   SELECT GRUPO_ECONOMICO, PAIS 
     INTO V_GRUPO_ECONOMICO,V_PAIS
     FROM CLIENTES
    WHERE ID_CLIENTE = P_ID_CLIENTE;

   
   IF V_GRUPO_ECONOMICO IS NOT NULL and V_GRUPO_ECONOMICO != 0 THEN 
   
   OPEN RECORDSET_GE FOR
      SELECT   SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO
        FROM CONTRATO_DESEMBOLSO CD,
             TCA_ESTADO_OPERACION TEO,
             TRE_SOLICITUD_LINEA_CREDITO TRSL,
             LINEA_CREDITO LC,
             TCA_TIPO_MONEDA TTM,
             OPERACION OP,
             CONTRATO CON,
			       CLIENTES CLI
             WHERE     CD.ID_TCA_ESTADO = TEO.ID
             AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
             AND TRSL.ID_LINEA = LC.ID
             AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
             AND LC.ID_FLEXCUBE IS NOT NULL
             AND TEO.ID IN (14, 15, 16)
             AND LC.ID_CONTRATO = CON.ID
             AND CON.ID_OPERACION = OP.ID_OPERACION
             AND OP.ID_CLIENTE = CLI.ID_CLIENTE
             AND CLI.ID_CLIENTE in (select ID_CLIENTE from CLIENTES where GRUPO_ECONOMICO = V_GRUPO_ECONOMICO and PAIS = V_PAIS)
             GROUP BY TTM.COD_EXTERNO;
			 
			 OPEN RECORDSET_PAIS FOR
      SELECT   SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO
        FROM CONTRATO_DESEMBOLSO CD,
             TCA_ESTADO_OPERACION TEO,
             TRE_SOLICITUD_LINEA_CREDITO TRSL,
             LINEA_CREDITO LC,
             TCA_TIPO_MONEDA TTM,
             OPERACION OP,
             CONTRATO CON,
			       CLIENTES CLI
             WHERE     CD.ID_TCA_ESTADO = TEO.ID
             AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
             AND TRSL.ID_LINEA = LC.ID
             AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
             AND LC.ID_FLEXCUBE IS NOT NULL
             AND TEO.ID IN (14, 15, 16)
             AND LC.ID_CONTRATO = CON.ID
             AND CON.ID_OPERACION = OP.ID_OPERACION
             AND OP.ID_CLIENTE = CLI.ID_CLIENTE
             AND CLI.ID_CLIENTE in (select ID_CLIENTE from CLIENTES where PAIS = V_PAIS)
             GROUP BY TTM.COD_EXTERNO; 
			 
    ELSE 
             
    OPEN RECORDSET_PAIS FOR
      SELECT   SUM (MONTO_DESEMBOLSAR) AS MONTO_DESEMBOLSAR,TTM.COD_EXTERNO
        FROM CONTRATO_DESEMBOLSO CD,
             TCA_ESTADO_OPERACION TEO,
             TRE_SOLICITUD_LINEA_CREDITO TRSL,
             LINEA_CREDITO LC,
             TCA_TIPO_MONEDA TTM,
             OPERACION OP,
             CONTRATO CON,
			       CLIENTES CLI
             WHERE     CD.ID_TCA_ESTADO = TEO.ID
             AND TRSL.ID_CONTRATO_DESEMBOLSO = CD.ID
             AND TRSL.ID_LINEA = LC.ID
             AND CD.ID_TCA_TIPO_MONEDA = TTM.ID
             AND LC.ID_FLEXCUBE IS NOT NULL
             AND TEO.ID IN (14, 15, 16)
             AND LC.ID_CONTRATO = CON.ID
             AND CON.ID_OPERACION = OP.ID_OPERACION
             AND OP.ID_CLIENTE = CLI.ID_CLIENTE
             AND CLI.ID_CLIENTE in (select ID_CLIENTE from CLIENTES where PAIS = V_PAIS)
             GROUP BY TTM.COD_EXTERNO;        
             
		END IF;
    P_CODIGO_RES := 0;
    
    EXCEPTION
    WHEN OTHERS THEN
    
    P_CODIGO_RES := SQLCODE;
    
    P_MENSAJE := SQLERRM;
   END SP_TRANS_GPOECONOMICO_PAIS;
   
   PROCEDURE SP_CONSULTAR_SALDO_CARTERA(
      P_LINEA_CREDITO    IN VARCHAR2,
      P_LINEA_FINANCIERA IN T_VARCHAR2_TAB,
      P_DESTINO          IN T_VARCHAR2_TAB,
      P_MONEDA           IN T_VARCHAR2_TAB,
      P_PAIS             IN T_VARCHAR2_TAB,
      P_CODIGO_RES      OUT NUMBER,
      P_MENSAJE         OUT VARCHAR2,
      P_SALDO           OUT NUMBER)
  AS
  P_LINEA_FINANCIERA_STRING VARCHAR2(255) := NULL; 
  P_DESTINO_STRING          VARCHAR2(255) := NULL;
  P_MONEDA_STRING           VARCHAR2(255) := NULL;
  P_PAIS_STRING             VARCHAR2(255) := NULL;
  
  BEGIN
  
  IF P_LINEA_FINANCIERA IS NOT NULL THEN 
    P_LINEA_FINANCIERA_STRING := TAB_TO_STRING(P_LINEA_FINANCIERA,',');
  END IF;
  IF P_DESTINO IS NOT NULL THEN 
    P_DESTINO_STRING          := TAB_TO_STRING(P_DESTINO,',');
  END IF;
  IF P_MONEDA IS NOT NULL THEN 
    P_MONEDA_STRING           := TAB_TO_STRING(P_MONEDA,',');
  END IF;
  IF P_MONEDA IS NOT NULL THEN 
    P_PAIS_STRING             := TAB_TO_STRING(P_MONEDA,',');
  END IF;
  P_SALDO                   := NULL;
  
    P_SALDO := middle.ws_k_flexcube.obtieneSaldoCartera( 
      pvCommitment_User_Ref_No      => P_LINEA_CREDITO
      , pvListaLineaFinanciera      => P_LINEA_FINANCIERA_STRING
      , pvListaDestino              => P_DESTINO_STRING
      , pvListaMoneda               => P_MONEDA_STRING
      , pvListaPais                 => P_PAIS_STRING);
    
    IF P_SALDO IS NULL THEN
      P_SALDO := 0;
    END IF;
    
    DBMS_OUTPUT.PUT_LINE('SALDO: '|| P_SALDO);

    P_CODIGO_RES := 0;
    P_MENSAJE := '';
  EXCEPTION
  WHEN OTHERS THEN
    P_CODIGO_RES := SQLCODE;
    P_MENSAJE    := SQLERRM;
  END SP_CONSULTAR_SALDO_CARTERA;
  
  PROCEDURE VALIDA_LIMITE_PORCENTAJE (
   P_NUMERO_LINEA_CREDITO  IN  VARCHAR2,
   P_CODIGO_LINEA_FINANCIERA  IN  VARCHAR2,
   P_MONTO_APROBADO_USD  IN  NUMBER,
   P_SALDO_USD  IN  NUMBER,
   P_CODIGO_RES     OUT NUMBER,
   P_TIPO_RES       OUT NUMBER,
   P_MENSAJE        OUT VARCHAR2)
  AS
  BEGIN
		middle.ws_k_umipyme.valida_limite_porcentaje(
        Numero_Linea_Credito      => P_NUMERO_LINEA_CREDITO
		  , Codigo_Linea_Financiera   => P_CODIGO_LINEA_FINANCIERA
		  , Monto_Aprobado_USD        => P_MONTO_APROBADO_USD
		  , Saldo_USD                 => P_SALDO_USD
		  , CodigoResultado           => P_CODIGO_RES
		  , TipoResultado             => P_TIPO_RES
		  , MensajeError              => P_MENSAJE);
  EXCEPTION
  WHEN OTHERS THEN
    P_CODIGO_RES := SQLCODE;
    P_MENSAJE    := SQLERRM;
  END VALIDA_LIMITE_PORCENTAJE;
  
 PROCEDURE SP_CONSULTAR_TRANSFERENCIAS(
      P_ID_DESEMBOLSO    IN NUMBER,
      P_ID_TRANSFERENCIA    IN NUMBER,
      P_ID_CONSOLIDACION_PADRE IN NUMBER,
      RS_TRANSFERENCIAS OUT SYS_REFCURSOR,
      P_CODIGO_RES OUT NUMBER,
      P_MENSAJE OUT VARCHAR2)
  AS
  BEGIN
  IF P_ID_CONSOLIDACION_PADRE IS NOT NULL THEN
  OPEN RS_TRANSFERENCIAS FOR
     SELECT TB.ID ID_TRANFERENCIA_BAN,TB.ID_CONTRATO_DESEMBOLSO,TB.MONTO_TRANSFERENCIA, 
            TB.ID_TCA_TIPO_MONEDA, TM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,  
            TM.COD_EXTERNO COD_EXTERNO_MONEDA, TB.REFERENCIA_MSJ, TB.BHQ_TRANSFERENCIA, 
            TB.EN_CONSOLIDACION,TB.ID_CONSOLIDACION_PADRE,TB.ES_CONSOLIDACION_PADRE,TB.BHQ_TRANSFERENCIA, TB.ID_BANCO_TRANSFERENCIA, 
            TB.NOMBRE_BANCO_TRANSFERENCIA,TB.NUMERO_CUENTA, TB.ID ID_INSTRUCCION_PAGO,TB.ID_OPERACION, 
            TB.TIPO_MENSAJE, TB.TIPO_OPCION_BENEF, 
            TB.NUMERO_CTA_BENEF, TB.IDENTIFICADOR_BENEF, TB.BENEFICIARIO_BENEF, TB.DIRECCION_BENEF, 
            TB.TIPO_OPCION_BAN_BENEF, TB.NUMERO_CTA_BAN_BENEF, TB.IDENTIFICADOR_BAN_BENEF, TB.BENEFICIARIO_BAN_BENEF, 
            TB.DIRECCION_BAN_BENEF, TB.TIPO_OPCION_BAN_INTER, TB.NUMERO_CTA_BAN_INTER, TB.IDENTIFICADOR_BAN_INTER, 
            TB.BENEFICIARIO_BAN_INTER, TB.DIRECCION_BAN_INTER,TB.ESTADO_INSTRUCCION 
            FROM TRANSFERENCIA_BANCARIA TB 
            INNER JOIN CONTRATO_DESEMBOLSO C ON C.ID = TB.ID_CONTRATO_DESEMBOLSO 
            INNER JOIN TCA_TIPO_MONEDA TM ON TM.ID = TB.ID_TCA_TIPO_MONEDA 
            WHERE TB.ID_CONSOLIDACION_PADRE = P_ID_CONSOLIDACION_PADRE;
  ELSIF P_ID_DESEMBOLSO IS NOT NULL THEN
  OPEN RS_TRANSFERENCIAS FOR
  SELECT TB.ID ID_TRANFERENCIA_BAN,TB.ID_CONTRATO_DESEMBOLSO,TB.MONTO_TRANSFERENCIA, TB.ID_TCA_TIPO_MONEDA, 
  TM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,  TM.COD_EXTERNO COD_EXTERNO_MONEDA, TB.REFERENCIA_MSJ, 
  TB.BHQ_TRANSFERENCIA, TB.EN_CONSOLIDACION, TB.ID_BANCO_TRANSFERENCIA, TB.NOMBRE_BANCO_TRANSFERENCIA,  
  TB.NUMERO_CUENTA, TB.ID ID_INSTRUCCION_PAGO,TB.ID_OPERACION, TB.TIPO_MENSAJE, TB.TIPO_OPCION_BENEF, 
  TB.NUMERO_CTA_BENEF, TB.IDENTIFICADOR_BENEF, TB.BENEFICIARIO_BENEF, TB.DIRECCION_BENEF, TB.TIPO_OPCION_BAN_BENEF, 
  TB.NUMERO_CTA_BAN_BENEF, TB.IDENTIFICADOR_BAN_BENEF, TB.BENEFICIARIO_BAN_BENEF, TB.DIRECCION_BAN_BENEF, 
  TB.TIPO_OPCION_BAN_INTER, TB.NUMERO_CTA_BAN_INTER, TB.IDENTIFICADOR_BAN_INTER, TB.BENEFICIARIO_BAN_INTER, 
  TB.DIRECCION_BAN_INTER,TB.ESTADO_INSTRUCCION 
  FROM TRANSFERENCIA_BANCARIA TB 
  INNER JOIN CONTRATO_DESEMBOLSO C ON C.ID = TB.ID_CONTRATO_DESEMBOLSO 
  INNER JOIN TCA_TIPO_MONEDA TM ON TM.ID = TB.ID_TCA_TIPO_MONEDA WHERE C.ID = P_ID_DESEMBOLSO;
            
    ELSE 
    OPEN RS_TRANSFERENCIAS FOR
      SELECT TB.ID ID_TRANFERENCIA_BAN,TB.ID_CONTRATO_DESEMBOLSO,TB.MONTO_TRANSFERENCIA, 
            TB.ID_TCA_TIPO_MONEDA, TM.DESCRIPCION_CORTA DESCRIPCION_CORTA_MONEDA,  
            TM.COD_EXTERNO COD_EXTERNO_MONEDA, TB.REFERENCIA_MSJ, TB.BHQ_TRANSFERENCIA, 
            TB.EN_CONSOLIDACION,TB.ID_CONSOLIDACION_PADRE,TB.ES_CONSOLIDACION_PADRE,
            TB.ID_BANCO_TRANSFERENCIA, TB.NOMBRE_BANCO_TRANSFERENCIA,  
            TB.NUMERO_CUENTA, TB.ID ID_INSTRUCCION_PAGO,TB.ID_OPERACION, TB.TIPO_MENSAJE, TB.TIPO_OPCION_BENEF, 
            TB.NUMERO_CTA_BENEF, TB.IDENTIFICADOR_BENEF, TB.BENEFICIARIO_BENEF, TB.DIRECCION_BENEF, 
            TB.TIPO_OPCION_BAN_BENEF, TB.NUMERO_CTA_BAN_BENEF, TB.IDENTIFICADOR_BAN_BENEF, TB.BENEFICIARIO_BAN_BENEF, 
            TB.DIRECCION_BAN_BENEF, TB.TIPO_OPCION_BAN_INTER, TB.NUMERO_CTA_BAN_INTER, TB.IDENTIFICADOR_BAN_INTER, 
            TB.BENEFICIARIO_BAN_INTER, TB.DIRECCION_BAN_INTER,TB.ESTADO_INSTRUCCION 
            FROM TRANSFERENCIA_BANCARIA TB 
            INNER JOIN CONTRATO_DESEMBOLSO C ON C.ID = TB.ID_CONTRATO_DESEMBOLSO 
            INNER JOIN TCA_TIPO_MONEDA TM ON TM.ID = TB.ID_TCA_TIPO_MONEDA 
            WHERE TB.ID = P_ID_TRANSFERENCIA;
   END IF;
    P_CODIGO_RES := 0;
    EXCEPTION
  WHEN OTHERS THEN
    P_CODIGO_RES := SQLCODE;
    P_MENSAJE    := SQLERRM;
  END SP_CONSULTAR_TRANSFERENCIAS;
  
  PROCEDURE SP_UPSERT_TRANSFERENCIA(
   T_LISTA_TRANSFERENCIA_BANCARIA  IN  T_TRANSFERENCIA_BANCARIA,
   P_CODIGO_RES                 OUT NUMBER,
   P_TIPO_RES                   OUT NUMBER,
   P_MENSAJE                    OUT VARCHAR2)
  AS
    
  BEGIN
  
    IF T_LISTA_TRANSFERENCIA_BANCARIA.Exists(1) then
      FOR i IN T_LISTA_TRANSFERENCIA_BANCARIA.FIRST..T_LISTA_TRANSFERENCIA_BANCARIA.LAST LOOP
        IF T_LISTA_TRANSFERENCIA_BANCARIA(i).BHQ_TRANSFERENCIA IS NOT NULL THEN
          UPDATE TRANSFERENCIA_BANCARIA SET BHQ_TRANSFERENCIA = T_LISTA_TRANSFERENCIA_BANCARIA(i).BHQ_TRANSFERENCIA WHERE ID = T_LISTA_TRANSFERENCIA_BANCARIA(i).ID_TRANSFERENCIA;           
        END IF;
        IF T_LISTA_TRANSFERENCIA_BANCARIA(i).NUMERO_RESERVA IS NOT NULL THEN
           UPDATE TRANSFERENCIA_BANCARIA SET NUMERO_RESERVA = T_LISTA_TRANSFERENCIA_BANCARIA(i).NUMERO_RESERVA WHERE ID = T_LISTA_TRANSFERENCIA_BANCARIA(i).ID_TRANSFERENCIA;
        END IF;
      END LOOP;
    END IF;
        
    P_CODIGO_RES := 0;
    P_TIPO_RES := 0;
    P_MENSAJE  := 'Procedimiento  ejecutado  correctamente !';
  
  EXCEPTION WHEN OTHERS THEN
  
    P_CODIGO_RES := SQLCODE;
    P_TIPO_RES := 1;
    P_MENSAJE := SQLERRM;
  
  END SP_UPSERT_TRANSFERENCIA;
  
  PROCEDURE SP_LISTA_PEDIENTE_F1(
   P_NUMERO_LINEA_CREDITO       IN  VARCHAR2,
   P_CODIGO_LINEA_FINANCIERA    IN  VARCHAR2,
   RECORDSET                    OUT SYS_REFCURSOR,
   P_CODIGO_RES                 OUT NUMBER,
   P_TIPO_RES                   OUT NUMBER,
   P_MENSAJE                    OUT VARCHAR2,
   P_ACUMULADO_MESSAGE          OUT VARCHAR2)
  AS
   P_NUMERO_CONTRATO              VARCHAR2(255);
   P_FECHA_APERTURA               DATE;
   P_FECHA_VENCIMIENTO            DATE;
   P_ACUMULADO_DESEMBOLSOS        VARCHAR2(32767);
   RECORDSET_RESP                 SYS_REFCURSOR;
  BEGIN
  
  IF P_NUMERO_LINEA_CREDITO IS NULL AND P_CODIGO_LINEA_FINANCIERA IS NULL THEN 
      P_CODIGO_RES := 1;
      P_TIPO_RES := 1;
      P_MENSAJE  := 'Procedimiento  no ejecutado  correctamente debido a valor nulo: NUMERO_LINEA_CREDITO, P_CODIGO_LINEA_FINANCIERA!';
  ELSE
      IF P_NUMERO_LINEA_CREDITO IS NULL THEN
          P_CODIGO_RES := 1;
          P_TIPO_RES := 1;
          P_MENSAJE  := 'Procedimiento  no ejecutado  correctamente debido a valor nulo: NUMERO_LINEA_CREDITO!';
      ELSIF P_CODIGO_LINEA_FINANCIERA IS NULL THEN
          P_CODIGO_RES := 1;
          P_TIPO_RES := 1;
          P_MENSAJE  := 'Procedimiento  no ejecutado  correctamente debido a valor nulo: P_CODIGO_LINEA_FINANCIERA!';
      ELSE 
          middle.ws_k_umipyme.Lista_Pendiente_F1(
            Numero_Linea_Credito      => P_NUMERO_LINEA_CREDITO
          , Codigo_Linea_Financiera   => P_CODIGO_LINEA_FINANCIERA
          , p_Recordset               => RECORDSET_RESP);
          
          RECORDSET := RECORDSET_RESP;
          
          LOOP 
          FETCH RECORDSET_RESP
          INTO  P_NUMERO_CONTRATO ,P_FECHA_APERTURA, P_FECHA_VENCIMIENTO;
          EXIT WHEN RECORDSET_RESP%NOTFOUND;
          P_ACUMULADO_DESEMBOLSOS := P_ACUMULADO_DESEMBOLSOS || '||' || P_NUMERO_CONTRATO;
          
          END LOOP;
          CLOSE RECORDSET_RESP;
          P_ACUMULADO_MESSAGE := 'LineaCredito[' || P_NUMERO_LINEA_CREDITO ||'], LineaFinanciera[' || P_CODIGO_LINEA_FINANCIERA ||'], Desembolso[' || P_ACUMULADO_DESEMBOLSOS || '||]';
          
          P_CODIGO_RES := 0;
          P_TIPO_RES := 0;
          P_MENSAJE  := 'Procedimiento  ejecutado  correctamente !';
      END IF;
  END IF;

  EXCEPTION WHEN OTHERS THEN

      P_CODIGO_RES := SQLCODE;
      P_TIPO_RES := 1;
      P_MENSAJE := SQLERRM;

  END SP_LISTA_PEDIENTE_F1;
END PKG_DESEMBOLSOS;